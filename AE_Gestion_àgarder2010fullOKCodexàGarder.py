from __future__ import annotations

# === AE_HOOK_V7 (cascade + anti-bruit + OCR optionnel) ===
import os as _ae_os, sys as _ae_sys, json as _ae_json, builtins as _ae_bi, datetime as _ae_dt, re as _ae_re

_AE_LOG = "ae_designations_hook.log"
_AE_MIN_OK = 8

def _ae_log(msg: str):
    try:
        d = _ae_os.path.dirname(_ae_os.path.abspath(__file__))
        with open(_ae_os.path.join(d, _AE_LOG), "a", encoding="utf-8") as f:
            f.write(f"[{_ae_dt.datetime.now().isoformat()}] {msg}\n")
    except Exception:
        pass

# --- anti-bruit ---
_VENDOR = {"cdiscount","amazon","fnac","darty","boulanger","leroy merlin","castorama","bricomarché","bricomarche"}
_ADMIN  = {"siret","iban","bic","rcs","ape","naf","capital","mentions légales","conditions de règlement","escompte","promotionnelle"}
_ADDR   = {"rue","avenue","av.","bd","boulevard","quai","impasse","chemin","route","lieu-dit","bp"}
_DOC    = {"devis","facture","facturation","livraison","commande","client","date","page"}
_FOOT   = {"tva","ttc","total","sous total","net à payer","net a payer","acompte","solde","garantie","retourner un article"}
_AE_STOP = _VENDOR | _ADMIN | _ADDR | _DOC | _FOOT

_AE_STOP_RE = _ae_re.compile(r'(' + '|'.join(map(_ae_re.escape, _AE_STOP)) + r')', _ae_re.IGNORECASE)
_AE_NUM_FR = _ae_re.compile(r'(?:(?:\d{1,3}(?:[ \u202f]\d{3})+)|\d+)(?:,\d+)?|\d+,\d+')
_AE_PRICE_ONLY = _ae_re.compile(r'^\s*(?:\d+[\.,]\d+|\d+)(?:\s*(?:eur|€))\s*$', _ae_re.IGNORECASE)
_AE_CP = _ae_re.compile(r'\b\d{5}\b')
_AE_DATE = _ae_re.compile(r'\b\d{1,2}[/-]\d{1,2}[/-]\d{2,4}\b')

def _ae_clean(s: str) -> str:
    s = _ae_re.sub(r'\b(?:eur|€)\b', ' ', s, flags=_ae_re.IGNORECASE)
    s = _AE_NUM_FR.sub(' ', s)
    s = _ae_re.sub(r'\s+', ' ', s).strip(' -\t\r\n')
    return s

def _ae_is_noise(s: str) -> bool:
    if not s or len(s) < 3: return True
    low = s.lower()
    if _AE_PRICE_ONLY.match(low): return True
    if _AE_STOP_RE.search(low): return True
    if _AE_CP.search(low): return True
    if _AE_DATE.search(low): return True
    letters = sum(c.isalpha() for c in low)
    if letters < 4 or letters / max(1, len(low)) < 0.35: return True
    return False

def _ae_dedup_keep(items):
    seen=set(); out=[]
    for it in items:
        key = (it.get("Designation","") or "").lower()
        if not key or key in seen: continue
        seen.add(key); out.append(it)
    return out

# --- extracteurs ---
def _ae_text_quick(pdf_path: str) -> str:
    try:
        from pdfminer.high_level import extract_text
        return (extract_text(pdf_path) or "")
    except Exception as e:
        _ae_log(f"pdfminer.extract_text error: {e}")
        return ""

def _ae_lines_pdfminer(pdf_path: str):
    try:
        from pdfminer.high_level import extract_pages
        from pdfminer.layout import LTTextContainer, LAParams
    except Exception as e:
        _ae_log(f"pdfminer import error: {e}"); return []
    out=[]
    try:
        for layout in extract_pages(pdf_path, laparams=LAParams()):
            words=[]
            for el in layout:
                if isinstance(el, LTTextContainer):
                    for line in el:
                        txt = (getattr(line, "get_text", lambda: "")() or "").strip()
                        if not txt: continue
                        parts = txt.split()
                        if not parts: continue
                        x0,y0,x1,y1 = getattr(line, "bbox", (0,0,0,0))
                        width = (x1-x0) or 1.0; step = width / max(1,len(parts))
                        for i,w in enumerate(parts):
                            wx0 = x0 + i*step
                            words.append(((y0+y1)/2.0, wx0, w))
            words.sort(key=lambda t:(t[0], t[1]))
            rows=[]; cur=[]; last=None; tol=4.0
            for yc,x,w in words:
                if last is None or abs(yc-last)<=tol:
                    cur.append((x,w)); last = yc if last is None else (last+yc)/2.0
                else:
                    rows.append(cur); cur=[(x,w)]; last=yc
            if cur: rows.append(cur)
            for row in rows:
                row.sort(key=lambda t:t[0])
                raw = " ".join(w for _,w in row).strip()
                if raw: out.append(raw)
    except Exception as e:
        _ae_log(f"extract_pages error: {e}")
    return out

def _ae_detect_poppler():
    d = _ae_os.path.dirname(_ae_os.path.abspath(__file__))
    cand = [
        _ae_os.environ.get("POPPLER_PATH","").strip(),
        _ae_os.path.join(d, "data", "poppler"),
        "C:\\Program Files\\poppler\\Library\\bin",
        "C:\\Program Files\\poppler-23.11.0\\Library\\bin",
        "C:\\Program Files\\poppler-24.02.0\\Library\\bin",
    ]
    for c in cand:
        if c and _ae_os.path.exists(c): return c
    return None

def _ae_setup_tess():
    try:
        import pytesseract
        cmd = _ae_os.environ.get("TESSERACT_CMD","").strip()
        if cmd: pytesseract.pytesseract.tesseract_cmd = cmd
    except Exception:
        pass

def _ae_lines_ocr(pdf_path: str, dpi=300, lang="fra"):
    try:
        import pytesseract
        from pdf2image import convert_from_path
    except Exception as e:
        _ae_log(f"OCR deps missing: {e}"); return []
    _ae_setup_tess()
    pop = _ae_detect_poppler()
    try:
        pages = convert_from_path(pdf_path, dpi=dpi, poppler_path=pop) if pop else convert_from_path(pdf_path, dpi=dpi)
    except Exception as e:
        _ae_log(f"convert_from_path error: {e}"); return []
    out=[]
    for i,img in enumerate(pages,1):
        try:
            txt = pytesseract.image_to_string(img, lang=lang, config="--psm 6 --oem 1")
            for line in (txt or "").splitlines():
                s=line.strip()
                if s: out.append(s)
        except Exception as e:
            _ae_log(f"tesseract page {i} error: {e}")
    return out

def _ae_designations_auto(pdf_path: str, prefer_ocr=False):
    des_m = [_ae_clean(s) for s in _ae_lines_pdfminer(pdf_path)]
    des_m = [s for s in des_m if not _ae_is_noise(s)]
    txt = _ae_text_quick(pdf_path)
    image_only = len((txt or "").strip()) < 10
    des = des_m; source="pdfminer"
    if prefer_ocr or image_only or len(des_m) < 5:
        des_o = [_ae_clean(s) for s in _ae_lines_ocr(pdf_path)]
        des_o = [s for s in des_o if not _ae_is_noise(s)]
        if len(des_o) >= len(des_m):
            des = des_o; source="ocr"
    _ae_log(f"designations_auto source={source} count={len(des)} image_only={image_only} prefer_ocr={prefer_ocr}")
    return des

def _ae_des_to_items(designations):
    items=[]
    for s in designations or []:
        t=(s or "").strip()
        if not t or _ae_is_noise(t): continue
        items.append({"Reference":"","Type":"Pièces","Designation":t,"Prix_HT":0.0,"Taux_TVA":"","Unite":"U","Categorie":""})
    return _ae_dedup_keep(items)

def _ae_wrap_ignore_checked(orig):
    def _inner(self, *a, **k):
        try: return orig(self)
        except TypeError:
            try: return orig(self,*a,**k)
            except TypeError:
                if a and isinstance(a[0], bool): return orig(self,*a[1:],**k)
                raise
    return _inner

def _ae_bind(cls):
    if not hasattr(cls, "_catalogue_pdf_extract_items_from_pdf"):
        return
    _orig = getattr(cls, "_catalogue_pdf_extract_items_from_pdf")

    for m in ("_catalogue_pdf_import_select_files","_catalogue_pdf_import_select_folder"):
        if hasattr(cls, m):
            try: setattr(cls, m, _ae_wrap_ignore_checked(getattr(cls, m)))
            except Exception as e: _ae_log(f"wrap err {m}: {e}")

    def _extract_items(self, path, aggressive: bool=False):
        # A. natif
        try:
            native = _orig(self, path, aggressive) if _orig.__code__.co_argcount >= 3 else _orig(self, path)
        except TypeError:
            native = _orig(self, path, aggressive)
        except Exception as e:
            _ae_log(f"native extractor error: {e}"); native = []
        native_clean=[]
        for it in native or []:
            des=(it.get("Designation") or "")
            des_c=_ae_clean(des)
            if _ae_is_noise(des_c): continue
            it2=dict(it); it2["Designation"]=des_c
            native_clean.append(it2)

        if len(native_clean) >= _AE_MIN_OK:
            out=_ae_dedup_keep(native_clean)
            _ae_log(f"native_ok_clean count={len(out)} -> return native_clean")
        else:
            # B. fallback
            try:
                base=_ae_os.path.basename(path or "")
                prefer_ocr = aggressive or ("F00010" in base)
                des=_ae_designations_auto(path, prefer_ocr=prefer_ocr)
                fall=_ae_des_to_items(des)
            except Exception as e:
                _ae_log(f"fallback extract error: {e}"); fall=[]
            out=_ae_dedup_keep(native_clean + fall)
            _ae_log(f"native_clean={len(native_clean)} fallback={len(fall)} merged={len(out)}")

        # UI refresh + snapshot
        try:
            if hasattr(self,"ed_filter"): self.ed_filter.setText("")
            if hasattr(self,"apply_filter"): self.apply_filter()
        except Exception: pass
        try:
            d=_ae_os.path.dirname(_ae_os.path.abspath(__file__))
            with open(_ae_os.path.join(d,"ae_designations_items.json"),"w",encoding="utf-8") as f:
                _ae_json.dump({"count":len(out),"items":out[:200]},f,ensure_ascii=False,indent=2)
            _ae_log(f"items snapshot written: {len(out)}")
        except Exception as e:
            _ae_log(f"json write error: {e}")
        return out

    try:
        setattr(cls, "_catalogue_pdf_extract_items_from_pdf", _extract_items)
        if not hasattr(cls, "_catalogue_pdf_import_preview"):
            setattr(cls, "_catalogue_pdf_import_preview", _extract_items)
        _ae_log(f"patched: {cls.__name__}")
    except Exception as e:
        _ae_log(f"patch set err: {e}")

# Bind immédiat
for _m in list(_ae_sys.modules.values()):
    d = getattr(_m, "__dict__", None)
    if not isinstance(d, dict): continue
    for _n, _obj in list(d.items()):
        if isinstance(_obj, type) and hasattr(_obj, "_catalogue_pdf_extract_items_from_pdf"):
            _ae_bind(_obj)

# Bind futur
_orig_bc = _ae_bi.__build_class__
def _ae_bc(func, name, *a, **k):
    cls = _orig_bc(func, name, *a, **k)
    try:
        if isinstance(cls, type) and hasattr(cls, "_catalogue_pdf_extract_items_from_pdf"):
            _ae_bind(cls)
    except Exception as e:
        _ae_log(f"future bind err: {e}")
    return cls
_ae_bi.__build_class__ = _ae_bc
# === /AE_HOOK_V7 ===


import re
__BUILD_TAG__ = "CLIENTS_MASTER_FIX7_MAILCIV_SITU_LEDGER"
# --- Normalisation robuste de la civilité ---
def normalize_civilite(s):
    t = (s or "").strip().lower()
    if t in ("m", "m.", "mr", "monsieur"):
        return "M."
    if t in ("mme", "madame", "mrs", "mlle", "melle", "mademoiselle"):
        return "Mme"
    return "—"
print("[AE_Gestion] Build:", __BUILD_TAG__)
# -*- coding: utf-8 -*-
# ======================================================================
# E4C PATCH — Définition anticipée de EFacturationTab (avant tout __main__)
# ======================================================================
try:
    from PyQt5.QtWidgets import (
        QWidget, QVBoxLayout, QFormLayout, QGroupBox, QHBoxLayout,
        QLabel, QLineEdit, QComboBox, QCheckBox, QPushButton, QFileDialog,
        QScrollArea, QMessageBox, QTableWidget, QTableWidgetItem, QAbstractItemView,
        QDoubleSpinBox, QSpinBox, QDateEdit
    )
    from PyQt5.QtCore import Qt, QUrl, QDate
    from PyQt5.QtGui import QColor, QBrush
    from PyQt5.QtGui import QDesktopServices
except Exception:
    QWidget = object
from reportlab.lib.pagesizes import A4, landscape

# ==== SITU runtime guards (idempotent) ====
try:
    _LAST_SITU_IDX
except NameError:
        _LAST_SITU_IDX = {}


# === Global SITU index offset (hotfix) ===
# Always shift situation numbering by -1 to correct a systematic +1 upstream.
# This affects both PDF/filename numbering and the payments ledger.
SITU_INDEX_OFFSET = -1
def _situ_apply_offset(idx):
    try:
        i = int(float(idx))
    except Exception:
        try:
            return max(1, int(idx or 1))
        except Exception:
            return 1
    i = i + int(SITU_INDEX_OFFSET)
    return 1 if i < 1 else i
# === End offset helper ===
if '_situ_parent_key' not in globals():
    def _situ_parent_key(doc: dict) -> str:
        try:
            cid = str((doc or {}).get("client_id", "") or "").strip()
        except Exception:
            cid = ""
        try:
            ref = str((doc or {}).get("doc_reference", "") or "").strip()
        except Exception:
            ref = ""
        try:
            objet = str((doc or {}).get("objet", "") or "").strip()
        except Exception:
            objet = ""
        # Tente d'utiliser le normaliseur si présent, sinon l'objet brut
        try:
            base_obj = _strip_situ_suffix(objet)  # type: ignore[name-defined]
        except Exception:
            base_obj = objet
        anchor = ref if ref else base_obj
        return f"{cid}|{anchor}".strip().lower()
# ==== End guards ====
from reportlab.lib.units import mm

# --- Helper : Historique SITU (JSON sidecar + fallback CII) -------------------
def _situ_history_entries(doc: dict, factures_dir: str, limit: int | None = None):
    """
    Retourne la liste complète des SITU du même dossier (FYYYY-NNN-??_fx.pdf),
    triée par suffixe NN ascendant. Chaque item = (legal_num, date_str, amount_str).
    Lecture best-effort d’un sidecar JSON (même base+suffixe) pour date/montant.
    Si le JSON ne contient pas le montant, fallback Factur-X : lit le .cii.xml voisin
    et prend ram:DuePayableAmount / ram:GrandTotalAmount / ram:TaxInclusiveAmount.
    Exclut la facture courante.
    """
    import os, re, json

    def _norm(s: str) -> str:
        return (s or "").replace("–","-").replace("—","-").strip()

    def _parse_float(v):
        try:
            if v is None:
                return None
            if isinstance(v, (int, float)):
                return float(v)
            s = str(v).strip().replace("€","").replace("\u00A0"," ").replace("\u202F"," ")
            s = s.replace(" ", "")
            if "," in s and "." not in s:
                s = s.replace(",", ".")
            s = re.sub(r"[^0-9\.\-\+]", "", s)
            return float(s) if s else None
        except Exception:
            return None

    def _fmt_eur(x):
        try:
            return f"{float(x):,.2f} €".replace(",", " ").replace(".", ",")
        except Exception:
            return str(x)

    def _suffix_int(n):
        m = re.search(r"-(\d{2})$", n)
        return int(m.group(1)) if m else 0

    legal_cur = _norm((doc.get("_numero_legal") or doc.get("numero") or ""))
    base = re.sub(r"-\d{2}$", "", legal_cur).rstrip("-")
    if not base:
        return []

    try:
        files = sorted([p for p in os.listdir(factures_dir)
                        if re.match(rf"{re.escape(base)}-\d{{2}}_fx\.pdf$", p)])
    except Exception:
        files = []

    entries = []
    for fn in files:
        legal_num = fn[:-7]  # strip "_fx.pdf" → 'FYYYY-NNN-ii'
        if _norm(legal_num) == legal_cur:
            continue  # exclure la facture courante
        date_str, amount_str = "", ""

        # Sidecar JSON : tenter plusieurs variantes
        for json_name in (legal_num + "_fx.json", legal_num + ".json", legal_num + ".JSON"):
            json_side = os.path.join(factures_dir, json_name)
            if os.path.exists(json_side):
                try:
                    with open(json_side, "r", encoding="utf-8") as f:
                        J = json.load(f)
                    # date
                    for k in ("date","date_facture","date_emission","created_at","date_legal","invoice_date","date_iso","date_str"):
                        d = _norm(J.get(k) or "")
                        if d:
                            date_str = d; break
                    # montant
                    ttc_candidates = [
                        J.get("total_ttc"), J.get("montant_ttc"), J.get("ttc"),
                        J.get("ttc_total"), J.get("totalTTC"), J.get("TOTAL_TTC"),
                        J.get("grand_total_ttc"), J.get("grand_total"),
                    ]
                    for parent in ("totaux","resume","summary","totals","amounts","montants"):
                        obj = J.get(parent) or {}
                        if isinstance(obj, dict):
                            ttc_candidates += [
                                obj.get("ttc"), obj.get("total_ttc"), obj.get("montant_ttc"),
                                obj.get("grand_total_ttc"), obj.get("grand_total")
                            ]
                    ttc = None
                    for v in ttc_candidates:
                        ttc = _parse_float(v)
                        if ttc is not None:
                            break
                    if ttc is not None:
                        amount_str = _fmt_eur(ttc)
                except Exception:
                    pass
                break  # premier JSON lisible suffit

        # Fallback CII/Factur-X si montant absent
        if not amount_str:
            try:
                cii_list = [p for p in os.listdir(factures_dir)
                            if p.lower().endswith(".cii.xml") and legal_num in p]
                if cii_list:
                    cii_path = os.path.join(factures_dir, cii_list[0])
                    with open(cii_path, "rb") as f:
                        xml = f.read().decode("utf-8", "ignore")
                    m = re.search(r"<ram:DuePayableAmount[^>]*>([^<]+)</ram:DuePayableAmount>", xml)
                    if not m:
                        m = re.search(r"<ram:GrandTotalAmount[^>]*>([^<]+)</ram:GrandTotalAmount>", xml)
                    if not m:
                        m = re.search(r"<ram:TaxInclusiveAmount[^>]*>([^<]+)</ram:TaxInclusiveAmount>", xml)
                    if m:
                        val = _parse_float(m.group(1))
                        if val is not None:
                            amount_str = _fmt_eur(val)
                    if not date_str:
                        dm = re.search(r"<ram:IssueDateTime>.*?<udt:DateTimeString[^>]*>(\d{8})</udt:DateTimeString>", xml, re.S)
                        if dm:
                            s = dm.group(1); date_str = f"{s[6:8]}/{s[4:6]}/{s[0:4]}"
            except Exception:
                pass

        entries.append((legal_num, date_str, amount_str))

    entries.sort(key=lambda t: _suffix_int(t[0]))
    if limit:
        entries = entries[:limit]
    return entries
# ------------------------------------------------------------------------------

# === Helper — affichage étiquette "Situation" (n°I sur J) ===
def _situ_display_label(doc: dict, info: dict, legal: str, factures_dir: str, ui_offset: int = -1) -> str:
    """
    Étiquette *simple et fiable* 'n°I sur J':
      - I = suffixe légal '-NN' (ex. F2025-015-02 → I=2). Si absent, fallback I = info['index'] (borné à [1..]).
      - Dernière = info['is_solde'] == True OU (reste <= 1e-6 si fourni). (AUCUN scan disque, AUCUN idx>=total).
      - J = I si dernière; sinon J = total_count (parsing tolérant). Si inconnu → J = I.
    """
    import re as _re
    # --- I (numérateur)
    s = str(legal or (doc.get('_numero_legal') if isinstance(doc, dict) else None) or (doc.get('numero') if isinstance(doc, dict) else None) or '').strip()
    m = _re.search(r'-(\d{2})$', s)
    if m:
        I = int(m.group(1))
    else:
        try:
            I = int(float((info or {}).get('index') or 1))
        except Exception:
            I = 1
    if I < 1:
        I = 1

    # --- Dernière
    is_last = bool((info or {}).get('is_solde'))
    if not is_last:
        reste = (info or {}).get('reste', None)
        try:
            is_last = (reste is not None) and (float(reste) <= 1e-6)
        except Exception:
            pass

    # --- J (dénominateur)
    def _parse_int(x, default=0):
        try:
            if x is None:
                return default
            if isinstance(x, int):
                return int(x)
            if isinstance(x, float):
                return int(x)
            ms = _re.search(r'(\d+)', str(x))
            return int(ms.group(1)) if ms else default
        except Exception:
            return default

    J_planned = _parse_int((info or {}).get('total_count'), 0)
    if J_planned <= 0 and isinstance(doc, dict):
        for k in ('situation_total_count','situ_total','situations_total','total_situations','planned_situations','situ_total_prevus','situ_total_planned'):
            J_planned = _parse_int(doc.get(k), 0)
            if J_planned > 0:
                break

    J = I if is_last else (J_planned if J_planned > 0 else I)
    return f"n°{I} sur {J}"

  # safe placeholder
if 'EFacturationTab' not in globals():
    class EFacturationTab(QWidget):
        def __init__(self, settings: dict, parent=None):
            super().__init__(parent); self.settings = settings
            root = QVBoxLayout(self); form = QFormLayout()
            # --- header ---
            self.cmb_mode = QComboBox(); self.cmb_mode.addItems(["off","mock","sandbox","prod"])
            self.cmb_mode.setCurrentText(str(settings.get("einv_mode","off")) or "off")
            self.cmb_target = QComboBox(); self.cmb_target.addItems(["ppf","pdp"])
            self.cmb_target.setCurrentText(str(settings.get("einv_target","ppf")) or "ppf")
            self.chk_auto = QCheckBox("Envoi auto après export CII")
            try: self.chk_auto.setChecked(bool(settings.get("einv_auto_send", False)))
            except Exception: self.chk_auto.setChecked(False)
            self.poll = QLineEdit(str(int(settings.get("einv_poll_period_s", 900) or 900)))
            self.lbl_mode = QLabel("Mode : " + self.cmb_mode.currentText()); self.lbl_mode.setAlignment(Qt.AlignCenter)
            self.lbl_mode.setStyleSheet("QLabel{background:#dde6f2;border-radius:8px;padding:12px;font-weight:600;}")
            self.cmb_mode.currentTextChanged.connect(lambda _=None: self.lbl_mode.setText("Mode : " + self.cmb_mode.currentText()))
            gb_head = QGroupBox(""); lf = QFormLayout(gb_head)
            lf.addRow("Mode", self.cmb_mode); lf.addRow("Cible", self.cmb_target)
            lf.addRow("", self.chk_auto); lf.addRow("Période polling (s)", self.poll)
            # --- PPF ---
            gb_ppf = QGroupBox("PPF"); fp = QFormLayout(gb_ppf)
            self.ppf_siret = QLineEdit(settings.get("ppf_siret_emetteur",""))
            self.ppf_api_base = QLineEdit(settings.get("ppf_api_base","https://api.ppf.sandbox.example"))
            self.ppf_auth_type = QComboBox(); self.ppf_auth_type.addItems(["oauth","mtls"])
            self.ppf_auth_type.setCurrentText(settings.get("ppf_auth_type","oauth"))
            self.ppf_client_id = QLineEdit(settings.get("ppf_client_id",""))
            self.ppf_client_secret = QLineEdit(settings.get("ppf_client_secret",""))
            self.ppf_token_url = QLineEdit(settings.get("ppf_token_url","https://login.example.com/oauth/token"))
            self.ppf_cert = QLineEdit(settings.get("ppf_cert_path","")); self.ppf_key = QLineEdit(settings.get("ppf_key_path",""))
            btn_cert = QPushButton("Cert..."); btn_key = QPushButton("Clé...")
            btn_cert.clicked.connect(lambda: self._pick_file(self.ppf_cert, "Choisir certificat (mTLS)", "Certificats (*.crt *.pem *.cer *.p12 *.pfx);;Tous (*.*)"))
            btn_key.clicked.connect(lambda: self._pick_file(self.ppf_key, "Choisir clé (mTLS)", "Clés (*.key *.pem *.p8);;Tous (*.*)"))
            row_cert = QWidget(); lc = QHBoxLayout(row_cert); lc.setContentsMargins(0,0,0,0); lc.addWidget(self.ppf_cert,1); lc.addWidget(btn_cert,0)
            row_key = QWidget(); lk = QHBoxLayout(row_key); lk.setContentsMargins(0,0,0,0); lk.addWidget(self.ppf_key,1); lk.addWidget(btn_key,0)
            fp.addRow("SIRET émetteur", self.ppf_siret)
            fp.addRow("API base", self.ppf_api_base); fp.addRow("Auth type", self.ppf_auth_type)
            fp.addRow("Client ID", self.ppf_client_id); fp.addRow("Client Secret", self.ppf_client_secret)
            fp.addRow("Token URL", self.ppf_token_url); fp.addRow("Cert (mTLS)", row_cert); fp.addRow("Clé (mTLS)", row_key)
            # --- PDP ---
            gb_pdp = QGroupBox("PDP"); fd = QFormLayout(gb_pdp)
            self.pdp_api_base = QLineEdit(settings.get("pdp_api_base","https://api.pdp.exemple.tld"))
            self.pdp_api_key  = QLineEdit(settings.get("pdp_api_key",""))
            fd.addRow("API base", self.pdp_api_base); fd.addRow("API key", self.pdp_api_key)
            # scroll layout
            content = QWidget(); cv = QVBoxLayout(content)
            cv.addWidget(self.lbl_mode); cv.addWidget(gb_head); cv.addWidget(gb_ppf); cv.addWidget(gb_pdp); cv.addStretch(1)
            scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(content)
            root.addWidget(scroll)
            btn = QPushButton("Enregistrer E-facturation"); btn.clicked.connect(self.save)
            btn2 = QPushButton("Tester (mock)"); btn2.clicked.connect(self.selftest)
            root.addWidget(btn, 0, Qt.AlignRight)
            root.addWidget(btn2, 0, Qt.AlignRight)
        def _pick_file(self, target: QLineEdit, title: str, filter_str: str):
            try:
                f, _ = QFileDialog.getOpenFileName(self, title, target.text() or "", filter_str)
                if f: target.setText(f)
            except Exception: pass
        def _collect(self) -> dict:
            s = dict(self.settings)
            def _txt(w): 
                try: return w.text().strip()
                except Exception: return ""
            s.update({
                "einv_mode": self.cmb_mode.currentText().strip() or "off",
                "einv_target": self.cmb_target.currentText().strip() or "ppf",
                "einv_auto_send": bool(self.chk_auto.isChecked()),
                "einv_poll_period_s": int(_safe_float(self.poll.text() if hasattr(self.poll,'text') else '900', 900)),
                "ppf_siret_emetteur": _txt(self.ppf_siret),
                "ppf_api_base": _txt(self.ppf_api_base),
                "ppf_auth_type": self.ppf_auth_type.currentText().strip() or "oauth",
                "ppf_client_id": _txt(self.ppf_client_id),
                "ppf_client_secret": _txt(self.ppf_client_secret),
                "ppf_token_url": _txt(self.ppf_token_url),
                "ppf_cert_path": _txt(self.ppf_cert),
                "ppf_key_path": _txt(self.ppf_key),
                "pdp_api_base": _txt(self.pdp_api_base),
                "pdp_api_key": _txt(self.pdp_api_key),
            })
            return s
        def save(self):
            try:
                s = self._collect()
                ok = save_settings(s) if "save_settings" in globals() else False
                if ok:
                    self.settings.update(s)
                    try: QMessageBox.information(self, "E-facturation", "Paramètres enregistrés.")
                    except Exception: pass
                else:
                    try: QMessageBox.warning(self, "E-facturation", "Échec de l'enregistrement.")
                    except Exception: pass
            except Exception as e:
                try: QMessageBox.critical(self, "E-facturation", f"Erreur: {e}")
                except Exception: pass
        def selftest(self):
            try:
                s = self._collect()
                s.update({"einv_mode": "mock"})
                # Create a self-test queue in data/ops/_SELFTEST
                try:
                    _root = DATA_DIR
                except Exception:
                    import os as _os
                    _root = _os.path.join(_os.getcwd(), "data")
                import os as _os, json as _json, time as _time
                qdir = _os.path.join(_root, "ops", "_SELFTEST")
                try: _os.makedirs(qdir, exist_ok=True)
                except Exception: pass
                qpath = _os.path.join(qdir, "queue.json")
                payload = {
                    "numero": "_SELFTEST",
                    "mode": "mock",
                    "target": s.get("einv_target","ppf"),
                    "auto": True,
                    "ts": int(_time.time()),
                    "status": "queued",
                }
                with open(qpath, "w", encoding="utf-8") as _f:
                    _json.dump(payload, _f, ensure_ascii=False, indent=2)
                try: _cii_log("ppf.selftest.queue=queued numero=_SELFTEST dir=" + qdir)
                except Exception: pass
                payload["status"] = "submitted"; payload["submitted_ts"] = int(_time.time())
                with open(qpath, "w", encoding="utf-8") as _f:
                    _json.dump(payload, _f, ensure_ascii=False, indent=2)
                try: _cii_log("ppf.selftest.submit=OK numero=_SELFTEST")
                except Exception: pass
                payload["status"] = "delivered"; payload["delivered_ts"] = int(_time.time())
                with open(qpath, "w", encoding="utf-8") as _f:
                    _json.dump(payload, _f, ensure_ascii=False, indent=2)
                try: _cii_log("ppf.selftest.status=delivered numero=_SELFTEST")
                except Exception: pass
                try: QMessageBox.information(self, "E-facturation (mock)", "Self-test écrit dans ops/_SELFTEST/queue.json. Voir cii_export.log.")
                except Exception: pass
            except Exception as _e2:
                try: QMessageBox.critical(self, "E-facturation (mock)", f"Erreur: {_e2}")
                except Exception: pass
# ============================ FIN PATCH E4C ============================
# ======================================================================
# E5 PATCH — BOOT LOG & EXCEPTION HOOK (Early, non-intrusive)
# - Crée data/boot_debug.log dès l'import
# - Log infos système + modules clés (PyQt5, reportlab, pikepdf, xmlschema)
# - Capture toute exception non interceptée (y compris à l'import) → boot_debug.log + cii_export.log
# - Active faulthandler vers data/crash_native.log
# - Ne modifie AUCUNE signature ni l'UX; n'ajoute PAS de nouveau __main__.
# ======================================================================
try:
    import sys, os, platform, traceback, datetime, faulthandler
    def _boot_now_iso():
        try:
            return _ae_utcnow().replace(microsecond=0).isoformat()
        except Exception:
            return "1970-01-01T00:00:00"
    def _boot_paths():
        try:
            base = os.getcwd()
            data = None
            try:
                data = globals().get("DATA_DIR", None)
                if not data:
                    data = os.path.join(base, "data")
            except Exception:
                data = os.path.join(base, "data")
            return base, data
        except Exception:
            return ".", "./data"
    def _boot_write(path: str, line: str) -> None:
        try:
            os.makedirs(os.path.dirname(path), exist_ok=True)
            with open(path, "a", encoding="utf-8") as _f:
                _f.write(line + "\n")
        except Exception:
            pass
    def _boot_log(msg: str) -> None:
        base, data = _boot_paths()
        line = f"{_boot_now_iso()} {msg}"
        _boot_write(os.path.join(data, "boot_debug.log"), line)
        # miroir best-effort vers cii_export.log
        try:
            if "_cii_log" in globals():
                _cii_log(msg)
            else:
                _boot_write(os.path.join(data, "cii_export.log"), line)
        except Exception:
            pass
    # faulthandler (crash natif)
    try:
        base, data = _boot_paths()
        _crash_path = os.path.join(data, "crash_native.log")
        _fh = open(_crash_path, "a", encoding="utf-8")
        faulthandler.enable(_fh)
    except Exception:
        pass
    # excepthook global — capture toute exception non traitée (import + runtime)
    def _boot_excepthook(exc_type, exc, tb):
        try:
            txt = "".join(traceback.format_exception(exc_type, exc, tb))
            _boot_log("boot.error=" + txt.replace("\n", "\\n"))
        except Exception:
            pass
        try:
            old = getattr(sys, "__excepthook__", None)
            if old and old is not _boot_excepthook:
                old(exc_type, exc, tb)
        except Exception:
            pass
    sys.excepthook = _boot_excepthook
    # infos système
    try:
        _boot_log(f"boot.header=OK file={__file__} cwd={os.getcwd()} py={sys.version.split()[0]} plat={platform.platform()}")
        _boot_log("boot.sys.path=" + repr(sys.path[:5]))
    except Exception:
        pass
    # modules clés (sonde non bloquante)
    for _mod in ("PyQt5", "reportlab", "pikepdf", "xmlschema"):
        try:
            __import__(_mod)
            _boot_log(f"boot.module[{_mod}]=OK")
        except Exception as _e:
            _boot_log(f"boot.module[{_mod}]=MISS ({type(_e).__name__}: {_e})")
except Exception as _fatal_boot:
    # même en cas de panne au tout début, tenter d'écrire
    try:
        base = os.getcwd(); data = os.path.join(base, "data"); os.makedirs(data, exist_ok=True)
        with open(os.path.join(data, "boot_debug.log"), "a", encoding="utf-8") as _f:
            import traceback as _tb
            _f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} boot.fatal={_fatal_boot}\n")
            _f.write(_tb.format_exc()+"\n")
    except Exception:
        pass
# ============================ FIN PATCH E5 ============================
# === timing helpers (hard-defined, no dependency on imports) ===
def _safe_now() -> float:
    try:
        import time as _t
        return _t.time()
    except Exception:
        return 0.0
def _ms_since(t0: float) -> int:
    try:
        import time as _t
        return int((_t.time() - (t0 or 0.0)) * 1000)
    except Exception:
        return 0
# ==================================================================
# -*- coding: utf-8 -*-
"""
AE GESTION — V3.3 (mono-fichier, simple)
- Onglets: Clients, Catalogue, Devis, Factures, Synthèse & URSSAF, Paramètres
- Devis -> Factures (anti-double)
- PDF Devis/Factures inspirés des modèles Excel (entêtes cadrés, tableau complet, totaux accentués, filigrane PAYÉ, RIB en pied)
- URSSAF PDF refait: colonnes claires, largeur fixe, saut de page propre, aucune chevauchement
- Relance email avec PJ (SMTP TLS/SSL + bouton "Tester SMTP")
- Données CSV auto-créées (data/)
- Simplicité: pas de threads, pas d'ORM
"""
import os, sys, csv, json, shutil, traceback, math, tempfile
from datetime import datetime, date, timedelta, timezone


def _ae_utcnow():
    """Return a naive UTC datetime using a timezone-aware clock.
    This keeps legacy expectations while avoiding datetime.utcnow() deprecation.
    """
    return datetime.now(timezone.utc).replace(tzinfo=None)
from typing import List, Dict, Tuple
# === Helper: shrink Clients columns post-init ===
def _ae_clients_shrink_columns(self):
    try:
        from PyQt5.QtCore import Qt
        tv = getattr(self, "table", None)
        m = tv.model() if tv and hasattr(tv, "model") else None
        if not (tv and m):
            return
        for c in range(m.columnCount()):
            header = m.headerData(c, Qt.Horizontal, 0)
            hs = (str(header) if header is not None else "").lower()
            if "prénom" in hs or "prenom" in hs:
                tv.setColumnWidth(c, max(60, int(tv.columnWidth(c) * 0.55)))  # -45%
            if "adresse" in hs:
                tv.setColumnWidth(c, max(140, int(tv.columnWidth(c) * 0.60)))  # -40%
    except Exception:
        pass
# === Embedded assets (not user-modifiable) ===
# --- Embedded: Clients side illustration (PNG, base64) ---
_CLIENTS_HELP_PNG_B64 = """"""
_AE_HERO_PNG_B64   = """"""
_AE_BANNER_PNG_B64 = """"""
def _pixmap_from_b64(_b64: str):
    from PyQt5.QtGui import QPixmap
    import base64
    pm = QPixmap()
    try:
        pm.loadFromData(base64.b64decode(_b64))
    except Exception:
        return QPixmap()
    return pm
from PyQt5 import QtWidgets, QtCore, QtGui
from PyQt5.QtWidgets import (
    QApplication, QWidget, QMainWindow, QTabWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QToolButton, QLineEdit, QComboBox, QTableWidget, QTableWidgetItem,
    QFileDialog, QMessageBox, QDateEdit, QFormLayout, QDialog, QDialogButtonBox,
    QHeaderView, QInputDialog, QCheckBox, QGroupBox, QTextEdit, QScrollArea, QMenu
,
    QDoubleSpinBox
)
from PyQt5.QtWidgets import QScrollArea
from PyQt5.QtWidgets import QMenu
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QCursor
# Email
import smtplib
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email import encoders
from email.utils import formataddr  # ajouté pour From/Reply-To propres
# ReportLab
# ReportLab
from reportlab.lib.pagesizes import A4, landscape
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.utils import ImageReader
REPORTLAB_OK = True
APP_TITLE = "AE GESTION — V3.3"
# --- Ouverture de fichiers (crash-safe) ---
def _open_file_fallback(_path:str):
    try:
        import sys, os, subprocess
        if not _path:
            return
        if sys.platform.startswith("win"):
            # Use cmd start with shell=True and a command string; avoid recursion into _open_file_async here.
            cmd = f'cmd /c start "" "{_path}"'
            subprocess.Popen(cmd, shell=True)
        elif sys.platform == "darwin":
            subprocess.Popen(["open", _path])
        else:
            subprocess.Popen(["xdg-open", _path])
    except Exception:
        pass
def _open_file_async(_path:str):
    try:
        from PyQt5.QtCore import QTimer, QCoreApplication
        app = QCoreApplication.instance()
        if app is None or QCoreApplication.closingDown():
            _open_file_fallback(_path); return
        QTimer.singleShot(0, lambda: _open_file_fallback(_path))
    except Exception:
        _open_file_fallback(_path)
# --- Tiny non-blocking UI toast (bottom-right) ---
def _ui_toast(message:str, timeout_ms:int=3500):
    try:
        from PyQt5.QtWidgets import QApplication, QLabel
        from PyQt5.QtCore import Qt, QTimer, QPoint
        aw = QApplication.activeWindow()
        if not aw:
            return
        lbl = QLabel(message, aw)
        lbl.setWindowFlags(Qt.ToolTip | Qt.FramelessWindowHint)
        lbl.setStyleSheet("QLabel{background:rgba(30,30,30,0.92);color:white;border-radius:8px;padding:8px 12px;font-weight:500;}")
        lbl.adjustSize()
        br = aw.rect().bottomRight() - QPoint(lbl.width()+20, lbl.height()+20)
        lbl.move(aw.mapToGlobal(br))
        lbl.show()
        QTimer.singleShot(timeout_ms, lbl.close)
    except Exception:
        pass
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data")
BRAND_DIR= os.path.join(DATA_DIR, "brand")
DOCS_DIRS= {"devis": os.path.join(DATA_DIR,"devis"),
            "factures": os.path.join(DATA_DIR,"factures"),
            "ursaff": os.path.join(DATA_DIR,"ursaff")}
SEQUENCE_LEDGER_FILE = os.path.join(DATA_DIR, "sequence_ledger.json")
# --- Alias & standardization for URSSAF export directory ---
try:
    _urssaf_dir = os.path.join(DATA_DIR, "urssaf")
    DOCS_DIRS["urssaf"] = _urssaf_dir
    DOCS_DIRS["ursaff"] = DOCS_DIRS["urssaf"]  # alias for backward-compat
except Exception:
    pass
LOG_FILE = os.path.join(BASE_DIR, "runtime_log.txt")
SETTINGS_FILE = os.path.join(BASE_DIR, "settings.json")
ACT_LOG = os.path.join(DATA_DIR, "actions_log.csv")
SITUATION_PAYMENT_STATUS = "Paiement situation"
STATUTS = [
    "Brouillon",
    "Envoyé",
    "Accepté",
    "Relance 1",
    "Relance 2",
    "Acompte",
    SITUATION_PAYMENT_STATUS,
    "Payée",
    "Annulée",
]
UNLOCKED_FACTURE_STATUSES = {"Brouillon", SITUATION_PAYMENT_STATUS}
LOCKED_FACTURE_STATUSES = {s for s in STATUTS if s and s not in UNLOCKED_FACTURE_STATUSES}
# CSV
CSV_CLIENTS = "data_clients.csv"
# === Clients master (civilité + prénom unifiés) ===
CLIENTS_MASTER_JSON = os.path.join(DATA_DIR, "clients_master.json")
def _norm_key_client(s: str) -> str:
    s = (s or "").strip()
    return s.lower() if ("@" in s) else s
def _load_clients_master() -> dict:
    try:
        if os.path.exists(CLIENTS_MASTER_JSON):
            with open(CLIENTS_MASTER_JSON, "r", encoding="utf-8") as f:
                d = json.load(f)
                # normalize keys to ensure casing consistency
                if isinstance(d, dict):
                    return { _norm_key_client(k): (v or {}) for k,v in d.items() }
                return {}
        return {}
    except Exception:
        log_error("load_clients_master\n"+__import__('traceback').format_exc())
        return {}
def _save_clients_master(d: dict):
    try:
        os.makedirs(os.path.dirname(CLIENTS_MASTER_JSON), exist_ok=True)
        with open(CLIENTS_MASTER_JSON, "w", encoding="utf-8") as f:
            json.dump(d or {}, f, ensure_ascii=False, indent=2)
    except Exception:
        log_error("save_clients_master\n"+__import__('traceback').format_exc())
def upsert_clients_master(email: str, prenom: str, civilite: str):
    k = _norm_key_client(email or "")
    if not k:
        return
    m = _load_clients_master()
    cur = m.get(k, {})
    if prenom is not None:   cur["prenom"]   = (prenom or "").strip()
    if civilite is not None: cur["civilite"] = (civilite or "").strip()
    m[k] = cur
    _save_clients_master(m)
# --- Backward-compat wrappers (sidecar names redirected to master) ---
def _prenom_json_path():
    try:
        return os.path.join(DATA_DIR, "clients_prenom.json")
    except Exception:
        return os.path.join(DATA_DIR, "clients_prenom.json")
def _civilite_json_path():
    try:
        return os.path.join(DATA_DIR, "clients_civilite.json")
    except Exception:
        return os.path.join(DATA_DIR, "clients_civilite.json")
def _load_prenom_map():
    try:
        master = _load_clients_master()
        return { k: (v.get("prenom","") if isinstance(v, dict) else "") for k,v in master.items() }
    except Exception:
        log_error("load_prenom_map\n"+__import__('traceback').format_exc())
        return {}
def _save_prenom_map(mapping:dict):
    try:
        master = _load_clients_master()
        for k, pn in (mapping or {}).items():
            kk = _norm_key_client(k)
            cur = master.get(kk, {})
            cur["prenom"] = pn or ""
            master[kk] = cur
        _save_clients_master(master)
    except Exception:
        log_error("save_prenom_map\n"+__import__('traceback').format_exc())
def _load_civilite_map():
    try:
        master = _load_clients_master()
        return { k: (v.get("civilite","") if isinstance(v, dict) else "") for k,v in master.items() }
    except Exception:
        log_error("load_civilite_map\n"+__import__('traceback').format_exc())
        return {}
def _save_civilite_map(mapping:dict):
    try:
        master = _load_clients_master()
        for k, cv in (mapping or {}).items():
            kk = _norm_key_client(k)
            cur = master.get(kk, {})
            cur["civilite"] = cv or ""
            master[kk] = cur
        _save_clients_master(master)
    except Exception:
        log_error("save_civilite_map\n"+__import__('traceback').format_exc())
CSV_ITEMS   = "data_items.csv"
# --- Unités catalogue (ordre validé) ---
UNIT_CHOICES = ["U","H","F","M2","ML","M3","L","J","KG","KM"]
def _unit_default_index_for_type(typ:str)->int:
    try:
        if (typ or "").strip() == "Main d’œuvre":
            return UNIT_CHOICES.index("H")
    except Exception:
        pass
    return UNIT_CHOICES.index("U")
CSV_DEVIS   = "data_devis.csv"
CSV_FACTS   = "data_factures.csv"
CSV_DEV_LIN = "data_devis_lignes.csv"
CSV_FAC_LIN = "data_factures_lignes.csv"
CSV_PAYMENTS = "data_paiements.csv"
PAYMENT_FIELDS = [
    "facture_numero",
    "doc_reference",
    "parent_key",
    "situation_index",
    "date_paiement",
    "montant",
    "mode",
    "notes",
    "created_at",
]
# Monotonic session cache for next_doc_number (no CSV schema change)
_LAST_NEXT_SEQ: Dict[str,int] = {}
COL = {
    "objet":"objet",
    "numero":"numero","date":"date","date_statut":"date_statut",
    "client_id":"client_id","client_nom":"client_nom","client_email":"client_email",
    "client_tel":"client_tel","client_adresse":"client_adresse","client_cp":"client_cp",
    "client_ville":"client_ville","maitre_oeuvre_nom":"maitre_oeuvre_nom","maitre_oeuvre_email":"maitre_oeuvre_email","maitre_oeuvre_tel":"maitre_oeuvre_tel","statut":"statut","acompte":"acompte",
    "total_ht":"total_ht","total_tva":"total_tva","total_ttc":"total_ttc",
    "doc_reference":"doc_reference",
    "situation_prev_ttc":"situation_prev_ttc",
    "situation_current_ttc":"situation_current_ttc",
    "situation_cumul_ttc":"situation_cumul_ttc",
    "situation_pct":"situation_pct",
    "situation_base_ttc":"situation_base_ttc",
    "situation_index":"situation_index",
    "situation_total_count":"situation_total_count",
    "converted_to_facture":"converted_to_facture"
}
FACTURE_BASE_FIELDS = [
    "numero","date","date_statut","client_id","client_nom","client_email",
    "client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","doc_reference",
    "statut","acompte","total_ht","total_tva","total_ttc"
]
FACTURE_SITUATION_FIELDS = [
    "situation_prev_ttc","situation_current_ttc","situation_cumul_ttc",
    "situation_pct","situation_base_ttc","situation_index","situation_total_count"
]
FACTURE_ALL_FIELDS = FACTURE_BASE_FIELDS + FACTURE_SITUATION_FIELDS
SITUATION_INT_FIELDS = {"situation_index", "situation_total_count"}
def _format_situation_values(values: dict) -> dict:
    out = {}
    for key in FACTURE_SITUATION_FIELDS:
        raw = (values or {}).get(key, "")
        if raw in (None, ""):
            out[key] = ""
        else:
            try:
                if key in SITUATION_INT_FIELDS:
                    out[key] = str(int(_safe_float(raw, 0.0)))
                else:
                    out[key] = f"{_safe_float(raw, 0.0):.2f}"
            except Exception:
                out[key] = str(raw)
    return out
def _augment_facture_headers(headers):
    hdrs = list(headers or [])
    for col in FACTURE_SITUATION_FIELDS:
        if col not in hdrs:
            hdrs.append(col)
    if "client_prenom" not in hdrs:
        hdrs.append("client_prenom")
    if "doc_reference" not in hdrs:
        hdrs.append("doc_reference")
    return hdrs
def _augment_facture_row(row):
    data = dict(row or {})
    for col in FACTURE_SITUATION_FIELDS:
        if col not in data:
            data[col] = ""
    if "doc_reference" not in data:
        data["doc_reference"] = ""
    return data
LIN = {
    "doc_num":"doc_num","kind":"kind","ref":"ref","type":"type","designation":"designation",
    "qte":"qte","pu_ht":"pu_ht","tva":"tva","total_ht":"total_ht"
}
URSSAF_COLS = ["Numéro","Date du paiement","client","montant pieces","montant MO","Montant HT","Montant TTC","Statut"]
# --- Helpers: split civility / lastname / firstname (UI-only; CSV unchanged) ---
def _split_civ_name_prenom(full_name:str):
    full = (full_name or "").strip()
    civ = "—"
    if full.startswith("M. "):
        civ = "M."
        core = full[3:]
    elif full.startswith("Mme "):
        civ = "Mme"
        core = full[4:]
    else:
        core = full
    if " " in core.strip():
        parts = core.strip().split()
        prenom = parts[-1]
        nom = " ".join(parts[:-1])
    else:
        nom = core.strip()
        prenom = ""
    return civ, nom, prenom
# --- Tiny persistence for client first names (no CSV change) ---
# === Embedded PDF rendering (validated) + thin wrappers ===
def _company_from_settings(s):
    return {
            "nom":      s.get("entreprise_nom",""),
        "tagline":  s.get("entreprise_tagline",""),
            "adresse":  s.get("entreprise_adresse",""),
            "cp":       s.get("entreprise_cp",""),
            "ville":    s.get("entreprise_ville",""),
            "tel":      s.get("entreprise_tel",""),
            "email":    s.get("entreprise_mail",""),
        "siren":    s.get("entreprise_siren",""),
        "siret":    s.get("entreprise_siret",""),
        "ape":      s.get("entreprise_ape",""),
        "tva":      s.get("entreprise_tva","") or s.get("tva",""),
        "tva_intracom": s.get("entreprise_tva",""),
        "assurance_decennale": s.get("entreprise_attestation_decennale",""),
        "iban":     s.get("entreprise_iban",""),
        "bic":      s.get("entreprise_bic",""),
        "banque":   s.get("entreprise_banque",""),
    }


def _company_header_lines(settings):
    """Return cleaned lines (font, size, text) for the PDF header block."""

    def _clean_inline(value):
        text = str(value or "").strip()
        return " ".join(text.split())

    def _iter_clean_lines(value):
        text = str(value or "").replace("\r", "")
        for raw in text.split("\n"):
            cleaned = " ".join(raw.replace(",", " ").split()).strip()
            if cleaned:
                yield cleaned

    base_settings = settings if isinstance(settings, dict) else {}
    company = _company_from_settings(base_settings)

    if isinstance(base_settings.get("company"), dict):
        provided = base_settings["company"]
        for key in ("nom", "tagline", "adresse", "cp", "ville", "tel", "email"):
            val = provided.get(key)
            if val not in (None, ""):
                company[key] = val

    lines = []
    name = _clean_inline(company.get("nom"))
    if name:
        lines.append(("Helvetica-Bold", 12, name))

    tagline = _clean_inline(company.get("tagline"))
    if tagline:
        lines.append(("Helvetica-Oblique", 9, tagline))

    seen = set()
    for addr_line in _iter_clean_lines(company.get("adresse")):
        if addr_line not in seen:
            seen.add(addr_line)
            lines.append(("Helvetica", 9, addr_line))

    city_line = " ".join(
        part for part in (_clean_inline(company.get("cp")), _clean_inline(company.get("ville"))) if part
    ).strip()
    if city_line and city_line not in seen:
        seen.add(city_line)
        lines.append(("Helvetica", 9, city_line))

    contact_parts = []
    tel = _clean_inline(company.get("tel"))
    email = _clean_inline(company.get("email"))
    if tel:
        contact_parts.append(tel)
    if email:
        contact_parts.append(email)
    contact_line = " • ".join(contact_parts)
    if contact_line:
        lines.append(("Helvetica", 9, contact_line))

    return lines
def _logo_from_settings(s):
    """Resolve logo path robustly: logo_local/logo_path → absolute/relative;
    try DATA_DIR, then BASE_DIR; fallback BRAND_DIR/logo.*. Return existing path or ""."""
    try:
        base = BASE_DIR; data = DATA_DIR; brand = BRAND_DIR
    except Exception:
        base = os.getcwd(); data = os.path.join(base, "data"); brand = os.path.join(data, "brand")
    cand = []
    for key in ("logo_local","logo_path"):
        p = (s.get(key) or "").strip()
        if p:
            cand += [p, os.path.join(data, p), os.path.join(base, p)]
    if os.path.isdir(brand):
        for fn in sorted(os.listdir(brand)):
            lo = fn.lower()
            if lo.startswith("logo.") and lo.split(".")[-1] in ("png","jpg","jpeg","bmp","gif","webp"):
                cand.append(os.path.join(brand, fn))
    seen, uniq = set(), []
    for p in cand:
        if p and p not in seen:
            seen.add(p); uniq.append(p)
    for p in uniq:
        try:
            if os.path.exists(p) and os.path.isfile(p): return p
        except Exception: pass
    return ""
def _default_pied(kind:str, settings:dict)->str:
    # Build a sane default footer if empty, using company info
    comp = _company_from_settings(settings)
    lines = []
    if comp.get("banque") or comp.get("iban") or comp.get("bic"):
        rib = " – ".join([
            f"Banque: {comp['banque']}" if comp.get("banque") else "",
            f"IBAN: {comp['iban']}" if comp.get("iban") else "",
            f"BIC: {comp['bic']}" if comp.get("bic") else "",
        ]).strip(" – ")
        if rib:
            lines.append(f"Règlement par virement • {rib}")
    if (comp.get("siret") or comp.get("siren") or comp.get("ape")
            or comp.get("tva") or comp.get("tva_intracom")
            or comp.get("assurance_decennale")):
        leg = " • ".join([
            f"SIRET: {comp['siret']}" if comp.get("siret") else "",
            f"SIREN: {comp['siren']}" if comp.get("siren") else "",
            f"APE: {comp['ape']}" if comp.get("ape") else "",
            f"TVA: {comp['tva_intracom'] or comp['tva']}" if (comp.get("tva_intracom") or comp.get("tva")) else "",
            f"Attestation décennale: {comp['assurance_decennale']}" if comp.get("assurance_decennale") else "",
        ]).strip(" • ")
        if leg:
            lines.append(leg)
    coord = " • ".join([
        comp.get("adresse",""),
        f"{comp.get('cp','')} {comp.get('ville','')}".strip()
    ]).strip(" • ")
    if coord:
        lines.append(coord)
    contact = " • ".join([
        comp.get("tel",""),
        comp.get("email","")
    ]).strip(" • ")
    if contact:
        lines.append(contact)
    return "\n".join([l for l in lines if l])
    """Accept both old and new signatures:
       - (doc, settings, out_path)
       - (doc, logo_path:str, params:dict)
    """
    if len(args) >= 3 and isinstance(args[1], dict):
        doc, settings, out_path = args[0], args[1], args[2]
        logo = _logo_from_settings(settings)
        params = {
            "company": _company_from_settings(settings),
            "margin_mm": 10, "title_size": 42, "body_size": 11,
            "out_path": out_path,
        }
        # add pieds
        if fn_validated.__name__.endswith("devis_pdf"):
            pied = settings.get("pied_devis") or _default_pied("devis", settings)
            params["pied_devis"] = pied
        elif fn_validated.__name__.endswith("facture_pdf"):
            pied = settings.get("pied_facture") or _default_pied("facture", settings)
            params["pied_facture"] = pied
        return fn_validated(doc, logo, params)
    else:
        # old signature
        doc, logo, params = args[0], args[1], args[2] if len(args)>2 else {}
        # if pieds missing, enrich from settings if available in params
        s = params.get("company_settings") if isinstance(params, dict) else None
        if isinstance(params, dict) and s and isinstance(s, dict):
            if "pied_devis" not in params:
                params["pied_devis"] = _default_pied("devis", s)
            if "pied_facture" not in params:
                params["pied_facture"] = _default_pied("facture", s)
        return fn_validated(doc, logo, params)
def _adapt_signature_and_call(fn_validated, args):
    """
    Adapter pour supporter les anciennes signatures d'appel et les nouvelles.
    Cas couverts (ordre de préférence):
      - (doc, logo_path:str, params:dict)
      - (doc, settings:dict, out_path:str)  # signature héritée utilisée par le code d'export
      - (doc, settings:dict)                # out_path absent -> rendu en mémoire/paramétré
      - (doc, logo_path:str)                # params par défaut
      - (doc,)                              # logo/params déduits si possible
    La fonction validée attend: (doc, logo_path, params). Elle gère out_path via params["out_path"].
    """
    # Normalisation des args
    if not isinstance(args, (list, tuple)):
        args = (args,)
    doc = args[0] if len(args) > 0 else {}
    a1  = args[1] if len(args) > 1 else None
    a2  = args[2] if len(args) > 2 else None

    params = {}
    logo_path = ""

    # a2 peut être un chemin cible (out_path)
    if isinstance(a2, str):
        params["out_path"] = a2

    # a1 peut être un dict de settings (préféré) ou un chemin logo
    if isinstance(a1, dict):
        settings = a1 or {}
        # logo depuis settings si présent
        logo_path = str(settings.get("logo_path", settings.get("logo", "")) or "")
        # expose settings pour pied de page & société
        params.setdefault("company_settings", settings)
        if isinstance(settings.get("company"), dict):
            params.setdefault("company", settings.get("company"))
        else:
            params.setdefault("company", _company_from_settings(settings))
        # si l'appelant a déjà prévu des champs, on ne les écrase pas
        if "pied_devis" not in params and "pied_devis" in settings:
            params["pied_devis"] = settings["pied_devis"]
        if "pied_facture" not in params and "pied_facture" in settings:
            params["pied_facture"] = settings["pied_facture"]
    elif isinstance(a1, str):
        logo_path = a1 or ""

    # Dernière chance: tenter de récupérer un logo global
    if not logo_path:
        try:
            # load_settings peut ne pas exister partout; on protège
            _ls = load_settings()  # type: ignore
            if isinstance(_ls, dict):
                logo_path = str(_ls.get("logo_path", ""))
                params.setdefault("company_settings", _ls)
                params.setdefault("company", _company_from_settings(_ls))
        except Exception:
            pass

    # Appel final
    return fn_validated(doc, logo_path, params)

def generate_devis_pdf(*args):
    return _adapt_signature_and_call(_validated_generate_devis_pdf, args)
def _safe_write_facture_pdf(doc:dict, settings:dict, numero:str) -> str:
    """Write data/factures/<stem>.pdf with deterministic naming (no timestamp)."""
    base = DOCS_DIRS.get("factures", os.path.join(DATA_DIR, "factures"))
    os.makedirs(base, exist_ok=True)
    ctx = _situ_identifiers(doc, numero)
    file_stem = ctx.get("file_stem") or str(numero or "").strip() or "facture"
    display_num = ctx.get("display") or file_stem
    original_num = doc.get("numero")
    try:
        if display_num:
            doc["numero"] = display_num
        doc["_situ_display_num"] = display_num
    except Exception:
        pass
    target = os.path.join(base, f"{file_stem}.pdf")
    _situ_log(f"target_pdf={target}")
    try:
        generate_facture_pdf(doc, settings, target)
        return target
    except PermissionError:
        suffix = "_retry"
        alt = os.path.join(base, f"{file_stem}{suffix}.pdf")
        counter = 1
        while os.path.exists(alt) and counter < 99:
            alt = os.path.join(base, f"{file_stem}{suffix}{counter}.pdf")
            counter += 1
        _situ_log(f"target_pdf_retry={alt}")
        generate_facture_pdf(doc, settings, alt)
        return alt
    finally:
        try:
            if original_num is not None:
                doc["numero"] = original_num
        except Exception:
            pass
def generate_facture_pdf(*args):
    return _adapt_signature_and_call(_validated_generate_facture_pdf, args)
def generate_suivi_financier_pdf(rows, settings, out_path, periode=None, generated_on=None, headers=None, title="SUIVI FINANCIER"):
    """
    PDF export for Suivi financier — improved layout:
    - full-width adaptive columns
    - numeric alignment + fr formatting
    - header titles can wrap to two lines
    - summary block (totaux période) and parameters legend
    - totals row at bottom
    """
    try:
        from reportlab.lib.pagesizes import A4, landscape
        from reportlab.lib.units import mm
        from reportlab.lib import colors
    except Exception:
        # Fallback: QTextDocument simple table
        hdrs = headers or (list(rows[0].keys()) if rows else [])
        html = [f"<h2>{title}</h2>"]
        if periode:
            html.append(f"<p>Période: {periode}</p>")
        html.append("<table border='1' cellspacing='0' cellpadding='4'>")
        html.append("<tr>" + "".join(f"<th>{h}</th>" for h in hdrs) + "</tr>")
        for r in rows or []:
            html.append("<tr>" + "".join(f"<td>{r.get(h,'')}</td>" for h in hdrs) + "</tr>")
        html.append("</table>")
        doc = QTextDocument("\\n".join(html))
        printer = QPrinter(QPrinter.HighResolution)
        printer.setOutputFormat(QPrinter.PdfFormat); printer.setOutputFileName(out_path)
        doc.print_(printer)
        return out_path
    # ---- helpers ----
    def _fmt_money(x):
        try:
            v = float(str(x).replace(',', '.'))
        except Exception:
            return str(x)
        return f"{v:,.2f}".replace(",", "X").replace(".", ",").replace("X", " ")
    def _fmt_hours(x):
        try:
            v = float(str(x).replace(',', '.'))
        except Exception:
            return str(x)
        return f"{v:,.2f}".replace(".", ",")
    def _is_numeric_header(h):
        hl = h.lower()
        return any(k in hl for k in ["€", "%", "total", "marge", "heures", "ca ", "urssaf", "frais"]) or hl.endswith(" €")
    def _wrap_header(h):
        # Prefer break before/around ' €'
        if " €" in h:
            return h.replace(" €", "\\n€")
        # Insert break near middle space if exists
        parts = h.split(" ")
        if len(parts) >= 2:
            mid = len(parts)//2
            return " ".join(parts[:mid]) + "\\n" + " ".join(parts[mid:])
        return h
    def _draw_header_multiline(c, x, w, y, text, size=11, band_h=8*mm):
        c.setFont("Helvetica-Bold", size)
        lines = str(text).split("\\n")
        lh = size * 1.25  # line height in points
        # vertically center within band
        total_h = lh * len(lines)
        y0 = y - (band_h/2.0) + (total_h/2.4)
        for i, line in enumerate(lines):
            # left for text columns, right for numeric-looking
            if _is_numeric_header(text):
                tw = c.stringWidth(line, "Helvetica-Bold", size)
                c.drawString(x + w - tw - 2*mm, y0 - i*lh, line)
            else:
                c.drawString(x + 2*mm, y0 - i*lh, line)
    def _param_legend_lines(settings):
        def g(k, d="—"):
            return settings.get(k, d)
        parts = []
        if g("mo_cost") not in (None, ""):
            parts.append(f"Coût horaire MO: {g('mo_cost')} €")
        if g("fg_pct") not in (None, ""):
            parts.append(f"Frais généraux: {g('fg_pct')} %")
        if g("urssaf_mo_pct") not in (None, ""):
            parts.append(f"URSSAF MO: {g('urssaf_mo_pct')} %")
        if g("urssaf_pieces_pct") not in (None, ""):
            parts.append(f"URSSAF Pièces: {g('urssaf_pieces_pct')} %")
        return parts
    # ---- input normalization ----
    headers = headers or (list(rows[0].keys()) if rows else [])
    periode = periode or ""
    generated_on = generated_on or __import__('datetime').datetime.now().strftime("%d/%m/%Y %H:%M")
    # ---- canvas ----
    buf = None if out_path else io.BytesIO()
    c = _NumberedCanvas(out_path or buf, pagesize=landscape(A4))
    margin = 10*mm
    c._footer_margin = margin
    # ---- heading ----
    company = _company_from_settings(settings)
    logo_path = _logo_from_settings(settings)
    logo_path = _logo_from_settings(settings)
    try:
        y = _stacked_header(c, title, company,
                            [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                            logo_path, margin, 42)
    except TypeError:
        y = _stacked_header(c, title, company,
                            [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                            logo_path, margin)
    # ---- summary top (totaux période) ----
    totals = {h: 0.0 for h in headers if _is_numeric_header(h)}
    sum_hours = 0.0
    for r in rows or []:
        for h in headers:
            if _is_numeric_header(h):
                try:
                    v = float(str(r.get(h,"0")).replace(" ", "").replace("€","").replace(",", ".").replace("%",""))
                except Exception:
                    v = 0.0
                totals[h] = totals.get(h, 0.0) + v
        # detect hours col by name
        for key in ["Heures", "heures", "Hrs", "Hours"]:
            if key in r:
                try: sum_hours += float(str(r.get(key,"0")).replace(",", "."))
                except: pass
                break
    c.setFont("Helvetica-Bold", 11); c.setFillColorRGB(0,0,0)
    legend = _param_legend_lines(settings)
    left_x = margin; right_x = c._pagesize[0] - margin - 120*mm
    # Left: mini synthèse
    c.drawString(left_x, y - 10, "Totaux période :")
    c.setFont("Helvetica", 10)
    y_line = y - 24
    # Display a concise selection of totals if present
    def _get(hints):
        for h in headers:
            for hint in hints:
                if hint.lower() in h.lower():
                    return totals.get(h, None)
        return None
    pairs = [
        ("CA TTC", _get(["CA Pièces TTC","Total Facture €","Montant TTC"])),
        ("Achats €", _get(["Achats €"])),
        ("Heures", sum_hours if sum_hours else None),
        ("MO €", _get(["MO €"])),
        ("Frais généraux €", _get(["Frais généraux"])),
        ("URSSAF MO €", _get(["URSSAF MO"])),
        ("URSSAF Pièces €", _get(["URSSAF Pièces"])),
        ("Marge €", _get(["Marge €"])),
    ]
    shown = 0
    for label, val in pairs:
        if val is None: continue
        txt = f"{label}: {_fmt_money(val) if '€' in label or label=='CA TTC' else _fmt_hours(val)}"
        c.drawString(left_x, y_line, txt); y_line -= 12; shown += 1
        if shown >= 6: break
    # Right: paramètres
    c.setFont("Helvetica-Bold", 11); c.drawString(right_x, y - 10, "Paramètres :")
    c.setFont("Helvetica", 10)
    y_r = y - 24
    for part in legend:
        c.drawString(right_x, y_r, part); y_r -= 12
    y = min(y_line, y_r) - 6
    # ---- table header ----
    W, H = c._pagesize
    table_width = W - 2*margin
    # Estimate number of lines in wrapped headers to set band height
    wrapped_headers = [_wrap_header(h) for h in headers]
    line_counts = [len(wh.split("\\n")) for wh in wrapped_headers]
    max_lines = max(line_counts) if line_counts else 1
    band_h = max(8*mm, (10*mm if max_lines>=2 else 8*mm))
    # Compute column widths: numeric columns minimal width based on content, rest share remaining
    numeric_like = set(h for h in headers if _is_numeric_header(h))
    values_by_col = {h: [str(r.get(h, "")) for r in rows or []] for h in headers}
    widths = []
    free_w = table_width
    for h in headers:
        if h in numeric_like:
            w = _measure_numeric(c, h, values_by_col.get(h, []), size=10, pad=8*mm)
            widths.append(w); free_w -= w
        else:
            widths.append(None)
    # Distribute remaining width to text columns
    text_idx = [i for i,w in enumerate(widths) if w is None]
    for i in text_idx:
        widths[i] = max(25*mm, free_w / max(1, len(text_idx)))
    # Draw header band
    x = margin
    c.setFillColorRGB(0.93,0.96,1.0); c.rect(x, y- band_h, table_width, band_h, fill=1, stroke=0)
    c.setFillColorRGB(0,0,0)
    for wi, h, wh in zip(widths, headers, wrapped_headers):
        _draw_header_multiline(c, x, wi, y - 2, wh, size=10 if max_lines>=2 else 11, band_h=band_h)
        x += wi
    y -= band_h + 2.5*mm
    # ---- rows ----
    # Colors for costs/margin
    cost_keys = ["achats", "frais généraux", "urssaf", "mo €"]
    def _is_cost_col(h):
        hl = h.lower()
        return any(k in hl for k in cost_keys)
    margin_key = None
    for h in headers:
        if "marge €" in h.lower():
            margin_key = h; break
    for idx, r in enumerate(rows or []):
        xx = margin
        if idx % 2 == 0:
            c.setFillColorRGB(0.99,0.99,0.99); c.rect(xx, y-5*mm, table_width, 6*mm, fill=1, stroke=0)
        c.setFillColorRGB(0,0,0); c.setFont("Helvetica", 10)
        for wi,h in zip(widths, headers):
            val = str(r.get(h, ""))
            # formatting
            if _is_numeric_header(h):
                # try to format number with fr style
                try:
                    val_num = float(val.replace("€","").replace(" ","").replace(",","."))
                    if "heures" in h.lower():
                        val = _fmt_hours(val_num)
                    elif "%" in h or "marge %" in h.lower():
                        val = f"{val_num:.1f}".replace(".", ",") + " %"
                    else:
                        val = _fmt_money(val_num)
                except Exception:
                    pass
                tw = c.stringWidth(val, "Helvetica", 10)
                c.drawString(xx + wi - tw - 2*mm, y, val)
            else:
                c.drawString(xx + 2*mm, y, (val[:140] + ("…" if len(val)>140 else "")))
            xx += wi
        y -= 6.2*mm
        # Page break
        if y < margin + 24*mm:
            c.showPage()
            try:
                y = _stacked_header(c, title, company,
                                    [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                                    logo_path, margin, 42)
            except TypeError:
                y = _stacked_header(c, title, company,
                                    [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                                    logo_path, margin)
            # redraw header band
            x = margin
            c.setFillColorRGB(0.93,0.96,1.0); c.rect(x, y- band_h, table_width, band_h, fill=1, stroke=0)
            c.setFillColorRGB(0,0,0)
            for wi, h, wh in zip(widths, headers, wrapped_headers):
                _draw_header_multiline(c, x, wi, y - 2, wh, size=10 if max_lines>=2 else 11, band_h=band_h)
                x += wi
            y -= band_h + 2.5*mm
    # ---- totals row ----
    # Compute totals again to be safe
    totals_fmt = {}
    for h in headers:
        if _is_numeric_header(h):
            totals_fmt[h] = _fmt_money(totals.get(h,0.0))
        elif h.lower().startswith("heures"):
            totals_fmt[h] = _fmt_hours(sum_hours)
        else:
            totals_fmt[h] = ""
    # Draw band
    c.setFillColorRGB(0.88,0.93,0.88); c.rect(margin, y-5*mm, table_width, 6*mm, fill=1, stroke=0)
    c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 10)
    xx = margin
    for wi,h in zip(widths, headers):
        text = totals_fmt[h] if _is_numeric_header(h) or h.lower().startswith("heures") else ("TOTAL" if xx==margin else "")
        if _is_numeric_header(h) or h.lower().startswith("heures"):
            tw = c.stringWidth(text, "Helvetica-Bold", 10)
            c.drawString(xx + wi - tw - 2*mm, y, text)
        else:
            c.drawString(xx + 2*mm, y, text)
        xx += wi
    # finalize
    c.showPage()
    c.save()
    return out_path or buf
def _urssaf_safe_float(x, default=0.0):
    try:
        if x is None:
            return float(default)
        if isinstance(x, (int, float)):
            return float(x)
        s = str(x).strip()
        if s == '':
            return float(default)
        # handle comma decimals
        s = s.replace(',', '.')
        return float(s)
    except Exception:
        return float(default)
# --- URSSAF row normalization helper ---
def _urssaf_unpack_row(r):
    """Return (d, f, cli, obj, p, mo, t) from either a dict row or a tuple/list.
    - d is ISO date string (via _date_fr input then to iso via _safe_date_str/_display_date pipeline already used)
    - numerical fields are coerced with _urssaf_safe_float
    """
    if isinstance(r, dict):
        d = _date_fr(r.get("Date du paiement", r.get("date", r.get("Date",""))))
        f = str(r.get("facture_num", r.get("Facture n°", r.get("Numéro",""))))
        cli = str(r.get("client_nom", r.get("client", r.get("Client",""))))
        obj = str(r.get("objet", r.get("Objet","")))
        # accept both exact keys and French labels with apostrophe variants
        p  = _urssaf_safe_float(r.get("pieces_ht", r.get("Pièces HT", r.get("montant pieces", 0))), 0)
        mo = _urssaf_safe_float(r.get("mo_ht", r.get("Main d’œuvre HT", r.get("Main d'oeuvre HT", r.get("montant MO", 0)))), 0)
        t  = _urssaf_safe_float(r.get("total_ht", r.get("Total HT", r.get("Montant HT", 0))), 0)
        return d, f, cli, obj, p, mo, t
    else:
        seq = list(r) if isinstance(r, (list, tuple)) else []
        # pad to 7 elements
        if len(seq) < 7:
            seq = seq + [None] * (7 - len(seq))
        d, f, cli, obj, p, mo, t = seq[:7]
        d = _date_fr(d)
        f = str(f or "")
        cli = str(cli or "")
        obj = str(obj or "")
        p  = _urssaf_safe_float(p, 0)
        mo = _urssaf_safe_float(mo, 0)
        t  = _urssaf_safe_float(t, 0)
        return d, f, cli, obj, p, mo, t
# ------------------ helpers ------------------
def _rgb(hexs):
    h = (hexs or "#11427D").lstrip("#")
    if len(h)==3: h = "".join(ch*2 for ch in h)
    try:
        return (int(h[0:2],16)/255.0, int(h[2:4],16)/255.0, int(h[4:6],16)/255.0)
    except Exception:
        return (0.07, 0.26, 0.49)

def _draw_bpa_fullwidth(c, y_top, *, margin, company, doc=None, params=None, accent_color=None):
    """
    BPA v3 — 30mm height, full width, compact and aligned.
    Returns new y under the block.
    """
    W, H = getattr(c, "_pagesize", (595.27, 841.89))
    width = max(W - 2*margin, 40*mm)
    accent = accent_color or _rgb(ACCENT)

    frame_h   = 30 * mm
    inner_pad = 4 * mm
    sep_gap   = 8 * mm

    # Columns proportion (left signature wider)
    content_w = width - 2*inner_pad
    left_w    = max(content_w * 0.55, 80*mm)
    right_w   = max(content_w - left_w - sep_gap, 60*mm)
    if right_w < 60*mm:
        left_w  = max(content_w - sep_gap - 60*mm, 80*mm)
        right_w = max(content_w - left_w - sep_gap, 60*mm)

    frame_bottom = y_top - frame_h
    x0 = margin

    c.saveState()
    try:
        # Outer frame
        c.setLineWidth(1)
        c.setStrokeColorRGB(0,0,0)
        c.roundRect(x0, frame_bottom, width, frame_h, 3*mm, stroke=1, fill=0)

        # Title centered
        try: c.setFont("Helvetica-Bold", 11.5)
        except: pass
        c.setFillColorRGB(0,0,0)
        title = "LU ET APPROUVÉ — BON POUR ACCORD"
        tw = c.stringWidth(title, "Helvetica-Bold", 11.5)
        c.drawString(x0 + (width - tw)/2, y_top - 6.5*mm, title)

        # Left signature box
        left_x   = x0 + inner_pad
        box_top  = y_top - 12*mm
        box_h    = 12*mm
        c.setFillColorRGB(0.97,0.97,0.97)
        c.rect(left_x, box_top - box_h, left_w, box_h, stroke=1, fill=1)
        c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 9.8)
        c.drawString(left_x, box_top + 2.3*mm, "Signature du client :")

        # Accent strip below box
        band_h = 5*mm
        band_y = frame_bottom + inner_pad
        c.setFillColorRGB(*accent)
        c.rect(left_x, band_y, left_w, band_h, stroke=0, fill=1)
        c.setFillColorRGB(1,1,1); c.setFont("Helvetica-Bold", 8.8)
        c.drawCentredString(left_x + left_w/2, band_y + band_h/2 - 1.6, "RETOURNER 1 EXEMPLAIRE SIGNÉ")

        # Right: manager label + signature line + name
        right_x = left_x + left_w + sep_gap
        def _first_non_empty(dicts, keys):
            for d in dicts:
                if not isinstance(d, dict): 
                    continue
                for k in keys:
                    v = d.get(k)
                    if v:
                        s = str(v).strip()
                        if s: return s
            return ""
        raison = _first_non_empty(
            [company, (params or {}).get("company", {}), (params or {}).get("company_settings", {}), doc],
            ("raison_sociale","entreprise_nom","nom","societe","company_name")
        )
        gerant = _first_non_empty(
            [company, (params or {}).get("company", {}), (params or {}).get("company_settings", {}), doc],
            ("gerant_nom","gerant","nom_gerant","dirigeant","signataire_nom","signataire","responsable","representant")
        )
        label = f"Le gérant de {raison} :" if raison else "Le gérant :"
        c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 9.8)
        # Simple wrap
        words = label.split(); line = ""; line_y = box_top + 2.3*mm
        for w in words:
            t = (line + " " + w).strip()
            if c.stringWidth(t, "Helvetica-Bold", 9.8) <= right_w:
                line = t
            else:
                c.drawString(right_x, line_y, line); line = w; line_y -= 4.2*mm
        if line: c.drawString(right_x, line_y, line); line_y -= 4.2*mm

        # Signature line
        sig_y = max(frame_bottom + inner_pad + band_h + 6*mm, line_y + 1.0*mm)
        c.setLineWidth(0.8)
        c.line(right_x, sig_y, right_x + right_w - 6*mm, sig_y)
        if gerant:
            c.setFont("Helvetica", 9.7)
            c.drawRightString(right_x + right_w, sig_y - 3.2*mm, gerant)

    finally:
        c.restoreState()

    return frame_bottom - 8*mm



def _date_fr(s):
    s = str(s or "")
    if len(s)==10 and s[4]=="-" and s[7]=="-":
        y,m,d = s.split("-"); return f"{d}/{m}/{y}"
    return s
def _eur(x):
    try: v = float(x)
    except Exception: v = 0.0
    s = f"{v:,.2f}".replace(",", " ").replace(".", ",")
    return s + " €"
def _wrap(c, text, max_w, size=11, font="Helvetica"):
    """Greedy wrap.
    Splits on spaces/newlines; falls back char-by-char for very long tokens.
    Returns a list of lines within max_w.
    """
    text = (text or "").replace("\r","")
    lines = []
    for para in text.split("\n"):
        words = para.split(" ")
        cur = ""
        for w in words:
            cand = (cur+" "+w) if cur else w
            if c.stringWidth(cand, font, size) <= max_w:
                cur = cand
            else:
                if cur:
                    lines.append(cur); cur = w
                else:
                    # fallback char-by-char for ultra-long tokens
                    buf = ""
                    for ch in w:
                        if c.stringWidth(buf+ch, font, size) <= max_w:
                            buf += ch
                        else:
                            if buf: lines.append(buf); buf = ch
                    cur = buf
        if cur: lines.append(cur)
    return lines or [""]
def _wrap_smart(c, text, max_w, size=11, font="Helvetica"):
    """
    Wrap with simple orphan control and line balancing.
    - Avoid single-word lines when possible by moving last word(s) from previous line.
    - Keep double newlines as paragraph breaks, treat single newlines as spaces.
    """
    try:
        # Normalize whitespace: keep paragraph breaks on double \n, merge single \n into spaces
        t = (text or "").replace("\r","")
        t = t.replace("\u00A0"," ")  # NBSP -> space
        # Preserve double newlines as real paragraph breaks
        paras = []
        for block in t.split("\n\n"):
            block = block.replace("\n", " ")
            paras.append(block.strip())
        # Wrap each paragraph using _wrap, then balance
        out = []
        for para in paras:
            lines = _wrap(c, para, max_w, size=size, font=font) or [""]
            # orphan control: if a line has a single short word while previous has space, move last word
            i = 0
            while i < len(lines)-1:
                cur = lines[i].rstrip()
                nxt = lines[i+1].lstrip()
                # count words
                cur_words = cur.split(" ")
                nxt_words = nxt.split(" ")
                # consider next line orphan if it's one word or very narrow (<28% of max width)
                nxt_w = c.stringWidth(nxt, font, size)
                cur_w = c.stringWidth(cur, font, size)
                def too_narrow(txt):
                    return c.stringWidth(txt, font, size) < (0.28 * max_w)
                # Try to move words from end of 'cur' to start of 'nxt'
                moved = False
                while (len(nxt_words) <= 1 or too_narrow(" ".join(nxt_words))) and len(cur_words) > 1:
                    last = cur_words.pop()  # move last word
                    candidate_cur = " ".join(cur_words)
                    candidate_nxt = (last + " " + " ".join(nxt_words)).strip()
                    if c.stringWidth(candidate_cur, font, size) <= max_w and c.stringWidth(candidate_nxt, font, size) <= max_w:
                        cur = candidate_cur
                        nxt = candidate_nxt
                        nxt_words = nxt.split(" ")
                        moved = True
                    else:
                        # can't move safely; break to avoid infinite loop
                        cur_words.append(last)
                        break
                if moved:
                    lines[i] = cur
                    lines[i+1] = nxt
                i += 1
            out.extend(lines)
        return out or [""]
    except Exception:
        return _wrap(c, text, max_w, size=size, font=font)
def _get_hyphenator():
    try:
        if _pyphen is None:
            return None
        for lg in ("fr_FR", "fr", "en_US", "en_GB"):
            try:
                return _pyphen.Pyphen(lang=lg)
            except Exception:
                continue
        return None
    except Exception:
        return None
def _wrap_hyphenate_word(c, word, max_w, size=11, font="Helvetica", hyph=None):
    try:
        if not word:
            return [""]
        hyph = hyph or _get_hyphenator()
        if hyph is None:
            out = []
            buf = ""
            for ch in word:
                if c.stringWidth(buf + ch, font, size) <= max_w:
                    buf += ch
                else:
                    if buf:
                        out.append(buf + "-")
                        buf = ch
                    else:
                        out.append(ch)
                        buf = ""
            if buf:
                out.append(buf)
            return out or [""]
        parts = hyph.inserted(word, hyphen="-").split("-")
        if len(parts) <= 1:
            return _wrap_hyphenate_word(c, word, max_w, size=size, font=font, hyph=None)
        out = []
        cur = ""
        for i, syl in enumerate(parts):
            cand = (cur + syl)
            width_with_hyph = c.stringWidth(cand + ("-" if i < len(parts)-1 else ""), font, size)
            if width_with_hyph <= max_w:
                cur = cand
            else:
                if cur:
                    out.append(cur + "-")
                    cur = syl
                else:
                    tiny = _wrap_hyphenate_word(c, syl, max_w, size=size, font=font, hyph=None)
                    out.extend([t if t.endswith("-") else (t + "-") for t in tiny[:-1]])
                    cur = tiny[-1]
        if cur:
            out.append(cur)
        return out or [""]
    except Exception:
        return [word]
def _wrap_smart_hyphen(c, text, max_w, size=11, font="Helvetica"):
    try:
        t = (text or "").replace("\r","").replace("\u00A0"," ")
        paras = []
        for block in t.split("\n\n"):
            block = block.replace("\n", " ")
            paras.append(block.strip())
        out = []
        hyph = _get_hyphenator()
        for para in paras:
            words = para.split(" ")
            line = ""
            lines = []
            for w in words:
                if not w:
                    continue
                candidate = (line + " " + w).strip() if line else w
                if c.stringWidth(candidate, font, size) <= max_w:
                    line = candidate
                    continue
                if not line and c.stringWidth(w, font, size) > max_w:
                    chunks = _wrap_hyphenate_word(c, w, max_w, size=size, font=font, hyph=hyph)
                    for ch in chunks[:-1]:
                        lines.append(ch)
                    line = chunks[-1]
                else:
                    if line:
                        lines.append(line)
                    line = w
            if line:
                lines.append(line)
            i = 0
            while i < len(lines)-1:
                cur = lines[i].rstrip()
                nxt = lines[i+1].lstrip()
                cur_words = cur.split(" ")
                nxt_words = nxt.split(" ")
                def too_narrow(txt): return c.stringWidth(txt, font, size) < (0.28 * max_w)
                moved = False
                while (len(nxt_words) <= 1 or too_narrow(" ".join(nxt_words))) and len(cur_words) > 1:
                    last = cur_words.pop()
                    candidate_cur = " ".join(cur_words)
                    candidate_nxt = (last + " " + " ".join(nxt_words)).strip()
                    if c.stringWidth(candidate_cur, font, size) <= max_w and c.stringWidth(candidate_nxt, font, size) <= max_w:
                        cur = candidate_cur
                        nxt = candidate_nxt
                        nxt_words = nxt.split(" ")
                        moved = True
                    else:
                        cur_words.append(last)
                        break
                if moved:
                    lines[i] = cur
                    lines[i+1] = nxt
                i += 1
            out.extend(lines)
        return out or [""]
    except Exception:
        return _wrap_smart(c, text, max_w, size=size, font=font)
    except Exception:
        # Fallback to basic
        return _wrap(c, text, max_w, size=size, font=font)
def _crop_logo(logo_path):
    # Trim white borders via PIL if available; else fallback
    try:
        from PIL import Image, ImageChops
        im = Image.open(logo_path).convert("RGBA")
        bg = Image.new("RGBA", im.size, im.getpixel((0,0)))
        diff = ImageChops.difference(im, bg)
        bbox = diff.getbbox()
        if bbox: im = im.crop(bbox)
        return ImageReader(im), im.size
    except Exception:
        try:
            ir = ImageReader(logo_path); return ir, ir.getSize()
        except Exception:
            return None, (0,0)
# === Delegate for wrapping multi-line text in "Objet" column ===
class _WrapItemDelegate(QtWidgets.QStyledItemDelegate):
    def __init__(self, parent=None):
        super().__init__(parent)
    def sizeHint(self, option, index):
        sz = super().sizeHint(option, index)
        try:
            text = str(index.data() or "")
            if not text:
                return sz
            table = index.model().parent()
            col = index.column()
            width = table.columnWidth(col) if hasattr(table, "columnWidth") else max(160, sz.width())
            width = max(160, width)
            fm = option.fontMetrics
            rect = fm.boundingRect(QtCore.QRect(0,0,int(width)-10, 2000), QtCore.Qt.TextWordWrap, text)
            h = max(sz.height(), rect.height() + 10)
            return QtCore.QSize(sz.width(), h)
        except Exception:
            return sz
class _NumberedCanvas(Canvas):
    def __init__(self, *a, **kw):
        super().__init__(*a, **kw)
        self._saved = []
        self._footer_margin = 10*mm
    def showPage(self):
        self._saved.append(dict(self.__dict__))
        self._startPage()
    def save(self):
        total = len(self._saved)
        for state in self._saved:
            self.__dict__.update(state)
            W,H = self._pagesize
            self.setFont("Helvetica", 9)
            # Left footer text (custom), drawn at bottom-left
            # === FOOTER TEXT (90% largeur utile, sans chevauchement pagination) ===
            try:
                footer_text = getattr(self, "_footer_text", "")
                if footer_text:
                    fnt = getattr(self, "_footer_font", "Helvetica")
                    fsz = getattr(self, "_footer_size", 9)
                    self.setFont(fnt, fsz)

                    # Réserve d'abord de la place pour la numérotation à droite
                    reserve = self.stringWidth("Page 888/888", "Helvetica", 8) + 8  # marge de sécu
                    right_limit = (W - self._footer_margin) - reserve

                    # 90% de largeur utile, mais jamais au-delà de right_limit
                    max_w_90 = int((W - 2*self._footer_margin) * 0.90)
                    max_w = max(min(max_w_90, right_limit - self._footer_margin), 80)

                    def _wrap_local(txt):
                        try:
                            return _wrap(self, txt, max_w, fsz, fnt)
                        except Exception:
                            return [txt]

                    # Hauteur occupée réduite
                    y = max(self._footer_margin * 0.30, fsz * 1.1)
                    lines = []
                    for para in (footer_text or "").replace("\r", "").split("\n"):
                        lines.extend(_wrap_local(para))

                    # On dessine bottom→top pour que la 1re ligne saisie apparaisse en haut visuellement
                    for ln in reversed(lines):
                        self.drawString(self._footer_margin, y, ln)
                        y += fsz * 1.03
            except Exception:
                pass
           # === END FOOTER TEXT ===
            self.setFont("Helvetica", 9)
            self.drawRightString(W - self._footer_margin, max(self._footer_margin*0.30, 8),
                                 f"Page {self._pageNumber}/{total}")
            super().showPage()
        super().save()
ACCENT = "#11427D"
def _render_dev_fact_header(c, kind, company, meta_items, logo_path, margin=10*mm, title_size=42):
    """Custom header layout for DEVIS/FACTURE matching the reference mockup."""
    W, H = c._pagesize
    accent = _rgb(ACCENT)

    title_y = H - margin - 2*mm
    c.setFillColorRGB(*accent)
    c.setFont("Helvetica-Bold", title_size)
    c.drawCentredString(W / 2, title_y, kind.upper())
    c.setFillColorRGB(0, 0, 0)

    gap = 4*mm
    left_x = margin
    left_w = (W - 2 * margin) / 2 - 2 * mm
    right_x = left_x + left_w + gap
    right_w = max(W - right_x - margin, 60 * mm)

    block_top = title_y - 6 * mm
    inner_pad = 4 * mm

    heading = company.get("nom") or company.get("entreprise_nom") or ""
    raw_lines = []

    def _extend_line(item):
        if not item:
            return
        for sub in str(item).splitlines():
            sub = sub.strip()
            if sub:
                raw_lines.append(sub)

    _extend_line(company.get("tagline") or company.get("entreprise_tagline"))
    _extend_line(company.get("adresse") or company.get("entreprise_adresse"))
    _extend_line(
        f"{company.get('cp') or company.get('entreprise_cp', '')} "
        f"{company.get('ville') or company.get('entreprise_ville', '')}".strip()
    )
    contact = " • ".join([
        company.get("tel") or company.get("entreprise_tel", ""),
        company.get("email") or company.get("entreprise_mail", ""),
    ]).strip(" •")
    _extend_line(contact)

    suppressed_legal_labels = {"SIRET", "APE", "TVA intracom", "Attestation décennale"}
    for label, keys in [
        ("SIREN", ("siren", "entreprise_siren")),
        ("SIRET", ("siret", "entreprise_siret")),
        ("APE", ("ape", "entreprise_ape")),
        ("TVA intracom", ("tva_intracom", "tva", "entreprise_tva")),
        ("Attestation décennale", ("assurance_decennale", "entreprise_assurance_decennale")),
    ]:
        value = ""
        for key in keys:
            value = company.get(key)
            if value:
                break
        if value and label not in suppressed_legal_labels:
            raw_lines.append(f"{label} : {value}")

    img = None
    logo_w = logo_h = 0
    logo_slot = 0
    if logo_path:
        try:
            img, (iw, ih) = _crop_logo(logo_path)
            if iw and ih:
                max_w = min(left_w - 2 * inner_pad, 45 * mm)
                max_h = 24 * mm
                scale = min(max_w / iw, max_h / ih, 1.0)
                logo_w = iw * scale
                logo_h = ih * scale
                if logo_w > 0 and logo_h > 0:
                    logo_slot = logo_w + 3 * mm
                else:
                    img = None
                    logo_w = logo_h = 0
                    logo_slot = 0
            else:
                img = None
        except Exception:
            img = None
            logo_w = logo_h = 0
            logo_slot = 0

    body_font = 10
    heading_font = 13
    heading_leading = heading_font * 1.2
    body_leading = max(body_font * 1.45, 4.2 * mm)

    text_width = left_w - 2 * inner_pad - logo_slot
    if text_width <= 0 or not (logo_w > 0 and logo_h > 0):
        text_width = max(left_w - 2 * inner_pad, 30 * mm)
    detail_lines = []
    for line in raw_lines:
        sanitized = (
            (line or "")
            .replace("« ", "«\u00A0")
            .replace(" »", "\u00A0»")
            .replace(" le Bizet", " le\u00A0Bizet")
            .replace(" le BIZET", " le\u00A0BIZET")
        )
        detail_lines.extend(_wrap_smart(c, sanitized, text_width, size=body_font))

    detail_height = (heading_leading if heading else 0) + len(detail_lines) * body_leading
    content_height = 0
    if logo_h > 0:
        content_height += logo_h
    if detail_height > 0:
        if content_height > 0:
            content_height += 2 * mm
        content_height += detail_height
    if content_height == 0:
        content_height = max(logo_h, detail_height)
    block_height = content_height + 2 * inner_pad
    block_bottom = block_top - block_height

    c.setStrokeColorRGB(0.8, 0.86, 0.92)
    c.setFillColorRGB(0.96, 0.98, 1.0)
    c.roundRect(left_x, block_bottom, left_w, block_height, 3 * mm, stroke=1, fill=1)

    content_top = block_top - inner_pad
    current_y = content_top
    if img and logo_w > 0 and logo_h > 0:
        avail_w = left_w - 2 * inner_pad
        logo_x = left_x + inner_pad + max((avail_w - logo_w) / 2, 0)
        logo_y = current_y - logo_h
        c.drawImage(img, logo_x, logo_y, width=logo_w, height=logo_h, mask="auto")
        current_y = logo_y - (2 * mm if detail_height > 0 else 0)
    center_x = left_x + left_w / 2
    current_baseline = current_y - (heading_font if heading else body_font)
    if heading:
        c.setFont("Helvetica-Bold", heading_font)
        c.setFillColorRGB(*accent)
        c.drawCentredString(center_x, current_baseline, heading)
        current_baseline -= heading_leading
    c.setFillColorRGB(0, 0, 0)
    c.setFont("Helvetica", body_font)
    for line in detail_lines:
        c.drawCentredString(center_x, current_baseline, line)
        current_baseline -= body_leading

    meta_pad = 4 * mm
    meta_font = 11
    meta_leading = max(meta_font * 1.45, 4.8 * mm)
    legal_labels = {"SIREN", "SIRET", "APE", "TVA intracom", "Attestation décennale"}
    legal_map = {}
    filtered_meta = []
    for (label, value) in meta_items:
        if label in legal_labels:
            legal_map[label] = value
            continue
        filtered_meta.append((label, value))
    company_siren = company.get("siren") or company.get("entreprise_siren")
    siren_value = legal_map.get("SIREN") or company_siren
    siret_value = legal_map.get("SIRET")
    used_siren_as_siret = False
    if (siret_value is None or siret_value == "") and siren_value:
        siret_value = siren_value
        used_siren_as_siret = True
    if siret_value:
        legal_map["SIRET"] = siret_value
    else:
        legal_map.pop("SIRET", None)
    if used_siren_as_siret:
        legal_map.pop("SIREN", None)
    legal_items = []
    for label in ("SIREN", "SIRET", "APE", "TVA intracom", "Attestation décennale"):
        value = legal_map.get(label)
        if value:
            legal_items.append((label, value))
    meta_items = filtered_meta
    all_items = meta_items + legal_items
    meta_labels = [f"{k} :" for k, _ in all_items]
    label_width = 0
    for label in meta_labels:
        label_width = max(label_width, c.stringWidth(label, "Helvetica-Bold", 10))
    meta_rows = len(meta_items)
    meta_height = (
        meta_rows * meta_leading + 2 * meta_pad
        if meta_rows > 0
        else (2 * meta_pad + meta_leading)
    )
    meta_bottom = block_top - meta_height
    c.setStrokeColorRGB(0.8, 0.86, 0.92)
    c.setFillColorRGB(0.96, 0.98, 1.0)
    c.roundRect(right_x, meta_bottom, right_w, meta_height, 3 * mm, stroke=1, fill=1)
    text_y = block_top - meta_pad - meta_font

    def _draw_meta_row(label, value, y):
        label_txt = f"{label} :"
        c.setFont("Helvetica-Bold", 10)
        c.setFillColorRGB(*accent)
        c.drawString(right_x + meta_pad, y, label_txt)
        val = "" if value is None else str(value)
        c.setFont("Helvetica", meta_font)
        c.setFillColorRGB(0, 0, 0)
        c.drawString(right_x + meta_pad + label_width + 2 * mm, y, val)

    for (label, value) in meta_items:
        _draw_meta_row(label, value, text_y)
        text_y -= meta_leading
    lowest_right = meta_bottom
    if legal_items:
        gap = 3 * mm
        legal_title = "Identifiants légaux de l'émetteur"
        title_font = 12
        title_leading = title_font * 1.2
        legal_height = (
            2 * meta_pad
            + title_leading
            + (len(legal_items) * meta_leading if legal_items else 0)
        )
        legal_top = meta_bottom - gap
        legal_bottom = legal_top - legal_height
        c.setStrokeColorRGB(0.8, 0.86, 0.92)
        c.setFillColorRGB(0.96, 0.98, 1.0)
        c.roundRect(right_x, legal_bottom, right_w, legal_height, 3 * mm, stroke=1, fill=1)
        title_y = legal_top - meta_pad - title_font
        c.setFont("Helvetica-Bold", title_font)
        c.setFillColorRGB(*accent)
        c.drawString(right_x + meta_pad, title_y, legal_title)
        text_y = title_y - meta_leading
        for (label, value) in legal_items:
            _draw_meta_row(label, value, text_y)
            text_y -= meta_leading
        lowest_right = min(lowest_right, legal_bottom)

    c.setFillColorRGB(0, 0, 0)
    c.setStrokeColorRGB(0, 0, 0)
    return min(block_bottom, lowest_right) - 6 * mm


def _stacked_header(c, kind, company, meta_items, logo_path, margin=10*mm, title_size=42):
    return _render_dev_fact_header(c, kind, company, meta_items, logo_path, margin, title_size)
def _info_box(c, x, y_top, w, title, lines):
    accent=_rgb(ACCENT)
    c.setStrokeColorRGB(0.8,0.86,0.92); c.setLineWidth(1)
    h = 10*mm + len(lines)*5*mm + 6
    y = y_top - h
    c.setFillColorRGB(0.96,0.98,1.0); c.roundRect(x, y, w, h, 3*mm, stroke=1, fill=1)
    c.setFont("Helvetica-Bold", 12); c.setFillColorRGB(*accent)
    tw=c.stringWidth(title, "Helvetica-Bold", 12); c.drawString(x+(w-tw)/2, y_top-6.5*mm, title)
    c.setFillColorRGB(0,0,0); c.setFont("Helvetica", 10); cy=y_top-13*mm
    for line in lines: c.drawString(x+4*mm, cy, line); cy -= 5*mm
    return y
def _subject_bar(c, y_top, text, margin, base_h=11*mm):
    # Objet multi-ligne avec hauteur dynamique, pousse le tableau d'autant
    W,H = c._pagesize; x=margin; w=W-2*margin
    full = f"Objet : {text}" if text else "Objet :"
    c.setFont("Helvetica-Bold", 12)
    lines = _wrap(c, full, w-12*mm, 12, "Helvetica-Bold")
    line_h = 5.6*mm
    h = max(base_h, 4*mm + len(lines)*line_h + 4*mm)
    y = y_top - h
    c.setStrokeColorRGB(0.8,0.86,0.92); c.setFillColorRGB(0.96,0.98,1.0); c.setLineWidth(1)
    c.roundRect(x, y, w, h, 3*mm, stroke=1, fill=1)
    # vertical center
    accent=_rgb(ACCENT); c.setFillColorRGB(*accent); c.setFont("Helvetica-Bold", 12)
    first_y = y + (h - len(lines)*line_h)/2 + 1.6*mm
    for i,s in enumerate(lines):
        tw=c.stringWidth(s,"Helvetica-Bold",12); c.drawString(x+(w-tw)/2, first_y + (len(lines)-1-i)*line_h, s)
    return y - 7*mm
def _measure_numeric(c, header, values, size=11, pad=6*mm, font="Helvetica"):
    w = c.stringWidth(header, font, size)
    for v in values: w = max(w, c.stringWidth(str(v), font, size))
    return w + pad
def _draw_col_header(c, x, width, band_top_y, text, size=11, band_h=8*mm):
    tw = c.stringWidth(text, "Helvetica-Bold", size); x_text = x + (width - tw)/2
    baseline = band_top_y - (band_h - size)/2 - (size*0.42)  # centrage visuel
    c.setFont("Helvetica-Bold", size); c.drawString(x_text, baseline, text)
# --------------------- Devis / Facture ---------------------
def _render_dev_fact(kind, doc, logo_path, params):
    # Row baseline padding (mm): 3.5mm for better vertical centering on DEVIS/FACTURE
    kind_upper = (kind or '').strip().upper()
    row_pad = 3.5*mm if kind_upper.startswith(('DEVIS','FACTURE')) else 2*mm
    margin = (params.get("margin_mm",10))*mm
    buf = None if params.get("out_path") else io.BytesIO()
    c = _NumberedCanvas(params.get("out_path") or buf, pagesize=A4); c._footer_margin=margin
    company = params.get("company", {})
    
    if kind.lower()=="devis":
        _client_meta = (doc.get("client_code") or (doc.get("customer",{}) or {}).get("code") or doc.get("client_id") or doc.get("client") or doc.get("client_nom") or "")
        meta=[("Devis n°", doc.get("numero","")), ("Date", _date_fr(doc.get("date",""))), ("Client", _client_meta)]
    else:
        _client_meta = (doc.get("client_code") or (doc.get("customer",{}) or {}).get("code") or doc.get("client_id") or doc.get("client") or doc.get("client_nom") or "")
        meta=[("Facture n°", doc.get("numero","")), ("Date", _date_fr(doc.get("date",""))), ("Client", _client_meta)]
    legal_meta = []
    company_siren = company.get("siren") or company.get("entreprise_siren")
    for label, keys in [
        ("SIREN", ("siren", "entreprise_siren")),
        ("SIRET", ("siret", "entreprise_siret")),
        ("APE", ("ape", "entreprise_ape")),
        ("TVA intracom", ("tva_intracom", "tva", "entreprise_tva")),
        ("Attestation décennale", ("assurance_decennale", "entreprise_assurance_decennale")),
    ]:
        value = None
        for key in keys:
            value = company.get(key)
            if value:
                break
        if value or (label == "SIRET" and company_siren):
            legal_meta.append((label, value))
    meta.extend(legal_meta)
    sit_info = _get_situation_info(doc, include_rank=True)
    ref_val = str(doc.get("doc_reference") or "").strip()
    if ref_val:
        meta.insert(1, ("Réf. devis/marché", ref_val))
    
    if sit_info.get("is_situation"):
        try:
            legal_num = doc.get("_numero_legal") or doc.get("numero") or ""
        except Exception:
            legal_num = str(doc.get("numero") or "")
        try:
            fact_dir = DOCS_DIRS.get("factures") if isinstance(DOCS_DIRS, dict) else DOCS_DIRS["factures"]
        except Exception:
            fact_dir = os.path.join(DATA_DIR, "factures")
        label = _situ_display_label(doc, sit_info, legal=legal_num, factures_dir=fact_dir, ui_offset=-1)
        meta.append(("Situation", label))
    y = _stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
    # Cartes : Paiement (gauche) / Client (droite)
    W,H = c._pagesize
    left_w = (W-2*margin)/2 - 2*mm; right_w = left_w
    cust = doc.get("customer",{})
    if not cust or not (cust.get("nom") or cust.get("adresse") or cust.get("email")):
        cust = {
            "civ": doc.get("client_civ",""),
            "prenom": doc.get("client_prenom",""),
            "nom": doc.get("client_nom",""),
            "code": doc.get("client_code") or doc.get("client_id") or "",
            "adresse": doc.get("client_adresse",""),
            "cp": doc.get("client_cp",""),
            "ville": doc.get("client_ville",""),
            "tel": str(doc.get("client_tel","")),
            "email": doc.get("client_email",""),
        }
    # --- CIV in PDF (from clients_master.json) + address/contacts
    try:
        _kmail = _norm_key_client((doc.get("client_email") or "").strip())
        _master = _load_clients_master()
        _rec = _master.get(_kmail, {}) if isinstance(_master, dict) else {}
        _civ_pdf = normalize_civilite(_rec.get("civilite",""))
    except Exception:
        _civ_pdf = "—"
    _nom_pdf = (cust.get("nom","") or "").strip()
    _pre_pdf = (cust.get("prenom","") or "").strip()
    if _civ_pdf in ("M.","Mme") and _nom_pdf:
        _first = f"{_civ_pdf} {_nom_pdf} {_pre_pdf}".strip()
    else:
        _first = f"{_pre_pdf} {_nom_pdf}".strip()
    client_lines = [_first]
    for ln in [cust.get("adresse",""), f"{cust.get('cp','')} {cust.get('ville','')}".strip(),
               " • ".join([cust.get("tel",""), cust.get("email","")]).strip(" •")]:
        if ln: client_lines.append(ln)
    pay = company
    pay_lines = []
    if pay.get("banque"): pay_lines.append(f"Banque : {pay.get('banque')}")
    if pay.get("iban"):   pay_lines.append(f"IBAN : {pay.get('iban')}")
    if pay.get("bic"):    pay_lines.append(f"BIC : {pay.get('bic')}")
    pay_lines.append("Mode : Virement bancaire (privilégié)")
    y_pay = _info_box(c, margin, y, left_w, "Coordonnées de paiement", pay_lines)
    y_client = _info_box(c, margin + left_w + 4*mm, y, right_w, "Coordonnées du client", client_lines)
    y = min(y_client, y_pay) - 4*mm
    # Barre Objet
    y = _subject_bar(c, y, doc.get("objet",""), margin, 11*mm)
    # Tableau
    lines = doc.get("lignes",[])
    x = margin; table_w = W-2*margin
    headers = ["Réf","Désignation","Qté","PU HT","TVA","Total HT"]
    body_size = params.get("body_size",11); pad=6*mm
    c.setFont("Helvetica", body_size)
    qty_vals = [f"{float(l.get('qte',1)):.2f}" for l in lines]
    pu_vals  = [f"{float(l.get('pu_ht',0)):.2f}" for l in lines]
    tva_vals = [f"{int(round(float(l.get('tva', l.get('tva_pct',0.2))*100)))}" for l in lines]
    tot_vals = [f"{float(l.get('qte',1))*float(l.get('pu_ht',0)):.2f}" for l in lines]
    w_qte = _measure_numeric(c,"Qté", qty_vals, body_size, pad)
    w_pu  = _measure_numeric(c,"PU HT", pu_vals, body_size, pad)
    w_tva = _measure_numeric(c,"TVA", tva_vals, body_size, pad)
    w_tot = _measure_numeric(c,"Total HT", tot_vals, body_size, pad)
    ref_vals = [str(l.get("ref") or l.get("reference") or l.get("code") or "") for l in lines]
    _w_candidates = [c.stringWidth(t,"Helvetica",body_size) for t in (["Réf"] + ref_vals)]
    w_ref = max(18*mm, min(24*mm, (max(_w_candidates) if _w_candidates else 0) + pad))
    fixed = w_qte+w_pu+w_tva+w_tot+w_ref
    w_des = max(90*mm, table_w-fixed)
    colw = [w_ref,w_des,w_qte,w_pu,w_tva,w_tot]
    xcol = [x]
    for w in colw[:-1]: xcol.append(xcol[-1]+w)
    # Titre + bande d'entête
    accent=_rgb(ACCENT)
    c.setFont("Helvetica-Bold", body_size+1); c.setFillColorRGB(*accent); c.drawString(x, y, "Détail")
    y -= 5*mm
    band_h = 8*mm
    c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
    c.setFillColorRGB(1,1,1)
    for i,h in enumerate(headers):
        _draw_col_header(c, xcol[i], colw[i], y, h, size=body_size, band_h=band_h)
    y -= band_h + 4*mm
    # Lignes
    line_h = 5.8*mm; c.setFont("Helvetica", body_size); c.setFillColorRGB(0,0,0)
    bottom_guard = 16*mm
    first_row_on_page = True
    for idx,L in enumerate(lines):
        # _AE_PARA_START: non-facturable paragraph types
        lt = (L.get("ligne_type") or L.get("type") or "").strip().lower()
        if lt in ("titre","sous-titre","texte","espace"):
            # compute available width for designation
            avail_w = colw[1]-4*mm
            if lt == "espace":
                y -= 6*mm
                continue
            if lt == "titre":
                title = L.get("designation","").strip()
                if not title: title = " "
                c.setFont("Helvetica-Bold", 11); lines_t = _wrap(c, title, avail_w, 11, "Helvetica-Bold")
                th = max(line_h, 6.2*mm*len(lines_t))
                # page break guard
                if y - th < margin + bottom_guard:
                    c.showPage()
                    y = _stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
                    c.setFont("Helvetica-Bold", body_size+1); c.setFillColorRGB(*accent); c.drawString(x, y, "Détail (suite)")
                    y -= 5*mm
                    c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
                    c.setFillColorRGB(1,1,1)
                    for i,h in enumerate(headers): _draw_col_header(c, xcol[i], colw[i], y, h, size=body_size, band_h=band_h)
                    y -= band_h + 4*mm
                # background (light)
                c.saveState()
                c.setFillColorRGB(0.96,0.98,1.0); c.rect(x, y-th+1, table_w, th, stroke=0, fill=1); c.restoreState()
                # text
                c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 11)
                dy=0
                for s in lines_t:
                    c.drawString(xcol[1]+2*mm, y - 2.0*mm - dy, s)
                    dy += 5.8*mm
                y -= th
                continue
            if lt == "sous-titre":
                st = L.get("designation","").strip() or " "
                c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 10)
                lines_s = _wrap(c, st, avail_w, 10, "Helvetica-Bold")
                th = 5.8*mm*len(lines_s) + 2*mm
                if y - th < margin + bottom_guard:
                    c.showPage()
                    y = _stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
                    c.setFont("Helvetica-Bold", body_size+1); c.setFillColorRGB(*accent); c.drawString(x, y, "Détail (suite)")
                    y -= 5*mm
                    c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
                    c.setFillColorRGB(1,1,1)
                    for i,h in enumerate(headers): _draw_col_header(c, xcol[i], colw[i], y, h, size=body_size, band_h=band_h)
                    y -= band_h + 4*mm
                dy=0
                for s in lines_s:
                    c.drawString(xcol[1]+2*mm, y - 2.0*mm - dy, s)
                    dy += 5.8*mm
                y -= (dy + 1.2*mm)
                continue
            if lt == "texte":
                indent = _safe_float(L.get("indent_mm", 6.0), 6.0) * mm
                text = (L.get("designation","") or "").strip()
                bullet = bool(L.get("bullet", True)) or (text.startswith("•"))
                if text.startswith("•"): text = text[1:].lstrip()
                para_w = max(10*mm, avail_w - indent)
                c.setFont("Helvetica", 9.5)
                chunk = ("• " if bullet else "") + text
                lines_p = _wrap(c, chunk, para_w, 9.5, "Helvetica")
                th = 5.6*mm*len(lines_p) + 1.6*mm
                if y - th < margin + bottom_guard:
                    c.showPage()
                    y = _stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
                    c.setFont("Helvetica-Bold", body_size+1); c.setFillColorRGB(*accent); c.drawString(x, y, "Détail (suite)")
                    y -= 5*mm
                    c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
                    c.setFillColorRGB(1,1,1)
                    for i,h in enumerate(headers): _draw_col_header(c, xcol[i], colw[i], y, h, size=body_size, band_h=band_h)
                    y -= band_h + 4*mm
                dy=0
                for s in lines_p:
                    c.drawString(xcol[1]+2*mm + indent, y - 2.0*mm - dy, s)
                    dy += 5.6*mm
                y -= (dy + 1.6*mm)
                continue
        # _AE_PARA_END

        des_lines = _wrap_smart_hyphen(c, L.get("designation",""), colw[1]-4*mm, body_size)
        ref_lines = _wrap_smart_hyphen(c, str(L.get("ref","")), colw[0]-4*mm, body_size)
        height = max(line_h*max(1,len(des_lines)), line_h*max(1,len(ref_lines)))
        if y - height < margin + bottom_guard:
            c.showPage()
            y = _stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
            # (suite)
            c.setFont("Helvetica-Bold", body_size+1); c.setFillColorRGB(*accent); c.drawString(x, y, "Détail (suite)")
            y -= 5*mm
            c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
            c.setFillColorRGB(1,1,1)
            for i,h in enumerate(headers):
                _draw_col_header(c, xcol[i], colw[i], y, h, size=body_size, band_h=band_h)
            y -= band_h + 4*mm
            first_row_on_page = True
        # fond blanc et quadrillage léger pour rappeler la maquette
        c.setFillColorRGB(1,1,1)
        c.rect(x, y-height+1, table_w, height, stroke=0, fill=1)
        c.setStrokeColorRGB(0.88,0.9,0.93); c.setLineWidth(0.4)
        if first_row_on_page or idx == 0:
            c.line(x, y+0.8*mm, x+table_w, y+0.8*mm)
        c.line(x, y-height+1, x+table_w, y-height+1)
        for _xi in xcol[1:]:
            c.line(_xi, y-1, _xi, y-height+1)
        c.setStrokeColorRGB(0,0,0); c.setLineWidth(1); c.setFillColorRGB(0,0,0)
        first_row_on_page = False
        c.drawString(xcol[0]+2*mm, y - row_pad, ref_lines[0] if ref_lines else "")
        if len(ref_lines)>1: c.drawString(xcol[0]+2*mm, y - row_pad - line_h, ref_lines[1])
        dy=0
        for i, s in enumerate(des_lines):
            # justify all but last line and lines ending with hyphen
            if i < len(des_lines)-1 and (' ' in s) and not s.rstrip().endswith('-'):
                _draw_justified_line(c, s, xcol[1]+2*mm, y - row_pad-dy, colw[1]-4*mm, "Helvetica", body_size)
            else:
                c.drawString(xcol[1]+2*mm, y - row_pad-dy, s)
            dy += line_h
        # numerics right-aligned
        def _rr(col, s):
            tw=c.stringWidth(s, "Helvetica", body_size)
            c.drawString(xcol[col]+colw[col]-2*mm - tw, y - row_pad, s)
        _rr(2, f"{float(L.get('qte',1)):.2f}")
        _rr(3, f"{float(L.get('pu_ht',0)):.2f}")
        _rr(4, f"{int(round(float(L.get('tva', L.get('tva_pct',0.2))*100)))}%")
        tot = L.get("total_ht", float(L.get("qte",1))*float(L.get("pu_ht",0)))
        _rr(5, f"{float(tot):.2f}")

        y -= height
    # Récap
    ht  = sum(float(L.get("total_ht", float(L.get("qte",1))*float(L.get("pu_ht",0)))) for L in lines)
    tva = sum(float(L.get("tva", L.get("tva_pct", 0.2))) * float(L.get("qte", 1)) * float(L.get("pu_ht", 0)) for L in lines)
    ttc = ht + tva
    items=[("Total HT", ht), ("Total TVA", tva), ("Total TTC", ttc)]
    # Robust detection for Situation documents
    is_situation_pdf = False
    try:
        t = str((doc or {}).get("type","")).strip().lower()
        is_situation_pdf = (t == "situation")
    except Exception:
        pass
    try:
        if not is_situation_pdf:
            for _k in ("situation_current_ttc","situation_prev_ttc","situation_index","situation_percent","situation_total_count"):
                if (doc or {}).get(_k) not in (None, "", 0, 0.0):
                    is_situation_pdf = True
                    break
    except Exception:
        pass
    acompte = doc.get("acompte", None)
    if acompte is not None:
        try:
            acompte = float(acompte) or 0.0
        except Exception:
            acompte = 0.0
        if is_situation_pdf:
            acompte = 0.0
        # Acompte et Restant dû affichés si un acompte est saisi et document non "situation"
        try:
            if acompte > 0 and not is_situation_pdf:
                items.append(("Acompte", -acompte))
                items.append(("Restant dû", max(ttc - acompte, 0.0)))
        except Exception:
            pass

    box_w=max(colw[3]+colw[4]+colw[5], 70*mm); box_x=x + (table_w - box_w)
    title_h=9*mm; line_h2=6*mm
    height=title_h+len(items)*line_h2+8
    situation_items = []
    # --- Situation amounts for PDF (simple & robust) ---
    try:
        prev_raw = _safe_float((doc or {}).get("situation_prev_ttc", 0.0), 0.0)
    except Exception:
        prev_raw = 0.0
    try:
        curr = _safe_float((doc or {}).get("situation_current_ttc", (doc or {}).get("total_ttc", 0.0)), 0.0)
    except Exception:
        curr = 0.0
    try:
        cumul = _safe_float((doc or {}).get("situation_cumul_ttc", prev_raw + curr), 0.0)
    except Exception:
        cumul = max(prev_raw + curr, 0.0)
    if prev_raw <= 0.0 and cumul > 0.0:
        prev_for_pdf = max(cumul - curr, 0.0)

    else:
        prev_for_pdf = max(prev_raw, 0.0)
    try:
        base_ttc = _safe_float((doc or {}).get("situation_base_ttc", (doc or {}).get("total_ttc", 0.0)), 0.0)
    except Exception:
        base_ttc = 0.0
    reste_calc = max(base_ttc - cumul, 0.0) if base_ttc > 0 else 0.0

    if sit_info.get("is_situation"):
        situation_items = [
            ("Montant précédent", prev_for_pdf),
            ("Montant du présent", curr),
            ("Cumul facturé", cumul),
            ("Reste à facturer", reste_calc),
        ]
    situation_height = title_h + len(situation_items)*line_h2 + 8 if situation_items else 0
    total_needed = height + (situation_height if situation_height else 0)
    if y - total_needed < margin + 14*mm:
        c.showPage(); y=_stacked_header(c, kind.upper(), company, meta, logo_path, margin, params.get("title_size",42))
    c.setStrokeColorRGB(0.8,0.86,0.92); c.setLineWidth(1)
    c.setFillColorRGB(0.96,0.98,1.0); c.roundRect(box_x, y-height, box_w, height, 3*mm, stroke=1, fill=1)
    c.setFont("Helvetica-Bold",12); c.setFillColorRGB(*accent); c.drawString(box_x+4*mm, y - title_h + 3*mm, "Récapitulatif")
    c.setFont("Helvetica",11); c.setFillColorRGB(0,0,0)
    yy=y - title_h - 4
    for name,val in items:
        font = "Helvetica-Bold" if name in ("Total TTC","Restant dû") else "Helvetica"
        c.setFont(font, 11); c.drawString(box_x+4*mm, yy, name)
        tw=c.stringWidth(_eur(val), font, 11)
        c.drawString(box_x+box_w-4*mm - tw, yy, _eur(val))
        yy -= line_h2
    # --- BPA compact (30mm) à gauche du récapitulatif ---
    if kind.lower() == "devis" and not situation_items:
        try:
            _wleft = (table_w - box_w - 6*mm)
            _safety = 2*mm  # marge anti-chevauchement
            _wleft = max(_wleft - _safety, 60*mm)
            if _wleft >= 90*mm:
                _xbpa = x
                _ybpa_top = y
                _h = 30*mm
                _inner = 4*mm; _gap = 8*mm
                # Cadre
                c.saveState()
                c.setLineWidth(1); c.setStrokeColorRGB(0,0,0)
                c.roundRect(_xbpa, _ybpa_top - _h, _wleft, _h, 3*mm, stroke=1, fill=0)
                # Titre centré
                try: c.setFont("Helvetica-Bold", 11.5)
                except: pass
                c.setFillColorRGB(0,0,0)
                _title = "LU ET APPROUVÉ — BON POUR ACCORD"
                _tw = c.stringWidth(_title, "Helvetica-Bold", 11.5)
                c.drawString(_xbpa + (_wleft - _tw)/2, _ybpa_top - 6.5*mm, _title)
                # Deux pavés
                _content_w = max(_wleft - 2*_inner, 60*mm)
                _leftw = max(_content_w * 0.55, 60*mm)
                if _leftw > _content_w - _gap - 60*mm:
                    _leftw = max(_content_w - _gap - 60*mm, 60*mm)
                _rightw = _content_w - _leftw - _gap
                _leftx = _xbpa + _inner
                _boxtop = _ybpa_top - 12*mm
                _boxh  = 12*mm
                c.setFillColorRGB(0.97,0.97,0.97)
                c.rect(_leftx, _boxtop - _boxh, _leftw, _boxh, stroke=1, fill=1)
                c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 9.8)
                c.drawString(_leftx, _boxtop + 2.3*mm, "Signature du client :")
                _rightx = _xbpa + _inner + _leftw + _gap
                c.setFillColorRGB(0.97,0.97,0.97)
                c.rect(_rightx, _boxtop - _boxh, _rightw, _boxh, stroke=1, fill=1)
                c.setFillColorRGB(0,0,0); c.setFont("Helvetica-Bold", 9.6)
                c.drawString(_rightx, _boxtop + 2.3*mm, "Date, Nom et Cachet :")
                # Mention
                c.setFont("Helvetica", 9); c.setFillColorRGB(0.25,0.25,0.25)
                c.drawString(_xbpa + _inner, (_ybpa_top - _h) + -9*mm,
                             "La mention manuscrite « Bon pour accord » et la signature du client valent acceptation du devis.")
                c.restoreState()
        except Exception:
            pass

    if situation_items:
        # Place Situation at left, Recap remains at right.
        _left_w = (table_w - box_w - 6*mm)
        if _left_w >= 60*mm:
            _sx, _sw, _sy = x, _left_w, y
        else:
            _sx, _sw = box_x, box_w
            y -= height + 4*mm
            _sy = y
        c.setStrokeColorRGB(0.8,0.86,0.92); c.setLineWidth(1)
        c.setFillColorRGB(0.96,0.98,1.0); c.roundRect(_sx, _sy - situation_height, _sw, situation_height, 3*mm, stroke=1, fill=1)
        c.setFont("Helvetica-Bold",12); c.setFillColorRGB(*accent); c.drawString(_sx+4*mm, _sy - title_h + 3*mm, "Situation")
        c.setFont("Helvetica",11); c.setFillColorRGB(0,0,0)
        yy = _sy - title_h - 4
        for name, val in situation_items:
            font = "Helvetica-Bold" if "reste" in name.lower() else "Helvetica"
            c.setFont(font, 11); c.drawString(_sx+4*mm, yy, name)
            tw = c.stringWidth(_eur(val), font, 11)
            c.drawString(_sx+_sw-4*mm - tw, yy, _eur(val))
            yy -= line_h2
        y = min(_sy, y) - situation_height
        
        # --- Historique complet des situations facturées (robuste, sans TextObject) ---
        import os as _os
        try:
            _fact_dir = DOCS_DIRS.get("factures") if isinstance(DOCS_DIRS, dict) else DOCS_DIRS["factures"]
        except Exception:
            _fact_dir = _os.path.join(DATA_DIR, "factures")
        _hist = _situ_history_entries(doc, _fact_dir, limit=None)

        _canvas = (locals().get("c") or locals().get("cv") or locals().get("canvas")
                   or locals().get("canv") or locals().get("pdf"))
        if _canvas is not None:
            _canvas.setFont("Helvetica-Bold", 11); _canvas.setFillColorRGB(0,0,0)
            _canvas.drawString(x, y, "Historique des situations facturées"); y -= 6*mm
            _canvas.setFont("Helvetica", 10)

            if not _hist:
                pass
            else:
                for (_legal_num, _date_str, _amount_str) in _hist:
                    _line = _legal_num
                    if _date_str:
                        _line += f" — {_date_str}"
                    if _amount_str:
                        _line += f"    {_amount_str}"
                    _canvas.drawString(x, y, _line); y -= 5*mm
        # -------------------------------------------------------------------------------
    
    # Pied de page — alimenter c._footer_text (le canvas le dessinera en bas à gauche)
    txt = (params.get("pied_devis") if kind.lower()=="devis" else params.get("pied_facture")) or ""
    if not txt:
        # Fallback minimal depuis les infos entreprise
        parts=[]; comp=company
        if comp.get("banque"): parts.append(f"Banque : {comp.get('banque')}")
        if comp.get("iban"):   parts.append(f"IBAN : {comp.get('iban')}")
        if comp.get("bic"):    parts.append(f"BIC : {comp.get('bic')}")
        leg=[]
        if comp.get("siret"): leg.append(f"SIRET : {comp.get('siret')}")
        if comp.get("ape"):   leg.append(f"APE : {comp.get('ape')}")
        if comp.get("tva"):   leg.append(f"TVA : {comp.get('tva')}")
        if leg: parts.append(" • ".join(leg))
        addr = " • ".join([comp.get("adresse",""), f"{comp.get('cp','')} {comp.get('ville','')}".strip()]).strip(" • ")
        if addr: parts.append(addr)
        contact = " • ".join([comp.get("tel",""), comp.get("email","")]).strip(" • ")
        if contact: parts.append(contact)
        txt = "\n".join([p for p in parts if p])
    if txt:
        for k, v in company.items():
            up=k.upper();
            txt = txt.replace("{COMPANY_"+up+"}", str(v))
            txt = txt.replace("{"+up+"}", str(v))
        c._footer_text = txt
        c._footer_font = "Helvetica"
        c._footer_size = 9
    c.showPage(); c.save()
    
    return params.get("out_path") or buf.getvalue()
# --------------------- URSSAF (paysage) ---------------------
def _validated_generate_urssaf_pdf(rows, periode, generated_on, logo_path, params):
    import io
    row_pad_ur = 3.5*mm  # vertical baseline padding for URSSAF rows
    margin = (params.get("margin_mm",10))*mm
    buf = None if params.get("out_path") else io.BytesIO()
    c = _NumberedCanvas(params.get("out_path") or buf, pagesize=landscape(A4)); c._footer_margin=margin
    company = params.get("company", {})
    # Header
    y = _stacked_header(c, "DÉCLARATION URSSAF", company,
                        [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                        logo_path, margin, params.get("title_size",42))
    W,H = c._pagesize; x=margin; table_w=W-2*margin
    # fine separator below header
    try:
        c.setLineWidth(0.5)
        c.setStrokeColorRGB(0.85,0.85,0.85)
        c.line(params.get("margin_mm",10)*mm, y-3*mm, W-params.get("margin_mm",10)*mm, y-3*mm)
        c.setStrokeColorRGB(0,0,0)
    except Exception:
        pass
    W,H = c._pagesize; x=margin; table_w=W-2*margin
    headers = [h.upper() for h in ["Date","Facture n°","Client","Objet","Pièces HT","Main d’œuvre HT","Total HT"]]
    c.setFont("Helvetica", 12); pad=6*mm
    vals_p=[f"{_urssaf_unpack_row(r)[4]:.2f}" for r in rows]
    vals_m=[f"{_urssaf_unpack_row(r)[5]:.2f}" for r in rows]
    vals_t=[f"{_urssaf_unpack_row(r)[6]:.2f}" for r in rows]
    def m(header, vals):
        w=c.stringWidth(header,"Helvetica",12)
        for v in vals: w=max(w, c.stringWidth(v, "Helvetica", 12))
        return w + pad
    wP,wM,wT=m(headers[4],vals_p), m(headers[5],vals_m), m(headers[6],vals_t)
    wD=max(c.stringWidth(headers[0],"Helvetica",12)+pad, 24*mm)
    wF=max(c.stringWidth(headers[1],"Helvetica",12)+pad, 30*mm)
    fixed=wD+wF+wP+wM+wT
    leftover=table_w - fixed
    min_cli, min_obj = 40*mm, 68*mm
    if leftover < (min_cli+min_obj):
        min_obj = max(40*mm, leftover - min_cli)
    wC=min_cli; wO=leftover - wC if leftover>0 else min_obj
    colw=[wD,wF,wC,wO,wP,wM,wT]
    xcol=[x]
    for w in colw[:-1]: xcol.append(xcol[-1]+w)
    # Header band
    band_h=8*mm; accent=_rgb(ACCENT)
    c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
    c.setFillColorRGB(1,1,1)
    for i,h in enumerate(headers):
        _draw_col_header(c, xcol[i], colw[i], y, h, size=12, band_h=band_h)
    y -= band_h + 4*mm
    # Rows
    c.setFont("Helvetica", 12); line_h=6.0*mm; zebra=False
    totP=totM=totT=0.0
    for r in rows:
        d,f,cli,obj,p,mo,t = _urssaf_unpack_row(r)
        cli_lines=_wrap(c, cli, colw[2]-4*mm, 12)
        obj_lines=_wrap(c, obj, colw[3]-4*mm, 12)
        height=max(line_h*len(cli_lines), line_h*len(obj_lines), line_h)
        if y - height < margin + 22*mm:
            c.showPage()
            y = _stacked_header(c, "DÉCLARATION URSSAF", company,
                                [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                                logo_path, margin, params.get("title_size",42))
            c.setFillColorRGB(*accent); c.rect(x, y-band_h, table_w, band_h, stroke=0, fill=1)
            c.setFillColorRGB(1,1,1)
            for i,h in enumerate(headers):
                _draw_col_header(c, xcol[i], colw[i], y, h, size=12, band_h=band_h)
            y -= band_h + 4*mm; c.setFont("Helvetica", 12)
        c.setStrokeColorRGB(0.85,0.85,0.85); c.setLineWidth(0.5)
        if zebra:
            c.setFillColorRGB(0.98,0.98,0.98)
            c.rect(x, y-height+1, table_w, height, stroke=1, fill=1)
        else:
            c.setFillColorRGB(1,1,1)
            c.rect(x, y-height+1, table_w, height, stroke=1, fill=1)
        c.setFillColorRGB(0,0,0)
        try:
            for _xi in xcol[1:]:
                c.line(_xi, y-1, _xi, y-height+1)
        except Exception:
            pass
        zebra = not zebra
        c.drawString(xcol[0]+2*mm, y - row_pad_ur, d)
        c.drawString(xcol[1]+2*mm, y - row_pad_ur, f)
        dy=0
        for s in cli_lines: c.drawString(xcol[2]+2*mm, y - row_pad_ur-dy, s); dy+=line_h
        dy=0
        for s in obj_lines: c.drawString(xcol[3]+2*mm, y - row_pad_ur-dy, s); dy+=line_h
        # right aligned numeric
        def _rr(col, v):
            s=f"{float(v):.2f}".replace(".", ",")
            tw=c.stringWidth(s, "Helvetica", 12)
            c.drawString(xcol[col]+colw[col]-2*mm - tw, y - row_pad_ur, s)
        _rr(4,p); _rr(5,mo); _rr(6,t)
        y -= height
        totP += float(p); totM += float(mo); totT += float(t)
    # Recap
    box_h=16*mm
    if y - box_h < margin + 12*mm:
        c.showPage()
        y = _stacked_header(c, "DÉCLARATION URSSAF", company,
                            [("Période", str(periode)), ("Généré le", _date_fr(generated_on))],
                            logo_path, margin, params.get("title_size",42))
    
    def _rec(ix, lab, val):
        s=_eur(val); tw=c.stringWidth(s,"Helvetica-Bold",12)
        c.setFont("Helvetica",12); c.drawString(xcol[ix], y-11*mm, lab)
        c.setFont("Helvetica-Bold",12); c.drawString((xcol[ix] + colw[ix]) - 2*mm - tw, y-11*mm, s)
    c.setFont("Helvetica-Bold",15); c.setFillColorRGB(0,0,0)
    # light border around recap
    try:
        x0 = params.get("margin_mm",10)*mm
        y0 = y-18*mm
        w = W-2*x0
        h = 28*mm
        c.setLineWidth(0.5)
        c.setStrokeColorRGB(0.88,0.9,0.93)
        c.rect(x0, y0-h, w, h, fill=0)
        c.setStrokeColorRGB(0,0,0)
    except Exception:
        pass
    # ##__RECAP_BORDER__
    right_edge = x0 + w - 3*mm
    # three lines stacked at right
    y1 = y0 - 8*mm; y2 = y0 - 14*mm; y3 = y0 - 20*mm
    def _right_pair(yline, label, value):
        val = _eur(value)
        c.setFont("Helvetica-Bold",12); c.drawRightString(right_edge, yline, val)
        tw = c.stringWidth(val, "Helvetica-Bold", 12)
        c.setFont("Helvetica",12); c.drawRightString(right_edge - 2*mm - tw, yline, label)
    _right_pair(y1, "Total Pièces HT", totP)
    _right_pair(y2, "Total Main d’œuvre HT", totM)
    _right_pair(y3, "Total HT", totT)
    # URSSAF — MO + Pièces (total)
    try:
        rate_m = float(params.get("urssaf_rate", 0.22) or 0.0)
    except Exception:
        rate_m = 0.22
    try:
        rate_p = float(params.get("urssaf_rate_pieces", rate_m) or rate_m)
    except Exception:
        rate_p = rate_m
    cot_m = max(totM, 0.0) * max(rate_m, 0.0)
    cot_p = max(totP, 0.0) * max(rate_p, 0.0)
    cot_total = cot_m + cot_p
    c.setFont("Helvetica-Bold", 12); c.setFillColorRGB(*accent)
    s_txt = (
        f"URSSAF — MO ({int(round(rate_m*100))}%) : " + _eur(cot_m)
        + "   •   Pièces (" + str(int(round(rate_p*100))) + "%) : " + _eur(cot_p)
        + "   •   Total : " + _eur(cot_total)
    )
    cx = x + table_w/2.0
    cy = y - (box_h/2.0) - 2
    c.drawCentredString(cx, cy, s_txt)
    c.setFillColorRGB(0,0,0)
    c.setFillColorRGB(0,0,0)
    c.showPage(); c.save()
    return params.get("out_path") or buf.getvalue()
# === End embedded validated renderer ===
def log_error(msg):
    try:
        with open(LOG_FILE,"a",encoding="utf-8") as f:
            f.write(f"=== {datetime.now().isoformat()} ===\n{msg}\n\n")
    except Exception:
        pass
def _safe_float(x, default=0.0):
    try:
        if x is None: return float(default)
        s = str(x).strip().replace(",", ".")
        return float(s) if s else float(default)
    except Exception:
        return float(default)
# --- Recherche tolérante (accents, casse, multi-mots) --------------------
def _normalize_search_text(text: str) -> str:
    """Normalise une chaîne pour la recherche plein-texte tolérante."""
    try:
        import unicodedata
        text = unicodedata.normalize("NFKD", str(text or ""))
        text = "".join(c for c in text if not unicodedata.combining(c))
    except Exception:
        text = str(text or "")
    text = text.replace("œ", "oe").replace("Œ", "oe").replace("æ", "ae").replace("Æ", "ae").lower()
    try:
        import re as _re
        text = _re.sub(r"[^0-9a-z]+", " ", text)
    except Exception:
        pass
    return " ".join(text.split())

def _search_tokens(query: str):
    tokens = []
    try:
        tokens = _normalize_search_text(query).split()
    except Exception:
        tokens = []
    return tokens

def _search_match_tokens(tokens, texts) -> bool:
    if not tokens:
        return True
    try:
        haystack = _normalize_search_text(" ".join(str(t or "") for t in texts))
    except Exception:
        haystack = ""
    if not haystack:
        return False
    return all(tok in haystack for tok in tokens)

def _gather_table_row_texts(table, row: int, columns=None):
    texts = []
    if table is None:
        return texts
    try:
        if columns is None:
            rng = range(table.columnCount())
        else:
            rng = list(columns)
    except Exception:
        return texts
    for col in rng:
        try:
            item = table.item(row, col)
        except Exception:
            item = None
        if item and hasattr(item, "text"):
            try:
                texts.append(item.text())
            except Exception:
                pass
            continue
        try:
            widget = table.cellWidget(row, col)
        except Exception:
            widget = None
        if widget and hasattr(widget, "currentText"):
            try:
                texts.append(widget.currentText())
            except Exception:
                pass
        elif widget and hasattr(widget, "text"):
            try:
                texts.append(widget.text())
            except Exception:
                pass
    return texts

def _filter_table_by_tokens(table, tokens, columns=None):
    if table is None:
        return
    try:
        rc = table.rowCount()
    except Exception:
        rc = 0
    if not rc:
        return
    if not tokens:
        for r in range(rc):
            try:
                table.setRowHidden(r, False)
            except Exception:
                pass
        return
    for r in range(rc):
        try:
            texts = _gather_table_row_texts(table, r, columns)
            visible = _search_match_tokens(tokens, texts)
            table.setRowHidden(r, not visible)
        except Exception:
            pass
# --- Situation helpers ----------------------------------------------------
def _row_operation_lookup(row: dict, default: str) -> str:
    """Retourne l'identifiant d'opération fiable pour une facture donnée."""
    try:
        fn = globals().get("_row_operation_id")
        if callable(fn):
            try:
                val = str(fn(row, default) or "").strip()
            except Exception:
                val = ""
            if val:
                return val
    except Exception:
        pass
    for key in ("operation_id", "operation"):
        try:
            val = str(row.get(key) or "").strip()
        except Exception:
            val = ""
        if val:
            return val
    try:
        anchor = _situ_parent_key(row)  # type: ignore[name-defined]
        if anchor:
            return str(anchor).strip()
    except Exception:
        pass
    return default
def _compute_situation_rank(doc: dict, info: dict, *, all_factures=None, tolerance: float = 0.01):
    try:
        prev = float(info.get("prev", 0.0) or 0.0)
    except Exception:
        prev = _safe_float(info.get("prev", 0.0), 0.0)
    try:
        parent_anchor = _situ_parent_key(doc)  # type: ignore[name-defined]
    except Exception:
        parent_anchor = ""
    op_id = str((doc or {}).get("operation_id") or "").strip()
    if not op_id:
        try:
            fn = globals().get("_op_compute_operation_id")
            if callable(fn):
                op_id = str(fn(doc, "facture") or "").strip()
        except Exception:
            op_id = ""
    if not op_id:
        op_id = str((doc or {}).get("numero") or "").strip()
    if not (op_id or parent_anchor):
        return None
    numero = str((doc or {}).get("numero") or "").strip()
    op_keys = {k for k in (op_id, parent_anchor) if k}
    if not op_keys and numero:
        op_keys.add(numero)
    rows = all_factures
    if rows is None:
        try:
            rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        except Exception:
            rows = []
    count = 0
    tol_pct = 0.0001
    for row in rows or []:
        try:
            num_row = str(row.get("numero") or "").strip()
        except Exception:
            num_row = ""
        if numero and num_row == numero:
            continue
        row_key = _row_operation_lookup(row, "")
        if not row_key:
            try:
                row_key = _situ_parent_key(row)  # type: ignore[name-defined]
            except Exception:
                row_key = ""
        if not row_key:
            try:
                row_key = str(row.get("numero") or "").strip()
            except Exception:
                row_key = ""
        if op_keys and (not row_key or row_key not in op_keys):
            continue
        r_prev = _safe_float(row.get("situation_prev_ttc", 0.0), 0.0)
        r_cur = _safe_float(row.get("situation_current_ttc", row.get("total_ttc", 0.0)), 0.0)
        r_cumul = _safe_float(row.get("situation_cumul_ttc", r_prev + r_cur), 0.0)
        r_pct = _safe_float(row.get("situation_pct", 0.0), 0.0)
        has_situation = (r_prev > tolerance) or (r_cumul > r_cur + tolerance) or (r_pct > tol_pct)
        if not has_situation:
            continue
        if r_cumul <= prev + tolerance:
            count += 1
    return (count + 1) if count >= 0 else 1
def _get_situation_info(doc: dict, *, include_rank: bool = False, all_factures=None, tolerance: float = 0.01) -> dict:
    info = {}
    if isinstance(doc, dict):
        info = doc.get("_situation_info") if isinstance(doc.get("_situation_info"), dict) else {}
    if not info or "prev" not in info:
        prev = _safe_float((doc or {}).get("situation_prev_ttc", 0.0), 0.0)
        current = _safe_float((doc or {}).get("situation_current_ttc", (doc or {}).get("total_ttc", 0.0)), 0.0)
        cumul_raw = (doc or {}).get("situation_cumul_ttc", None)
        cumul = _safe_float(cumul_raw if cumul_raw not in (None, "") else (prev + current), 0.0)
        pct = _safe_float((doc or {}).get("situation_pct", 0.0), 0.0)
        if pct < 0:
            pct = 0.0
        explicit_base = _safe_float((doc or {}).get("situation_base_ttc", 0.0), 0.0)
        base_candidates = [
            explicit_base,
            _safe_float((doc or {}).get("total_base_ttc", 0.0), 0.0),
            _safe_float((doc or {}).get("base_ttc", 0.0), 0.0),
            _safe_float((doc or {}).get("total_ttc_base", 0.0), 0.0),
            _safe_float((doc or {}).get("total_contract_ttc", 0.0), 0.0),
            prev + current,
            cumul,
            _safe_float((doc or {}).get("total_ttc", 0.0), 0.0),
        ]
        if pct > 0.0001:
            try:
                base_candidates.append(cumul / (pct / 100.0))
            except Exception:
                pass
        base = 0.0
        for cand in base_candidates:
            try:
                val = float(cand)
            except Exception:
                continue
            if math.isnan(val) or math.isinf(val) or val <= 0:
                continue
            if val > base:
                base = val
        if base <= 0:
            base = cumul if cumul > 0 else (prev + current)
        if base <= 0:
            base = _safe_float((doc or {}).get("total_ttc", 0.0), 0.0)
        reste = base - cumul
        if reste < 0 and abs(reste) <= tolerance:
            reste = 0.0
        info = {
            "prev": prev,
            "current": current,
            "cumul": cumul,
            "pct": pct,
            "base": base if base > 0 else 0.0,
            "reste": max(reste, 0.0),
        }
        if explicit_base > 0:
            info["explicit_base"] = explicit_base
        tol_pct = 0.0001
        info["is_situation"] = (prev > tolerance) or (pct > tol_pct) or (cumul > current + tolerance)
    idx_val = 0
    try:
        idx_val = int(float((doc or {}).get("situation_index", 0) or 0))
    except Exception:
        idx_val = 0
    if idx_val <= 0 and info.get("rank"):
        try:
            idx_val = int(info.get("rank"))
        except Exception:
            idx_val = 0
    total_count = 0
    try:
        total_count = int(float((doc or {}).get("situation_total_count", 0) or 0))
    except Exception:
        total_count = 0
    if total_count < idx_val:
        total_count = idx_val
    info["index"] = max(idx_val, 0)
    info["total_count"] = max(total_count, 0)
    looks_like_situ = "SITU" in str((doc or {}).get("objet", "") or "").upper()
    has_markers = any(
        (
            info.get("index", 0) > 0,
            info.get("total_count", 0) > 0,
            looks_like_situ,
            _safe_float((doc or {}).get("situation_current_ttc", 0.0), 0.0) > tolerance,
            _safe_float((doc or {}).get("situation_cumul_ttc", 0.0), 0.0) > tolerance,
        )
    )
    if has_markers and not info.get("is_situation"):
        info["is_situation"] = True
    if info.get("is_situation"):
        reste_val = _safe_float(info.get("reste", 0.0), 0.0)
        pct_val = _safe_float(info.get("pct", 0.0), 0.0)
        idx_val = info.get("index", 0)
        total_val = info.get("total_count", 0)
        explicit_base_val = _safe_float(info.get("explicit_base", 0.0), 0.0)
        has_explicit_contract = explicit_base_val > tolerance
        has_count_marker = total_val > 0 and idx_val >= total_val
        has_pct_marker = pct_val >= 99.999 and pct_val > 0
        info["is_solde"] = bool(
            (has_explicit_contract and reste_val <= tolerance)
            or (has_count_marker and reste_val <= tolerance)
            or has_pct_marker
        )
    else:
        info["is_solde"] = False
    if include_rank and info.get("is_situation"):
        if info.get("rank") is None:
            info["rank"] = _compute_situation_rank(doc, info, all_factures=all_factures, tolerance=tolerance)
    if isinstance(doc, dict):
        doc["_situation_info"] = info
    return info
def _collect_situation_history(doc: dict, *, include_current: bool = False):
    try:
        rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
    except Exception:
        rows = []
    current_num = str((doc or {}).get("numero", "")).strip()
    reference = str((doc or {}).get("doc_reference", "") or "").strip()
    base_obj = _strip_situ_suffix((doc or {}).get("objet", "") or "")
    history = []
    for row in rows:
        num_row = str(row.get("numero", "")).strip()
        if not include_current and current_num and num_row == current_num:
            continue
        ref_row = str(row.get("doc_reference", "") or "").strip()
        if reference:
            if ref_row != reference:
                continue
        else:
            if base_obj and _strip_situ_suffix(row.get("objet", "") or "") != base_obj:
                continue
        info = _get_situation_info(row, include_rank=True, all_factures=rows)
        if not info.get("is_situation"):
            continue
        entry = {
            "numero": num_row,
            "date": row.get("date", ""),
            "amount": _safe_float(row.get("situation_current_ttc", row.get("total_ttc", 0.0)), 0.0),
            "index": int(info.get("index") or info.get("rank") or 0),
            "total": int(info.get("total_count") or 0),
        }
        history.append(entry)
    history.sort(key=lambda h: (h.get("index", 0), h.get("numero", "")))
    return history


def _load_payment_rows() -> List[Dict]:
    path = os.path.join(DATA_DIR, CSV_PAYMENTS)
    if not os.path.exists(path):
        return []
    try:
        return load_csv(path)
    except Exception:
        return []


def _save_payment_rows(rows: List[Dict]):
    path = os.path.join(DATA_DIR, CSV_PAYMENTS)
    headers = list(PAYMENT_FIELDS)
    save_csv(path, rows or [], headers)


def _payment_matches_parent(payment: dict, parent_key: str, doc: dict) -> bool:
    key = str((payment or {}).get("parent_key", "") or "").strip().lower()
    if key:
        return key == parent_key
    ref_payment = str((payment or {}).get("doc_reference", "") or "").strip().lower()
    ref_doc = str((doc or {}).get("doc_reference", "") or "").strip().lower()
    if ref_payment and ref_doc and ref_payment == ref_doc:
        return True
    num_payment = str((payment or {}).get("facture_numero", "") or "").strip().lower()
    num_doc = str((doc or {}).get("numero", "") or "").strip().lower()
    if num_payment and num_doc and num_payment == num_doc:
        return True
    return False


def build_situation_payment_context(
    doc: dict,
    *,
    include_current: bool = True,
    payment_rows: List[Dict] = None,
    settings: dict = None,
    today=None,
    tolerance: float = 0.01,
) -> dict:
    if not isinstance(doc, dict):
        raise ValueError("Document de facture absent pour le contexte de paiement.")
    numero = str((doc or {}).get("numero") or "").strip()
    if not numero:
        raise ValueError("Impossible de déterminer le numéro de facture pour le contexte de paiement.")
    settings = settings or {}
    try:
        delay_days = int(_safe_float(settings.get("payment_delay_days", 45), 45))
    except Exception:
        delay_days = 45
    threshold_pct = _safe_float(settings.get("payment_unpaid_threshold_pct", 40.0), 40.0)
    parent_key = _situ_parent_key(doc)
    all_factures = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
    rows_by_num = {str((r or {}).get("numero") or "").strip(): r for r in (all_factures or [])}
    info = _get_situation_info(doc, include_rank=True, all_factures=all_factures, tolerance=tolerance)
    history_prev = _collect_situation_history(doc, include_current=False)
    entries = []
    for entry in history_prev:
        numero_hist = str(entry.get("numero", "") or "").strip()
        row = rows_by_num.get(numero_hist, {})
        iso_date = _safe_date_str(row.get("date", entry.get("date", "")))
        entries.append({
            "numero": numero_hist,
            "amount": _safe_float(entry.get("amount", 0.0), 0.0),
            "index": int(float(entry.get("index", 0) or 0)) if str(entry.get("index", "")).strip() else 0,
            "total_count": int(float(entry.get("total", 0) or 0)) if str(entry.get("total", "")).strip() else 0,
            "date": iso_date,
            "statut": str((row or {}).get("statut", "")),
        })
    if include_current:
        iso_cur_date = _safe_date_str(doc.get("date", ""))
        entries.append({
            "numero": numero,
            "amount": _safe_float(info.get("current", doc.get("situation_current_ttc", doc.get("total_ttc", 0.0))), 0.0),
            "index": int(float(info.get("index", info.get("rank", 0)) or 0)),
            "total_count": int(float(info.get("total_count", 0) or 0)),
            "date": iso_cur_date,
            "statut": str(doc.get("statut", "")),
        })
    entries.sort(key=lambda e: (e.get("index", 0), e.get("numero", "")))
    payment_rows = payment_rows if payment_rows is not None else _load_payment_rows()
    payments = []
    payments_total = 0.0
    last_payment_iso = ""
    for pay in payment_rows or []:
        if not _payment_matches_parent(pay, parent_key, doc):
            continue
        amount = _safe_float(pay.get("montant", 0.0), 0.0)
        iso_payment = _safe_date_str(pay.get("date_paiement", ""))
        payments.append({
            "facture_numero": str(pay.get("facture_numero", "") or ""),
            "doc_reference": str(pay.get("doc_reference", "") or ""),
            "situation_index": str(pay.get("situation_index", "") or ""),
            "date_paiement": iso_payment,
            "montant": amount,
            "mode": str(pay.get("mode", "") or ""),
            "notes": str(pay.get("notes", "") or ""),
        })
        payments_total += amount
        if iso_payment:
            if not last_payment_iso or iso_payment > last_payment_iso:
                last_payment_iso = iso_payment
    cumul = _safe_float(info.get("cumul", doc.get("situation_cumul_ttc", 0.0)), 0.0)
    prev_total = _safe_float(info.get("prev", doc.get("situation_prev_ttc", 0.0)), 0.0)
    current_amount = _safe_float(info.get("current", doc.get("situation_current_ttc", doc.get("total_ttc", 0.0))), 0.0)
    base_ttc = _safe_float(info.get("base", doc.get("situation_base_ttc", doc.get("total_ttc", 0.0))), 0.0)
    reste = _safe_float(info.get("reste", 0.0), 0.0)
    outstanding = max(cumul - payments_total, 0.0)
    date_objects = []
    for item in entries:
        iso = _safe_date_str(item.get("date", ""))
        if iso:
            item["date"] = iso
            try:
                date_objects.append(datetime.strptime(iso, "%Y-%m-%d").date())
            except Exception:
                pass
    try:
        last_invoice_date = max(date_objects).isoformat() if date_objects else ""
    except Exception:
        last_invoice_date = ""
    if today is None:
        today = date.today()
    due_date = ""
    if last_invoice_date:
        try:
            due_dt = datetime.strptime(last_invoice_date, "%Y-%m-%d").date() + timedelta(days=delay_days)
            due_date = due_dt.isoformat()
        except Exception:
            due_date = ""
    context = {
        "numero": numero,
        "parent_key": parent_key,
        "base_ttc": base_ttc,
        "prev_facture_ttc": prev_total,
        "current_facture_ttc": current_amount,
        "cumul_facture_ttc": cumul,
        "reste_a_facturer": max(reste, 0.0),
        "payments_total": payments_total,
        "outstanding": outstanding,
        "history": entries,
        "payments": payments,
        "payments_count": len(payments),
        "last_payment_date": last_payment_iso,
        "last_invoice_date": last_invoice_date,
        "due_date": due_date,
        "delay_days": delay_days,
        "today": today.isoformat() if hasattr(today, "isoformat") else str(today),
        "threshold_pct": threshold_pct,
        "tolerance": tolerance,
        "current_index": int(float(info.get("index", info.get("rank", 0)) or 0)),
        "total_planned": int(float(info.get("total_count", 0) or 0)),
    }
    return context


def _parse_payment_date(payment_date) -> str:
    if isinstance(payment_date, datetime):
        return payment_date.date().isoformat()
    if isinstance(payment_date, date):
        return payment_date.isoformat()
    if payment_date is None:
        return ""
    try:
        return _safe_date_str(payment_date)
    except Exception:
        return ""


def validate_situation_payment(
    context: dict,
    payment_amount,
    payment_date,
    *,
    settings: dict = None,
    tolerance: float = 0.01,
) -> dict:
    settings = settings or {}
    strict_delay = bool(settings.get("payment_strict_delay", False))
    strict_threshold = bool(settings.get("payment_strict_threshold", False))
    context_today = (context or {}).get("today")
    if not context_today:
        context_today = date.today().isoformat()
    result = {
        "ok": True,
        "errors": [],
        "warnings": [],
        "amount": 0.0,
        "payment_date": "",
        "outstanding_before": _safe_float((context or {}).get("outstanding", 0.0), 0.0),
        "outstanding_after": None,
        "due_date": (context or {}).get("due_date", ""),
        "delay_days": int(float((context or {}).get("delay_days", settings.get("payment_delay_days", 45)) or 0)),
        "threshold_pct": _safe_float((context or {}).get("threshold_pct", settings.get("payment_unpaid_threshold_pct", 40.0)), 40.0),
        "delay_ok": True,
        "threshold_ok": True,
        "overdue_days": 0,
    }
    amount = _safe_float(payment_amount, 0.0)
    if amount <= tolerance:
        result["errors"].append("Montant de paiement invalide (<= 0).")
    iso_pay = _parse_payment_date(payment_date)
    if not iso_pay:
        result["errors"].append("Date de paiement invalide ou manquante.")
    result["amount"] = amount
    result["payment_date"] = iso_pay
    outstanding_before = result["outstanding_before"]
    if amount > outstanding_before + tolerance:
        result["errors"].append("Le montant payé dépasse le restant dû des situations facturées.")
    outstanding_after = max(outstanding_before - max(amount, 0.0), 0.0)
    result["outstanding_after"] = outstanding_after
    due_iso = result.get("due_date", "")
    overdue_days = 0
    if iso_pay and due_iso:
        try:
            pay_dt = datetime.strptime(iso_pay, "%Y-%m-%d").date()
            due_dt = datetime.strptime(due_iso, "%Y-%m-%d").date()
            overdue_days = (pay_dt - due_dt).days
            if overdue_days > 0:
                msg = f"Paiement en retard de {overdue_days} jour(s) par rapport au délai autorisé."
                result["delay_ok"] = False
                if strict_delay:
                    result["errors"].append(msg)
                else:
                    result["warnings"].append(msg)
        except Exception:
            pass
    result["overdue_days"] = max(overdue_days, 0)
    cumul = _safe_float((context or {}).get("cumul_facture_ttc", 0.0), 0.0)
    threshold_pct = result["threshold_pct"]
    if cumul > tolerance:
        ratio = (outstanding_after / cumul) * 100.0
        if ratio > threshold_pct + 1e-6:
            msg = (
                f"Le reste impayé ({outstanding_after:.2f} €) représente {ratio:.1f}% du cumul facturé, "
                f"au-delà du seuil autorisé de {threshold_pct:.1f}%."
            )
            result["threshold_ok"] = False
            if strict_threshold:
                result["errors"].append(msg)
            else:
                result["warnings"].append(msg)
    if iso_pay and context_today:
        try:
            today_dt = datetime.strptime(context_today, "%Y-%m-%d").date()
            pay_dt = datetime.strptime(iso_pay, "%Y-%m-%d").date()
            if pay_dt > today_dt + timedelta(days=1):
                result["warnings"].append("La date de paiement est dans le futur.")
        except Exception:
            pass
    result["ok"] = not result["errors"]
    return result


def _status_priority(statut: str) -> int:
    order = {
        "Brouillon": 0,
        "Envoyé": 1,
        "Accepté": 2,
        "Relance 1": 3,
        "Relance 2": 4,
        "Acompte": 5,
        SITUATION_PAYMENT_STATUS: 6,
        "Payée": 7,
        "Annulée": -1,
    }
    return order.get(str(statut or "").strip(), 0)


def _apply_payment_statuses_for_situation(context: dict, *, tolerance: float = 0.01) -> bool:
    if not isinstance(context, dict):
        return False
    history = list(context.get("history") or [])
    if not history:
        return False
    max_known_index = 0
    max_known_total = 0
    for entry in history:
        try:
            idx_val = int(float(entry.get("index", 0) or 0))
        except Exception:
            idx_val = 0
        if idx_val > max_known_index:
            max_known_index = idx_val
        try:
            tot_val = int(float(entry.get("total_count", 0) or 0))
        except Exception:
            tot_val = 0
        if tot_val > max_known_total:
            max_known_total = tot_val
    try:
        ctx_total_planned = int(float(context.get("total_planned", 0) or 0))
    except Exception:
        ctx_total_planned = 0
    if ctx_total_planned > max_known_total:
        max_known_total = ctx_total_planned
    payments_total = _safe_float(context.get("payments_total", 0.0), 0.0)
    if payments_total <= tolerance:
        return False
    masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
    rows_by_num = {str(r.get("numero", "") or "").strip(): r for r in masters}
    remaining = payments_total
    changed = False
    today_iso = date.today().isoformat()
    for entry in sorted(history, key=lambda e: (e.get("index", 0), e.get("numero", ""))):
        numero = str(entry.get("numero", "") or "").strip()
        if not numero:
            continue
        amount_due = _safe_float(entry.get("amount", 0.0), 0.0)
        if amount_due <= tolerance:
            continue
        allocated = min(max(remaining, 0.0), amount_due)
        remaining = max(0.0, remaining - amount_due)
        row = rows_by_num.get(numero)
        if not row:
            continue
        previous_paid = _safe_float(row.get("acompte", 0.0), 0.0)
        if allocated >= amount_due - tolerance:
            paid_value = amount_due
        else:
            paid_value = allocated
        if abs(paid_value - previous_paid) > tolerance:
            row["acompte"] = f"{paid_value:.2f}"
            changed = True
        new_status = None
        if allocated >= amount_due - tolerance:
            try:
                entry_index = int(float(entry.get("index", 0) or 0))
            except Exception:
                entry_index = 0
            try:
                entry_total = int(float(entry.get("total_count", 0) or 0))
            except Exception:
                entry_total = 0
            try:
                row_info = _get_situation_info(
                    row,
                    include_rank=False,
                    all_factures=masters,
                    tolerance=tolerance,
                )
            except Exception:
                row_info = {}
            outstanding = _safe_float(context.get("outstanding", 0.0), 0.0)
            reste_to_invoice = _safe_float(context.get("reste_a_facturer", 0.0), 0.0)
            is_row_situation = bool(row_info.get("is_situation"))
            if is_row_situation:
                row_index = entry_index
                row_total = entry_total
                try:
                    row_index = int(float(row_info.get("index", row_index) or row_index))
                except Exception:
                    row_index = entry_index
                try:
                    row_total = int(float(row_info.get("total_count", row_total) or row_total))
                except Exception:
                    row_total = entry_total
                if row_total > 0 and entry_total <= 0:
                    entry_total = row_total
                if entry_total <= 0:
                    entry_total = max(max_known_total, ctx_total_planned, row_total)
                future_expected = False
                total_hint = max(entry_total, row_total, ctx_total_planned)
                if total_hint > 0 and row_index < total_hint:
                    future_expected = True
                explicit_base_val = _safe_float(
                    row_info.get("explicit_base", row.get("situation_base_ttc", 0.0)),
                    0.0,
                )
                is_final = False
                if row_info.get("is_solde") and not future_expected:
                    is_final = True
                elif (
                    not future_expected
                    and explicit_base_val > tolerance
                    and outstanding <= tolerance
                    and reste_to_invoice <= tolerance
                ):
                    is_final = True
                new_status = "Payée" if is_final else SITUATION_PAYMENT_STATUS
            else:
                if entry_total <= 0:
                    entry_total = max_known_total
                is_last_known = entry_index >= max_known_index and entry_index > 0
                is_final = False
                if entry_total > 0 and entry_index >= entry_total:
                    is_final = True
                elif is_last_known:
                    if outstanding <= tolerance and reste_to_invoice <= tolerance:
                        is_final = True
                new_status = "Payée" if is_final else SITUATION_PAYMENT_STATUS
        elif allocated > tolerance:
            new_status = "Acompte"
        if new_status:
            prev_status = str(row.get("statut", "") or "")
            if _status_priority(new_status) > _status_priority(prev_status):
                row["statut"] = new_status
                row["date_statut"] = today_iso
                changed = True
    if changed:
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
    return changed


def apply_situation_payment(
    numero: str,
    payment_amount,
    payment_date,
    *,
    mode: str = "",
    notes: str = "",
    settings: dict = None,
    tolerance: float = 0.01,
) -> dict:
    numero = str(numero or "").strip()
    if not numero:
        raise ValueError("Numéro de facture requis pour appliquer un paiement de situation.")
    doc = assemble_doc("facture", numero)
    if not doc:
        raise ValueError(f"Facture {numero} introuvable pour appliquer le paiement.")
    settings = settings or {}
    context_before = build_situation_payment_context(doc, settings=settings, tolerance=tolerance)
    validation = validate_situation_payment(context_before, payment_amount, payment_date, settings=settings, tolerance=tolerance)
    if not validation.get("ok"):
        raise ValueError("; ".join(validation.get("errors", []) or ["Validation du paiement échouée."]))
    payment_rows = _load_payment_rows()
    info = _get_situation_info(doc, include_rank=True, all_factures=None, tolerance=tolerance)
    entry = {
        "facture_numero": numero,
        "doc_reference": str(doc.get("doc_reference", "") or ""),
        "parent_key": context_before.get("parent_key", ""),
        "situation_index": str(_situ_apply_offset(info.get("index", info.get("rank", 0)) or 0)),
        "date_paiement": validation.get("payment_date", ""),
        "montant": f"{validation.get('amount', 0.0):.2f}",
        "mode": str(mode or ""),
        "notes": str(notes or ""),
        "created_at": datetime.now().isoformat(),
    }
    payment_rows.append(entry)
    _save_payment_rows(payment_rows)
    context_after = build_situation_payment_context(doc, payment_rows=payment_rows, settings=settings, tolerance=tolerance)
    status_changed = _apply_payment_statuses_for_situation(context_after, tolerance=tolerance)
    log_action("situation_payment_recorded", f"{numero}:{entry['montant']}")
    if status_changed:
        log_action("situation_payment_status_update", f"{numero}:{entry['montant']}")
    result = {
        "payment": entry,
        "validation": validation,
        "context_before": context_before,
        "context_after": context_after,
        "status_updated": status_changed,
    }
    return result
def _ensure_situation_pdf_naming(pdf_path: str, doc: dict, numero: str, *, sit_info=None, all_factures=None):
    try:
        if sit_info is None:
            sit_info = _get_situation_info(doc, include_rank=True, all_factures=all_factures)
        if not sit_info.get("is_situation"):
            return pdf_path
        try:
            rank_val = sit_info.get("rank") or 1
            rank_int = int(rank_val) if isinstance(rank_val, (int, float)) else int(str(rank_val))
        except Exception:
            rank_int = 1
        try:
            base_dir = DOCS_DIRS.get("factures") if isinstance(DOCS_DIRS, dict) else DOCS_DIRS["factures"]
        except Exception:
            base_dir = os.path.join(DATA_DIR, "factures")
        target = os.path.join(base_dir, f"{numero}-{rank_int:02d}_fx.pdf")
        os.makedirs(os.path.dirname(target), exist_ok=True)
        if os.path.abspath(target) != os.path.abspath(pdf_path):
            if os.path.exists(target):
                os.remove(target)
            if pdf_path and os.path.exists(pdf_path):
                os.replace(pdf_path, target)
            pdf_path = target
        return target
    except Exception:
        return pdf_path
def _safe_date_str(d):
    if not d: return ""
    for fmt in ("%d/%m/%Y","%Y-%m-%d"):
        try:
            return datetime.strptime(str(d), fmt).date().isoformat()
        except Exception:
            continue
    return ""
def _display_date(iso):
    if not iso: return ""
    try:
        return datetime.strptime(iso,"%Y-%m-%d").strftime("%d/%m/%Y")
    except Exception:
        return iso
def money(v): 
    try: return f"{float(v):.2f} €"
    except: return "0.00 €"
def ensure_dirs():
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(BRAND_DIR, exist_ok=True)
    for p in DOCS_DIRS.values():
        os.makedirs(p, exist_ok=True)
    # Spool directory used for intermediate exports (Factur-X, CII, mails…)
    os.makedirs(os.path.join(DATA_DIR, "ops"), exist_ok=True)
def ensure_settings():
    default = {
        "entreprise_nom":"", "entreprise_adresse":"", "entreprise_cp":"",
        "entreprise_ville":"", "entreprise_tel":"", "entreprise_mail":"",
        "entreprise_siret":"", "entreprise_siren":"", "entreprise_ape":"", "entreprise_iban":"", "entreprise_bic":"",
        "entreprise_tva":"", "entreprise_attestation_decennale":"",
        "theme_color_hex":"#0A84FF","logo_path":"","mentions_legales":"Règlement sous 30 jours.",
        "smtp_host":"","smtp_port":587,"smtp_user":"","smtp_pass":"","smtp_tls":True,"smtp_ssl":False,
        "tva":0.2,
        "urssaf_rate": 0.22,
        "urssaf_rate_pieces": 0.12,
        "urssaf_auto_open": False,
"auto_mail_devis": False,
"auto_mail_facture": False,
"auto_mail_on_status_envoye": False,
"auto_mail_on_status_relance1": False,
"auto_mail_on_status_relance2": False,
"auto_mail_on_status_payee": False,
"auto_mail_bcc": "",
"tpl_subject_devis": "Votre devis {DOC_NUM} – {ENTREPRISE_NOM}",
"tpl_body_devis": "Bonjour {CLIENT_NOM},\nVeuillez trouver votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}).\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.\n{LIEN_PDF}",
"tpl_subject_facture": "Votre facture {DOC_NUM} – {ENTREPRISE_NOM}",
"tpl_body_facture": "Bonjour {CLIENT_NOM},\nVeuillez trouver votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (Restant dû {RESTANT_DU}).\nMontants de situation (si applicable) : précédent {SITUATION_PREV}, en cours {SITUATION_CURRENT}, cumul {SITUATION_CUMUL}, reste {SITUATION_RESTE}.\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.\n{LIEN_PDF}",
        "tpl_subject_facture_situation": "Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}",
        "tpl_body_facture_situation": "Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM} du {DOC_DATE}.\nSituations précédentes : {SITUATION_PREV}. Montant de la situation en cours : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.\n{LIEN_PDF}",
        "tpl_subject_facture_solde": "Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}",
        "tpl_body_facture_solde": "Bonjour {CLIENT_NOM},\nCi-joint la facture de solde {DOC_NUM} du {DOC_DATE}.\nCumul facturé à ce jour : {SITUATION_CUMUL}. Montants réglés précédemment : {SITUATION_PREV}. Reste dû après ce solde : {SITUATION_RESTE}.\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nMerci pour votre confiance et votre règlement.\n{LIEN_PDF}",
        "payment_delay_days": 45,
        "payment_unpaid_threshold_pct": 40.0,
        "payment_strict_delay": False,
        "payment_strict_threshold": False,
    }
    if not os.path.exists(SETTINGS_FILE):
        with open(SETTINGS_FILE,"w",encoding="utf-8") as f: json.dump(default,f,ensure_ascii=False,indent=2)
        return default
    try:
        with open(SETTINGS_FILE,"r",encoding="utf-8") as f: s=json.load(f)
        for k,v in default.items():
            if k not in s: s[k]=v
        return s
    except Exception:
        log_error("ensure_settings\n"+__import__('traceback').format_exc()); return default
def save_settings(s:dict):
    try:
        with open(SETTINGS_FILE,"w",encoding="utf-8") as f: json.dump(s,f,ensure_ascii=False,indent=2)
        return True
    except Exception:
        log_error("save_settings\n"+__import__('traceback').format_exc()); return False
def ensure_csv(path, headers):
    if not os.path.exists(path):
        with open(path,"w",encoding="utf-8",newline="") as f:
            w=csv.DictWriter(f, fieldnames=headers); w.writeheader()
def ensure_column_exists_in_csv(path, column):
    """Soft-migrate: if CSV exists and column is missing, add it and keep existing rows."""
    try:
        if not os.path.exists(path):
            return
        with open(path, "r", encoding="utf-8",newline="") as f:
            rdr = csv.DictReader(f)
            rows = [dict(r) for r in rdr]
            headers = list(rdr.fieldnames or [])
        if column in headers:
            return
        headers = headers + [column]
        for r in rows:
            if column not in r:
                r[column] = ""
        save_csv(path, rows, headers)
    except Exception:
        log_error("ensure_column_exists_in_csv\n"+__import__('traceback').format_exc())
def ensure_all_csv():
    ensure_csv(os.path.join(DATA_DIR, CSV_CLIENTS), ["ID","Nom", "Prenom", "Email","Telephone","Adresse","CodePostal","Ville","SIRET"])
    ensure_csv(os.path.join(DATA_DIR, CSV_ITEMS),   ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
    ensure_csv(os.path.join(DATA_DIR, CSV_DEVIS),   [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","doc_reference","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
    ensure_csv(os.path.join(DATA_DIR, CSV_FACTS),   [COL[k] for k in FACTURE_ALL_FIELDS])
    for _col in FACTURE_SITUATION_FIELDS:
        ensure_column_exists_in_csv(os.path.join(DATA_DIR, CSV_FACTS), _col)
    ensure_csv(os.path.join(DATA_DIR, CSV_PAYMENTS), PAYMENT_FIELDS)
    ensure_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
    ensure_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
    ensure_csv(ACT_LOG, ["datetime","action","details"])
    ensure_column_exists_in_csv(os.path.join(DATA_DIR, CSV_DEVIS), "objet")
    ensure_column_exists_in_csv(os.path.join(DATA_DIR, CSV_FACTS), "objet")
    for _col in ("maitre_oeuvre_nom", "maitre_oeuvre_email", "maitre_oeuvre_tel"):
        ensure_column_exists_in_csv(os.path.join(DATA_DIR, CSV_DEVIS), _col)
        ensure_column_exists_in_csv(os.path.join(DATA_DIR, CSV_FACTS), _col)
def _get_client_firstname(client_id:str, client_nom:str=''):
    try:
        rows = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        # 1) exact by ID
        if client_id:
            for _cl in rows:
                if _cl.get('ID') == client_id:
                    return _cl.get('Prénom') or _cl.get('Prenom') or _cl.get('prenom') or ''
        # 2) fallback by last name match (case-insensitive)
        cn = (client_nom or '').strip().lower()
        if cn:
            for _cl in rows:
                if (_cl.get('Nom') or '').strip().lower() == cn:
                    return _cl.get('Prénom') or _cl.get('Prenom') or _cl.get('prenom') or ''
    except Exception:
        pass
    return ''
# --- Robust resolver for client first names (single source of truth = clients CSV) ---
class _PrenomResolver:
    def __init__(self):
        self._by_id = {}
        self._by_nom = {}
        try:
            rows = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        except Exception:
            rows = []
        for _cl in rows:
            try:
                cid = (_cl.get('ID') or '').strip()
                nom = (_cl.get('Nom') or '').strip().lower()
                pren = (_cl.get('Prénom') or _cl.get('Prenom') or _cl.get('prenom') or '').strip()
                if cid and pren:
                    self._by_id[cid] = pren
                if nom and pren and nom not in self._by_nom:
                    self._by_nom[nom] = pren
            except Exception:
                pass
    def resolve(self, client_id:str, client_nom:str, fallback_prenom:str='') -> str:
        # Priority: explicit field -> by ID -> by last name -> ''
        if fallback_prenom:
            return fallback_prenom
        cid = (client_id or '').strip()
        if cid and cid in self._by_id:
            return self._by_id[cid]
        cn = (client_nom or '').strip().lower()
        if cn and cn in self._by_nom:
            return self._by_nom[cn]
        return ''
_PRENOM_RESOLVER = None
def _resolve_prenom(client_id:str, client_nom:str, fallback_prenom:str='') -> str:
    global _PRENOM_RESOLVER
    try:
        if _PRENOM_RESOLVER is None:
            _PRENOM_RESOLVER = _PrenomResolver()
        return _PRENOM_RESOLVER.resolve(client_id, client_nom, fallback_prenom) or ''
    except Exception:
        return (fallback_prenom or '')
def _infer_prenom(client_id:str, client_nom:str, client_email:str="") -> str:
    try:
        cand = _get_client_firstname(client_id, client_nom) or ""
    except Exception:
        cand = ""
    if not cand:
        try:
            em = (client_email or "").strip()
            if em:
                cand = _load_prenom_map().get(em, "") or ""
        except Exception:
            pass
    if not cand:
        try:
            cand = _split_civ_name_prenom(client_nom)[2] or ""
        except Exception:
            pass
    return cand
def _auto_migrate_fill_prenom_in_file(path:str):
    try:
        if not os.path.exists(path): return
        with open(path, "r", encoding="utf-8", newline="") as f:
            rdr = csv.DictReader(f)
            headers = list(rdr.fieldnames or [])
            rows = [dict(r) for r in f if isinstance(r, dict)]  # keep fallback robust
        if not rows:
            # If the above failed to read rows due to DictReader exhausted, re-open
            with open(path, "r", encoding="utf-8", newline="") as f2:
                rdr2 = csv.DictReader(f2)
                headers = list(rdr2.fieldnames or [])
                rows = [dict(r) for r in rdr2]
        if not rows: return
        if "client_prenom" not in headers:
            headers.append("client_prenom")
            for r in rows: r.setdefault("client_prenom", "")
        changed = False
        for r in rows:
            if not (r.get("client_prenom") or "").strip():
                pn = _infer_prenom(r.get("client_id",""), r.get("client_nom",""), r.get("client_email",""))
                if pn: r["client_prenom"] = pn; changed = True
        if changed: save_csv(path, rows, headers)
    except Exception:
        log_error("auto_migrate_fill_prenom_in_file\n"+__import__('traceback').format_exc())
def auto_migrate_prenom_all():
    try:
        _auto_migrate_fill_prenom_in_file(os.path.join(DATA_DIR, CSV_DEVIS))
        _auto_migrate_fill_prenom_in_file(os.path.join(DATA_DIR, CSV_FACTS))
        # Clients: ensure 'Prenom' exists and fill best-effort
        path_c = os.path.join(DATA_DIR, CSV_CLIENTS)
        if os.path.exists(path_c):
            with open(path_c, "r", encoding="utf-8", newline="") as f:
                rdr = csv.DictReader(f)
                headers = list(rdr.fieldnames or [])
                rows = [dict(r) for r in rdr]
            if rows:
                if "Prenom" not in headers:
                    headers.append("Prenom")
                    for r in rows: r.setdefault("Prenom","")
                    changed = True
                mp = _load_prenom_map(); changed=False
                for r in rows:
                    if not (r.get("Prenom") or r.get("Prénom") or r.get("prenom")):
                        em = (r.get("Email") or "").strip()
                        cand = mp.get(em, "") if em else ""
                        if not cand:
                            _,_,cand = _split_civ_name_prenom(r.get("Nom",""))
                        if cand: r["Prenom"] = cand; changed=True
                if changed:
                    try:
                        import shutil
                        shutil.copyfile(path_c, path_c + ".bak")
                    except Exception:
                        pass
                    save_csv(path_c, rows, headers)
    except Exception:
        log_error("auto_migrate_prenom_all\n"+__import__('traceback').format_exc())
def load_csv(path)->List[Dict]:
    try:
        with open(path,"r",encoding="utf-8") as f:
            rdr = csv.DictReader(f)
            rows = [dict(x) for x in rdr]
        fn = os.path.basename(path) if isinstance(path, str) else ""
        if fn == CSV_FACTS:
            rows = [_augment_facture_row(r) for r in rows]
        return rows
    except Exception:
        log_error("load_csv\n"+__import__('traceback').format_exc()); return []
def save_csv(path, rows, headers)->bool:
    tmp_path = None
    try:
        fn = os.path.basename(path) if isinstance(path, str) else ""
        hdrs = list(headers or [])
        data = list(rows or [])
        if fn == CSV_FACTS:
            hdrs = _augment_facture_headers(hdrs)
            data = [_augment_facture_row(r) for r in data]
        dir_name = os.path.dirname(path) or "."
        os.makedirs(dir_name, exist_ok=True)
        fd, tmp_path = tempfile.mkstemp(prefix=f".{(os.path.basename(path) or 'ae_gestion')}.", suffix=".tmp", dir=dir_name)
        with os.fdopen(fd, "w", encoding="utf-8", newline="") as f:
            w=csv.DictWriter(f, fieldnames=hdrs); w.writeheader()
            for row in data: w.writerow({h: row.get(h,"") for h in hdrs})
        if os.path.exists(path):
            try:
                shutil.copyfile(path, path + ".bak")
            except Exception:
                pass
        os.replace(tmp_path, path)
        tmp_path = None
        return True
    except Exception:
        log_error("save_csv\n"+__import__('traceback').format_exc()); return False
    finally:
        if tmp_path and os.path.exists(tmp_path):
            try:
                os.remove(tmp_path)
            except Exception:
                pass
def append_csv(path, row, headers)->bool:
    ensure_csv(path, headers)
    try:
        # Auto-fill client_prenom for masters (devis/factures) before writing
        fn = os.path.basename(path) if isinstance(path, str) else ""
        hdrs = list(headers or [])
        data = dict(row or {})
        if fn in (CSV_DEVIS, CSV_FACTS):
            # ensure column exists in headers
            if "client_prenom" not in hdrs:
                hdrs = hdrs + ["client_prenom"]
            if not data.get("client_prenom"):
                # prefer resolver (clients.csv); fallback to heuristic infer
                _pn = _resolve_prenom(data.get("client_id",""), data.get("client_nom",""), data.get("client_prenom",""))
                if not _pn:
                    _pn = _infer_prenom(data.get("client_id",""), data.get("client_nom",""), data.get("client_email",""))
                data["client_prenom"] = _pn
            if "doc_reference" not in hdrs:
                hdrs = hdrs + ["doc_reference"]
            if "doc_reference" not in data:
                data["doc_reference"] = ""
        if fn == CSV_FACTS:
            hdrs = _augment_facture_headers(hdrs)
            data = _augment_facture_row(data)
        with open(path,"a",encoding="utf-8",newline="") as f:
            w=csv.DictWriter(f, fieldnames=hdrs); w.writerow({h: data.get(h,"") for h in hdrs})
        return True
    except Exception:
        log_error("append_csv\n"+__import__('traceback').format_exc()); return False
def log_action(action, details):
    append_csv(ACT_LOG, {"datetime":datetime.now().isoformat(),"action":action,"details":details}, ["datetime","action","details"])
def copy_logo_to_brand(src):
    if not src or not os.path.exists(src): return ""
    ext = os.path.splitext(src)[1].lower() or ".png"
    dst = os.path.join(BRAND_DIR, "logo"+ext)
    try:
        shutil.copyfile(src,dst); return dst
    except Exception:
        log_error("copy_logo_to_brand\n"+__import__('traceback').format_exc()); return ""
def zip_backup():
    name = os.path.join(BASE_DIR, f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip")
    with zipfile.ZipFile(name,"w",zipfile.ZIP_DEFLATED) as z:
        for root, dirs, files in os.walk(DATA_DIR):
            for fn in files:
                fp=os.path.join(root, fn); z.write(fp, arcname=os.path.relpath(fp, BASE_DIR))
        if os.path.exists(SETTINGS_FILE):
            z.write(SETTINGS_FILE, arcname=os.path.relpath(SETTINGS_FILE, BASE_DIR))
    return name
def _log_sequence_event(msg: str):
    try:
        if 'log_error' in globals() and callable(globals().get('log_error')):
            log_error(msg)
    except Exception:
        pass
def _load_sequence_ledger() -> dict:
    try:
        if os.path.exists(SEQUENCE_LEDGER_FILE):
            with open(SEQUENCE_LEDGER_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return data if isinstance(data, dict) else {}
    except Exception:
        _log_sequence_event("sequence_ledger_load\n" + traceback.format_exc())
    return {}
def _save_sequence_ledger(data: dict):
    try:
        os.makedirs(os.path.dirname(SEQUENCE_LEDGER_FILE), exist_ok=True)
        with open(SEQUENCE_LEDGER_FILE, "w", encoding="utf-8") as f:
            json.dump(data or {}, f, ensure_ascii=False, indent=2)
    except Exception:
        _log_sequence_event("sequence_ledger_save\n" + traceback.format_exc())
def _extract_sequence(num: str, prefix: str, year: str) -> int:
    if not num or not num.startswith(f"{prefix}{year}-"):
        return 0
    try:
        suffix = num.split("-", 1)[-1]
        digits = []
        for ch in suffix:
            if ch.isdigit():
                digits.append(ch)
            else:
                break
        if not digits:
            return 0
        return int("".join(digits))
    except Exception:
        return 0
def _ensure_sequence_integrity(kind: str, prefix: str, year: str) -> Tuple[int, List[int]]:
    rows = load_csv(os.path.join(DATA_DIR, CSV_DEVIS if kind == "devis" else CSV_FACTS))
    seen = set()
    seqs = []
    duplicates = set()
    for r in rows:
        seq_val = _extract_sequence(str(r.get("numero", "")).strip(), prefix, year)
        if seq_val <= 0:
            continue
        if seq_val in seen:
            duplicates.add(seq_val)
        else:
            seen.add(seq_val)
            seqs.append(seq_val)
    if seqs:
        seqs.sort()
        max_seq = seqs[-1]
        missing = [n for n in range(1, max_seq + 1) if n not in seen]
    else:
        max_seq = 0
        missing = []
    if duplicates:
        msg = f"Séquence {prefix}{year} invalide (doublons={sorted(duplicates) or '-'})"
        _log_sequence_event(msg)
        raise RuntimeError(msg)
    if missing:
        _log_sequence_event(
            f"Séquence {prefix}{year} avec trous détectés (manquants={missing})"
        )
    return max_seq, missing
def next_doc_number(kind):
    yy = datetime.now().strftime("%Y")
    prefix = "D" if kind=="devis" else "F"
    key = f"{prefix}{yy}"
    existing_max = 0
    missing = []
    try:
        existing_max, missing = _ensure_sequence_integrity(kind, prefix, yy)
    except RuntimeError:
        raise
    ledger = _load_sequence_ledger()
    ledger_last = 0
    if isinstance(ledger, dict):
        try:
            ledger_last = int(dict(ledger.get(key, {})).get("last", 0))
        except Exception:
            ledger_last = 0
    try:
        session_last = int(_LAST_NEXT_SEQ.get(key, 0) or 0)
    except Exception:
        session_last = 0
    available_gaps = [n for n in missing if isinstance(n, int) and n > 0]
    if available_gaps:
        seq = min(available_gaps)
    else:
        seq = max(existing_max, ledger_last, session_last) + 1
    try:
        _LAST_NEXT_SEQ[key] = seq
    except Exception:
        pass
    if isinstance(ledger, dict):
        try:
            ledger.setdefault(key, {})
            ledger[key]["last"] = int(seq)
            ledger[key]["updated"] = datetime.now().isoformat()
            ledger[key]["kind"] = kind
            _save_sequence_ledger(ledger)
        except Exception:
            pass
    return f"{prefix}{yy}-{seq:03d}"
def _safe_next_doc_number(kind: str, parent_widget=None):
    try:
        return next_doc_number(kind)
    except RuntimeError as err:
        message = str(err)
        try:
            if parent_widget is not None:
                from PyQt5.QtWidgets import QMessageBox
                QMessageBox.critical(parent_widget, "Numérotation bloquée", message)
        except Exception:
            pass
        raise
def _is_facture_locked(doc: dict) -> bool:
    statut = str((doc or {}).get("statut", "")).strip()
    if statut in LOCKED_FACTURE_STATUSES:
        try:
            info = _get_situation_info(doc, include_rank=False)
        except Exception:
            info = {}
        if info.get("is_situation"):
            tol = 0.01
            reste = _safe_float(info.get("reste", 0.0), 0.0)
            try:
                idx_val = int(float(info.get("index", 0) or 0))
            except Exception:
                idx_val = 0
            try:
                total_val = int(float(info.get("total_count", 0) or 0))
            except Exception:
                total_val = 0
            explicit_base = _safe_float(
                info.get("explicit_base", (doc or {}).get("situation_base_ttc", 0.0)),
                0.0,
            )
            if reste > tol:
                return False
            if total_val <= 0 or idx_val < total_val:
                return False
            if explicit_base <= tol:
                return False
        return True
    return False
def assemble_doc(kind, numero)->Dict:
    master_csv = os.path.join(DATA_DIR, CSV_DEVIS if kind=="devis" else CSV_FACTS)
    lines_csv  = os.path.join(DATA_DIR, CSV_DEV_LIN if kind=="devis" else CSV_FAC_LIN)
    masters = load_csv(master_csv); lines = load_csv(lines_csv)
    doc=None
    for r in masters:
        if r.get("numero")==numero: doc=r; break
    if not doc: return {}
    # cast totals
    for k in ("acompte","total_ht","total_tva","total_ttc"): doc[k]=_safe_float(doc.get(k,0))
    for _key in FACTURE_SITUATION_FIELDS:
        try:
            if _key in SITUATION_INT_FIELDS:
                doc[_key] = int(_safe_float(doc.get(_key, 0) or 0, 0.0))
            else:
                doc[_key] = _safe_float(doc.get(_key, 0.0), 0.0)
        except Exception:
            doc[_key] = 0 if _key in SITUATION_INT_FIELDS else 0.0
    L=[]
    for ln in lines:
        if ln.get("doc_num")==numero:
            L.append({
                "ref": ln.get("ref",""),
                "type": ln.get("type",""),
                "designation": ln.get("designation",""),
                "qte": _safe_float(ln.get("qte",1)),
                "pu_ht": _safe_float(ln.get("pu_ht",0)),
                "tva": _safe_float(ln.get("tva", doc.get("tva",0.2))),
                "total_ht": _safe_float(ln.get("total_ht",0))
            })
    doc["lignes"]=L
    for _key in ("maitre_oeuvre_nom", "maitre_oeuvre_email", "maitre_oeuvre_tel"):
        if _key not in doc:
            doc[_key] = ""
    # --- Robust enrichment (delta minimal): ensure client_prenom & client_ville are present for PDFs/e-mails ---
    try:
        # Fill first name if missing using existing inference logic
        if not (doc.get("client_prenom") or "").strip():
            try:
                doc["client_prenom"] = _infer_prenom(doc.get("client_id",""), doc.get("client_nom",""), doc.get("client_email",""))
            except Exception:
                doc["client_prenom"] = doc.get("client_prenom","") or ""
        # Fill city from clients.csv if blank (lookup by id first, then by normalized name)
        if not (doc.get("client_ville") or "").strip():
            try:
                _rows = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
                cid = (doc.get("client_id") or "").strip()
                cnm = (doc.get("client_nom") or "").strip().lower()
                got = ""
                if cid:
                    for _cl in _rows:
                        if (_cl.get("ID") or "").strip() == cid:
                            got = _cl.get("Ville","") or ""; break
                if not got and cnm:
                    for _cl in _rows:
                        if ((_cl.get("Nom") or "").strip().lower()) == cnm:
                            got = _cl.get("Ville","") or ""; break
                if got:
                    doc["client_ville"] = got
            except Exception:
                pass
    except Exception:
        pass
    return doc
def _prompt_facture_conversion_kind(parent_widget, *, auto: bool = False):
    """Return the chosen facture type (display label, normalized key)."""
    from PyQt5.QtWidgets import QApplication, QInputDialog, QMessageBox
    options = ["Facture simple", "Facture de situation…"]
    title = "Validation du devis" if auto else "Conversion devis"
    parents = []
    if parent_widget is not None:
        parents.append(parent_widget)
        try:
            win = parent_widget.window()
        except Exception:
            win = None
        if win and win is not parent_widget:
            parents.append(win)
    parents.append(QApplication.activeWindow())
    choix = None
    ok = False
    last_tb = ""
    for parent in parents:
        if parent is None:
            continue
        try:
            choix, ok = QInputDialog.getItem(
                parent,
                title,
                "Choisir le type de facture :",
                options,
                0,
                False,
            )
            break
        except RuntimeError:
            last_tb = traceback.format_exc()
            continue
        except Exception:
            last_tb = traceback.format_exc()
            log_error("prompt_facture_conversion_kind\n" + last_tb)
            try:
                QMessageBox.warning(
                    parent_widget or QApplication.activeWindow(),
                    title,
                    "Impossible d'afficher la sélection du type de facture.",
                )
            except Exception:
                pass
            return (None, None)
    else:
        if last_tb:
            log_error("prompt_facture_conversion_kind\n" + last_tb)
        try:
            QMessageBox.warning(
                parent_widget or QApplication.activeWindow(),
                title,
                "Sélection du type de facture annulée.",
            )
        except Exception:
            pass
        return (None, None)
    if not ok:
        return (None, None)
    kind = "situation" if "situation" in (choix or "").lower() else "simple"
    return (choix, kind)
# === SITU EMISSION (clean) ===
# === SITU BOOTSTRAP (failsafe, ensures helpers are defined at runtime) ===
try:
    _situ_resolve_context
except NameError:
    import re as _re, os as _os
    def _strip_situ_suffix(objet: str) -> str:
        try:
            s = str(objet or "").strip()
            s = _re.sub(r'\s*[–-]?\s*SITU[-_ ]?\d{2}\s*$', '', s, flags=_re.IGNORECASE)
            return s.strip()
        except Exception:
            return str(objet or "")
    def _situ_extract_idx_from_objet(objet: str):
        m = _re.search(r'(?:^|\b)SITU[-_ ]?(\d{2})\s*$', str(objet or "").upper())
        return int(m.group(1)) if m else None
    def _situ_list_for_parent(parent_doc: dict):
        try:
            base_obj = _strip_situ_suffix(parent_doc.get("objet",""))
            client_id = parent_doc.get("client_id","")
            rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            out = []
            for r in rows:
                if str(r.get("client_id","")) == str(client_id):
                    obj = str(r.get("objet",""))
                    if _strip_situ_suffix(obj) == base_obj and "SITU" in obj.upper():
                        out.append(r)
            return out
        except Exception:
            return []
    def _situ_resolve_context(parent_doc: dict):
        items = _situ_list_for_parent(parent_doc)
        try:
            items.sort(key=lambda r: (r.get("numero",""), r.get("date","")))
        except Exception:
            pass
        prev_billed = 0.0
        last_idx = 0
        anchor = None
        total_count = 0
        if items:
            last = items[-1]
            try:
                prev_billed = float(str(last.get("situation_cumul_ttc","0")).replace(',','.'))
            except Exception:
                prev_billed = 0.0
            last_idx = _situ_extract_idx_from_objet(last.get("objet","")) or 0
            anchor = last.get("numero") or None
            try:
                if float(last.get("situation_index", 0) or 0) > 0:
                    last_idx = int(float(last.get("situation_index", 0)))
            except Exception:
                pass
            for row in reversed(items):
                try:
                    val = int(float(str(row.get("situation_total_count", 0) or 0)))
                except Exception:
                    val = 0
                if val > 0:
                    total_count = val
                    break
        next_idx = max(1, last_idx + 1)
        next_suffix = f"SITU-{next_idx:02d}"
        if total_count < next_idx:
            total_count = next_idx
        return {
            "prev_billed_ttc": prev_billed,
            "next_idx": next_idx,
            "next_suffix": next_suffix,
            "anchor": anchor,
            "total_count": total_count,
        }
    # Bridge to patch normalizer if that's what's available
    try:
        _situ_files_normalize_from_doc
    except NameError:
        try:
            def _situ_files_normalize_from_doc(doc, idx_hint=None):
                try:
                    return _situ_sanitize_outputs(doc, expected_idx=idx_hint)
                except Exception:
                    return (None, None)
        except Exception:
            def _situ_files_normalize_from_doc(doc, idx_hint=None):
                return (None, None)
# === END SITU BOOTSTRAP ===
def _emit_facture_situation(parent_widget, doc_parent: dict, numero_dev: str, settings: dict):
    """
    Création d'une facture de situation depuis un devis parent, sans modifier le numéro légal et sans impacter FEC/relances.
    Contraintes: CSV via COL/LIN uniquement; réutilisation assemble_doc / writers / sender; arrondis 2 décimales.
    """
    from PyQt5.QtWidgets import QMessageBox, QDialog
    fac_num = None
    try:
        base_doc = dict(doc_parent or {})
        ctx = _situ_resolve_context(base_doc)
        prev_billed = float(ctx.get("prev_billed_ttc", 0.0) or 0.0)
        try:
            current_ttc = float(base_doc.get("total_ttc", doc_parent.get("total_ttc", 0.0)) or 0.0)
        except Exception:
            current_ttc = 0.0
        base_obj = _strip_situ_suffix(base_doc.get("objet", "") or "")
        suffix = ctx.get("next_suffix", "SITU-01")
        # Numéro légal
        fac_num = _safe_next_doc_number("facture", parent_widget)
        base_doc.setdefault("numero", fac_num)
        base_doc.setdefault("doc_reference", numero_dev)
        base_doc["situation_index"] = str(ctx.get("next_idx", 1))
        base_doc["situation_total_count"] = str(ctx.get("total_count") or ctx.get("next_idx", 1))
        # Préparation objet + champs situation
        base_doc["objet"] = (f"{base_obj} – {suffix}").strip()
        base_doc["situation_prev_ttc"] = f"{prev_billed:.2f}"
        base_doc["situation_current_ttc"] = f"{current_ttc:.2f}"
        base_doc["situation_cumul_ttc"] = f"{(prev_billed + current_ttc):.2f}"
        # Wizard si existant (sinon on garde les valeurs par défaut)
        try:
            dlg = FactureSituationDialog(base_doc, parent_widget)
            if dlg.exec_() != QDialog.Accepted:
                return None
            payload = dlg.get_payload() or {}
            for k in FACTURE_SITUATION_FIELDS:
                if k in payload and payload[k] is not None:
                    base_doc[k] = str(payload[k])
            if payload.get("doc_reference"):
                base_doc["doc_reference"] = str(payload.get("doc_reference") or "").strip()
        except Exception:
            pass
        # Ecritures CSV (FACTURE MASTER)
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        row = {k: "" for k in FACTURE_ALL_FIELDS}
        def _flt(x):
            try: return float(x or 0.0)
            except Exception: return 0.0
        row.update({
            "numero": fac_num,
            "date": base_doc.get("date", ""),
            "date_statut": "",
            "client_id": base_doc.get("client_id", ""),
            "client_nom": base_doc.get("client_nom", ""),
            "client_email": base_doc.get("client_email", ""),
            "client_tel": base_doc.get("client_tel", ""),
            "client_adresse": base_doc.get("client_adresse", ""),
            "client_cp": base_doc.get("client_cp", ""),
            "client_ville": base_doc.get("client_ville", ""),
            "maitre_oeuvre_nom": base_doc.get("maitre_oeuvre_nom", ""),
            "maitre_oeuvre_email": base_doc.get("maitre_oeuvre_email", ""),
            "maitre_oeuvre_tel": base_doc.get("maitre_oeuvre_tel", ""),
            "objet": base_doc.get("objet", ""),
            "statut": "Brouillon",
            "acompte": f"{_flt(base_doc.get('acompte')):.2f}",
            "total_ht": f"{_flt(base_doc.get('total_ht')):.2f}",
            "total_tva": f"{_flt(base_doc.get('total_tva')):.2f}",
            "total_ttc": f"{_flt(current_ttc):.2f}",
            "doc_reference": base_doc.get("doc_reference", numero_dev),
        })
        for k in FACTURE_SITUATION_FIELDS:
            if k in base_doc:
                row[k] = base_doc.get(k, "")
        facts.append(row)
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), facts, [COL[k] for k in FACTURE_ALL_FIELDS])
        # Lignes: copier les lignes du devis -> facture
        dev_lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
        fac_lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
        fac_lines = [ln for ln in fac_lines if ln.get("doc_num") != fac_num]
        for ln in dev_lines:
            if ln.get("doc_num") == numero_dev:
                fac_lines.append({
                    "doc_num": fac_num,
                    "kind": "facture",
                    "ref": ln.get("ref", ""),
                    "type": ln.get("type", ""),
                    "designation": ln.get("designation", ""),
                    "qte": ln.get("qte", ""),
                    "pu_ht": ln.get("pu_ht", ""),
                    "tva": ln.get("tva", ""),
                    "total_ht": ln.get("total_ht", ""),
                })
        save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), fac_lines, [
            LIN["doc_num"], LIN["kind"], LIN["ref"], LIN["type"], LIN["designation"], LIN["qte"], LIN["pu_ht"], LIN["tva"], LIN["total_ht"]
        ])
        # Marquer le devis converti
        masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        for r in masters:
            if r.get("numero") == numero_dev:
                r["converted_to_facture"] = fac_num
                break
        save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [
            "numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture",
        ])
        # PDF: override affichage puis restore
        doc = assemble_doc("facture", fac_num)
        numero_legal = str(doc.get("numero") or fac_num)
        doc["_numero_legal"] = numero_legal
        doc["numero"] = f"{numero_legal} – {suffix}"
        doc["title_override"] = f"FACTURE DE SITUATION {suffix}"
        try:
            try:
                _safe_write_facturx_pdf(doc, settings, fac_num)
            except Exception:
                _safe_write_facture_pdf(doc, settings, fac_num)
        finally:
            try: doc["numero"] = numero_legal
            except Exception: pass
            doc.pop("title_override", None)
        # Normalisation/promotions fichiers
        try: _situ_files_normalize_from_doc(doc, idx_hint=ctx.get("next_idx"))
        except Exception: pass
        try:
            QMessageBox.information(parent_widget, "Conversion", f"Facture de situation {fac_num} – {suffix} créée.")
        except Exception:
            pass
        return fac_num
    except Exception as _err:
        try:
            log_error("emit_facture_situation failed: " + str(_err))
        except Exception:
            pass
        try:
            QMessageBox.critical(parent_widget, "Conversion", "Échec de la création de la facture de situation.")
        except Exception:
            pass
        return None
    fac_num = None
    seq_key = None
    prev_seq = None
    try:
        seq_key = f"F{datetime.now().strftime('%Y')}"
        prev_seq = _LAST_NEXT_SEQ.get(seq_key, None)
    except Exception:
        seq_key = None
        prev_seq = None
    try:
        fac_num = _safe_next_doc_number("facture", parent_widget)
        base_doc = dict(doc_parent or {})
        base_doc.setdefault("numero", fac_num)
        base_doc.setdefault("total_ttc", _safe_float(doc_parent.get("total_ttc", 0.0), 0.0))
        base_doc.setdefault("doc_reference", numero_dev)
        situation_payload = {
            "situation_prev_ttc": "",
            "situation_current_ttc": f"{_safe_float(doc_parent.get('total_ttc', 0.0), 0.0):.2f}",
            "situation_cumul_ttc": "",
            "situation_pct": "",
            "situation_base_ttc": "",
            "situation_index": "1",
            "situation_total_count": "1",
        }
        dlg = None
        try:
            # === SITU prefill (injected) ===
            try:
                _ctx = _situ_resolve_context(base_doc)
                _base_obj = _strip_situ_suffix(base_doc.get("objet",""))
                base_doc["objet"] = f"{_base_obj} – {_ctx['next_suffix']}"
                _prev = float(_ctx.get("prev_billed", 0.0) or 0.0)
                _curr = _safe_float(base_doc.get("total_ttc", 0.0), 0.0)
                base_doc["situation_prev_ttc"] = f"{_prev:.2f}"
                base_doc["situation_current_ttc"] = f"{_curr:.2f}"
                base_doc["situation_cumul_ttc"] = f"{(_prev + _curr):.2f}"
                base_doc["situation_index"] = str(_ctx.get("next_idx", 1))
                base_doc["situation_total_count"] = str(_ctx.get("total_count") or _ctx.get("next_idx", 1))
                situation_payload.update({
                    "situation_index": base_doc["situation_index"],
                    "situation_total_count": base_doc["situation_total_count"],
                })
            except Exception:
                pass
            # === End SITU prefill ===
            dlg = FactureSituationDialog(base_doc, parent_widget)
        except Exception:
            dlg = None
        if dlg is not None:
            if dlg.exec_() != QDialog.Accepted:
                if seq_key is not None:
                    try:
                        if prev_seq is None:
                            _LAST_NEXT_SEQ.pop(seq_key, None)
                        else:
                            _LAST_NEXT_SEQ[seq_key] = prev_seq
                    except Exception:
                        pass
                return None
            try:
                payload = dlg.get_payload()
                if payload.get("doc_reference"):
                    base_doc["doc_reference"] = str(payload.get("doc_reference") or "").strip()
                situation_payload = _format_situation_values(payload)
            except Exception:
                situation_payload = _format_situation_values(situation_payload)
        else:
            situation_payload = _format_situation_values(situation_payload)
        keys_for_facture = [k for k in COL.keys() if k != "converted_to_facture"]
        fac_row = {k: "" for k in keys_for_facture}
        fac_row.update({
            "numero": fac_num,
            "date": base_doc.get("date", ""),
            "date_statut": "",
            "client_id": base_doc.get("client_id", ""),
            "client_nom": base_doc.get("client_nom", ""),
            "client_email": base_doc.get("client_email", ""),
            "client_tel": base_doc.get("client_tel", ""),
            "client_adresse": base_doc.get("client_adresse", ""),
            "client_cp": base_doc.get("client_cp", ""),
            "client_ville": base_doc.get("client_ville", ""),
            "maitre_oeuvre_nom": base_doc.get("maitre_oeuvre_nom", ""),
            "maitre_oeuvre_email": base_doc.get("maitre_oeuvre_email", ""),
            "maitre_oeuvre_tel": base_doc.get("maitre_oeuvre_tel", ""),
            "objet": base_doc.get("objet", ""),
            "statut": "Brouillon",
            "acompte": f"{_safe_float(base_doc.get('acompte', 0.0), 0.0):.2f}",
            "total_ht": f"{_safe_float(base_doc.get('total_ht', 0.0), 0.0):.2f}",
            "total_tva": f"{_safe_float(base_doc.get('total_tva', 0.0), 0.0):.2f}",
            "total_ttc": f"{_safe_float(base_doc.get('total_ttc', 0.0), 0.0):.2f}",
            "doc_reference": base_doc.get("doc_reference", numero_dev),
        })
        fac_row.update(situation_payload)
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        facts.append(fac_row)
        save_csv(
            os.path.join(DATA_DIR, CSV_FACTS),
            facts,
            [COL[k] for k in FACTURE_ALL_FIELDS],
        )
        dev_lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
        fac_lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
        for ln in dev_lines:
            if ln.get("doc_num") == numero_dev:
                fac_lines.append({
                    "doc_num": fac_num,
                    "kind": "facture",
                    "ref": ln.get("ref", ""),
                    "type": ln.get("type", ""),
                    "designation": ln.get("designation", ""),
                    "qte": ln.get("qte", ""),
                    "pu_ht": ln.get("pu_ht", ""),
                    "tva": ln.get("tva", ""),
                    "total_ht": ln.get("total_ht", ""),
                })
        save_csv(
            os.path.join(DATA_DIR, CSV_FAC_LIN),
            fac_lines,
            [
                LIN["doc_num"],
                LIN["kind"],
                LIN["ref"],
                LIN["type"],
                LIN["designation"],
                LIN["qte"],
                LIN["pu_ht"],
                LIN["tva"],
                LIN["total_ht"],
            ],
        )
        masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        for r in masters:
            if r.get("numero") == numero_dev:
                r["converted_to_facture"] = fac_num
                break
        save_csv(
            os.path.join(DATA_DIR, CSV_DEVIS),
            masters,
            [
                "numero",
                "date",
                "date_statut",
                "client_id",
                "client_nom",
                "client_email",
                "client_tel",
                "client_adresse",
                "client_cp",
                "client_ville",
                "objet",
                "statut",
                "acompte",
                "total_ht",
                "total_tva",
                "total_ttc",
                "converted_to_facture",
            ],
        )
        try:
            log_action("convert_devis_to_facture_situation", f"{numero_dev}->{fac_num}")
        except Exception:
            pass
        try:
            QMessageBox.information(
                parent_widget,
                "Conversion",
                f"Facture de situation {fac_num} créée depuis le devis {numero_dev}.",
            )
        except Exception:
            pass
        return fac_num
    except Exception:
        if seq_key is not None and fac_num:
            try:
                if prev_seq is None:
                    _LAST_NEXT_SEQ.pop(seq_key, None)
                else:
                    _LAST_NEXT_SEQ[seq_key] = prev_seq
            except Exception:
                pass
        try:
            log_error("emit_facture_situation\n" + traceback.format_exc())
        except Exception:
            pass
        try:
            QMessageBox.critical(
                parent_widget,
                "Conversion",
                "Échec de la création de la facture de situation.",
            )
        except Exception:
            pass
        return None
def _convert_devis_with_prompt(tab, numero: str, *, auto: bool):
    """Centralise la conversion d'un devis en facture et gère le choix du type."""
    log_prefix = "convert_auto_accept" if auto else "convert_devis_manual"
    try:
        masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        master_row = None
        for r in masters:
            if r.get("numero") == numero:
                master_row = r
                break
        if master_row is None:
            if not auto:
                try:
                    QMessageBox.warning(tab, "Introuvable", "Devis introuvable.")
                except Exception:
                    pass
            return None
        if (master_row.get("converted_to_facture") or "").strip():
            if not auto:
                try:
                    QMessageBox.warning(tab, "Déjà converti", "Ce devis a déjà été converti.")
                except Exception:
                    pass
            return master_row.get("converted_to_facture")
        try:
            doc = assemble_doc("devis", numero)
        except Exception:
            doc = None
        if not doc:
            if not auto:
                try:
                    QMessageBox.warning(tab, "Introuvable", "Devis introuvable.")
                except Exception:
                    pass
            return None
        choix_label, choix_kind = _prompt_facture_conversion_kind(tab, auto=auto)
        if not choix_kind:
            return None
        if choix_kind == "situation":
            res = tab._convert_devis_to_facture_situation(numero)
            return res
        fac_num = _safe_next_doc_number("facture", tab)
        keys_for_facture = [k for k in COL.keys() if k != "converted_to_facture"]
        fac_row = {k: "" for k in keys_for_facture}
        fac_row.update({
            "numero": fac_num,
            "date": doc.get("date", ""),
            "date_statut": "",
            "client_id": doc.get("client_id", ""),
            "client_nom": doc.get("client_nom", ""),
            "client_email": doc.get("client_email", ""),
            "client_tel": doc.get("client_tel", ""),
            "client_adresse": doc.get("client_adresse", ""),
            "client_cp": doc.get("client_cp", ""),
            "client_ville": doc.get("client_ville", ""),
            "maitre_oeuvre_nom": doc.get("maitre_oeuvre_nom", ""),
            "maitre_oeuvre_email": doc.get("maitre_oeuvre_email", ""),
            "maitre_oeuvre_tel": doc.get("maitre_oeuvre_tel", ""),
            "objet": doc.get("objet", ""),
            "statut": "Brouillon",
            "acompte": f"{_safe_float(doc.get('acompte', 0), 0.0):.2f}",
            "total_ht": f"{_safe_float(doc.get('total_ht', 0), 0.0):.2f}",
            "total_tva": f"{_safe_float(doc.get('total_tva', 0), 0.0):.2f}",
            "total_ttc": f"{_safe_float(doc.get('total_ttc', 0), 0.0):.2f}",
            "doc_reference": doc.get("doc_reference", numero),
        })
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        facts.append(fac_row)
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), facts, [COL[k] for k in FACTURE_ALL_FIELDS])
        dev_lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
        fac_lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
        for ln in dev_lines:
            if ln.get("doc_num") == numero:
                fac_lines.append({
                    "doc_num": fac_num,
                    "kind": "facture",
                    "ref": ln.get("ref", ""),
                    "type": ln.get("type", ""),
                    "designation": ln.get("designation", ""),
                    "qte": ln.get("qte", ""),
                    "pu_ht": ln.get("pu_ht", ""),
                    "tva": ln.get("tva", ""),
                    "total_ht": ln.get("total_ht", ""),
                })
        save_csv(
            os.path.join(DATA_DIR, CSV_FAC_LIN),
            fac_lines,
            [LIN["doc_num"], LIN["kind"], LIN["ref"], LIN["type"], LIN["designation"], LIN["qte"], LIN["pu_ht"], LIN["tva"], LIN["total_ht"]],
        )
        master_row["converted_to_facture"] = fac_num
        save_csv(
            os.path.join(DATA_DIR, CSV_DEVIS),
            masters,
            [
                "numero",
                "date",
                "date_statut",
                "client_id",
                "client_nom",
                "client_email",
                "client_tel",
                "client_adresse",
                "client_cp",
                "client_ville",
                "objet",
                "statut",
                "acompte",
                "total_ht",
                "total_tva",
                "total_ttc",
                "converted_to_facture",
            ],
        )
        try:
            log_action(
                "convert_devis_to_facture_auto" if auto else "convert_devis_to_facture",
                f"{numero}->{fac_num}",
            )
        except Exception:
            pass
        try:
            QMessageBox.information(tab, "Conversion", f"Devis {numero} converti en facture {fac_num}.")
        except Exception:
            pass
        try:
            refresh_all_tabs(tab)
        except Exception:
            pass
        if not auto:
            tab.trigger_refresh()
        return fac_num
    except Exception:
        try:
            log_error(f"{log_prefix}\n" + traceback.format_exc())
        except Exception:
            pass
        return None
# --- Template rendering helper for auto-email ---
def render_tpl(tpl: str, doc: dict, settings: dict, pdf_path: str) -> str:
    try:
        ttc = float(doc.get("total_ttc", 0) or 0.0)
        ht  = float(doc.get("total_ht", 0) or 0.0)
        tva = float(doc.get("total_tva", 0) or 0.0)
        acompte = float(doc.get("acompte", 0) or 0.0)
        restant = max(ttc - acompte, 0.0)
        mapping = {
            "DOC_TYPE": "Devis" if str(doc.get("numero","")).startswith("D") else "Facture",
            "DOC_NUM": doc.get("numero",""),
            "DOC_DATE": _display_date(doc.get("date","")),
            "CLIENT_NOM": (lambda _nm,_doc: (lambda _civ0,_nom,_pn: (lambda _civ: (f"{_civ} {_nom}".strip() if _civ and _civ!="—" else _nom))((_load_civilite_map().get((_doc.get("client_email") or "").strip() or _nm) or _civ0)))(*_split_civ_name_prenom(_nm)))(doc.get("client_nom",""), doc),
            "TOTAL_HT": f"{ht:.2f} €",
            "TOTAL_TVA": f"{tva:.2f} €",
            "TOTAL_TTC": f"{ttc:.2f} €",
            "ACOMPTE": f"{acompte:.2f} €",
            "RESTANT_DU": f"{restant:.2f} €",
            "ENTREPRISE_NOM": settings.get("entreprise_nom",""),
            "ENTREPRISE_TEL": settings.get("entreprise_tel",""),
            "ENTREPRISE_MAIL": settings.get("entreprise_mail",""),
            "Logo": _logo_from_settings(settings),
            "MESSAGE_ENTREPRISE": "{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
            "LIEN_PDF": pdf_path or "",
        }
        sit = _get_situation_info(doc, include_rank=True)
        mapping.update({
            "SITUATION_PREV": f"{sit.get('prev', 0.0):.2f} €",
            "SITUATION_CURRENT": f"{sit.get('current', 0.0):.2f} €",
            "SITUATION_CUMUL": f"{sit.get('cumul', 0.0):.2f} €",
            "SITUATION_RESTE": f"{sit.get('reste', 0.0):.2f} €",
            "SITUATION_RESTANT": f"{sit.get('reste', 0.0):.2f} €",
            "SITUATION_BASE": f"{sit.get('base', 0.0):.2f} €",
            "SITUATION_PCT": f"{sit.get('pct', 0.0):.2f} %",
            "SITUATION_RANG": str(int(sit.get('rank'))) if sit.get('rank') else "",
            "SITUATION_TYPE": "Solde" if sit.get('is_solde') else ("Situation" if sit.get('is_situation') else ""),
        })
        # Expose granular name parts for templates (backward-compatible)
        try:
            _nm = (doc.get("client_nom") or "").strip()
            _civ_guess, _nom_base, _pn_auto = _split_civ_name_prenom(_nm)
            try:
                _key = (doc.get("client_email") or "").strip() or _nm
                _civ = _load_civilite_map().get(_key) or _civ_guess
            except Exception:
                _civ = _civ_guess
            _pn = (doc.get("client_prenom") or "").strip() or _pn_auto
            mapping.setdefault("CLIENT_PRENOM", _pn)
            mapping.setdefault("PRENOM", _pn)
            mapping.setdefault("NOM", _nom_base)
            mapping.setdefault("CIV", _civ)
        except Exception:
            pass
        # --- Override CIV & PRENOM from clients_master.json when available ---
        try:
            _key_m = _norm_key_client((doc.get('client_email') or '').strip())
            if _key_m:
                _m = _load_clients_master()
                _rec = _m.get(_key_m, {}) if isinstance(_m, dict) else {}
                _civ_m = normalize_civilite(_rec.get('civilite','')) if 'normalize_civilite' in globals() else (_rec.get('civilite','') or '').strip()
                if _civ_m in ('M.','Mme'):
                    mapping['CIV'] = _civ_m
                _pn_m = (_rec.get('prenom','') or '').strip()
                if _pn_m:
                    mapping['CLIENT_PRENOM'] = mapping['PRENOM'] = _pn_m
                _nom_base2 = mapping.get('NOM','')
                if mapping.get('CIV') in ('M.','Mme') and _nom_base2:
                    mapping['CLIENT_NOM'] = f"{mapping['CIV']} {_nom_base2}".strip()
        except Exception:
            pass
        out = tpl or ""
        for k, v in mapping.items():
            out = out.replace("{"+k+"}", str(v))
        # second pass to resolve nested placeholders
        for k, v in mapping.items():
            out = out.replace("{"+k+"}", str(v))
        for k, v in mapping.items():
            out = out.replace("{"+k+"}", str(v))
        return out
    except Exception:
        return tpl or ""
def build_email_body(tpl_body:str, doc:dict, settings:dict, pdf_path:str=""):
    # Compose greeting using civilité from clients_master.json when possible
    nm = (doc.get("client_nom") or "").strip()
    civ_guess, nom_base, prenom_auto = _split_civ_name_prenom(nm)
    civ = civ_guess
    try:
        key = (doc.get("client_email") or "").strip() or nm
        cm = _load_clients_master()
        rec = cm.get(_norm_key_client(key), {}) if isinstance(cm, dict) else {}
        civ_m = normalize_civilite(rec.get("civilite","")) if "normalize_civilite" in globals() else (rec.get("civilite","") or "").strip()
        if civ_m in ("M.","Mme"):
            civ = civ_m
        else:
            # Fallback to legacy map
            try:
                civ = _load_civilite_map().get(key) or civ_guess
            except Exception:
                civ = civ_guess
    except Exception:
        pass
    greet = f"Bonjour {civ} {nom_base}".strip() if civ and civ != "—" else f"Bonjour {nom_base}".strip()
    core = render_tpl(tpl_body, doc, settings, pdf_path) or ""
    if core.lstrip().lower().startswith("bonjour"):
        return core.strip()
    return f"{greet}\n\n{core}".strip()
def _draw_logo(c, path, x, y, max_w, max_h):
    try:
        if not path or not os.path.exists(path): return
        img = ImageReader(path)
        iw, ih = img.getSize()
        ratio = min(max_w/iw, max_h/ih)
        w, h = iw*ratio, ih*ratio
        c.drawImage(img, x, y-h, width=w, height=h, mask='auto')
    except Exception:
        pass
def _draw_kv(c, x, y, w, k, v, theme, key_w=0.4):
    c.setFont("Helvetica-Bold",9); c.setFillColorRGB(*theme)
    c.drawString(x, y, k)
    c.setFont("Helvetica",9); c.setFillColorRGB(0,0,0)
    c.drawString(x + w*key_w, y, v)
def _money(v): 
    try: return f"{float(v):.2f} €"
    except: return "0.00 €"
def _table_row(c, xcol, y, row_h, vals, bold_idx=None, align_right=None):
    c.setFont("Helvetica-Bold",9) if bold_idx else c.setFont("Helvetica",9)
    for i, txt in enumerate(vals):
        s = str(txt)
        if align_right and i in align_right:
            tw = c.stringWidth(s, "Helvetica", 9)
            c.drawString(xcol[i+1]-tw-2*mm, y, s)
        else:
            c.drawString(xcol[i]+2*mm, y, s)
def _wrap_simple(c, s, maxlen):
    s = str(s or "")
    if len(s)<=maxlen: return [s]
    out=[]; cur=""
    for w in s.split():
        if len(cur)+1+len(w) > maxlen:
            out.append(cur); cur=w
        else:
            cur=(w if not cur else cur+" "+w)
    if cur: out.append(cur)
    return out
def _draw_justified_line(c, text, x, y, width, font="Helvetica", size=11):
    """
    Draw a single line with basic justification by distributing extra space across spaces.
    Do not call this for the last line of a paragraph or when text ends with a hyphen.
    """
    try:
        text = (text or "").strip()
        if not text:
            return
        parts = text.split(" ")
        if len(parts) <= 1:
            c.drawString(x, y, text); return
        tw = c.stringWidth(text, font, size)
        gap = width - tw
        if gap <= 0:
            c.drawString(x, y, text); return
        spaces = text.count(" ")
        extra = gap / spaces if spaces else 0
        cursor = x
        for i, w in enumerate(parts):
            if i:
                cursor += extra
                c.drawString(cursor, y, " ")
                cursor += c.stringWidth(" ", font, size)
            c.drawString(cursor, y, w)
            cursor += c.stringWidth(w, font, size)
    except Exception:
        c.drawString(x, y, text)
# ===== Factur‑X export (Basic WL) =====
def _fx_sanitize(s):
    import html
    return html.escape(str(s or "").strip(), quote=True)
def _fx_as_decimal(x):
    try:
        return f"{float(x):.2f}"
    except Exception:
        return "0.00"
def _build_facturx_xml(doc, settings)->bytes:
    """
    Minimal CII (EN16931) for Factur‑X Basic WL.
    Ne couvre pas 100% des cas, mais permet un test bout‑à‑bout.
    """
    seller = {
        "name": settings.get("entreprise_nom",""),
        "siren": str(settings.get("entreprise_siren","")),
        "siret": str(settings.get("entreprise_siret","")),
        "vat": settings.get("entreprise_tva",""),
        "street": settings.get("entreprise_adresse",""),
        "cp": settings.get("entreprise_cp",""),
        "city": settings.get("entreprise_ville",""),
        "country": "FR"
    }
    buyer = {
        "name": doc.get("client_nom",""),
        "vat": doc.get("client_tva",""),
        "street": doc.get("client_adresse",""),
        "cp": doc.get("client_cp",""),
        "city": doc.get("client_ville",""),
        "country": "FR"
    }
    num = doc.get("numero","")
    d = doc.get("date","") or ""
    try:
        d_iso = datetime.strptime(d, "%d/%m/%Y").strftime("%Y%m%d")
    except Exception:
        d_iso = datetime.now().strftime("%Y%m%d")
    currency = settings.get("devise","EUR")
    t_ht = _fx_as_decimal(doc.get("total_ht", 0))
    t_tva = _fx_as_decimal(doc.get("total_tva", 0))
    t_ttc = _fx_as_decimal(doc.get("total_ttc", 0))
    lines = doc.get("lignes", [])
    xml = []
    W = xml.append
    W('<?xml version="1.0" encoding="UTF-8"?>')
    W('<rsm:CrossIndustryInvoice xmlns:rsm="urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100"')
    W(' xmlns:ram="urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100"')
    W(' xmlns:qdt="urn:un:unece:uncefact:data:standard:QualifiedDataType:100">')
    W('  <rsm:ExchangedDocument>')
    W(f'    <ram:ID>{_fx_sanitize(num)}</ram:ID>')
    W(f'    <ram:TypeCode>380</ram:TypeCode>')
    W(f'    <ram:IssueDateTime><qdt:DateTimeString format="102">{d_iso}</qdt:DateTimeString></ram:IssueDateTime>')
    W('  </rsm:ExchangedDocument>')
    W('  <rsm:SupplyChainTradeTransaction>')
    for i, ln in enumerate(lines, 1):
        name = _fx_sanitize(ln.get("designation",""))
        qty = _fx_as_decimal(ln.get("qte",1))
        pu = _fx_as_decimal(ln.get("pu_ht",0))
        vat = int(round(float(ln.get("tva", ln.get("tva_pct", 0.2)))*100)) if ln.get("tva") is not None or ln.get("tva_pct") is not None else 0
        W('    <ram:IncludedSupplyChainTradeLineItem>')
        W('      <ram:AssociatedDocumentLineDocument>')
        W(f'        <ram:LineID>{i}</ram:LineID>')
        W('      </ram:AssociatedDocumentLineDocument>')
        W('      <ram:SpecifiedTradeProduct>')
        W(f'        <ram:Name>{name}</ram:Name>')
        if ln.get("ref"):
            W(f'        <ram:SellerAssignedID>{_fx_sanitize(ln.get("ref"))}</ram:SellerAssignedID>')
        W('      </ram:SpecifiedTradeProduct>')
        W('      <ram:SpecifiedLineTradeAgreement>')
        W(f'        <ram:GrossPriceProductTradePrice><ram:ChargeAmount>{pu}</ram:ChargeAmount></ram:GrossPriceProductTradePrice>')
        W('      </ram:SpecifiedLineTradeAgreement>')
        W('      <ram:SpecifiedLineTradeDelivery>')
        W(f'        <ram:BilledQuantity unitCode="C62">{qty}</ram:BilledQuantity>')
        W('      </ram:SpecifiedLineTradeDelivery>')
        W('      <ram:SpecifiedLineTradeSettlement>')
        W('        <ram:ApplicableTradeTax>')
        W('          <ram:TypeCode>VAT</ram:TypeCode>')
        W(f'          <ram:CategoryCode>S</ram:CategoryCode>')
        W(f'          <ram:RateApplicablePercent>{vat}</ram:RateApplicablePercent>')
        W('        </ram:ApplicableTradeTax>')
        W('      </ram:SpecifiedLineTradeSettlement>')
        W('    </ram:IncludedSupplyChainTradeLineItem>')
    vat_pct = 0
    try:
        vat_pct = int(round(float(lines[0].get("tva", 0.2))*100)) if lines else 0
    except Exception:
        pass
    W('    <ram:ApplicableHeaderTradeAgreement>')
    W(f'      <ram:SellerTradeParty><ram:Name>{_fx_sanitize(seller["name"])}</ram:Name></ram:SellerTradeParty>')
    W(f'      <ram:BuyerTradeParty><ram:Name>{_fx_sanitize(buyer["name"])}</ram:Name></ram:BuyerTradeParty>')
    W('    </ram:ApplicableHeaderTradeAgreement>')
    W('    <ram:ApplicableHeaderTradeDelivery/>')
    W('    <ram:ApplicableHeaderTradeSettlement>')
    W('      <ram:InvoiceCurrencyCode>{}</ram:InvoiceCurrencyCode>'.format(_fx_sanitize(currency)))
    W('      <ram:ApplicableTradeTax>')
    W('        <ram:TypeCode>VAT</ram:TypeCode>')
    W('        <ram:CategoryCode>S</ram:CategoryCode>')
    W(f'        <ram:RateApplicablePercent>{vat_pct}</ram:RateApplicablePercent>')
    W(f'        <ram:BasisAmount>{t_ht}</ram:BasisAmount>')
    W(f'        <ram:CalculatedAmount>{t_tva}</ram:CalculatedAmount>')
    W('      </ram:ApplicableTradeTax>')
    W('      <ram:SpecifiedTradeSettlementMonetarySummation>')
    W(f'        <ram:LineTotalAmount>{t_ht}</ram:LineTotalAmount>')
    W(f'        <ram:TaxTotalAmount currencyID="{_fx_sanitize(currency)}">{t_tva}</ram:TaxTotalAmount>')
    W(f'        <ram:GrandTotalAmount>{t_ttc}</ram:GrandTotalAmount>')
    W('      </ram:SpecifiedTradeSettlementMonetarySummation>')
    W('    </ram:ApplicableHeaderTradeSettlement>')
    W('  </rsm:SupplyChainTradeTransaction>')
    W('</rsm:CrossIndustryInvoice>')
    return ("\n".join(xml)).encode("utf-8")
def _embed_facturx(pdf_path: str, xml_bytes: bytes, profile="basicwl") -> str:
    """
    Embarque 'factur-x.xml' dans le PDF via pikepdf (>= 6.x, testé v9).
    Retourne ..._fx.pdf si succès, sinon écrit un .xml à côté et retourne le PDF d'origine.
    """
    out = pdf_path[:-4] + "_fx.pdf"
    try:
        from pikepdf import Pdf, AttachedFileSpec, Name, Array
        with Pdf.open(pdf_path) as pdf:
            filespec = AttachedFileSpec(pdf, xml_bytes, mime_type="application/xml")
            pdf.attachments["factur-x.xml"] = filespec
            try:
                pdf.Root[Name("/AF")] = pdf.make_indirect(Array([filespec.obj]))
            except Exception:
                pass
            pdf.save(out)
        return out
    except Exception as e:
        side = pdf_path[:-4] + ".xml"
        try:
            with open(side, "wb") as f:
                f.write(xml_bytes)
        except Exception:
            pass
        try:
            _ui_toast("Factur‑X : XML non embarqué — fichier .xml posé à côté.")
        except Exception:
            pass
        try:
            with open(r'data/APP_RUNTIME_DEBUG.log','a',encoding='utf-8') as log:
                log.write(f"[FacturX fallback] {pdf_path} -> sidecar ({side}) | {e}\n")
        except Exception:
            pass
        return pdf_path
def _export_facturx(doc, settings, pdf_path:str)->str:
    xml = _build_facturx_xml(doc, settings)
    return _embed_facturx(pdf_path, xml)
# ===== CII (EN16931) helpers — XML export & spool =====
def _cii_log(msg: str):
    try:
        d = os.path.join(DATA_DIR)
        os.makedirs(d, exist_ok=True)
        log_path = os.path.join(d, "cii_export.log")
        from datetime import datetime as _dt
        with open(log_path, "a", encoding="utf-8") as f:
            f.write(f"{_dt.now().isoformat(timespec='seconds')} {msg}\n")
    except Exception:
        # Never crash the UI on logging
        pass
# --- CIUS-FR party helpers & pruning ---
def _resolve_seller_buyer(settings: dict, doc: dict):
    """Return (seller, buyer) dictionaries with name, siren, siret, vat, address."""
    # Seller (settings)
    s_name = settings.get("entreprise_nom") or settings.get("company_name") or settings.get("societe") or ""
    s_vat  = settings.get("entreprise_tva") or settings.get("company_vat") or settings.get("tva") or ""
    # Respect "TVA non applicable": if true, do not output VAT ID
    try:
        if bool(settings.get("tva_non_applicable", False)):
            s_vat = ""
    except Exception:
        pass
    s_siren= settings.get("entreprise_siren") or settings.get("company_siren") or settings.get("siren") or ""
    s_siret= settings.get("entreprise_siret") or settings.get("company_siret") or settings.get("siret") or ""
    s_addr1= settings.get("entreprise_adresse") or settings.get("company_addr1") or settings.get("adresse1") or ""
    s_addr2= settings.get("entreprise_adresse2") or settings.get("company_addr2") or settings.get("adresse2") or ""
    s_cp   = settings.get("entreprise_cp") or settings.get("company_zip") or settings.get("cp") or ""
    s_city = settings.get("entreprise_ville") or settings.get("company_city") or settings.get("ville") or ""
    s_iso  = settings.get("entreprise_pays") or settings.get("company_country_iso") or settings.get("pays_iso") or "FR"
    seller = {
        "name": s_name, "vat": s_vat, "siren": s_siren, "siret": s_siret,
        "addr": {"line1": s_addr1, "line2": s_addr2, "pc": s_cp, "city": s_city, "iso": s_iso or "FR"}
    }
    # Buyer (doc)
    c = doc.get("client") if isinstance(doc.get("client"), dict) else {}
    b_name = doc.get("client_nom") or c.get("raison_sociale") or c.get("nom") or ""
    b_vat  = doc.get("client_tva") or c.get("tva") or c.get("vat") or ""
    b_siren= c.get("siren") or ""
    b_siret= c.get("siret") or ""
    b_addr1= doc.get("client_adresse") or c.get("adresse1") or ""
    b_addr2= c.get("adresse2") or ""
    b_cp   = doc.get("client_cp") or c.get("cp") or c.get("code_postal") or ""
    b_city = doc.get("client_ville") or c.get("ville") or ""
    b_iso  = doc.get("client_pays") or c.get("pays_iso") or "FR"
    buyer = {
        "name": b_name, "vat": b_vat, "siren": b_siren, "siret": b_siret,
        "addr": {"line1": b_addr1, "line2": b_addr2, "pc": b_cp, "city": b_city, "iso": b_iso or "FR"}
    }
    return seller, buyer
def _emit_party_block(name: str, party: dict, ns_ram: str)->str:
    from xml.sax.saxutils import escape
    e = lambda x: escape(str(x) if x is not None else "")
    parts = []
    parts.append(f"""
      <ram:{name}>
        <ram:Name>{e(party.get('name',''))}</ram:Name>""")
    # Legal org (SIREN / SIRET)
    if party.get("siren") or party.get("siret"):
        parts.append("""
        <ram:SpecifiedLegalOrganization>""")
        if party.get("siren"):
            parts.append(f"""
          <ram:ID schemeID="SIREN">{e(party['siren'])}</ram:ID>""")
        if party.get("siret"):
            parts.append(f"""
          <ram:ID schemeID="SIRET">{e(party['siret'])}</ram:ID>""")
        parts.append("""
        </ram:SpecifiedLegalOrganization>""")
    # VAT registration
    if party.get("vat"):
        parts.append("""
        <ram:SpecifiedTaxRegistration>
          <ram:ID schemeID="VAT">""" + e(party['vat']) + """</ram:ID>
        </ram:SpecifiedTaxRegistration>""")
    # Postal address
    addr = party.get("addr") or {}
    if any(addr.get(k) for k in ("line1","line2","pc","city","iso")):
        parts.append("""
        <ram:PostalTradeAddress>""")
        if addr.get("pc"):
            parts.append(f"""
          <ram:PostcodeCode>{e(addr['pc'])}</ram:PostcodeCode>""")
        if addr.get("line1"):
            parts.append(f"""
          <ram:LineOne>{e(addr['line1'])}</ram:LineOne>""")
        if addr.get("line2"):
            parts.append(f"""
          <ram:LineTwo>{e(addr['line2'])}</ram:LineTwo>""")
        if addr.get("city"):
            parts.append(f"""
          <ram:CityName>{e(addr['city'])}</ram:CityName>""")
        parts.append(f"""
          <ram:CountryID>{e(addr.get('iso') or 'FR')}</ram:CountryID>
        </ram:PostalTradeAddress>""")
    parts.append(f"""
      </ram:{name}>""")
    return "".join(parts)
def _prune_empty_xml_bytes(xml_bytes: bytes) -> bytes:
    """Remove empty nodes (no text, no children, no attrs)."""
    try:
        import xml.etree.ElementTree as ET
        parser = ET.XMLParser()
        root = ET.fromstring(xml_bytes, parser=parser)
        def _prune(elem):
            for child in list(elem):
                _prune(child)
                if (not (child.text or "").strip()) and not list(child) and not child.attrib:
                    elem.remove(child)
        _prune(root)
        return ET.tostring(root, encoding="utf-8", method="xml")
    except Exception:
        return xml_bytes
def _build_en16931_cii_xml(doc: dict, settings: dict) -> bytes:
    """Build a *minimal* EN16931 CII (CrossIndustryInvoice) XML for the given invoice doc.
    Enriched with FR identifiers (SIREN/SIRET/VAT) and prunes empty nodes.
    """
    from xml.sax.saxutils import escape
    from datetime import datetime as _dt
    # Data extraction with safe fallbacks
    numero = str(doc.get("numero") or doc.get("num") or doc.get("numero_facture") or "")
    date_str = (doc.get("date") or doc.get("date_facture") or _dt.now().strftime("%Y-%m-%d"))[:10]
    currency = (settings.get("devise") or settings.get("currency") or doc.get("currency") or "EUR").strip() or "EUR"
    # Party blocks
    seller, buyer = _resolve_seller_buyer(settings, doc)
    # Lines & totals
    lines = list(doc.get("lignes") or [])
    try:
        total_ht = float(doc.get("total_ht", 0.0))
        total_tva = float(doc.get("total_tva", 0.0))
        total_ttc = float(doc.get("total_ttc", total_ht + total_tva))
    except Exception:
        total_ht = 0.0; total_tva = 0.0; total_ttc = 0.0
    ns_rsm = "urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100"
    ns_ram = "urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100"
    ns_udt = "urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100"
    e = lambda x: escape(str(x) if x is not None else "")
    parts = []
    parts.append(f"""<rsm:CrossIndustryInvoice xmlns:rsm="{ns_rsm}" xmlns:ram="{ns_ram}" xmlns:udt="{ns_udt}">
  <rsm:ExchangedDocumentContext>
    <ram:GuidelineSpecifiedDocumentContextParameter>
      <ram:ID>urn:cen.eu:en16931:2017</ram:ID>
    </ram:GuidelineSpecifiedDocumentContextParameter>
  </rsm:ExchangedDocumentContext>
  <rsm:ExchangedDocument>
    <ram:ID>{e(numero)}</ram:ID>
    <ram:TypeCode>380</ram:TypeCode>
    <ram:IssueDateTime>
      <udt:DateTimeString format="102">{e(date_str.replace("-",""))}</udt:DateTimeString>
    </ram:IssueDateTime>
  </rsm:ExchangedDocument>
  <rsm:SupplyChainTradeTransaction>
    <ram:ApplicableHeaderTradeAgreement>""")
    parts.append(_emit_party_block("SellerTradeParty", seller, ns_ram))
    parts.append(_emit_party_block("BuyerTradeParty",  buyer, ns_ram))
    parts.append("""
    </ram:ApplicableHeaderTradeAgreement>
    <ram:ApplicableHeaderTradeDelivery/>
    <ram:ApplicableHeaderTradeSettlement>
      <ram:InvoiceCurrencyCode>""" + e(currency) + """</ram:InvoiceCurrencyCode>""")
    # Tax summary buckets (by rate)
    buckets = {}
    for ln in lines:
        try:
            rate = float(ln.get("tva", doc.get("tva", 0) or 0) or 0)
            q = float(ln.get("qte") or ln.get("quantite") or 0)
            pu = float(ln.get("pu") or ln.get("prix_unitaire") or 0)
            line_ht = float(ln.get("total_ht", q*pu))
        except Exception:
            rate = 0.0; line_ht = 0.0
        buckets.setdefault(rate, 0.0)
        buckets[rate] += line_ht
    parts.append("""
      <ram:ApplicableTradeTax>""")
    # Default overall VAT block (use first rate key if present)
    if buckets:
        rate0 = sorted(buckets.keys())[0]
    else:
        rate0 = float(doc.get("tva", 0) or 0)
    parts.append(f"""
        <ram:TypeCode>VAT</ram:TypeCode>
        <ram:CategoryCode>{'S' if rate0>0 else 'Z'}</ram:CategoryCode>
        <ram:RateApplicablePercent>{int(round(rate0*100)) if rate0>0 else 0}</ram:RateApplicablePercent>""")
    parts.append(f"""
      </ram:ApplicableTradeTax>
      <ram:SpecifiedTradeSettlementMonetarySummation>
        <ram:LineTotalAmount>""" + f"{total_ht:.2f}" + """</ram:LineTotalAmount>
        <ram:TaxTotalAmount>""" + f"{total_tva:.2f}" + """</ram:TaxTotalAmount>
        <ram:GrandTotalAmount>""" + f"{total_ttc:.2f}" + """</ram:GrandTotalAmount>
        <ram:DuePayableAmount>""" + f"{total_ttc:.2f}" + """</ram:DuePayableAmount>
      </ram:SpecifiedTradeSettlementMonetarySummation>
    </ram:ApplicableHeaderTradeSettlement>""")
    # Lines
    for i, ln in enumerate(lines, 1):
        try:
            q = float(ln.get("qte") or ln.get("quantite") or ln.get("qty") or 0)
            pu = float(ln.get("pu") or ln.get("pu_ht") or ln.get("prix_unitaire_ht") or ln.get("prix_unitaire") or ln.get("prix_ht") or 0)
        except Exception:
            q, pu = 0.0, 0.0
        line_ht = float(ln.get("total_ht", ln.get("montant_ht", q*pu)))
        # Fallback PU if missing: line_total / qty
        try:
            if (pu <= 0.0) and (q > 0.0) and (line_ht > 0.0):
                pu = round(line_ht / q, 6)
        except Exception:
            pass
        rate = float(ln.get("tva", doc.get("tva", 0) or 0) or 0)
        unit = (ln.get("unit") or ln.get("unitCode") or "C62")
        label = ln.get("designation") or ln.get("libelle") or ln.get("desc") or ""
        parts.append(f"""
    <ram:IncludedSupplyChainTradeLineItem>
      <ram:AssociatedDocumentLineDocument>
        <ram:LineID>{i}</ram:LineID>
      </ram:AssociatedDocumentLineDocument>
      <ram:SpecifiedTradeProduct>
        <ram:Name>{e(label)}</ram:Name>
      </ram:SpecifiedTradeProduct>
      <ram:SpecifiedLineTradeAgreement>
        <ram:NetPriceProductTradePrice>
          <ram:ChargeAmount>{pu:.2f}</ram:ChargeAmount>
        </ram:NetPriceProductTradePrice>
      </ram:SpecifiedLineTradeAgreement>
      <ram:SpecifiedLineTradeDelivery>
        <ram:BilledQuantity unitCode="{e(unit)}">{q:.2f}</ram:BilledQuantity>
      </ram:SpecifiedLineTradeDelivery>
      <ram:SpecifiedLineTradeSettlement>
        <ram:ApplicableTradeTax>
          <ram:TypeCode>VAT</ram:TypeCode>
          <ram:CategoryCode>{'S' if rate>0 else 'Z'}</ram:CategoryCode>
          <ram:RateApplicablePercent>{int(round(rate*100)) if rate>0 else 0}</ram:RateApplicablePercent>""")
        if rate <= 0:
            # Optional exemption reason for zero-rated lines
            reason = settings.get("vat_exemption_reason") or doc.get("vat_exemption_reason") or "Exonération de TVA"
            reason_code = settings.get("vat_exemption_code") or doc.get("vat_exemption_code") or "VATEX"
            parts.append("""
          <ram:ExemptionReason>""" + e(reason) + """</ram:ExemptionReason>
          <ram:ExemptionReasonCode>""" + e(reason_code) + """</ram:ExemptionReasonCode>""")
        parts.append(f"""
        </ram:ApplicableTradeTax>
        <ram:SpecifiedTradeSettlementLineMonetarySummation>
          <ram:LineTotalAmount>{line_ht:.2f}</ram:LineTotalAmount>
        </ram:SpecifiedTradeSettlementLineMonetarySummation>
      </ram:SpecifiedLineTradeSettlement>
    </ram:IncludedSupplyChainTradeLineItem>""")
    parts.append("""
  </rsm:SupplyChainTradeTransaction>
</rsm:CrossIndustryInvoice>
""")
    xml = "".join(parts).encode("utf-8")
    # Prune empty nodes (e.g., empty ApplicableHeaderTradeDelivery)
    xml = _prune_empty_xml_bytes(xml)
    return xml
def _validate_cii_xsd(xml_bytes: bytes, settings: dict) -> str:
    """Best-effort XSD validation if a schema dir is configured in settings.
    Returns 'OK', 'ERR', or 'SKIP'.
    """
    try:
        schema_dir = (settings.get("cii_schema_dir") or "").strip()
        if not schema_dir or not os.path.isdir(schema_dir):
            return "SKIP"
        # best-effort: try xmlschema if available
        try:
            import xmlschema  # type: ignore
            xsds = [os.path.join(schema_dir, f) for f in os.listdir(schema_dir) if f.lower().endswith(".xsd")]
            if not xsds:
                return "SKIP"
            # pick first .xsd and validate
            schema = xmlschema.XMLSchema(xsds[0])
            import io as _io
            schema.validate(_io.BytesIO(xml_bytes))
            return "OK"
        except Exception:
            return "SKIP"
    except Exception:
        return "SKIP"
def _export_cii_for_invoice(doc: dict, settings: dict, numero: str) -> str:
    return _export_cii_for_invoice_core(doc, settings, numero)


def _export_cii_for_invoice_core(doc: dict, settings: dict, numero: str) -> str:
    """Export CII xml beside the PDF and to ops spool; write payload.json; log all steps."""
    try:
        t0 = _safe_now()
        ctx = _situ_identifiers(doc, numero)
        display_num = ctx.get("display") or str(numero)
        file_stem = ctx.get("file_stem") or display_num or str(numero)
        _cii_log(f"cii.start numero={display_num}")
        doc_for_xml = dict(doc or {})
        if display_num:
            doc_for_xml["numero"] = display_num
            doc_for_xml["_situ_display_num"] = display_num
        if ctx.get("legal"):
            doc_for_xml.setdefault("_numero_legal", ctx.get("legal"))
        xml = _build_en16931_cii_xml(doc_for_xml, settings)
        if not xml:
            raise RuntimeError("build_xml_empty")
        _cii_log(f"cii.build=OK numero={display_num} dt_ms={_ms_since(t0)}")
        try:
            schema_dir = (settings.get("cii_schema_dir") or "").strip()
            if not schema_dir or not os.path.isdir(schema_dir):
                _cii_log(f"cii.validate=SKIP (no schema_dir) numero={display_num}")
            else:
                status = _validate_cii_xsd(xml, settings)
                _cii_log(f"cii.validate={status} numero={display_num}")
        except Exception as _ve:
            _cii_log(f"cii.validate=SKIP numero={display_num} trace={_ve}")
        out_dir = DOCS_DIRS.get("factures", DATA_DIR)
        os.makedirs(out_dir, exist_ok=True)
        out_xml = os.path.join(out_dir, f"{file_stem}.cii.xml")
        _situ_log(f"target_cii={out_xml}")

        def _same_bytes(path: str, data: bytes) -> bool:
            try:
                if not os.path.exists(path):
                    return False
                if os.path.getsize(path) != len(data):
                    return False
                with open(path, "rb") as rf:
                    return rf.read() == data
            except Exception:
                return False

        xml_bytes = xml if isinstance(xml, (bytes, bytearray)) else xml.encode("utf-8")
        if _same_bytes(out_xml, xml_bytes):
            try:
                size_xml = os.path.getsize(out_xml)
            except Exception:
                size_xml = 0
            _cii_log(f"cii.skip=already_current numero={display_num} path={out_xml} size={size_xml}")
        else:
            with open(out_xml, "wb") as f:
                f.write(xml_bytes)
            try:
                size_xml = os.path.getsize(out_xml)
            except Exception:
                size_xml = 0
            _cii_log(f"cii.write numero={display_num} path={out_xml} size={size_xml} dt_ms={_ms_since(t0)}")

        spool_root = os.path.join(DATA_DIR, "ops", file_stem)
        os.makedirs(spool_root, exist_ok=True)
        spool_xml = os.path.join(spool_root, "invoice.cii.xml")
        try:
            with open(spool_xml, "wb") as f:
                f.write(xml_bytes)
        except Exception:
            try:
                with open(out_xml, "rb") as rf, open(spool_xml, "wb") as wf:
                    wf.write(rf.read())
            except Exception:
                pass

        try:
            from hashlib import sha256

            h = sha256(xml_bytes).hexdigest()
        except Exception:
            h = ""
        payload = {
            "numero": display_num,
            "date": (doc.get("date") or doc.get("date_facture") or ""),
            "client": (doc.get("client_nom") or ""),
            "currency": (settings.get("devise") or "EUR"),
            "total_ttc": float(doc.get("total_ttc", 0.0) or 0.0),
            "sha256": h,
        }
        with open(os.path.join(spool_root, "payload.json"), "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
        _cii_log(f"spool.write numero={display_num} dir={spool_root}")

        try:
            ok = os.path.exists(out_xml) and os.path.getsize(out_xml) > 0
        except Exception:
            ok = False
        try:
            size_xml2 = os.path.getsize(out_xml) if os.path.exists(out_xml) else 0
        except Exception:
            size_xml2 = 0
        _cii_log(f"cii.verify={'OK' if ok else 'MISS'} numero={display_num} size={size_xml2}")
        if not ok:
            try:
                xml2 = xml_bytes or b"<?xml version='1.0' encoding='UTF-8'?><empty/>"
                with open(out_xml, "wb") as f:
                    f.write(xml2)
                _cii_log(f"cii.failsafe=write_minimal numero={display_num}")
            except Exception as _e:
                _cii_log(f"cii.error=failsafe_write {type(_e).__name__}: {_e} numero={display_num}")
        return out_xml
    except Exception as e:
        _cii_log(f"cii.error={type(e).__name__}: {e} numero={numero}")
        return ""


def _ensure_facturx(pdf_path:str, doc:dict, settings:dict)->str:
    # local timing guards (in case globals were altered)
    try:
        _ = _safe_now
        _ = _ms_since
    except NameError:
        def _safe_now():
            try:
                import time as _t
                return _t.time()
            except Exception:
                return 0.0
        def _ms_since(t0):
            try:
                import time as _t
                return int((_t.time() - (t0 or 0.0)) * 1000)
            except Exception:
                return 0
    """Upgrade 'pdf_path' to Factur‑X if possible, export CII, mirror to ops, return resulting path."""
    out = pdf_path
    ctx = _situ_identifiers(doc, doc.get("numero"))
    file_stem = ctx.get("file_stem") or os.path.splitext(os.path.basename(pdf_path or ""))[0] or "facture"
    try:
        _cii_log(f"fx.start pdf={pdf_path}")
        fx = _export_facturx(doc, settings, pdf_path)
        if fx and os.path.exists(fx):
            base_dir = os.path.dirname(fx) or os.path.dirname(pdf_path) or os.path.dirname(out)
            ext = "_fx.pdf" if fx.lower().endswith("_fx.pdf") else os.path.splitext(fx)[1] or ".pdf"
            target_fx = os.path.join(base_dir, f"{file_stem}{ext}")
            if os.path.normcase(fx) != os.path.normcase(target_fx):
                _situ_log(f"rename_pdf={target_fx}")
                try:
                    os.makedirs(os.path.dirname(target_fx), exist_ok=True)
                except Exception:
                    pass
                try:
                    if os.path.exists(target_fx):
                        os.remove(target_fx)
                except Exception:
                    pass
                try:
                    os.replace(fx, target_fx)
                    fx = target_fx
                except Exception as _e:
                    _cii_log(f"fx.rename.warn err={_e}")
                    try:
                        shutil.copy2(fx, target_fx)
                        fx = target_fx
                    except Exception as _e2:
                        _cii_log(f"fx.copy.warn err={_e2}")
            if os.path.normcase(fx) != os.path.normcase(pdf_path):
                try:
                    if os.path.exists(pdf_path):
                        os.remove(pdf_path)
                        _cii_log(f"fx.cleanup base_pdf_removed path={pdf_path}")
                except Exception as _e:
                    _cii_log(f"fx.cleanup.warn err={_e}")
            _cii_log(f"fx.write={fx}")
            out = fx
        else:
            _cii_log("fx.miss (no _fx created)")
            out = pdf_path
    except Exception as e:
        _cii_log(f"fx.error={e}")
        out = pdf_path
    # CII export (always)
    try:
        numero_hint = str(doc.get("numero") or doc.get("num") or doc.get("numero_facture") or "")
        ctx = _situ_identifiers(doc, numero_hint)
        numero_cii = ctx.get("display") or ctx.get("file_stem") or numero_hint
        if numero_cii:
            _export_cii_for_invoice(doc, settings, numero_cii)
    except Exception as e:
        try:
            _cii_log(f"cii.error={e}")
        except Exception:
            pass
    # Mirror the final PDF (best-effort)
    try:
        _op_store_pdf('facture', doc, out)
    except Exception:
        pass
    return out
def _safe_write_facturx_pdf(doc:dict, settings:dict, numero:str)->str:
    """Generate invoice PDF then attach Factur‑X XML when possible; return final path."""
    base_pdf = _safe_write_facture_pdf(doc, settings, numero)
    final_pdf = _ensure_facturx(base_pdf, doc, settings)
    # Ensure CII export regardless of embed path
    try:
        ctx = _situ_identifiers(doc, numero)
        numero_cii = ctx.get("display") or ctx.get("file_stem") or str(numero)
        if numero_cii:
            _export_cii_for_invoice(doc, settings, numero_cii)
    except Exception as e:
        try:
            _cii_log(f"cii.error={e}")
        except Exception:
            pass
    return final_pdf

# ==== Helpers SITU naming ====
_SITU_FILENAME_RE = re.compile(r"-(\d{2})(?:_[0-9]{8}-[0-9]{6})?(?:_fx)?\.pdf$", flags=re.IGNORECASE)
_SITU_CII_RE = re.compile(r"-(\d{2})\.cii\.xml$", flags=re.IGNORECASE)


def _situ_sanitize_legal(legal: str) -> str:
    """Normalise un numéro légal avant les opérations SITU."""

    try:
        s = str(legal or "").strip()
    except Exception:
        s = str(legal)
    if not s:
        return ""
    try:
        base = _strip_situ_suffix(s)
        if base:
            s = str(base).strip()
    except Exception:
        pass
    s = s.replace("–", "-").replace("—", "-")
    s = re.sub(r"\s*-\s*$", "", s)
    return s.strip()

def _situ_index_from(info: dict | None, fallback: int = 1) -> int:
    """Détermine l'index (1..n) de la situation depuis un dict d'info existant."""
    if info:
        for key in ("index", "rank"):
            try:
                val = int(float(info.get(key, 0) or 0))
            except Exception:
                continue
            if val > 0:
                return val
    return int(fallback)


def _situ_identifiers(doc: dict | None, numero: str | None = None) -> dict:
    info: dict = {}
    try:
        info = _get_situation_info(doc or {}, include_rank=True)  # type: ignore[arg-type]
    except Exception:
        info = {}

    def _looks_like_situ(value: object) -> bool:
        return "SITU" in str(value or "").upper()

    is_situation = bool(info.get("is_situation")) or _looks_like_situ((doc or {}).get("numero")) or _looks_like_situ(
        (doc or {}).get("objet")
    )
    legal_candidates = [
        (doc or {}).get("_numero_legal"),
        numero,
        (doc or {}).get("numero_facture"),
        (doc or {}).get("numero"),
    ]
    legal = ""
    for cand in legal_candidates:
        if not cand:
            continue
        legal = _situ_sanitize_legal(str(cand))
        if legal:
            break
    if not legal:
        legal = _situ_sanitize_legal(str(numero or "") or str((doc or {}).get("numero", "")))
    stem, display = _situ_file_stem(legal, info, is_situation)
    if not stem:
        stem = display or legal or str(numero or "").strip() or "facture"
    if not display:
        display = stem
    ctx = {
        "legal": legal or stem,
        "file_stem": stem,
        "display": display,
        "info": info,
        "is_situation": bool(is_situation),
    }
    return ctx

def _situ_existing_indexes_on_disk(legal: str, base_dir: str | None = None) -> list[int]:
    """Retourne la liste des index déjà présents sur disque pour un numéro légal."""
    try:
        legal_raw = str(legal or "").strip()
    except Exception:
        legal_raw = str(legal)
    legal = _situ_sanitize_legal(legal_raw) or legal_raw
    cleaned = _situ_sanitize_legal(legal)
    legal = cleaned or (str(legal or "").strip() if legal is not None else "")
    if not legal:
        return []
    if base_dir is None:
        fact_dir = None
        try:
            dirs = globals().get("DOCS_DIRS") or {}
            if isinstance(dirs, dict):
                fact_dir = dirs.get("factures")
        except Exception:
            fact_dir = None
        if not fact_dir:
            data_dir = globals().get("DATA_DIR")
            if data_dir:
                fact_dir = os.path.join(data_dir, "factures")
        base_dir = fact_dir or ""
    try:
        names = os.listdir(base_dir)
    except Exception:
        return []
    prefix = f"{legal}-"
    idxs: list[int] = []
    for name in names:
        if not name.startswith(prefix):
            continue
        match = _SITU_FILENAME_RE.search(name) or _SITU_CII_RE.search(name)
        if not match:
            continue
        try:
            idxs.append(int(match.group(1)))
        except Exception:
            continue
    return sorted(set(idxs))

def _situ_next_index_from_disk(legal: str, base_dir: str | None = None, *, minimum: int = 1) -> int:
    """Calcule le prochain index disponible sur disque (>= minimum)."""
    existing = _situ_existing_indexes_on_disk(legal, base_dir)
    if not existing:
        return max(1, int(minimum))
    return max(max(existing) + 1, int(minimum))

def _situ_log(msg: str) -> None:
    try:
        print(f"[SITU] {msg}")
    except Exception:
        pass


def _situ_file_stem(legal: str, info: dict | None, is_situation: bool) -> tuple[str, str]:
    """
    Retourne file_stem + display pour la facture de situation avec offset global appliqué.
    """
    legal = _situ_sanitize_legal(str(legal or "").strip())
    idx = 0
    if is_situation:
        try:
            idx = _situ_index_from(info, 0)
        except Exception:
            idx = 0
        if idx <= 0:
            try:
                idx = _situ_next_index_from_disk(legal or "", None, minimum=1)
            except Exception:
                idx = 1
        # Appliquer l'offset global (-1) de manière sûre
        idx = _situ_apply_offset(idx)
        stem = f"{legal}-{idx:02d}" if legal else f"{idx:02d}"
        display = stem
    else:
        stem = legal
        display = legal
    _situ_log(f"legal={legal or '?'} is_situation={is_situation} idx={idx if is_situation else '-'} -> stem={stem} display={display}")
    return stem, display
def _hex_to_rgb(hexstr:str):
    try:
        h = (hexstr or "").strip().lstrip("#")
        if len(h) == 3:
            h = "".join(ch*2 for ch in h)
        if len(h) != 6:
            return (0.0, 0.52, 1.0)  # fallback #0A84FF
        r = int(h[0:2], 16); g = int(h[2:4], 16); b = int(h[4:6], 16)
        return (r/255.0, g/255.0, b/255.0)
    except Exception:
        return (0.0, 0.52, 1.0)
def pdf_render_doc(doc:Dict, settings:Dict, out_path:str, kind_label:str):
    if not REPORTLAB_OK: raise RuntimeError("ReportLab non dispo")
    c = Canvas(out_path, pagesize=A4)
    W,H = A4; theme=_hex_to_rgb(settings.get("theme_color_hex","#0A84FF"))
    # En-tête encadré
    c.setStrokeColorRGB(*theme); c.setLineWidth(1)
    c.rect(12*mm, 270*mm, W-24*mm, 20*mm, stroke=1, fill=0)
    _draw_logo(c, _logo_from_settings(settings), 14*mm, 283*mm, 30*mm, 12*mm)
    center_x = 12*mm + (W - 24*mm) / 2
    header_lines = _company_header_lines(settings)
    if header_lines:
        line_gap = 4.5 * mm
        start_y = 282 * mm
        for idx, (font_name, font_size, text) in enumerate(header_lines):
            c.setFont(font_name, font_size)
            c.setFillColorRGB(0, 0, 0)
            c.drawCentredString(center_x, start_y - idx * line_gap, text)
    # Bloc Document (à droite)
    c.setFillColorRGB(*theme); c.setFont("Helvetica-Bold",14)
    c.drawRightString(W-16*mm, 284*mm, kind_label.upper())
    c.setFont("Helvetica",9); c.setFillColorRGB(0,0,0)
    c.drawRightString(W-16*mm, 279*mm, f"N°: {doc.get('numero','')}")
    c.drawRightString(W-16*mm, 274*mm, f"Date: {_display_date(doc.get('date',''))}")
    # Bloc Client encadré
    c.setStrokeColorRGB(0,0,0); c.rect(12*mm, 252*mm, W-24*mm, 14*mm, stroke=1, fill=0)
    c.setFont("Helvetica-Bold",10); c.drawString(14*mm, 262*mm, "Client")
    c.setFont("Helvetica",9)
    y=258*mm
    for line in [doc.get("client_nom",""), doc.get("client_adresse",""),
                 f"{doc.get('client_cp','')} {doc.get('client_ville','')}".strip(),
                 f"Tél: {doc.get('client_tel','')}".strip(), f"Email: {doc.get('client_email','')}".strip()]:
        if line: c.drawString(14*mm, y, line); y-=4.2*mm
    # Bloc Infos (statut, échéance, date statut)
    c.setFont("Helvetica-Bold",10); c.drawRightString(W-16*mm, 262*mm, "Informations")
    c.setFont("Helvetica",9)
    info_lines=[]
    if doc.get("statut"): info_lines.append(("Statut", doc.get("statut")))
    if doc.get("date_statut"): info_lines.append(("Date statut", _display_date(doc.get("date_statut"))))
    for i,(k,v) in enumerate(info_lines):
        c.drawRightString(W-16*mm, 258*mm - i*4.2*mm, f"{k}: {v}")
    # Tableau lignes
    # Colonnes: Réf | Désignation | Type | Qté | PU HT | TVA% | Total HT
    # SUBJECT / OBJET (juste sous le bloc client)
    subj = (doc.get("objet") or "").strip()
    _obj_y_start = 246*mm
    if subj:
        c.setFont("Helvetica-Bold", 12)
        _lines = _wrap_simple(c, subj.upper(), 100)[:3]
        _yy = _obj_y_start
        for _l in _lines:
            c.drawString(14*mm, _yy, _l)
            _yy -= 5*mm
        y = min(242*mm, _yy - 2*mm)
    else:
        y = 242*mm
    x = 12*mm; w = W-24*mm
    col_w = [0.12*w, 0.38*w, 0.12*w, 0.08*w, 0.12*w, 0.08*w, 0.10*w]
    xcol=[x]
    for cw in col_w[:-1]: xcol.append(xcol[-1]+cw)
    # header band
    c.setFillColorRGB(*theme); c.rect(x, y-8*mm, w, 8*mm, fill=1, stroke=0)
    c.setFillColorRGB(1,1,1); c.setFont("Helvetica-Bold",9)
    headers=["Réf","Désignation","Type","Qté","PU HT","TVA %","Total HT"]
    for i,h in enumerate(headers):
        c.drawString(xcol[i]+2*mm, y-6, h)
    y-=9*mm
    c.setFillColorRGB(0,0,0); c.setFont("Helvetica",9)
    line_h = 6.5*mm
    total_ht = 0.0; total_tva = 0.0
    for idx, L in enumerate(doc.get("lignes",[])):
        # wrap designation; might take 1-3 lines
        des_lines = _wrap_simple(c, L.get("designation",""), 48)
        needed = max(1, min(3, len(des_lines)))
        row_h = line_h*needed
        if y - row_h < 35*mm:
            # new page
            c.showPage()
            # repeat header short
            c.setFillColorRGB(*theme); c.rect(x, H-30*mm-8*mm, w, 8*mm, fill=1, stroke=0)
            c.setFillColorRGB(1,1,1); c.setFont("Helvetica-Bold",9)
            for i,h in enumerate(headers): c.drawString(xcol[i]+2*mm, H-30*mm-6, h)
            y = H-30*mm-9*mm
            c.setFillColorRGB(0,0,0); c.setFont("Helvetica",9)
        # background stripe
        if idx%2==0:
            c.setFillColorRGB(0.98,0.98,0.98)
            c.rect(x, y-row_h+1*mm, w, row_h, fill=1, stroke=0)
            c.setFillColorRGB(0,0,0)
        # values
        c.drawString(xcol[0]+2*mm, y-4, str(L.get("ref",""))[:18])
        # designation multi-lines
        dy = 0
        for li in range(needed):
            dtext = des_lines[li] if li < len(des_lines) else ""
            c.drawString(xcol[1]+2*mm, y-4 - dy, dtext)
            dy += line_h
        c.drawString(xcol[2]+2*mm, y-4, L.get("type",""))
        # right aligned numbers
        def rtext(col_index, value):
            s = str(value)
            tw = c.stringWidth(s, "Helvetica", 9)
            right_edge = xcol[col_index] + col_w[col_index]
            c.drawString(right_edge - tw - 2*mm, y-4, s)
        rtext(3, f"{_safe_float(L.get('qte',1)):.2f}")
        rtext(4, f"{_safe_float(L.get('pu_ht',0)):.2f}")
        rtext(5, f"{int(round(_safe_float(L.get('tva', settings.get('tva',0.2))*100)))}%")
        rtext(6, f"{_safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0)))):.2f}")
        y -= row_h
        # totals compute (per-line TVA rate)
        line_ht = _safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0))))
        total_ht += line_ht
        total_tva += line_ht * _safe_float(L.get('tva', settings.get('tva',0.2)))
    total_ttc = total_ht + total_tva
    acompte = _safe_float(doc.get("acompte",0))
    restant = max(total_ttc - acompte, 0.0)
    # Totaux encadrés
    y_tot = max(30*mm, y-2*mm)
    box_w = w*0.55; box_x = x + w - box_w
    c.setStrokeColorRGB(*theme); c.setLineWidth(0.8); c.rect(box_x, y_tot-28*mm, box_w, 26*mm, stroke=1, fill=0)
    labels = [("Sous-total HT", total_ht), ("TVA", total_tva), ("TOTAL TTC", total_ttc), ("Acompte", acompte), ("Restant dû", restant)]
    yy = y_tot - 6
    for name, val in labels:
        c.setFont("Helvetica-Bold" if name in ("TOTAL TTC","Restant dû") else "Helvetica", 10)
        c.setFillColorRGB(0,0,0 if name!="TOTAL TTC" else 0)
        c.drawString(box_x+4*mm, yy, name)
        sval = _money(val)
        tw = c.stringWidth(sval, "Helvetica-Bold" if name in ("TOTAL TTC","Restant dû") else "Helvetica", 10)
        c.drawString(box_x+box_w-4*mm - tw, yy, sval)
        yy -= 5.5*mm
    
    # Pied (RIB + mentions)
    c.setStrokeColorRGB(0.6,0.6,0.6); c.setLineWidth(0.5)
    c.line(12*mm, 18*mm, W-12*mm, 18*mm)
    c.setFont("Helvetica",8); c.setFillColorRGB(0,0,0)
    rib = f"IBAN: {settings.get('entreprise_iban','')}    BIC: {settings.get('entreprise_bic','')}"
    c.drawString(12*mm, 14*mm, rib)
    ment = settings.get("mentions_legales","")
    c.drawRightString(W-12*mm, 14*mm, ment[:120])
    c.showPage(); c.save()
    return out_path
def _validated_generate_devis_pdf(devis_doc, logo_path, params): return _render_dev_fact("DEVIS", devis_doc, logo_path, params)
def _validated_generate_facture_pdf(facture_doc, logo_path, params): return _render_dev_fact("FACTURE", facture_doc, logo_path, params)
# ------------- URSSAF PDF (clair & sans chevauchement) -------------
def generate_devis_demande_acompte_pdf(doc, settings, out_path):
    # Wrapper simple : même rendu avec libellé différent
    return pdf_render_doc(doc, settings, out_path, "Demande d'acompte")
def generate_facture_acompte_pdf(*args, **kwargs):
    # Routed to validated renderer (v2) to unify style
    return _adapt_signature_and_call(_validated_generate_facture_pdf, args)
def generate_facture_acquittee_pdf(*args, **kwargs):
    # Routed to validated renderer (v2) to unify style
    return _adapt_signature_and_call(_validated_generate_facture_pdf, args)
def _validated_generate_urssaf_pdf_impl(rows, settings, out_path, title="URSSAF — Synthèse"):
    """Compat wrapper → route to modern validated URSSAF renderer.
    Keeps old signature (rows, settings, out_path, title=...), but uses
    _validated_generate_urssaf_pdf(rows, periode, generated_on, logo_path, params).
    """
    try:
        # Derive periode from rows if possible
        periode = None
        try:
            dates = []
            for r in (rows or []):
                if isinstance(r, dict):
                    d = r.get('Date du paiement') or r.get('date')
                else:
                    d = r[0] if (isinstance(r, (list, tuple)) and r) else None
                if d:
                    dates.append(str(d))
            if dates:
                y0 = min(dates)[:10]
                y1 = max(dates)[:10]
                periode = f"{y0} → {y1}"
        except Exception:
            periode = None
        generated_on = datetime.now()
        params = {
            'company': _company_from_settings(settings),
            'margin_mm': 10,
            'body_size': 10,
            'urssaf_rate': settings.get('urssaf_rate', 0.22),
            'urssaf_rate_pieces': settings.get('urssaf_rate_pieces', settings.get('urssaf_rate', 0.22)),
            'out_path': out_path,
        }
        return _validated_generate_urssaf_pdf(rows, periode or '', generated_on, _logo_from_settings(settings), params)
    except Exception:
        # Fallback: keep a safe message rather than crashing
        return _validated_generate_urssaf_pdf(rows, '', datetime.now(), _logo_from_settings(settings), {
            'company': _company_from_settings(settings), 'margin_mm': 10, 'body_size': 10,
            'urssaf_rate': settings.get('urssaf_rate', 0.22), 'out_path': out_path,
        })
    def draw_title():
        c.setFont("Helvetica-Bold", 14)
        c.setFillColorRGB(*theme)
        c.drawCentredString(W/2, H - margin, title)
        c.setFont("Helvetica", 9)
        c.setFillColorRGB(0,0,0)
        nom = settings.get("entreprise_nom","")
        if nom:
            c.drawCentredString(W/2, H - margin - 6*mm, nom)
    def draw_header(y_top):
        c.setFillColorRGB(*theme)
        c.rect(table_x, y_top - row_h, table_w, row_h, fill=1, stroke=0)
        c.setFillColorRGB(1,1,1)
        c.setFont("Helvetica-Bold", 9)
        for i, h in enumerate(headers_pdf):
            c.drawString(xcol[i] + 2*mm, y_top - 5, h)
        c.setFillColorRGB(0,0,0)  # back to black for body
        return y_top - row_h
    def draw_row(y_top, values, zebra):
        # zebra
        if zebra:
            c.setFillColorRGB(0.98,0.98,0.98)
            c.rect(table_x, y_top - row_h, table_w, row_h, fill=1, stroke=0)
        c.setFillColorRGB(0,0,0)
        c.setFont("Helvetica", 9)
        for i, s in enumerate(values):
            s = "" if s is None else str(s)
            if i in (3,4,5,6):  # numeric columns right-aligned
                tw = c.stringWidth(s, "Helvetica", 9)
                c.drawString(xcol[i] + col_w[i] - tw - 2*mm, y_top - 5, s)
            else:
                c.drawString(xcol[i] + 2*mm, y_top - 5, s[:60])
        return y_top - row_h
    def new_page():
        c.showPage()
        draw_title()
        y = H - margin - 12*mm
        y = draw_header(y)
        return y
    # --- Start
    draw_title()
    y = H - margin - 12*mm
    y = draw_header(y)
    tot_pieces = tot_mo = tot_ht = tot_ttc = 0.0
    zebra = False
    for r in rows:
        vals = [
            r.get(keys[0], ""),
            r.get(keys[1], ""),
            r.get(keys[2], ""),
            f"{_safe_float(r.get(keys[3],0)):.2f}",
            f"{_safe_float(r.get(keys[4],0)):.2f}",
            f"{_safe_float(r.get(keys[5],0)):.2f}",
            f"{_safe_float(r.get(keys[6],0)):.2f}",
            (r.get(keys[7], "") or "")[:10],
        ]
        if y - row_h < 25*mm:
            y = new_page()
        y = draw_row(y, vals, zebra)
        zebra = not zebra
        tot_pieces += _safe_float(r.get(keys[3],0))
        tot_mo     += _safe_float(r.get(keys[4],0))
        tot_ht     += _safe_float(r.get(keys[5],0))
        tot_ttc    += _safe_float(r.get(keys[6],0))
    # Totals
    if y - 12*mm < 18*mm:
        y = new_page()
    c.setFont("Helvetica-Bold", 10)
    c.setFillColorRGB(*theme)
    totals_text = f"Totaux période — Pièces: {tot_pieces:.2f} €   MO: {tot_mo:.2f} €   HT: {tot_ht:.2f} €   TTC: {tot_ttc:.2f} €"
    c.drawCentredString(W/2, y - 6*mm, totals_text)
    c.showPage()
    c.save()
    return out_path
# ------------- Email -------------
# --- Adapter for backward compatibility: accept both (rows, periode, generated_on, logo_path, params)
# and (rows, settings, out_path[, title]) ---
def _validated_generate_urssaf_pdf_dispatch(*args, **kwargs):
    try:
        if len(args) >= 5:
            # Legacy call
            rows, periode, generated_on, logo_path, params = args[:5]
            try:
                settings = ensure_settings()
            except Exception:
                settings = kwargs.get("settings")
            out_path = None
            try:
                out_path = params.get("out_path")
            except Exception:
                pass
            if out_path is None:
                # safe fallback
                out_path = os.path.join(DATA_DIR, "urssaf_export.pdf") if 'DATA_DIR' in globals() else "urssaf_export.pdf"
            return _validated_generate_urssaf_pdf_impl(rows, settings, out_path)
        elif len(args) >= 3:
            rows, settings, out_path = args[:3]
            title = args[3] if len(args) >= 4 else kwargs.get("title", "URSSAF — Synthèse")
            return _validated_generate_urssaf_pdf_impl(rows, settings, out_path, title=title)
        else:
            raise TypeError("_validated_generate_urssaf_pdf: invalid arguments")
    except Exception:
        # Keep the original error surfacing through the UI
        raise
def _coerce_recipient_values(value):
    """Return a list of raw strings representing the provided recipient field."""
    if not value:
        return []
    if isinstance(value, str):
        return [value]
    try:
        iterator = list(value)
    except TypeError:
        return [str(value)]
    outs = []
    for item in iterator:
        if not item:
            continue
        outs.append(str(item))
    return outs


def _normalize_email_recipients(field):
    """
    Normalize a recipient field into formatted headers and bare addresses.
    Returns (formatted_list, plain_list).
    """
    items = _coerce_recipient_values(field)
    if not items:
        return [], []
    try:
        from email.utils import getaddresses, formataddr
    except Exception:
        cleaned = [s.strip() for s in items if s and s.strip()]
        return cleaned, cleaned
    parsed = []
    for name, addr in getaddresses(items):
        addr = (addr or "").strip()
        if not addr:
            continue
        name = " ".join((name or "").split())
        parsed.append((name, addr))
    if not parsed:
        return [], []
    formatted = [formataddr((name, addr)) if name else addr for name, addr in parsed]
    plain = [addr for _, addr in parsed]
    return formatted, plain


def _stringify_recipients(field):
    """Return a readable string representation of a recipient field."""
    formatted, _ = _normalize_email_recipients(field)
    if formatted:
        return ", ".join(formatted)
    items = _coerce_recipient_values(field)
    return ", ".join(items)


def confirm_email_send(settings:Dict, to_addr, subject:str, body:str, attachment_path:str=None, cc=None, bcc=None) -> bool:
    """
    Affiche une boîte de confirmation avant envoi. Retourne True si l'utilisateur confirme.
    Si settings["confirm_before_any_email_send"] est False, retourne True directement.
    """
    try:
        if settings is not None and settings.get("confirm_before_any_email_send", True) is False:
            return True
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QDialogButtonBox, QWidget, QHBoxLayout
        import os
        dlg = QDialog()
        dlg.setWindowTitle("Confirmer l'envoi de l'email")
        v = QVBoxLayout(dlg)
        row1 = QWidget(); h1 = QHBoxLayout(row1); h1.setContentsMargins(0,0,0,0)
        to_display = _stringify_recipients(to_addr)
        cc_display = _stringify_recipients(cc)
        bcc_display = _stringify_recipients(bcc)
        h1.addWidget(QLabel(f"À : <b>{to_display}</b>"))
        if cc_display:
            h1.addWidget(QLabel(f"Cc : <i>{cc_display}</i>"))
        if bcc_display:
            h1.addWidget(QLabel(f"Bcc : <i>{bcc_display}</i>"))
        v.addWidget(row1)
        v.addWidget(QLabel(f"Objet : <b>{subject or ''}</b>"))
        if attachment_path:
            v.addWidget(QLabel(f"Pièce jointe : {os.path.basename(attachment_path)}"))
        v.addWidget(QLabel("Message :"))
        te = QTextEdit(); te.setReadOnly(True); te.setPlainText(body or ""); te.setFixedHeight(220)
        v.addWidget(te)
        btns = QDialogButtonBox(QDialogButtonBox.Cancel | QDialogButtonBox.Ok)
        btns.button(QDialogButtonBox.Ok).setText("Envoyer")
        btns.button(QDialogButtonBox.Cancel).setText("Annuler")
        btns.accepted.connect(dlg.accept); btns.rejected.connect(dlg.reject)
        v.addWidget(btns)
        return dlg.exec_() == QDialog.Accepted
    except Exception:
        # En cas d'erreur d'UI, par sécurité on NE PASSE PAS l'envoi
        return False
def send_email_with_attachment(settings, to_addr, subject, body, attachment_path=None, cc=None, bcc=None) -> bool:
    try:
        # Confirmation d\'envoi
        if not confirm_email_send(settings, to_addr, subject, body, attachment_path, cc=cc, bcc=bcc):
            return False
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port)
            server.ehlo()
            if settings.get("smtp_tls", True):
                server.starttls()
                server.ehlo()
        user = settings.get("smtp_user",""); pwd=settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        msg = MIMEMultipart()
        from email.utils import formataddr  # si pas déjà importé
        # From = "ENTREPRISE_NOM" <smtp_user>
        display_name = (settings.get("entreprise_nom") or settings.get("smtp_user","")).strip()
        smtp_user    = (settings.get("smtp_user","")).strip()
        from_header  = formataddr((display_name, smtp_user)) if smtp_user else (settings.get("entreprise_mail") or display_name)
        msg["From"]  = from_header
        # Reply-To = ENTREPRISE_MAIL si différent
        reply_to = (settings.get("entreprise_mail","") or "").strip()
        if reply_to and smtp_user and reply_to.lower() != smtp_user.lower():
            msg["Reply-To"] = reply_to
        to_header, to_recipients = _normalize_email_recipients(to_addr)
        cc_header, cc_recipients = _normalize_email_recipients(cc)
        bcc_header, bcc_recipients = _normalize_email_recipients(bcc)
        msg["To"] = ", ".join(to_header) if to_header else ", ".join(_coerce_recipient_values(to_addr))
        msg["Subject"] = subject
        if cc_header:
            msg["Cc"] = ", ".join(cc_header)
        if bcc_header:
            msg["Bcc"] = ", ".join(bcc_header)
        alt = MIMEMultipart("alternative")
        alt.attach(MIMEText(body, "plain", "utf-8"))
        try:
            import html as _html
            html_body = _html.escape(body).replace("\n", "<br>")
        except Exception:
            html_body = body.replace("\n", "<br>")
        logo_path = (settings.get("logo_local") or "").strip()
        logo_cid = "logoimg"
        if logo_path and os.path.exists(logo_path) and logo_path in body:
            html_body = html_body.replace(logo_path, f'<img src="cid:{logo_cid}" alt="logo" />')
            try:
                from email.mime.image import MIMEImage
                with open(logo_path, "rb") as _lf:
                    img = MIMEImage(_lf.read())
                img.add_header("Content-ID", f"<{logo_cid}>")
                img.add_header("Content-Disposition", "inline")
                msg.attach(img)
            except Exception:
                pass
        alt.attach(MIMEText(html_body, "html", "utf-8"))
        msg.attach(alt)
        if attachment_path and os.path.exists(attachment_path):
            part = MIMEBase("application","octet-stream")
            with open(attachment_path,"rb") as f: part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
            msg.attach(part)
        recipients = list(dict.fromkeys(to_recipients + cc_recipients + bcc_recipients))
        if not recipients:
            recipients = [addr for addr in _coerce_recipient_values(to_addr) if addr]
        server.send_message(msg, to_addrs=recipients); server.quit(); return True
    except Exception:
        log_error("send_email_with_attachment\n"+__import__('traceback').format_exc()); return False
def test_smtp(settings)->str:
    try:
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port); server.ehlo()
            if settings.get("smtp_tls", True): server.starttls(); server.ehlo()
        user = settings.get("smtp_user",""); pwd=settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        server.quit(); return "Connexion SMTP OK"
    except Exception as e:
        log_error("test_smtp\n"+__import__('traceback').format_exc()); return f"Erreur SMTP: {e}"
# =============== TPE Operation helpers (idempotent) ===============
### _ops_helpers_begin
def _slugify(txt:str)->str:
    try:
        import re, unicodedata
        s = str(txt or "").strip().lower()
        s = unicodedata.normalize("NFKD", s)
        s = "".join(c for c in s if not unicodedata.combining(c))
        s = re.sub(r"[^a-z0-9]+", "-", s)
        s = re.sub(r"-{2,}", "-", s).strip("-")
        return s or "client"
    except Exception:
        return "client"
def _op_compute_operation_id(doc:dict, kind:str)->str:
    '''
    Returns the operation ID (devis number). For a facture, try to locate the source devis
    by scanning 'converted_to_facture' in devis CSV. Fallback to facture number if not found.
    '''
    try:
        if (kind or "").startswith("dev"):
            return str(doc.get("numero") or doc.get("num") or "").strip()
        # facture:
        fac_num = str(doc.get("numero") or "").strip()
        # 1) explicit field if present
        dev_origin = (doc.get("devis_origin") or "").strip()
        if dev_origin:
            return dev_origin
        # 2) search devis CSV mapping
        try:
            devs = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            for r in devs:
                if (r.get("converted_to_facture") or "").strip() == fac_num:
                    return str(r.get("numero") or "").strip()
        except Exception:
            pass
        # 3) fallback to facture number
        return fac_num
    except Exception:
        return str(doc.get("numero") or "").strip()
def _op_base_dir_from_doc(doc:dict, kind:str)->str:
    try:
        num_op = _op_compute_operation_id(doc, kind)
        y = ""
        try:
            y = str(date.fromisoformat(str(doc.get("date",""))).year)
        except Exception:
            try:
                d = str(doc.get("date",""))
                if "/" in d and len(d.split("/")[2])==4:
                    y = d.split("/")[2]
                else:
                    y = str(date.today().year)
            except Exception:
                y = str(date.today().year)
        client_slug = _slugify(doc.get("client_nom","") or doc.get("client","") or "")
        base = os.path.join(DATA_DIR, "ops", f"{y}-{num_op}-{client_slug}")
        return base
    except Exception:
        return os.path.join(DATA_DIR, "ops", "unknown")
def _op_ensure_dirs_for_doc(doc:dict, kind:str)->str:
    '''
    Ensure full operation folder structure exists; return base dir.
    Also ensure achats.csv header if file is new.
    '''
    try:
        base = _op_base_dir_from_doc(doc, kind)
        sub = [
            "01_devis", "02_factures", "03_achats", "04_docs", "05_photos",
            "mail", os.path.join("admin")
        ]
        for s in sub:
            p = os.path.join(base, s)
            os.makedirs(p, exist_ok=True)
        achats_csv = os.path.join(base, "admin", "achats.csv")
        if not os.path.exists(achats_csv):
            try:
                with open(achats_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        devis_csv = os.path.join(base, "admin", "devis_fournisseurs.csv")
        if not os.path.exists(devis_csv):
            try:
                with open(devis_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        return base
    except Exception:
        return os.path.join(DATA_DIR, "ops")
def _open_folder_cross(path:str):
    try:
        if not path:
            return
        os.makedirs(path, exist_ok=True)
        if sys.platform.startswith('win'):
            import subprocess
            try:
                subprocess.Popen(['explorer', path])
            except Exception:
                try:
                    os.startfile(path)
                except Exception:
                    pass
        elif sys.platform == 'darwin':
            import subprocess
            subprocess.Popen(['open', path])
        else:
            import subprocess
            subprocess.Popen(['xdg-open', path])
    except Exception:
        try:
            import traceback
            log_error('_open_folder_cross\n' + traceback.format_exc())
        except Exception:
            pass
def _unique_target(dst_dir:str, name:str)->str:
    try:
        base, ext = os.path.splitext(name)
        cand = os.path.join(dst_dir, name)
        i = 2
        while os.path.exists(cand):
            cand = os.path.join(dst_dir, f"{base}_{i}{ext}")
            i += 1
        return cand
    except Exception:
        return os.path.join(dst_dir, name)
def _op_store_pdf(kind:str, doc:dict, pdf_path:str)->str:
    """
    Copy a generated PDF into ops/01_devis or ops/02_factures — but only if needed.
    Rule:
      • If this business content (fingerprint of `doc`) already exists in the folder, skip.
      • Else copy to a unique filename. Update an index file (.ops_pdf_hash.json).
    Backward compatible with previous index format.
    """
    try:
        import json, hashlib
        if not pdf_path or not os.path.exists(pdf_path):
            return ""
        # 1) Prepare destination
        base = _op_ensure_dirs_for_doc(doc, kind)
        sub = "01_devis" if (kind or "").startswith("dev") else "02_factures"
        dst_dir = os.path.join(base, sub)
        os.makedirs(dst_dir, exist_ok=True)
        # 2) Business fingerprint from doc (order-stable JSON)
        try:
            payload = json.dumps(doc or {}, sort_keys=True, ensure_ascii=False, default=str)
        except Exception:
            try:
                if isinstance(doc, dict):
                    items = sorted((str(k), str(doc.get(k))) for k in doc.keys())
                    payload = "|".join(f"{k}={v}" for k,v in items)
                else:
                    payload = str(doc)
            except Exception:
                payload = str(doc)
        current_fp = hashlib.sha256(payload.encode("utf-8","ignore")).hexdigest()
        # 3) Load index
        idx_path = os.path.join(dst_dir, ".ops_pdf_hash.json")
        try:
            with open(idx_path, "r", encoding="utf-8") as f:
                idx = json.load(f)
            if not isinstance(idx, dict):
                idx = {}
        except Exception:
            idx = {}
        by_hash = idx.get("_by_hash", {})
        if not isinstance(by_hash, dict):
            by_hash = {}
        key_name = os.path.basename(pdf_path)
        # 4) Skip if an entry for this content already exists and the file is present
        try:
            existing = by_hash.get(current_fp, "")
            if existing:
                full = os.path.join(dst_dir, existing)
                if os.path.exists(full):
                    return ""  # already stored this content
        except Exception:
            pass
        # Also skip if same-named file exists AND index says unchanged
        try:
            if idx.get(key_name, "") == current_fp:
                same_path = os.path.join(dst_dir, key_name)
                if os.path.exists(same_path):
                    return ""
        except Exception:
            pass
        # 5) Copy to a unique target
        dst = _unique_target(dst_dir, os.path.basename(pdf_path))
        import shutil as _sh
        try:
            _sh.copy2(pdf_path, dst)
        except Exception:
            try:
                with open(pdf_path, "rb") as _src, open(dst, "wb") as _dst:
                    _dst.write(_src.read())
            except Exception:
                # as a last resort, abort without crashing UI
                return ""
        # 6) Update index
        idx[key_name] = current_fp
        by_hash[current_fp] = os.path.basename(dst)
        idx["_by_hash"] = by_hash
        try:
            with open(idx_path, "w", encoding="utf-8") as f:
                json.dump(idx, f, ensure_ascii=False, indent=2)
        except Exception:
            pass
        return dst
    except Exception:
        try:
            log_error("_op_store_pdf\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return ""
def _op_mail_attachments(base_dir:str)->list:
    '''Return list of files inside <base_dir>/mail suitable as attachments.'''
    outs = []
    try:
        mdir = os.path.join(base_dir, "mail")
        if os.path.isdir(mdir):
            for n in os.listdir(mdir):
                p = os.path.join(mdir, n)
                if os.path.isfile(p):
                    outs.append(p)
    except Exception:
        pass
    return outs
def send_email_with_attachments(settings, to_addr, subject, body, attachments:list, cc=None, bcc=None)->bool:
    '''
    Multi-attachments sender. Reuses confirm_email_send (main PDF shown).
    Falls back to single-attachment function if needed.
    '''
    try:
        main_attach = attachments[0] if attachments else None
        if not confirm_email_send(settings, to_addr, subject, body, main_attach, cc=cc, bcc=bcc):
            return False
        if (len(attachments) <= 1) and callable(globals().get("send_email_with_attachment")):
            return globals()["send_email_with_attachment"](settings, to_addr, subject, body, main_attach, cc=cc, bcc=bcc)
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port); server.ehlo()
            if settings.get("smtp_tls", True):
                server.starttls(); server.ehlo()
        user = settings.get("smtp_user",""); pwd = settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        msg = MIMEMultipart()
        from email.utils import formataddr
        display_name = (settings.get("entreprise_nom") or settings.get("smtp_user","")).strip()
        smtp_user    = (settings.get("smtp_user","")).strip()
        from_header  = formataddr((display_name, smtp_user)) if smtp_user else (settings.get("entreprise_mail") or display_name)
        msg["From"]  = from_header
        reply_to = (settings.get("entreprise_mail","") or "").strip()
        if reply_to and smtp_user and reply_to.lower() != smtp_user.lower():
            msg["Reply-To"] = reply_to
        to_header, to_recipients = _normalize_email_recipients(to_addr)
        cc_header, cc_recipients = _normalize_email_recipients(cc)
        bcc_header, bcc_recipients = _normalize_email_recipients(bcc)
        msg["To"] = ", ".join(to_header) if to_header else ", ".join(_coerce_recipient_values(to_addr))
        msg["Subject"] = subject
        if cc_header:
            msg["Cc"] = ", ".join(cc_header)
        if bcc_header:
            msg["Bcc"] = ", ".join(bcc_header)
        alt = MIMEMultipart("alternative")
        alt.attach(MIMEText(body, "plain", "utf-8"))
        try:
            import html as _html
            html_body = _html.escape(body).replace("\n", "<br>")
        except Exception:
            html_body = body.replace("\n", "<br>")
        logo_path = (settings.get("logo_local") or "").strip()
        logo_cid = "logoimg"
        if logo_path and os.path.exists(logo_path) and logo_path in body:
            html_body = html_body.replace(logo_path, f'<img src="cid:{logo_cid}" alt="logo" />')
            try:
                from email.mime.image import MIMEImage
                with open(logo_path, "rb") as _lf:
                    img = MIMEImage(_lf.read())
                img.add_header("Content-ID", f"<{logo_cid}>")
                img.add_header("Content-Disposition", "inline")
                msg.attach(img)
            except Exception:
                pass
        alt.attach(MIMEText(html_body, "html", "utf-8"))
        msg.attach(alt)
        for p in (attachments or []):
            try:
                if not p or (not os.path.exists(p)): 
                    continue
                part = MIMEBase("application","octet-stream")
                with open(p,"rb") as f: part.set_payload(f.read())
                encoders.encode_base64(part)
                part.add_header("Content-Disposition", f'attachment; filename="{os.path.basename(p)}"')
                msg.attach(part)
            except Exception:
                pass
        recipients = list(dict.fromkeys(to_recipients + cc_recipients + bcc_recipients))
        if not recipients:
            recipients = [addr for addr in _coerce_recipient_values(to_addr) if addr]
        server.send_message(msg, to_addrs=recipients); server.quit(); return True
    except Exception as e:
        try:
            log_error("send_email_with_attachments\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return False
def _ops_send_and_store_wrapper(settings, kind, doc, pdf_path, to, subject, body, cc=None, bcc=None)->bool:
    '''
    Copy the PDF into the operation folder (01_devis/ or 02_factures/),
    propose adding files from 'mail/' as extra attachments, then send.
    '''
    try:
        base = _op_ensure_dirs_for_doc(doc, kind)
        try:
            _op_store_pdf(kind, doc, pdf_path)
        except Exception:
            pass
        att = [p for p in [pdf_path] if p and os.path.exists(p)]
        try:
            mfiles = _op_mail_attachments(base)
            if mfiles:
                from PyQt5.QtWidgets import QMessageBox
                if QMessageBox.question(None, "Pièces jointes", 
                                        f"Ajouter {len(mfiles)} fichier(s) du dossier 'mail/' à l’e-mail ?",
                                        QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                    att.extend(mfiles)
        except Exception:
            pass
        fn = globals().get("send_email_with_attachments")
        if callable(fn):
            return fn(settings, to, subject, body, att, cc=cc, bcc=bcc)
        return globals().get("send_email_with_attachment")(settings, to, subject, body, att[0] if att else None, cc=cc, bcc=bcc)
    except Exception:
        try:
            log_error("_ops_send_and_store_wrapper\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return False
def _op_open_current_folder_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        _open_folder_cross(base)
    except Exception:
        try:
            log_error("_op_open_current_folder_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass
def _op_add_files_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        target = os.path.join(base, "04_docs")
        from PyQt5.QtWidgets import QFileDialog, QMessageBox
        files, _ = QFileDialog.getOpenFileNames(tab_obj, "Ajouter des pièces…", "", "Tous fichiers (*.*)")
        if not files:
            return
        os.makedirs(target, exist_ok=True)
        copied = 0
        import shutil as _sh
        for f in files:
            try:
                name = os.path.basename(f)
                dst = _unique_target(target, name)
                _sh.copy2(f, dst)
                copied += 1
            except Exception:
                pass
        QMessageBox.information(tab_obj, "Pièces", f"{copied} fichier(s) copié(s) dans 04_docs.")
    except Exception:
        try:
            log_error("_op_add_files_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass
def _op_add_achat_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        achats_csv = os.path.join(base, "admin", "achats.csv")
        piece_dir  = os.path.join(base, "03_achats")
        os.makedirs(piece_dir, exist_ok=True)
        # --- mini form dialog ---
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QFormLayout, QDialogButtonBox, QDateEdit, QLineEdit, QDoubleSpinBox, QPushButton, QWidget, QHBoxLayout, QFileDialog, QMessageBox
        from PyQt5 import QtCore as _QtCore
        dlg = QDialog(tab_obj); dlg.setWindowTitle("Ajouter un achat"); v = QVBoxLayout(dlg); form = QFormLayout()
        de = QDateEdit(_QtCore.QDate.currentDate()); de.setDisplayFormat("dd/MM/yyyy"); de.setCalendarPopup(True)
        ed_fourn = QLineEdit(); ed_obj = QLineEdit()
        sp_ht = QDoubleSpinBox(); sp_ht.setDecimals(2); sp_ht.setMaximum(1e9); sp_ht.setValue(0.00)
        sp_tva = QDoubleSpinBox(); sp_tva.setDecimals(2); sp_tva.setSuffix(" %"); sp_tva.setMaximum(100.0)
        try:
            sp_tva.setValue(float((tab_obj.settings or {}).get("tva", 0.2))*100.0)
        except Exception:
            sp_tva.setValue(20.0)
        # Piece jointe optional
        piece_path = {"val": ""}
        def pick_piece():
            f, _ = QFileDialog.getOpenFileName(dlg, "Joindre une pièce (optionnel)…", "", "Tous fichiers (*.*)")
            if f:
                piece_path["val"] = f
        row_piece = QWidget(); h = QHBoxLayout(row_piece); h.setContentsMargins(0,0,0,0)
        btn_piece = QPushButton("Joindre une pièce…"); btn_piece.clicked.connect(pick_piece); h.addWidget(btn_piece)
        form.addRow("Date", de); form.addRow("Fournisseur", ed_fourn); form.addRow("Objet", ed_obj)
        form.addRow("Montant HT (€)", sp_ht); form.addRow("TVA (%)", sp_tva); form.addRow("Pièce jointe", row_piece)
        v.addLayout(form)
        bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
        if dlg.exec_() != QDialog.Accepted:
            return
        # Compute
        try:
            d = de.date().toString("yyyy-MM-dd")
        except Exception:
            d = date.today().isoformat()
        ht = float(sp_ht.value()); tva_p = float(sp_tva.value()); tva = tva_p/100.0
        ttc = round(ht * (1.0 + tva), 2)
        # Copy piece if any
        docname = os.path.basename(piece_path["val"]) if piece_path["val"] else ""
        if piece_path["val"]:
            try:
                dst = _unique_target(piece_dir, os.path.basename(piece_path["val"]))
                shutil.copy2(piece_path["val"], dst)
                docname = os.path.basename(dst)
            except Exception:
                pass
        # Append to achats.csv
        try:
            with open(achats_csv, "a", encoding="utf-8-sig", newline="") as f:
                w = csv.writer(f, delimiter=",")
                w.writerow([d, ed_fourn.text().strip(), ed_obj.text().strip(), f"{ht:.2f}", f"{tva:.2f}", f"{ttc:.2f}", docname])
        except Exception:
            log_error("append_achats_csv\n"+__import__('traceback').format_exc())
        QMessageBox.information(tab_obj, "Achat", "Ligne ajoutée.")
    except Exception:
        try:
            log_error("_op_add_achat_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass

def _op_add_devis_fournisseur_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        devis_csv = os.path.join(base, "admin", "devis_fournisseurs.csv")
        piece_dir = os.path.join(base, "01_devis", "fournisseurs")
        os.makedirs(piece_dir, exist_ok=True)
        if not os.path.exists(devis_csv):
            try:
                with open(devis_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QFormLayout, QDialogButtonBox, QDateEdit, QLineEdit, QDoubleSpinBox, QPushButton, QWidget, QHBoxLayout, QFileDialog, QMessageBox
        from PyQt5 import QtCore as _QtCore
        dlg = QDialog(tab_obj); dlg.setWindowTitle("Ajouter un devis"); v = QVBoxLayout(dlg); form = QFormLayout()
        de = QDateEdit(_QtCore.QDate.currentDate()); de.setDisplayFormat("dd/MM/yyyy"); de.setCalendarPopup(True)
        ed_fourn = QLineEdit(); ed_obj = QLineEdit()
        sp_ht = QDoubleSpinBox(); sp_ht.setDecimals(2); sp_ht.setMaximum(1e9); sp_ht.setValue(0.00)
        sp_tva = QDoubleSpinBox(); sp_tva.setDecimals(2); sp_tva.setSuffix(" %"); sp_tva.setMaximum(100.0)
        try:
            sp_tva.setValue(float((tab_obj.settings or {}).get("tva", 0.2))*100.0)
        except Exception:
            sp_tva.setValue(20.0)
        piece_path = {"val": ""}
        def pick_piece():
            f, _ = QFileDialog.getOpenFileName(dlg, "Joindre une pièce (optionnel)…", "", "Tous fichiers (*.*)")
            if f:
                piece_path["val"] = f
        row_piece = QWidget(); h = QHBoxLayout(row_piece); h.setContentsMargins(0,0,0,0)
        btn_piece = QPushButton("Joindre une pièce…"); btn_piece.clicked.connect(pick_piece); h.addWidget(btn_piece)
        form.addRow("Date", de); form.addRow("Fournisseur", ed_fourn); form.addRow("Objet", ed_obj)
        form.addRow("Montant HT (€)", sp_ht); form.addRow("TVA (%)", sp_tva); form.addRow("Pièce jointe", row_piece)
        v.addLayout(form)
        bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
        if dlg.exec_() != QDialog.Accepted:
            return
        try:
            d = de.date().toString("yyyy-MM-dd")
        except Exception:
            d = date.today().isoformat()
        ht = float(sp_ht.value()); tva_p = float(sp_tva.value()); tva = tva_p/100.0
        ttc = round(ht * (1.0 + tva), 2)
        docname = os.path.basename(piece_path["val"]) if piece_path["val"] else ""
        if piece_path["val"]:
            try:
                dst = _unique_target(piece_dir, os.path.basename(piece_path["val"]))
                shutil.copy2(piece_path["val"], dst)
                docname = os.path.basename(dst)
            except Exception:
                pass
        try:
            with open(devis_csv, "a", encoding="utf-8-sig", newline="") as f:
                w = csv.writer(f, delimiter=",")
                w.writerow([d, ed_fourn.text().strip(), ed_obj.text().strip(), f"{ht:.2f}", f"{tva:.2f}", f"{ttc:.2f}", docname])
        except Exception:
            log_error("append_devis_fournisseur_csv\n"+__import__('traceback').format_exc())
        QMessageBox.information(tab_obj, "Devis fournisseur", "Ligne ajoutée.")
    except Exception:
        try:
            log_error("_op_add_devis_fournisseur_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass

def _op_show_payments_for_tab(tab_obj, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Paiements", "Sélectionnez une facture.")
            return
        doc = assemble_doc("facture", numero)
        if not doc:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.warning(tab_obj, "Paiements", "Facture introuvable.")
            return
        settings = getattr(tab_obj, "settings", {})
        context = build_situation_payment_context(doc, settings=settings)
    except Exception:
        try:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.critical(tab_obj, "Paiements", "Impossible d'afficher le suivi des paiements.")
        except Exception:
            pass
        try:
            log_error("_op_show_payments_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return
    try:
        from PyQt5.QtWidgets import QMessageBox
    except Exception:
        QMessageBox = None
    lines = [
        f"Facture {numero}",
        f"Cumul facturé : {money((context or {}).get('cumul_facture_ttc', 0.0))}",
        f"Total payé : {money((context or {}).get('payments_total', 0.0))}",
        f"Reste dû : {money((context or {}).get('outstanding', 0.0))}",
    ]
    due_iso = str((context or {}).get("due_date") or "").strip()
    if due_iso:
        lines.append(f"Échéance : {_display_date(due_iso)}")
    last_payment_iso = str((context or {}).get("last_payment_date") or "").strip()
    if last_payment_iso:
        lines.append(f"Dernier paiement : {_display_date(last_payment_iso)}")
    lines.append("")
    payments = list((context or {}).get("payments") or [])
    if payments:
        lines.append("Historique des paiements :")
        for idx, pay in enumerate(payments, 1):
            amount = money(pay.get("montant", 0.0))
            pay_date = _display_date(pay.get("date_paiement", "")) or "Date inconnue"
            details = []
            idx_str = str(pay.get("situation_index", "") or "").strip()
            if idx_str:
                details.append(f"Situation {idx_str}")
            mode = str(pay.get("mode", "") or "").strip()
            if mode:
                details.append(mode)
            ref = str(pay.get("facture_numero", "") or "").strip()
            if ref and ref.lower() != str(numero).lower():
                details.append(f"Facture {ref}")
            base = f"{idx}. {pay_date} – {amount}"
            if details:
                base += f" ({', '.join(details)})"
            lines.append(base)
            notes = str(pay.get("notes", "") or "").strip()
            if notes:
                lines.append(f"    Notes : {notes}")
    else:
        lines.append("Aucun paiement enregistré.")
    message = "\n".join(lines)
    if QMessageBox:
        QMessageBox.information(tab_obj, "Suivi des paiements", message)
    else:
        try:
            print(message)
        except Exception:
            pass
### _ops_helpers_end
# ---------------- UI helpers ----------------
def apply_table_header_theme(table:QTableWidget, hex_color:str):
    if not hex_color or not hex_color.startswith("#"): hex_color="#0A84FF"
    style = "QHeaderView::section{background-color:%s;color:white;font-weight:bold;padding:4px;border:0px;}"%hex_color
    table.setStyleSheet(style)
# ---------------- Dialogs ----------------
class SimpleClientDialog(QDialog):
    def __init__(self, parent=None, initial=None):
        super().__init__(parent); self.setWindowTitle("Client"); self.resize(450, 320)
        v = QVBoxLayout(self)
        form = QFormLayout()
        try:
            self.setContentsMargins(0,0,0,0)
        except Exception:
            pass
        self.cb_civ=QComboBox(); self.cb_civ.addItems(["Monsieur","Madame","—"])
        try:
            civ0 = normalize_civilite(initial.get("Genre","")) if initial else "—"
            idx = 0 if civ0=="M." else (1 if civ0=="Mme" else 2)
            self.cb_civ.setCurrentIndex(idx)
        except Exception:
            pass
        try:
            civ0 = (initial.get("Genre","") if initial else "").strip()
            idx = 2
            if civ0.startswith("M.") or civ0.lower().startswith("m"):
                idx = 0
            elif "mme" in civ0.lower():
                idx = 1
            self.cb_civ.setCurrentIndex(idx)
        except Exception:
            pass
        self.ed_nom=QLineEdit(initial.get("Nom","") if initial else "")
        self.ed_prenom=QLineEdit(initial.get("Prenom","") if initial else "")
        self.ed_mail=QLineEdit(initial.get("Email","") if initial else "")
        self.ed_tel=QLineEdit(initial.get("Telephone","") if initial else "")
        self.ed_addr=QLineEdit(initial.get("Adresse","") if initial else "")
        self.ed_cp=QLineEdit(initial.get("CodePostal","") if initial else "")
        self.ed_ville=QLineEdit(initial.get("Ville","") if initial else "")
        self.ed_siret=QLineEdit(initial.get("SIRET","") if initial else "")
        # Init civilité (default "Monsieur" at index 0)
        try:
            civmap = _load_civilite_map()
            init_key = (initial.get("Email") if initial else "") or (initial.get("Nom") if initial else "")
            civ = civmap.get(init_key,"")
            if not civ:
                nm = (initial.get("Nom") if initial else "") or ""
                if nm.startswith("M. "): civ="M."
                elif nm.startswith("Mme "): civ="Mme"
            if civ=="Mme": self.cb_civ.setCurrentIndex(1)
            elif civ=="—" or civ=="": self.cb_civ.setCurrentIndex(2)
            else: self.cb_civ.setCurrentIndex(0)
        except Exception:
            pass
        # Préremplir Prénom + mémoriser la clé initiale
        try:
            self._initial_key = (initial.get("Email") if initial else "") or (initial.get("Nom") if initial else "")
            if self._initial_key:
                _pn = _load_prenom_map().get(self._initial_key, "")
                if _pn:
                    self.ed_prenom.setText(_pn)
        except Exception:
            pass
        form.addRow("Genre", self.cb_civ)
        form.addRow("Nom", self.ed_nom)
        form.addRow("Prénom", self.ed_prenom); form.addRow("Email", self.ed_mail); form.addRow("Téléphone", self.ed_tel)
        form.addRow("Adresse", self.ed_addr); form.addRow("Code Postal", self.ed_cp); form.addRow("Ville", self.ed_ville)
        form.addRow("SIRET", self.ed_siret)
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        bb = QDialogButtonBox(QDialogButtonBox.Save|QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(self.accept); bb.rejected.connect(self.reject)
    def values(self):
        vals = {
            "Genre": ("M." if (self.cb_civ.currentText().startswith("Monsieur")) else ("Mme" if self.cb_civ.currentText().startswith("Madame") else "—")),
            "Nom": self.ed_nom.text().strip(),
            "Prenom": (self.ed_prenom.text().strip() if hasattr(self, "ed_prenom") else ""),
            "Email": self.ed_mail.text().strip(),
            "Telephone": self.ed_tel.text().strip(),
            "Adresse": self.ed_addr.text().strip(),
            "CodePostal": self.ed_cp.text().strip(),
            "Ville": self.ed_ville.text().strip(),
            "SIRET": self.ed_siret.text().strip()
        }
        # Mise à jour du JSON maître (prenom + civilité) via email comme clé prioritaire
        try:
            email = vals.get("Email","")
            prenom = vals.get("Prenom","")
            civ = vals.get("Genre","—")
            upsert_clients_master(email, prenom, civ)
        except Exception as _e:
            try: log_error("values_upsert_master: "+str(_e))
            except Exception: pass
        return vals
    def values(self):
        vals = {
            "Genre": ("M." if (self.cb_civ.currentText().startswith("Monsieur")) else ("Mme" if self.cb_civ.currentText().startswith("Madame") else "—")),
            "Nom": self.ed_nom.text().strip(),
            "Prenom": (self.ed_prenom.text().strip() if hasattr(self, "ed_prenom") else ""),
            "Email": self.ed_mail.text().strip(),
            "Telephone": self.ed_tel.text().strip(),
            "Adresse": self.ed_addr.text().strip(),
            "CodePostal": self.ed_cp.text().strip(),
            "Ville": self.ed_ville.text().strip(),
            "SIRET": self.ed_siret.text().strip()
        }
        # Mise à jour du JSON maître (prenom + civilité) via email comme clé prioritaire
        try:
            email = vals.get("Email","")
            prenom = vals.get("Prenom","")
            civ = vals.get("Genre","—")
            upsert_clients_master(email, prenom, civ)
        except Exception as _e:
            try: log_error("values_upsert_master: "+str(_e))
            except Exception: pass
        return vals
class CataloguePicker(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent); self.setWindowTitle("Catalogue"); self.resize(700, 500)
        self._create_item_cb = getattr(self, "_create_item_cb", None)
        try:
            self._create_item_cb = create_item_cb  # optional callback when passed
        except NameError:
            pass
        v=QVBoxLayout(self)
        top=QHBoxLayout(); self.search=QLineEdit(); self.search.setPlaceholderText("Rechercher..."); top.addWidget(self.search); self.btn_new_from_tab=QPushButton("Créer…"); top.addWidget(self.btn_new_from_tab); self.btn_new_from_tab.clicked.connect(lambda: getattr(self, "_on_create_from_tab", self.create_item)());v.addLayout(top)
        # --- Keep right margin to align search/refresh above 'Ville'/'SIRET' ---
        try:
            from PyQt5.QtWidgets import QSizePolicy, QSpacerItem
            top.addItem(QSpacerItem(440, 10, QSizePolicy.Fixed, QSizePolicy.Minimum))
        except Exception:
            pass
        self.table=QTableWidget(0,7); self.table.setHorizontalHeaderLabels(["ID","Réf","Type","Désignation","Prix HT","TVA %","Unité"])
        ### _catalogue_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        # --- Wrap long 'Désignation' texts in table cells ---
        try:
            # Allow multi-line paint + never elide text with '…'
            self.table.setWordWrap(True)
            from PyQt5.QtCore import Qt as _Qt
            self.table.setTextElideMode(_Qt.ElideNone)
            # Use wrap-aware delegate for the 'Désignation' column (index 3)
            try:
                self.table.setItemDelegateForColumn(3, _WrapItemDelegate(self.table))
            except Exception:
                pass
            # Auto height to fit content
            self.table.verticalHeader().setSectionResizeMode(_QHV.ResizeToContents)
        except Exception:
            pass
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        v.addWidget(self.table)
        bb=QDialogButtonBox(QDialogButtonBox.Ok|QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(self.accept); bb.rejected.connect(self.reject)
        self.load()
        self.search.textChanged.connect(self.apply_filter)
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
        self.table.setRowCount(0)
        for it in self.rows:
            r=self.table.rowCount(); self.table.insertRow(r)
            vals=[it.get("ID",""), it.get("Reference",""), it.get("Type",""), it.get("Designation",""),
                  f"{_safe_float(it.get('Prix_HT',0)):.2f}", f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}%", it.get("Unite","")]
            for c,v in enumerate(vals): self.table.setItem(r,c,QTableWidgetItem(str(v)))
        try:
            self.table.resizeRowsToContents()
        except Exception:
            pass
        try:
            self._autofit_clients()
        except Exception:
            pass
        n=(self.search.text() or "").lower()
        for r in range(self.table.rowCount()):
            s=" ".join([self.table.item(r,c).text() if self.table.item(r,c) else "" for c in range(self.table.columnCount())]).lower()
            self.table.setRowHidden(r, bool(n) and n not in s)
        try:
            self._autofit_clients()
        except Exception:
            pass
    def load(self):
        """Charge le CSV catalogue et peuple la table. Comportement strictement UI, aucune logique métier touchée."""
        try:
            # Import tardif pour éviter les dépendances circulaires au chargement
            import os
            self.rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
        except Exception:
            self.rows = []
        try:
            from PyQt5.QtCore import Qt
            self.table.setRowCount(0)
            for it in self.rows:
                r = self.table.rowCount()
                self.table.insertRow(r)
                # Colonnes visibles: ID, Réf, Type, Désignation, Prix HT, TVA %, Unité
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem as _QItem
                except Exception:
                    _QItem = None
                vals = [
                    str(it.get("ID","")),
                    str(it.get("Reference","")),
                    str(it.get("Type","")),
                    str(it.get("Designation","")),
                    f"{float(it.get('Prix_HT',0) or 0):.2f}",
                    f"{float(it.get('Taux_TVA',0) or 0):.2f}",
                    str(it.get("Unite","")),
                ]
                for c, val in enumerate(vals):
                    try:
                        item = _QItem(val)
                        # Empêcher l'édition directe
                        item.setFlags(item.flags() & ~Qt.ItemIsEditable)
                        self.table.setItem(r, c, item)
                    except Exception:
                        pass
            # Ajustement simple
            try:
                self.table.resizeColumnsToContents()
            except Exception:
                pass
        except Exception:
            # Robustesse UI: on ne remonte pas, le dialogue reste utilisable
            pass
    def apply_filter(self, *_):
        """Filtre simple sur la chaîne saisie. N'affecte pas self.rows."""
        try:
            tokens = _search_tokens(self.search.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens, columns=(1, 2, 3, 6))
    def selected_item(self):
        try:
            sel = self.table.selectedItems()
            # Default to first row when no explicit selection is made
            row = sel[0].row() if sel else (0 if self.table.rowCount() > 0 else -1)
            if row < 0:
                return None
            return self.rows[row]
        except Exception:
            try:
                r = getattr(self.table, 'currentRow', lambda: -1)()
                if r is not None and r >= 0 and r < len(self.rows):
                    return self.rows[r]
            except Exception:
                pass
            return None

    def create_item(self):
        dlg = QDialog(self); dlg.setWindowTitle("Nouvel article"); dlg.resize(560, 220)
        lay = QVBoxLayout(dlg)
        form = QFormLayout(); lay.addLayout(form)
        ed_ref = QLineEdit(); ed_des = QLineEdit()
        cmb_type = QComboBox()
        # types from existing rows
        try:
            types = sorted({(r.get("Type") or "").strip() for r in (self.rows or []) if (r.get("Type") or "").strip()})
            if not types:
                types = ["Pièces","Main d’œuvre","Forfait"]
        except Exception:
            types = ["Pièces","Main d’œuvre","Forfait"]
        for t in types: cmb_type.addItem(t)
        sp_pu = QDoubleSpinBox(); sp_pu.setRange(0, 1e9); sp_pu.setDecimals(2)
        sp_tva = QDoubleSpinBox(); sp_tva.setRange(0, 100); sp_tva.setDecimals(2); sp_tva.setValue(20.00)
        cmb_u = QComboBox(); 
        try:
            for u in UNIT_CHOICES: cmb_u.addItem(u)
        except Exception:
            for u in ["U","H","F","M2","ML","M3","L","J","KG","KM"]: cmb_u.addItem(u)
        form.addRow("Réf", ed_ref)
        form.addRow("Désignation", ed_des)
        form.addRow("Type", cmb_type)
        form.addRow("Prix HT", sp_pu)
        form.addRow("TVA %", sp_tva)
        form.addRow("Unité", cmb_u)
        btns = QHBoxLayout(); lay.addLayout(btns)
        b_ok = QPushButton("OK"); b_cancel = QPushButton("Cancel")
        btns.addStretch(1); btns.addWidget(b_ok); btns.addWidget(b_cancel)
        b_cancel.clicked.connect(dlg.reject); b_ok.clicked.connect(dlg.accept)
        if dlg.exec_() != QDialog.Accepted:
            return
        # --- Auto-génération de la référence si vide ---
        try:
            if (isinstance(locals().get("ed_ref", None), QLineEdit) and not (ed_ref.text() or "").strip()):
                # Détermine le préfixe selon le type sélectionné
                t = ""
                try:
                    t = cmb_type.currentText()
                except Exception:
                    try:
                        t = locals().get("cmb_type").currentText()
                    except Exception:
                        t = ""
                t_low = (t or "").lower()
                if ("main" in t_low and ("oe" in t_low or "œ" in t_low)):
                    prefix = "MO"
                elif ("pièce" in t_low) or ("piece" in t_low) or ("pièces" in t_low) or ("pieces" in t_low):
                    prefix = "PC"
                elif "forfait" in t_low:
                    prefix = "FO"
                else:
                    prefix = "IT"
                import os, re as _re
                rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
                max_num = 0; pad = 4
                for r in rows:
                    refx = str(r.get("Reference") or r.get("Ref") or "")
                    mnum = _re.match(r'^([A-Z]{1,3})(\d+)$', refx.strip())
                    if mnum and mnum.group(1) == prefix:
                        num = int(mnum.group(2)); max_num = max(max_num, num); pad = max(pad, len(mnum.group(2)))
                new_ref = f"{prefix}{str(max_num+1).zfill(pad)}"
                try:
                    ed_ref.setText(new_ref)
                except Exception:
                    pass
        except Exception:
            pass

        ref = (ed_ref.text() or "").strip()
        if not ref:
            QMessageBox.warning(self, "Référence requise", "Merci de saisir une référence.")
            return
        row = {
            "ID": "",
            "Reference": ref,
            "Type": cmb_type.currentText(),
            "Designation": ed_des.text().strip(),
            "Prix_HT": f"{float(sp_pu.value()):.2f}",
            "Taux_TVA": f"{float(sp_tva.value()/100.0):.2f}",
            "Unite": cmb_u.currentText(),
            "Categorie": "",
        }
        try:
            import os
            rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
            # assign new ID
            try:
                max_id = max([int(r.get("ID") or 0) for r in rows] or [0])
            except Exception:
                max_id = 0
            row["ID"] = str(max_id + 1)
            rows.append(row)
            save_csv(os.path.join(DATA_DIR, CSV_ITEMS), rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
            self.load()  # refresh table
            # select the new item in the table
            try:
                for r in range(self.table.rowCount()):
                    if self.table.item(r,1) and self.table.item(r,1).text().strip() == ref:
                        self.table.selectRow(r)
                        self.table.scrollToItem(self.table.item(r,1))
                        break
            except Exception:
                pass
        except Exception:
            QMessageBox.critical(self, "Erreur", "Impossible d'enregistrer l'article.")
    

class LinesEditor(QWidget):
    linesChanged = QtCore.pyqtSignal(list, float, float, float)
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        # Inputs quick add
        
        ### _labels_row  (grid-aligned with input row)
        from PyQt5.QtWidgets import QGridLayout
        grid = QGridLayout()
        grid.setHorizontalSpacing(8)
        grid.setVerticalSpacing(4)
        # Inputs quick add (widgets)
        self.ed_ref=QLineEdit(); self.ed_ref.setPlaceholderText("Réf")
        self.ed_des=QLineEdit(); self.ed_des.setPlaceholderText("Désignation")
        self.cmb_type=QComboBox(); self.cmb_type.addItems(['Pièces','Main d’œuvre','Titre','Sous-titre','Texte','Espace'])
        self.ed_qte=QLineEdit(); self.ed_qte.setPlaceholderText("Qté"); self.ed_qte.setFixedWidth(70)
        self.ed_pu=QLineEdit(); self.ed_pu.setPlaceholderText("PU HT"); self.ed_pu.setFixedWidth(90)
        self.ed_tva=QLineEdit(); self.ed_tva.setPlaceholderText("TVA %"); self.ed_tva.setFixedWidth(70)
        btn_add=QPushButton("Ajouter"); btn_cat=QPushButton("Catalogue…")
        # Labels (row 0)
        grid.addWidget(QLabel("Réf"),          0, 0)
        grid.addWidget(QLabel("Désignation"),  0, 1)
        grid.addWidget(QLabel("Type"),         0, 2)
        grid.addWidget(QLabel("Qté"),          0, 3)
        grid.addWidget(QLabel("PU HT"),        0, 4)
        grid.addWidget(QLabel("TVA %"),        0, 5)
        grid.addWidget(QWidget(),              0, 6)  # spacer for buttons col
        # Inputs (row 1)
        grid.addWidget(self.ed_ref,  1, 0)
        grid.addWidget(self.ed_des,  1, 1)
        grid.addWidget(self.cmb_type,1, 2)
        grid.addWidget(self.ed_qte,  1, 3)
        grid.addWidget(self.ed_pu,   1, 4)
        grid.addWidget(self.ed_tva,  1, 5)
        grid.addWidget(btn_add, 1, 6)
        grid.addWidget(btn_cat, 1, 7)
        btn_up=QPushButton("Monter")
        btn_down=QPushButton("Descendre")
        grid.addWidget(btn_up, 1, 12)
        grid.addWidget(btn_down, 1, 13)
        # paragraph helpers supprimés (remplacés par le menu Type)
# Stretches: Désignation takes 2x
        grid.setColumnStretch(0, 0)
        grid.setColumnStretch(1, 2)
        grid.setColumnStretch(2, 0)
        grid.setColumnStretch(3, 0)
        grid.setColumnStretch(4, 0)
        grid.setColumnStretch(5, 0)
        grid.setColumnStretch(6, 0)
        grid.setColumnStretch(7, 0)
        v.addLayout(grid)
        # Table
        self.table=QTableWidget(0,7); self.table.setHorizontalHeaderLabels(["Réf","Désignation","Type","Qté","PU HT","TVA %","Total HT"])
        ### _lines_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.Stretch)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        v.addWidget(self.table)
        # Foot totals
        foot=QHBoxLayout()
        self.lbl_ht=QLabel("Sous-total HT : 0.00 €")
        self.lbl_tva=QLabel("TVA : 0.00 €")
        self.lbl_ttc=QLabel("Total TTC : 0.00 €")
        btn_del=QPushButton("Supprimer")
        foot.addWidget(self.lbl_ht); foot.addWidget(self.lbl_tva); foot.addWidget(self.lbl_ttc); foot.addStretch(1); foot.addWidget(btn_del)
        v.addLayout(foot)
        btn_add.clicked.connect(self.add_line)
        btn_cat.clicked.connect(self.add_from_catalogue)
        btn_del.clicked.connect(self.del_sel)
        btn_up.clicked.connect(lambda: self.move_sel(-1))
        btn_down.clicked.connect(lambda: self.move_sel(+1))
        # connexions supprimées (Titre/Sous‑titre/Texte/Espace gérés par le menu Type)
        self.table.itemChanged.connect(self.recompute)
    
    def _insert_row(self, ref, des, typ, qte="0", pu="0", tva="0"):
        row=self.table.rowCount()
        self.table.blockSignals(True)
        self.table.insertRow(row)
        for c,val in enumerate([ref, des, typ, qte, pu, tva, ""]):
            self.table.setItem(row,c,QTableWidgetItem(str(val)))
        self.table.blockSignals(False)
        self.recompute()

    def add_title_line(self):
        des=self.ed_des.text().strip() or "—"
        self._insert_row("", des, "Titre", "0", "0", "0")

    def add_subtitle_line(self):
        des=self.ed_des.text().strip() or "—"
        self._insert_row("", des, "Sous-titre", "0", "0", "0")

    def add_text_line(self):
        des=self.ed_des.text().strip() or ""
        if not des.startswith("•"):
            des = "• " + des if des else "•"
        self._insert_row("", des, "Texte", "0", "0", "0")

    def add_space_line(self):
        self._insert_row("", "", "Espace", "0", "0", "0")
    def _swap_rows(self, r1:int, r2:int):
        """Swap two rows in the QTableWidget (values only)."""
        t = self.table
        if r1<0 or r2<0 or r1>=t.rowCount() or r2>=t.rowCount() or r1==r2:
            return
        cols = t.columnCount()
        # Take items for both rows
        row1 = [t.takeItem(r1, c) for c in range(cols)]
        row2 = [t.takeItem(r2, c) for c in range(cols)]
        for c in range(cols):
            t.setItem(r1, c, row2[c])
            t.setItem(r2, c, row1[c])

    def move_sel(self, direction:int):
        """Move selected rows up (-1) or down (+1). Keeps relative order for multi-selection."""
        t = self.table
        idxs = sorted({i.row() for i in t.selectedIndexes()})
        if not idxs:
            return
        if direction < 0 and idxs[0] == 0:
            return
        if direction > 0 and idxs[-1] >= t.rowCount()-1:
            return
        t.blockSignals(True)
        try:
            if direction < 0:
                # up: swap ascending
                for r in idxs:
                    self._swap_rows(r-1, r)
                new_sel = [r-1 for r in idxs]
            else:
                # down: swap descending
                for r in reversed(idxs):
                    self._swap_rows(r, r+1)
                new_sel = [r+1 for r in idxs]
        finally:
            t.blockSignals(False)
        # restore selection
        t.clearSelection()
        for r in new_sel:
            t.selectRow(r)
        self.recompute()

    def add_from_catalogue(self):
        dlg=CataloguePicker(self)
        try:
            dlg._create_item_cb = self._catalog_shortcut_new_item
        except Exception:
            pass
        if dlg.exec_()==QDialog.Accepted:
            it = dlg.selected_item()
            if not it: return
            self.ed_ref.setText(it.get("Reference",""))
            self.ed_des.setText(it.get("Designation",""))
            self.cmb_type.setCurrentText(it.get("Type","Pièces") or "Pièces")
            self.ed_qte.setText("1")
            self.ed_pu.setText(f"{_safe_float(it.get('Prix_HT',0)):.2f}")
            self.ed_tva.setText(f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}")
    def add_line(self):
        typ = self.cmb_type.currentText()
        if (typ or '').strip() == 'Espace':
            des = ''
        else:
            des = self.ed_des.text().strip()
            if not des:
                return
            if (typ or '').strip() == 'Texte' and not des.lstrip().startswith('•'):
                des = '• ' + des
        ref = self.ed_ref.text().strip()
        qte=_safe_float(self.ed_qte.text(),1)
        pu=_safe_float(self.ed_pu.text(),0.0)
        tva=_safe_float(self.ed_tva.text(), 20.0)/100.0
        tot=qte*pu
        row=self.table.rowCount()
        self.table.blockSignals(True)
        self.table.insertRow(row)
        # Remplissage des cellules : vide pour Titre/Sous‑titre/Texte/Espace
        if (typ or '').strip().lower() in ('titre','sous-titre','texte','espace'):
            values = [ref, des, typ, "", "", "", ""]
        else:
            values = [ref, des, typ, f"{qte:.2f}", f"{pu:.2f}", f"{int(round(tva*100))}", f"{tot:.2f}"]
        for c, val in enumerate(values):
            self.table.setItem(row,c,QTableWidgetItem(str(val)))
        self.table.blockSignals(False)
        self.ed_ref.clear(); self.ed_des.clear(); self.ed_qte.clear(); self.ed_pu.clear(); self.ed_tva.clear()
        self.recompute()
    def del_sel(self):
        rows=sorted({i.row() for i in self.table.selectedIndexes()}, reverse=True)
        self.table.blockSignals(True)
        for r in rows: self.table.removeRow(r)
        self.table.blockSignals(False)
        self.recompute()
    def lines(self):
        L=[]
        for r in range(self.table.rowCount()):
            ref = self.table.item(r,0).text() if self.table.item(r,0) else ""
            des = self.table.item(r,1).text() if self.table.item(r,1) else ""
            typ = self.table.item(r,2).text() if self.table.item(r,2) else ""
            qte = _safe_float(self.table.item(r,3).text() if self.table.item(r,3) else "1",1)
            pu  = _safe_float(self.table.item(r,4).text() if self.table.item(r,4) else "0",0)
            tva = _safe_float(self.table.item(r,5).text() if self.table.item(r,5) else "20",20)/100.0
            tot = qte * pu  # recalcul systématique
            lt = (typ or "").strip().lower()
            if lt in ("titre","sous-titre","texte","espace"):
                # non-facturable paragraph lines
                bullet = des.strip().startswith("•")
                L.append({"ref":ref,"designation":des,"type":typ,"ligne_type":lt,"bullet":bullet,"indent_mm":6.0,"qte":0.0,"pu_ht":0.0,"tva":0.0,"total_ht":0.0})
            else:
                L.append({"ref":ref,"designation":des,"type":typ,"ligne_type":"item","qte":qte,"pu_ht":pu,"tva":tva,"total_ht":tot})
        return L
    def recompute(self):
        # Recalcule chaque ligne + totaux, et met à jour la colonne "Total HT" visuellement.
        # On bloque les signaux pour éviter les boucles lors des setItem().
        self.table.blockSignals(True)
        # Recalc per-row total and update column 6
        for r in range(self.table.rowCount()):
            qte = _safe_float(self.table.item(r,3).text() if self.table.item(r,3) else "1",1)
            pu  = _safe_float(self.table.item(r,4).text() if self.table.item(r,4) else "0",0)
            tot = qte * pu
            item = self.table.item(r,6)
            if item is None:
                item = QTableWidgetItem(f"{tot:.2f}")
                self.table.setItem(r,6,item)
            else:
                item.setText(f"{tot:.2f}")
        self.table.blockSignals(False)
        # Compute totals from fresh values
        L=self.lines()
        total_ht = sum(x["total_ht"] for x in L)
        total_tva = sum(x["total_ht"]*x["tva"] for x in L)
        total_ttc = total_ht + total_tva
        self.lbl_ht.setText(f"Sous-total HT : {total_ht:.2f} €")
        self.lbl_tva.setText(f"TVA : {total_tva:.2f} €")
        self.lbl_ttc.setText(f"Total TTC : {total_ttc:.2f} €")
        self.linesChanged.emit(L, total_ht, total_tva, total_ttc)
class ClientPicker(QWidget):
    clientChanged = QtCore.pyqtSignal(dict)
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        hb=QHBoxLayout()
        self.filter=QLineEdit(); self.filter.setPlaceholderText("Rechercher client...")
        self.combo=QComboBox()
        btn_new=QPushButton("Créer…")
        hb.addWidget(self.filter,2); hb.addWidget(self.combo,1); hb.addWidget(btn_new,0)
        v.addLayout(hb)
        self.clients = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        self._rebuild("")
        self.filter.textChanged.connect(self._rebuild)
        self.combo.currentIndexChanged.connect(self._emit)
        btn_new.clicked.connect(self.create_client)
    def _rebuild(self, needle):
        needle=(needle or "").lower()
        self.combo.blockSignals(True); self.combo.clear()
        m_pn = _load_prenom_map()
        for r in self.clients:
            civ, nom_base, prenom_auto = _split_civ_name_prenom(r.get('Nom',''))
            prenom = m_pn.get(r.get('Email') or r.get('Nom')) or prenom_auto
            disp=f"{r.get('ID','')} — {nom_base} {prenom} — {r.get('Ville','')}".strip()
            if not needle or needle in disp.lower():
                self.combo.addItem(disp or "(incomplet)", r)
        self.combo.blockSignals(False)
    def _emit(self):
        r=self.combo.currentData()
        if isinstance(r,dict): self.clientChanged.emit(r)
    def current_client(self):
        r=self.combo.currentData()
        return r if isinstance(r,dict) else {}
    def create_client(self):
        dlg=SimpleClientDialog(self)
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values()
            # assign ID (CLxxxx)
            rows=load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
            import re
            mx=0
            for x in rows:
                s=(x.get("ID","") or "")
                m=re.match(r"CL(\d+)$", s)
                if m:
                    mx=max(mx, int(m.group(1)))
                elif s.isdigit():
                    mx=max(mx, int(s))
            new_id=f"CL{mx+1:04d}"
            vals["ID"]=new_id
            rows.append(vals)
            save_csv(rows["ID","Genre","Nom","Prenom","Email","Telephone","Adresse","CodePostal","Ville","SIRET"])
            self.clients=rows; self._rebuild(self.filter.text())
class QuoteDialog(QDialog):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False, enable_maitre_oeuvre:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.enable_maitre_oeuvre = bool(enable_maitre_oeuvre)
        self._maitre_oeuvre_payload = {}
        self.setWindowTitle("Nouveau devis"); self.resize(1000, 650)
        v=QVBoxLayout(self)
        grp_client=QGroupBox("Client"); fl=QFormLayout(grp_client)
        self.cp=ClientPicker(self); self.lbl_sel=QLabel("—")
        fl.addRow(self.cp); fl.addRow("Sélection :", self.lbl_sel)
        meta=QHBoxLayout()
        self.dt=QDateEdit(QtCore.QDate.currentDate()); self.dt.setDisplayFormat("dd/MM/yyyy")
        self.st=QComboBox(); self.st.addItems(STATUTS); self.st.setCurrentText("Brouillon")
        meta.addWidget(QLabel("Date :")); meta.addWidget(self.dt); meta.addSpacing(20); meta.addWidget(QLabel("Statut :")); meta.addWidget(self.st); meta.addStretch(1)
        self.le = LinesEditor(self)
        btns=QDialogButtonBox(QDialogButtonBox.Save|QDialogButtonBox.Cancel)
        v.addWidget(grp_client)
        self.mo_nom = QLineEdit()
        self.mo_email = QLineEdit()
        self.mo_tel = QLineEdit()
        grp_mo = None
        if self.enable_maitre_oeuvre:
            grp_mo = QGroupBox("Maître d'œuvre")
            fl_mo = QFormLayout(grp_mo)
            self.mo_nom.setPlaceholderText("Nom du maître d'œuvre")
            self.mo_email.setPlaceholderText("Email du maître d'œuvre")
            self.mo_tel.setPlaceholderText("Téléphone du maître d'œuvre")
            row = QWidget(); h = QHBoxLayout(row); h.setContentsMargins(0,0,0,0)

            h.addWidget(QLabel("Nom :")); h.addWidget(self.mo_nom, 2)

            h.addWidget(QLabel("Email :")); h.addWidget(self.mo_email, 2)

            h.addWidget(QLabel("Téléphone :")); h.addWidget(self.mo_tel, 1)

            fl_mo.addRow(row)
        else:
            for _w in (self.mo_nom, self.mo_email, self.mo_tel):
                _w.hide()
        if grp_mo is not None:
            v.addWidget(grp_mo)
        v.addLayout(meta); v.addWidget(self.le,1); v.addWidget(btns)
        try:
            self.showMaximized()
        except Exception:
            try:
                self.setWindowState(self.windowState() | Qt.WindowMaximized)
            except Exception:
                pass

        # Objet multi-ligne
        self.objet_edit = QTextEdit(self)
        self.objet_edit.setPlaceholderText("Objet du devis / facture")
        self.objet_edit.setFixedHeight(60)
        v.insertWidget(2, QLabel("Objet :"))
        v.insertWidget(3, self.objet_edit)
        self.cp.clientChanged.connect(self._upd)
        self.le.linesChanged.connect(self._lines_changed)
        btns.accepted.connect(self._save); btns.rejected.connect(self.reject)
        self.numero = None if getattr(self, "edit_mode", False) else _safe_next_doc_number("devis", self)
        self.t_ht=self.t_tva=self.t_ttc=0.0
    def set_maitre_oeuvre_fields(self, nom:str="", email:str="", tel:str=""):
        if not getattr(self, "enable_maitre_oeuvre", False):
            return
        self.mo_nom.setText(nom or "")
        self.mo_email.setText(email or "")
        self.mo_tel.setText(tel or "")
    def get_maitre_oeuvre_payload(self) -> Dict[str, str]:
        if not getattr(self, "enable_maitre_oeuvre", False):
            return {}
        return {
            "maitre_oeuvre_nom": (self.mo_nom.text().strip() if isinstance(self.mo_nom, QLineEdit) else ""),
            "maitre_oeuvre_email": (self.mo_email.text().strip() if isinstance(self.mo_email, QLineEdit) else ""),
            "maitre_oeuvre_tel": (self.mo_tel.text().strip() if isinstance(self.mo_tel, QLineEdit) else ""),
        }
    def _upd(self, r): 
        civ, nom_base, prenom_auto = _split_civ_name_prenom(r.get('Nom',''))
        prenom = _load_prenom_map().get(r.get('Email') or r.get('Nom')) or prenom_auto
        self.lbl_sel.setText(f"{nom_base} {prenom} — {r.get('Adresse','')} — {r.get('CodePostal','')} {r.get('Ville','')}")
    def _lines_changed(self, L, ht, tva, ttc):
        self.lignes=L; self.t_ht=ht; self.t_tva=tva; self.t_ttc=ttc
    def _save(self):
        # Editing mode: don't persist here; caller will update CSV (prevents duplicates)
        try:
            self._maitre_oeuvre_payload = self.get_maitre_oeuvre_payload()
        except Exception:
            self._maitre_oeuvre_payload = {}
        if getattr(self, "edit_mode", False):
            try:
                # Ensure totals reflect latest values
                self.le.recompute()
            except Exception:
                pass
            try:
                self.lignes = getattr(self, 'lignes', self.le.lines())
            except Exception:
                self.lignes = getattr(self, 'lignes', [])
            self.accept()
            return
        cl=self.cp.current_client()
        if not cl or not cl.get("ID"): QMessageBox.warning(self,"Client","Sélectionnez ou créez un client."); return
        subj = (self.objet_edit.toPlainText() or "").strip()
        if not subj:
            QMessageBox.warning(self, "Objet obligatoire", "Veuillez saisir l\'objet.")
            return

        # Anti-collision: objet dupliqué pour le même client => blocage
        try:
            def _norm_obj(s:str)->str:
                import re
                s = (s or "").strip().lower()
                s = re.sub(r"\s+", " ", s)
                s = re.sub(r"\s*[-–]\s*situ.*$", "", s)
                return s
            masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            cur_client = str(cl.get("ID",""))
            cur_num = str(getattr(self, "numero", ""))
            cur_obj = _norm_obj(subj)
            for r in masters:
                if str(r.get("client_id","")) == cur_client and _norm_obj(r.get("objet","")) == cur_obj and str(r.get("numero","")) != cur_num:
                    QMessageBox.warning(self, "Objet déjà présent", "Un devis avec le même objet existe déjà pour ce client.\nModifiez légèrement l'objet pour éviter les confusions et mélanges de situations.")
                    return
        except Exception:
            pass

        numero=self.numero
        row = {
            "numero":numero,"date":_safe_date_str(self.dt.date().toString("dd/MM/yyyy")),
            "date_statut":"", "client_id":cl.get("ID",""), "client_nom":cl.get("Nom",""),
            "client_email":cl.get("Email",""), "client_tel":cl.get("Telephone",""),
            "client_adresse":cl.get("Adresse",""), "client_cp":cl.get("CodePostal",""), "client_ville":cl.get("Ville",""),
            "statut":self.st.currentText(),"acompte":"0", "objet":subj,
            "total_ht":f"{self.t_ht:.2f}","total_tva":f"{self.t_tva:.2f}","total_ttc":f"{self.t_ttc:.2f}",
            "converted_to_facture":""
        }
        if getattr(self, "enable_maitre_oeuvre", False):
            try:
                row.update(self._maitre_oeuvre_payload or self.get_maitre_oeuvre_payload())
            except Exception:
                row.update(self.get_maitre_oeuvre_payload())
        masters=load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        # --- safety guard: ensure unique numero at save time ---
        try:
            existing_nums = set((r.get('numero') or r.get('Numero') or r.get('NUMERO') or '').strip() for r in masters)
        except Exception:
            existing_nums = { (r.get('numero') or '').strip() for r in masters }
        if numero in existing_nums:
            try:
                numero = _safe_next_doc_number('devis', self)
            except Exception:
                try:
                    numero = next_doc_number('devis')
                except Exception:
                    from datetime import date
                    import time
                    numero = f"D{date.today().year}-{int(time.time())%1000:03d}"
            row['numero'] = numero
        masters.append(row)
        save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, list(row.keys()))
        # lines
        existing=load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
        for L in self.lignes:
            existing.append({"doc_num":numero,"kind":"devis","ref":L.get("ref",""),"type":L.get("type",""),
                             "designation":L.get("designation",""),"qte":f"{L.get('qte',1):.2f}",
                             "pu_ht":f"{L.get('pu_ht',0):.2f}","tva":f"{L.get('tva',0.2):.2f}",
                             "total_ht":f"{L.get('total_ht',0):.2f}"})
        save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), existing, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        log_action("create_devis", numero); 
        try:
            _op_ensure_dirs_for_doc(assemble_doc("devis", numero), "devis")
        except Exception:
            try: log_error("ensure_op_on_devis_save\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _ensure_op_on_devis_save
        
        # --- Auto-email on Devis save ---
        try:
            if False and self.settings.get("auto_mail_devis") and not getattr(self, "no_auto_mail_this_time", False):
                doc = assemble_doc("devis", numero)
                to = (doc.get("client_email","") or "").strip()
                if to:
                    pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
                    try:
                        generate_devis_pdf(doc, self.settings, pdf_path)
                    except Exception:
                        pdf_path = ""
                    subject = render_tpl(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
                    body = build_email_body(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
                    bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
                    send_email_with_attachment(self.settings, to, subject, body, pdf_path if pdf_path else None, bcc=bcc)
                else:
                    QMessageBox.information(self, "Email automatique", "Adresse e-mail client vide : aucun envoi.")
        except Exception:
            log_error("auto_mail_devis_on_save\n"+__import__('traceback').format_exc())
        self.accept()
class DevisTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.TAB_KIND = 'devis'
        self._mail_sent_cache = set()  # session cache to avoid double auto-mails
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouveau devis"); self.btn_edit=QPushButton("Modifier"); self.btn_convert=QPushButton("Convertir en facture")
        self.btn_pdf=QPushButton("Factur-X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_email=QPushButton("Email"); self.btn_dup=QPushButton("Dupliquer"); self.btn_del=QPushButton("Supprimer"); self.btn_del.setVisible(False); self.btn_del.setEnabled(False)
        self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Filtrer par client ou objet..."); self.ed_filter.setMinimumWidth(500); self.ed_filter.setMinimumWidth(360); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_convert); top.addWidget(self.btn_pdf); top.addWidget(self.btn_fx); top.addWidget(self.btn_fx); top.addWidget(self.btn_email); top.addWidget(self.btn_dup)
        # === Actions ▾ (TPE) ===
        try:
            if not hasattr(self, "btn_actions"):
                self.btn_actions = QToolButton()
                self.btn_actions.setText("Actions ▾")
                _menu = QMenu(self.btn_actions)
                _a_open = _menu.addAction("📁 Ouvrir le dossier d’opération")
                _a_docs = _menu.addAction("➕ Ajouter des pièces")
                _a_quote = _menu.addAction("📄 Ajouter un devis")
                _a_buy  = _menu.addAction("🧾 Ajouter un achat")
                self.btn_actions.setMenu(_menu); self.btn_actions.setPopupMode(QToolButton.InstantPopup)
                top.addWidget(self.btn_actions)
                _a_open.triggered.connect(lambda *_: _op_open_current_folder_for_tab(self, "devis"))
                _a_docs.triggered.connect(lambda *_: _op_add_files_for_tab(self, "devis"))
                _a_quote.triggered.connect(lambda *_: _op_add_devis_fournisseur_for_tab(self, "devis"))
                _a_buy.triggered.connect(lambda *_: _op_add_achat_for_tab(self, "devis"))
        except Exception:
            try: log_error("devis_actions_menu\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _devis_actions_menu
        top.addStretch(1);        top.addWidget(QLabel("Recherche:")); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        try:
            top.parentWidget().setVisible(False)
        except Exception:
            try:
                top.setEnabled(False)
            except Exception:
                pass
        # helper labels row for automated checks (hidden; real ones live in the editor dialogs)
        try:
            ### _lineseditor_labels_stub
            _lbl_stub = QWidget(); _hl = QHBoxLayout(_lbl_stub); _hl.setContentsMargins(0,0,0,0)
            for _txt in ("Réf","Désignation","Type","Qté","PU HT","TVA %"):
                _hl.addWidget(QLabel(_txt))
            _lbl_stub.setVisible(False)
            v.addWidget(_lbl_stub)
        except Exception:
            pass
        self.table=QTableWidget(0,9); self.table.setHorizontalHeaderLabels(["N°","Date","Client","Prénom","Ville","Objet","Total TTC","Statut","Actions"])
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _devis_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.Stretch)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.ResizeToContents); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        self.btn_new.clicked.connect(self.create_devis); self.btn_edit.clicked.connect(self.edit_selected); self.btn_refresh.clicked.connect(self.refresh)
        self.btn_convert.clicked.connect(self.convert_selected); self.btn_pdf.clicked.connect(self.pdf_selected); self.btn_fx.hide()  # merged into PDF button; self.btn_fx.hide()  # merged into PDF button; self.btn_email.clicked.connect(self.email_selected); self.btn_dup.clicked.connect(self.duplicate_selected)
        self.ed_filter.textChanged.connect(self.apply_filter)
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_convert","btn_pdf","btn_email","btn_dup","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouveau devis")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier le devis sélectionné")
                elif btn_name == "btn_convert":
                    btn.setToolTip("Convertir le devis en facture")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Générer un PDF du devis")
                elif btn_name == "btn_email":
                    btn.setToolTip("Envoyer le devis par email")
                elif btn_name == "btn_dup":
                    btn.setToolTip("Dupliquer le devis sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer le devis sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des devis")
        
        self.refresh()
        
        # --- auto-patch: ensure Devis actions wired and hide Factur-X button ---
        
        try:
        
            if hasattr(self, 'btn_fx'):
        
                self.btn_fx.setVisible(False)
        
        except Exception:
        
            pass
        
        # Rewire critical signals (connect once; disconnect if already connected)
        
        for _btn, _slot in [(getattr(self,'btn_dup',None), getattr(self,'duplicate_selected',None)),
        
        
                            (getattr(self,'btn_pdf',None), getattr(self,'pdf_selected',None)),
        
                            (getattr(self,'btn_email',None), getattr(self,'email_selected',None)),
        
                            (getattr(self,'btn_edit',None), getattr(self,'edit_selected',None)),
        
                            (getattr(self,'btn_convert',None), getattr(self,'convert_selected',None))]:
        
            try:
        
                _btn.clicked.disconnect()
        
            except Exception:
        
                pass
        
            try:
        
                if _btn and _slot:
        
                    _btn.clicked.connect(_slot)
        
            except Exception:
        
                pass
        
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                r["statut"]=new_statut
                r["date_statut"]=date.today().isoformat()
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            log_action("devis_status_change", f"{numero}:{new_statut}")
            # Auto-conversion si "Accepté"
            try:
                if (new_statut or "").strip().lower() in ("accepté","accepte","acceptée","accepted"):
                    self._convert_devis_to_facture_auto(numero)
            except Exception:
                log_error("convert_auto_accept\n"+__import__('traceback').format_exc())
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            # --- Envoi via statut: Demande d'acompte ---
            if (not getattr(self, 'no_auto_mail_this_time', False)) and new_statut in ("Demande d'acompte","Acompte","Demande d’acompte"):
                try:
                    self._send_devis(numero, mode="acompte")
                except Exception:
                    log_error("send_acompte_on_status\n"+__import__('traceback').format_exc())
            
            # --- Auto-email on status "Envoyé" (Devis) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye", False) and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_devis\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
    def duplicate_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        doc = assemble_doc("devis", numero)
        if not doc:
            QMessageBox.warning(self,"Introuvable","Devis introuvable.")
            return
        # Ouvre un dialog pré-rempli, aucune écriture avant Save
        dlg = QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        dlg.setWindowTitle(f"Dupliquer devis {numero}")
        dlg.no_auto_mail_this_time = True
        # Client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Date/statut/objet
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception: pass
        dlg.st.setCurrentText("Brouillon")
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception: pass
        # Lignes
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        if dlg.exec_()==QDialog.Accepted:
            self.refresh()
    def delete_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        if QMessageBox.question(self,"Supprimer", f"Supprimer le devis {numero} ?")==QMessageBox.Yes:
            masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            masters = [r for r in masters if r.get("numero")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
            log_action("delete_devis", numero)
            self.trigger_refresh()
    def refresh(self):
        masters=load_csv(os.path.join(DATA_DIR, CSV_DEVIS)); masters=list(masters)[::-1]; self.table.setRowCount(0)
        for r in masters:
            row=self.table.rowCount(); self.table.insertRow(row)
            # Fallback: if prenom missing, try to lookup from clients by client_id
            try:
                pren = r.get("client_prenom","")
                if (not pren) and r.get("client_id"):
                    for _cl in load_csv(os.path.join(DATA_DIR, CSV_CLIENTS)):
                        if _cl.get("ID")==r.get("client_id"):
                            r["client_prenom"] = (_cl.get("Prénom") or _cl.get("Prenom") or _cl.get("prenom") or ""); break
            except Exception:
                pass
            self.table.setItem(row,0,QTableWidgetItem(r.get("numero","")))
            self.table.setItem(row,1,QTableWidgetItem(_display_date(r.get("date",""))))
            self.table.setItem(row,2,QTableWidgetItem(r.get("client_nom","")))
            _pn = _resolve_prenom(r.get("client_id",""), r.get("client_nom",""), r.get("client_prenom",""))
            try:
                _colp = getattr(self, "_col_prenom", None)
                if _colp is None:
                    _colp = self._col_prenom = (_find_table_col_by_header(self.table, {"prénom","prenom"}) or 3)
                self.table.setItem(row,_colp,QTableWidgetItem(_pn))
            except Exception:
                self.table.setItem(row,3,QTableWidgetItem(_pn))
            self.table.setItem(row,4,QTableWidgetItem(r.get("client_ville","")))
            self.table.setItem(row,5,QTableWidgetItem(r.get("objet","")))
            self.table.setItem(row,6,QTableWidgetItem(money(r.get("total_ttc",0))))
            combo=QComboBox(); combo.addItems(["Brouillon","Envoyé","Demande d'acompte","Accepté","Refusé"]); combo.setCurrentText(r.get("statut","") or "Brouillon"); combo.currentTextChanged.connect(lambda new, numero=r.get("numero"): self.update_status(numero,new)); self.table.setCellWidget(row,7,combo)
            btn=QPushButton("Ouvrir PDF"); btn.clicked.connect(lambda _,num=r.get("numero"): self.open_pdf(num))
            self.table.setCellWidget(row,8, btn)
        try:
            self.table.resizeColumnsToContents()
        except Exception:
            pass
        self.apply_filter()
        # --- UI-only: colorize status combos (direct styleSheet) ---
        try:
            # Find 'Statut' column index dynamically
            statut_col = None
            try:
                for c in range(self.table.columnCount()):
                    it = self.table.horizontalHeaderItem(c)
                    if it and (it.text() or '').strip().lower() == 'statut':
                        statut_col = c; break
            except Exception:
                pass
            if statut_col is None:
                statut_col = 5  # fallback
            # Map status -> inline stylesheet (robust on Windows/Fusion)
            sty = {
                'brouillon': 'QComboBox { background-color: #FFA726; color: #000; }',
                'envoyé':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'envoye':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'accepté':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'accepte':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'acompte':   'QComboBox { background-color: #A5D6A7; color: #000; }',
                'refusé':    'QComboBox { background-color: #E53935; color: #fff; }',
                'refuse':    'QComboBox { background-color: #E53935; color: #fff; }',
                'payée':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'payee':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'annulée':   'QComboBox { background-color: #B0BEC5; color: #000; }',
                'annulee':   'QComboBox { background-color: #B0BEC5; color: #000; }',
            }
            for r in range(self.table.rowCount()):
                w = self.table.cellWidget(r, statut_col)
                if not w or not hasattr(w, 'currentText') or not hasattr(w, 'setStyleSheet'):
                    continue
                try:
                    s_txt = (w.currentText() or '').strip().lower()
                    w.setStyleSheet(sty.get(s_txt, ''))
                except Exception:
                    pass
        except Exception:
            pass
        # --- End status combo coloring ---
        try:
            self._ensure_actions_column()
        except Exception:
            pass
        try:
            self._tune_columns_for_readability()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens, columns=(2, 3, 4, 5))
    def create_devis(self):
        dlg=QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        if dlg.exec_()==QDialog.Accepted: self.refresh()
    def edit_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        doc = assemble_doc("devis", numero)
        if not doc:
            QMessageBox.warning(self,"Introuvable","Devis introuvable.")
            return
        dlg = QuoteDialog(self.settings, self, edit_mode=True, enable_maitre_oeuvre=True)
        # (rollback removed: constructor now supports edit_mode, no number is consumed)
        dlg.edit_mode = True
        dlg.setWindowTitle(f"Modifier devis {numero}")
        # Client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Date/statut
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception: pass
        if doc.get("statut"): dlg.st.setCurrentText(doc.get("statut"))
        # Lignes
        # Lignes
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        dlg.numero = numero
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.set_maitre_oeuvre_fields(doc.get("maitre_oeuvre_nom",""), doc.get("maitre_oeuvre_email",""), doc.get("maitre_oeuvre_tel",""))
        except Exception:
            pass
        if dlg.exec_()==QDialog.Accepted:
            masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            for r in masters:
                if r.get("numero")==numero:
                    r.update({
                        "date": _safe_date_str(dlg.dt.date().toString("dd/MM/yyyy")),
                        "statut": dlg.st.currentText(),
                        "client_id": dlg.cp.current_client().get("ID",""),
                        "client_nom": dlg.cp.current_client().get("Nom",""),
                        "client_email": dlg.cp.current_client().get("Email",""),
                        "client_tel": dlg.cp.current_client().get("Telephone",""),
                        "client_adresse": dlg.cp.current_client().get("Adresse",""),
                        "client_cp": dlg.cp.current_client().get("CodePostal",""),
                        "client_ville": dlg.cp.current_client().get("Ville",""),
                        "total_ht": f"{dlg.t_ht:.2f}", "total_tva": f"{dlg.t_tva:.2f}", "total_ttc": f"{dlg.t_ttc:.2f}", "objet": (dlg.objet_edit.toPlainText().strip() if hasattr(dlg, "objet_edit") else (doc.get("objet","") or "")),
                    })
                    if getattr(dlg, "enable_maitre_oeuvre", False):
                        try:
                            payload = dlg.get_maitre_oeuvre_payload()
                        except Exception:
                            payload = {}
                        for _k, _v in (payload or {}).items():
                            r[_k] = _v
                    # Preserve/merge 'objet' to avoid wiping it when dialog returns empty
                    try:
                        _new_obj = (dlg.objet_edit.toPlainText() or "").strip()
                    except Exception:
                        _new_obj = ""
                    if not _new_obj:
                        _new_obj = r.get("objet", doc.get("objet",""))
                    r["objet"] = _new_obj
                    break
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            # Lines overwrite
            lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            for L in dlg.le.lines():
                lines.append({
                    "doc_num": numero, "kind":"devis", "ref": L.get("ref",""), "type": L.get("type",""),
                    "designation": L.get("designation",""), "qte": f"{L.get('qte',1):.2f}",
                    "pu_ht": f"{L.get('pu_ht',0):.2f}", "tva": f"{L.get('tva',0.2):.2f}", "total_ht": f"{L.get('total_ht',0):.2f}"
                })
            save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        self.trigger_refresh()
    
    def _convert_devis_to_facture_auto(self, numero:str):
        _convert_devis_with_prompt(self, numero, auto=True)
    def _convert_devis_to_facture_auto(self, numero:str):
        _convert_devis_with_prompt(self, numero, auto=True)
    def convert_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez un devis.")
            return
        _convert_devis_with_prompt(self, numero, auto=False)
    def _convert_devis_to_facture_situation(self, numero_dev: str):
        try:
            doc_parent = assemble_doc("devis", numero_dev)
        except Exception:
            doc_parent = None
        if not doc_parent:
            try:
                QMessageBox.warning(self, "Introuvable", "Devis introuvable.")
            except Exception:
                pass
            return None
        fac_num = _emit_facture_situation(self, doc_parent, numero_dev, getattr(self, "settings", {}))
        if fac_num:
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            try:
                self.trigger_refresh()
            except Exception:
                pass
        return fac_num
    def open_pdf(self, numero):
        doc=assemble_doc("devis", numero)
        if not doc: QMessageBox.warning(self,"Erreur","Devis introuvable"); return
        out=os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
        try:
            generate_devis_pdf(doc, self.settings, out); _open_file_async(out)
            try:
                _op_store_pdf('devis', doc, out)
            except Exception:
                pass
        except Exception as e: QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    def pdf_selected(self):
        num=self.selected()
        if not num: QMessageBox.information(self,"Info","Sélectionnez un devis."); return
        self.open_pdf(num)
    
    def facturx_selected(self):
        # Factur‑X ne s'applique qu'aux devis. Informer l'utilisateur.
        try:
            QMessageBox.information(self, "Factur‑X",
                "Le format Factur‑X s'applique aux factures.\n"
                "Convertissez ce devis en facture puis utilisez le bouton Factur‑X dans l'onglet Factures.")
        except Exception:
            pass
    def email_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis."); return
        menu = QMenu(self)
        act_simple = menu.addAction("Envoyer Devis simple (PDF)")
        act_da = menu.addAction("Envoyer Demande d'acompte (PDF)")
        chosen = menu.exec_(QCursor.pos())
        if chosen == act_simple:
            self._send_devis(numero, mode="simple")
        elif chosen == act_da:
            self._send_devis(numero, mode="acompte")
    def trigger_refresh(self):
        QTimer.singleShot(0, self.refresh)
    def _send_devis(self, numero:str, mode:str="simple"):
        doc = assemble_doc("devis", numero)
        to = (doc.get("client_email","") or "").strip() or QInputDialog.getText(self,"Email client","Adresse email:")[0]
        if not to:
            return
        subject = ''
        body = ''
        pdf_path = ''
        next_statut = None
        if mode == "acompte":
            # Demander le montant d'acompte TTC
            try:
                default_acompte = float(doc.get("acompte", 0) or 0)
            except Exception:
                default_acompte = 0.0
            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant de l'acompte TTC (€):", default_acompte, 0.0, 1e9, 2)
            if not ok:
                return
            doc["acompte"] = float(val)
            # PERSIST_ACOMPTE_CSV — write back to CSV so "Ouvrir PDF" & conversions reuse the same value
            try:
                masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
                for r in masters:
                    if r.get("numero")==numero:
                        r["acompte"] = f"{float(val):.2f}"
                        break
                headers = list(masters[0].keys()) if masters else ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","statut","acompte","objet","total_ht","total_tva","total_ttc","converted_to_facture"]
                save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, headers)
            except Exception:
                log_error("persist_acompte_csv\n"+__import__('traceback').format_exc())
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}_DA.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subject = render_tpl(self.settings.get("tpl_subject_devis_demande_acompte","Demande d’acompte – Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis_demande_acompte","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}.\n\nConformément à nos échanges, un acompte de {ACOMPTE} TTC est requis pour valider la commande et réserver la prestation.\nMerci d’effectuer le règlement par virement en rappelant la référence {DOC_NUM}.\nÀ réception de l’acompte, nous vous adressons la confirmation. Le solde ({RESTANT_DU}) sera facturé à l’achèvement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
            next_statut = "Demande d'acompte"
        else:
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subject = render_tpl(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
            next_statut = "Envoyé"
        bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
        ok = _ops_send_and_store_wrapper(self.settings, 'devis', doc, pdf_path, to, subject, body, bcc=bcc)
        ### __send_devis_wrapper_applied
        # Defer UI interactions to avoid nested modal re-entrancy
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda: self._post_send_devis_status(numero, ok, next_statut))
        except Exception:
            try:
                self._post_send_devis_status(numero, ok, next_statut)
            except Exception:
                pass
        return
    def selected(self):
        try:
            sel = self.table.selectionModel().selectedRows()
            if not sel:
                return None
            row = sel[0].row()
            it = self.table.item(row, 0)
            return it.text().strip() if it else None
        except Exception:
            return None
    def _post_send_devis_status(self, numero, ok, next_statut):
        try:
            QMessageBox.information(self,"Email","Envoyé." if ok else "Echec d'envoi (voir log).")
        except Exception:
            pass
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        if ok and next_statut:
            try:
                doc = assemble_doc("devis", numero) or {}
                cur = (doc.get("statut") or "").strip()
            except Exception:
                cur = ""
            if cur != next_statut:
                try:
                    if QMessageBox.question(self, "Statut", f"Mettre le statut à « {next_statut} » ?",
                                            QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                        self.no_auto_mail_this_time = True
                        try:
                            self.update_status(numero, next_statut)
                        finally:
                            self.no_auto_mail_this_time = False
                except Exception:
                    pass
    def _auto_mail_envoye_deferred(self, numero):
        try:
            doc = assemble_doc("devis", numero)
            to = (doc.get("client_email","") or "").strip()
            if not to:
                try:
                    QMessageBox.information(self, "Email automatique", "Adresse e-mail client vide : aucun envoi.")
                except Exception:
                    pass
                return
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception:
                pdf_path = ""
            subject = render_tpl(self.settings.get("tpl_subject_devis","Votre devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis","Bonjour {CLIENT_NOM},\nVeuillez trouver votre devis en pièce-jointe.\n{MESSAGE_ENTREPRISE}\n{LIEN_PDF}"), doc, self.settings, pdf_path)
            bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
            if send_email_with_attachment(self.settings, to, subject, body, pdf_path if pdf_path else None, bcc=bcc):
                self._mail_sent_cache.add(numero)
        except Exception:
            log_error("auto_mail_on_status_envoye_devis\n"+__import__('traceback').format_exc())
    # --- Row-level Actions (delta minimal) ---
    def _find_row_by_num(self, numero):
        try:
            table = getattr(self, "table", None)
            if not table: return -1
            col_num = 0  # assume 'numero' is col 0 or adjust if a named mapping exists
            # Try to find the column index by header label if available
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        col_num = ci; break
            except Exception:
                pass
            for r in range(table.rowCount()):
                it = table.item(r, col_num)
                if it and it.text() == str(numero):
                    return r
        except Exception:
            pass
        return -1
    def _select_row_by_num(self, numero):
        try:
            r = self._find_row_by_num(numero)
            if r >= 0:
                self.table.setCurrentCell(r, 0)
                self.table.selectRow(r)
                return True
        except Exception:
            pass
        return False
    def _on_row_action(self, action, numero):
        # Route to existing handlers used by the toolbar (no rename, no refactor)
        try:
            self._select_row_by_num(numero)
        except Exception:
            pass
        def _call_first(names):
            for n in names:
                fn = getattr(self, n, None)
                if callable(fn):
                    return fn()
            return None
        a = (action or "").lower()
        if "modifier" in a or a == "edit":
            return _call_first(("edit_selected","edit_devis","modifier_devis"))
        if a.startswith("pdf") or "ouvrir pdf" in a or "open pdf" in a or a == "devis":
            fn = getattr(self, "open_pdf", None)
            if callable(fn):
                try:
                    return fn(numero)
                except TypeError:
                    pass
            return _call_first(("open_pdf_selected","pdf_selected","pdf_devis_selected","ouvrir_pdf_selected","btn_pdf_click"))
        if "email" in a or "relance" in a:
            # this should call the same popup+status path as your toolbar
            return _call_first(("email_selected","relance_selected","send_email_selected"))
        if "dupliquer" in a or "duplicate" in a:
            return _call_first(("duplicate_selected","dupliquer_selected","dupliquer_devis"))
        if "supprimer" in a or "delete" in a:
            return _call_first(("delete_selected","supprimer_selected","supprimer_devis"))
        # default: try edit
        return _call_first(("edit_selected","edit_devis","modifier_devis"))
    def _ensure_actions_column(self):
        # Add/ensure an 'Actions' column at the end and populate with per-row buttons
        try:
            table = getattr(self, "table", None)
            if not table: return
            # Check if an 'Actions' header exists
            act_col = None
            for ci in range(table.columnCount()):
                h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                if h.strip().lower() == "actions":
                    act_col = ci; break
            if act_col is None:
                act_col = table.columnCount()
                table.insertColumn(act_col)
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    table.setHorizontalHeaderItem(act_col, QTableWidgetItem("Actions"))
                except Exception:
                    pass
            # Identify numero column for retrieval
            numero_col = 0
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        numero_col = ci; break
            except Exception:
                pass
            # Populate each row with a small action bar
            from PyQt5.QtWidgets import QWidget, QHBoxLayout
            for r in range(table.rowCount()):
                num = None
                try:
                    it = table.item(r, numero_col)
                    num = it.text() if it else ""
                except Exception:
                    num = ""
                w = QWidget(table)
                h = QHBoxLayout(w); h.setContentsMargins(0,0,0,0); h.setSpacing(4)
                def _btn(label, act, numero_val):
                    b = QToolButton(w); b.setText(label); b.setCursor(Qt.PointingHandCursor)
                    b.clicked.connect(lambda _=False, a=act, n=numero_val: self._on_row_action(a, n))
                    if label=='Mail' or act=='relance/email': b.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    return b
                # Keep concise labels to avoid layout overflow
                for (lab, act) in (("Modifier","modifier"), ("DEVIS","pdf"), ("Mail","relance/email"), ("Dupliquer","dupliquer")):
                    try:
                        b = _btn(lab, act, num)
                        if act == "pdf" and hasattr(self, "TAB_KIND") and str(getattr(self, "TAB_KIND")).lower().startswith("fact"):
                            b.setText("Facture"); b.setToolTip("Ouvrir/Créer le PDF de la facture")
                        h.addWidget(b)
                    except Exception:
                        pass
                try:
                    tb = QToolButton(w); tb.setText("Suivi du dossier")
                    tb.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    _menu = QMenu(tb)
                    _a1 = _menu.addAction("📁 Ouvrir le dossier d’opération")
                    _a2 = _menu.addAction("➕ Ajouter des pièces")
                    _a3 = _menu.addAction("🧾 Ajouter un achat")
                    _a4 = _menu.addAction("📄 Ajouter un devis")
                    def _row_suivi_devis(n):
                        try:
                            try:
                                doc = assemble_doc("devis", n)
                                if doc:
                                    out = os.path.join(DOCS_DIRS.get("devis", os.path.join(DATA_DIR, "devis")), f"{n}.pdf")
                                    try:
                                        generate_devis_pdf(doc, self.settings, out)
                                    except Exception:
                                        pass
                                    try:
                                        _op_store_pdf('devis', doc, out)
                                    except Exception:
                                        pass
                            except Exception:
                                pass
                            _op_open_current_folder_for_tab(self, "devis", n)
                        except Exception:
                            try:
                                log_error("_row_suivi_devis\n"+__import__('traceback').format_exc())
                            except Exception:
                                pass
                    _a1.triggered.connect(lambda *_ , n=num: _row_suivi_devis(n))
                    _a2.triggered.connect(lambda *_, n=num: _op_add_files_for_tab(self, "devis", n))
                    _a3.triggered.connect(lambda *_, n=num: _op_add_achat_for_tab(self, "devis", n))
                    _a4.triggered.connect(lambda *_, n=num: _op_add_devis_fournisseur_for_tab(self, "devis", n))
                    tb.setMenu(_menu); tb.setPopupMode(QToolButton.InstantPopup)
                    h.addWidget(tb)
                except Exception:
                    pass
                w.setLayout(h)
                table.setCellWidget(r, act_col, w)
        except Exception:
            try:
                log_error("_ensure_actions_column\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    # --- Column tuning: narrow "Objet" with wrap; widen "Actions" ---
    def _tune_columns_for_readability(self, objet_width=240):
        try:
            table = getattr(self, "table", None)
            if not table:
                return
            header = table.horizontalHeader()
            # Find columns by header labels
            objet_col = actions_col = None
            for ci in range(table.columnCount()):
                head = table.horizontalHeaderItem(ci)
                title = head.text() if head else ""
                t = (title or "").strip().lower()
                if t == "objet" and objet_col is None:
                    objet_col = ci
                if t == "actions" and actions_col is None:
                    actions_col = ci
            table.setWordWrap(True)
            if objet_col is not None:
                try:
                    table.setItemDelegateForColumn(objet_col, _WrapItemDelegate(table))
                except Exception:
                    pass
                try:
                    header.setSectionResizeMode(objet_col, QHeaderView.Interactive)
                except Exception:
                    pass
                try:
                    table.setColumnWidth(objet_col, int(objet_width))
                except Exception:
                    pass
            if actions_col is not None:
                try:
                    header.setSectionResizeMode(actions_col, QHeaderView.ResizeToContents)
                except Exception:
                    pass
            # Adjust row heights to "Objet"
            if objet_col is not None:
                fm = table.fontMetrics()
                for r in range(table.rowCount()):
                    try:
                        it = table.item(r, objet_col)
                        text = it.text() if it else ""
                        if not text:
                            continue
                        width = table.columnWidth(objet_col)
                        rect = fm.boundingRect(QtCore.QRect(0,0,int(width)-10, 2000), QtCore.Qt.TextWordWrap, text)
                        h = max(28, rect.height() + 12)
                        if table.rowHeight(r) < h:
                            table.setRowHeight(r, h)
                    except Exception:
                        pass
        except Exception:
            try:
                log_error("_tune_columns_for_readability\\n"+__import__('traceback').format_exc())
            except Exception:
                pass
class FactureSituationDialog(QDialog):
    def __init__(self, doc: dict, parent=None):
        super().__init__(parent)
        self.doc = doc or {}
        self.total_ttc = _safe_float(self.doc.get("total_ttc", 0.0), 0.0)
        numero = str(self.doc.get("numero") or "")
        self.setWindowTitle(f"Facture {numero} – Situation")
        layout = QVBoxLayout(self)
        form = QFormLayout()
        self.chk_enable = QCheckBox("Activer la facturation de situation")
        form.addRow(self.chk_enable)
        self.lbl_total = QLabel(f"Montant TTC actuel : {self.total_ttc:.2f} €")
        form.addRow(self.lbl_total)
        self.lbl_reference = QLabel(str(self.doc.get("doc_reference") or ""))
        if self.lbl_reference.text().strip():
            self.lbl_reference.setStyleSheet("font-weight:600;")
            form.addRow("Référence devis/marché", self.lbl_reference)
        def _mk_amount_spin():
            sp = QDoubleSpinBox()
            sp.setDecimals(2)
            sp.setMaximum(1_000_000_000.0)
            sp.setMinimum(0.0)
            sp.setSingleStep(100.0)
            sp.setSuffix(" €")
            return sp
        self.sp_prev = _mk_amount_spin()
        self.sp_current = _mk_amount_spin()
        self.sp_cumul = _mk_amount_spin()
        self.sp_base = _mk_amount_spin()
        self.sp_pct = QDoubleSpinBox()
        self.sp_pct.setDecimals(2)
        self.sp_pct.setSingleStep(1.0)
        self.sp_pct.setMaximum(1000.0)
        self.sp_pct.setMinimum(0.0)
        self.sp_pct.setSuffix(" %")
        self.sp_index = QSpinBox()
        self.sp_index.setRange(1, 999)
        self.sp_index.setEnabled(False)
        self.sp_total = QSpinBox()
        self.sp_total.setRange(1, 999)
        self._history = []
        self._history_prev_total = 0.0
        self._history_last_index = 0
        self._history_total_planned = 0
        self.lbl_restant = QLabel("—")
        try:
            self.lbl_restant.setAlignment(Qt.AlignRight)
        except Exception:
            pass
        self.lbl_restant.setStyleSheet("font-weight:600;")
        form.addRow("Déjà facturé (situations précédentes)", self.sp_prev)
        form.addRow("Montant de la situation actuelle", self.sp_current)
        form.addRow("Cumul facturé après cette situation", self.sp_cumul)
        form.addRow("Montant total du contrat (TTC)", self.sp_base)
        form.addRow("% du contrat facturé", self.sp_pct)
        form.addRow("Situation n°", self.sp_index)
        form.addRow("Nombre total de situations prévues", self.sp_total)
        form.addRow("Restant dû (après cette situation)", self.lbl_restant)
        for w in (self.sp_prev, self.sp_current, self.sp_cumul, self.sp_base):
            try:
                w.valueChanged.connect(self._update_restant_du)
            except Exception:
                pass
        layout.addLayout(form)
        btn_row = QHBoxLayout()
        self.btn_reset = QPushButton("Réinitialiser (courant = total TTC)")
        self.btn_auto = QPushButton("Recalculer cumul / %")
        btn_row.addWidget(self.btn_reset)
        btn_row.addWidget(self.btn_auto)
        layout.addLayout(btn_row)
        self.btns = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        layout.addWidget(self.btns)
        self.btns.accepted.connect(self.accept)
        self.btns.rejected.connect(self.reject)
        self.btn_reset.clicked.connect(self._reset_from_totals)
        self.btn_auto.clicked.connect(self._auto_calc)
        self.chk_enable.toggled.connect(self._sync_enabled)
        self._init_history_context()
        self._prefill_from_doc()
        self._sync_enabled()
    def _prefill_from_doc(self):
        raw_prev = _safe_float(self.doc.get("situation_prev_ttc", 0.0), 0.0)
        raw_current = _safe_float(self.doc.get("situation_current_ttc", 0.0), 0.0)
        raw_cumul = _safe_float(self.doc.get("situation_cumul_ttc", 0.0), 0.0)
        raw_base = _safe_float(self.doc.get("situation_base_ttc", 0.0), 0.0)
        raw_pct = _safe_float(self.doc.get("situation_pct", 0.0), 0.0)
        prev = raw_prev
        current = raw_current
        cumul = raw_cumul
        base = raw_base
        pct = raw_pct
        try:
            doc_index = int(float(self.doc.get("situation_index", 0) or 0))
        except Exception:
            doc_index = 0
        try:
            doc_total_planned = int(float(self.doc.get("situation_total_count", 0) or 0))
        except Exception:
            doc_total_planned = 0
        has_existing_values = any(
            val > 0.0 for val in (
                raw_prev,
                raw_current,
                raw_cumul,
                raw_base,
                raw_pct,
                float(doc_index or 0),
            )
        )
        stored_index = doc_index
        if self._history_prev_total > 0.0 and (raw_prev <= 0.0 or not has_existing_values):
            prev = self._history_prev_total
        key = getattr(self, "_situ_key", _situ_parent_key(self.doc))
        try:
            cached_last = int(float(_LAST_SITU_IDX.get(key, 0) or 0))
        except Exception:
            cached_last = 0
        if self._history_last_index <= 0 and stored_index <= 0:
            cached_last = 0
        forced_next = max(1, max(self._history_last_index, cached_last) + 1)
        if stored_index > 0:
            doc_index = stored_index
            try:
                _LAST_SITU_IDX[key] = max(cached_last, stored_index)
            except Exception:
                pass
        else:
            doc_index = forced_next
        if doc_index <= 0:
            doc_index = 1
        if not has_existing_values and self._history_total_planned > 0:
            doc_total_planned = max(self._history_total_planned, doc_index)
        if doc_total_planned < doc_index:
            doc_total_planned = doc_index
        if current <= 0:
            current = self.total_ttc
        min_cumul = max(prev, 0.0) + max(current, 0.0)
        if cumul < min_cumul:
            cumul = min_cumul
        if base <= 0 and cumul > 0:
            base = cumul
        if pct <= 0 and base > 0:
            pct = (cumul / base) * 100.0 if base > 0 else 0.0
        # --- Règle simplifiée (à l'ouverture uniquement) ---------------------
        # Si Situation n° >= 2 et 'déjà facturé' brut == 0,
        # on initialise 'déjà facturé' avec le 'cumul facturé'.
        # Objectif : démarrer avec un cumul précédent cohérent sans calcul d'historique.
        try:
            if (int(float(doc_index or 0)) >= 2) and (raw_prev <= 0.0):
                prev = max(cumul, 0.0)
        except Exception:
            pass
        self.sp_prev.setValue(max(prev, 0.0))
        self.sp_current.setValue(max(current, 0.0))
        self.sp_cumul.setValue(max(cumul, 0.0))
        self.sp_base.setValue(max(base, 0.0))
        if raw_pct > 0:
            self.sp_pct.setValue(raw_pct)
        else:
            self.sp_pct.setValue(max(pct, 0.0))
        self.sp_index.setValue(doc_index)
        self.sp_total.setValue(doc_total_planned if doc_total_planned > 0 else doc_index)
        enabled = has_existing_values or any(
            val > 0.0
            for val in (
                self.sp_prev.value(),
                self.sp_current.value(),
                self.sp_cumul.value(),
                self.sp_base.value(),
                self.sp_pct.value(),
            )
        )
        self.chk_enable.setChecked(enabled)
        self._update_restant_du()
    def _init_history_context(self):
        self._situ_key = _situ_parent_key(self.doc)
        self._situ_key = _situ_parent_key(self.doc)
        try:
            history = _collect_situation_history(self.doc, include_current=False)
        except Exception:
            history = []
        total_prev = 0.0
        last_index = 0
        total_planned = 0
        try:
            current_index = int(float(self.doc.get("situation_index", 0) or 0))
        except Exception:
            current_index = 0
        for entry in history:
            try:
                entry_index = int(float(entry.get("index", 0) or 0))
            except Exception:
                entry_index = 0
            include_amount = True
            if current_index > 0 and entry_index > 0 and entry_index >= current_index:
                include_amount = False
            try:
                if include_amount:
                    total_prev += _safe_float(entry.get("amount", 0.0), 0.0)
                last_index = max(last_index, entry_index)
            except Exception:
                pass
            try:
                total_planned = max(total_planned, int(float(entry.get("total", 0) or 0)))
            except Exception:
                pass
        if current_index > 0:
            try:
                last_index = max(last_index, current_index)
            except Exception:
                pass
        self._history = history
        self._history_prev_total = total_prev
        self._history_last_index = last_index
        self._history_total_planned = total_planned
    def _update_restant_du(self):
        try:
            base = self.sp_base.value()
            cumul = self.sp_cumul.value()
        except Exception:
            base = 0.0
            cumul = 0.0
        if base <= 0:
            base = max(self.total_ttc, self.sp_prev.value() + self.sp_current.value())
        restant = base - cumul
        if abs(restant) < 0.005:
            restant = 0.0
        if base <= 0:
            text = "—"
        else:
            text = f"{restant:.2f} €"
        self.lbl_restant.setText(text)
        if restant < -0.01:
            self.lbl_restant.setStyleSheet("font-weight:600;color:#B00020;")
        else:
            self.lbl_restant.setStyleSheet("font-weight:600;")
    def _sync_enabled(self):
        enabled = self.chk_enable.isChecked()
        for w in (
            self.sp_prev,
            self.sp_current,
            self.sp_cumul,
            self.sp_base,
            self.sp_pct,
            self.sp_total,
            self.btn_reset,
            self.btn_auto,
        ):
            w.setEnabled(enabled)
        self.sp_index.setEnabled(False)
    def _reset_from_totals(self):
        self.sp_current.setValue(max(self.total_ttc, 0.0))
        cumul = self.sp_prev.value() + self.sp_current.value()
        self.sp_cumul.setValue(cumul)
        if self.sp_base.value() <= 0 and cumul > 0:
            self.sp_base.setValue(cumul)
        self._auto_calc(update_pct_only=True)
        self._update_restant_du()
    def _auto_calc(self, update_pct_only: bool = False):
        if not update_pct_only:
            cumul = self.sp_prev.value() + self.sp_current.value()
            self.sp_cumul.setValue(cumul)
        base = self.sp_base.value()
        if base > 0:
            pct = (self.sp_cumul.value() / base) * 100.0
            self.sp_pct.setValue(pct)
        elif not update_pct_only:
            self.sp_pct.setValue(0.0)
        self._update_restant_du()
    def get_payload(self) -> dict:
        if not self.chk_enable.isChecked():
            data = {key: "" for key in FACTURE_SITUATION_FIELDS}
            data.update({
                "situation_index": "",
                "situation_total_count": "",
            })
            if self.lbl_reference and self.lbl_reference.text().strip():
                data["doc_reference"] = self.lbl_reference.text().strip()
            return data
        self._auto_calc()
        # Recompute "Déjà facturé" from authoritative history (exclude current)
        try:
            hist = _collect_situation_history(self.doc, include_current=False)
        except Exception:
            hist = []
        prev_total = 0.0
        last_index = 0
        for _e in hist:
            try:
                prev_total += _safe_float(_e.get("amount", 0.0), 0.0)
            except Exception:
                pass
            try:
                last_index = max(last_index, int(float(_e.get("index", 0) or 0)))
            except Exception:
                pass
        self.sp_prev.setValue(prev_total)
        # Enforce monotonic "Situation n°" on each validated save
        key = getattr(self, "_situ_key", _situ_parent_key(self.doc))
        forced_idx = max(1, max(last_index, _LAST_SITU_IDX.get(key, 0)) + 1)
        self.sp_index.setValue(forced_idx)
        cumul_val = self.sp_cumul.value()
        min_cumul = self.sp_prev.value() + self.sp_current.value()
        if cumul_val < min_cumul:
            cumul_val = min_cumul
            self.sp_cumul.setValue(cumul_val)
        payload = {
            "situation_prev_ttc": f"{self.sp_prev.value():.2f}",
            "situation_current_ttc": f"{self.sp_current.value():.2f}",
            "situation_cumul_ttc": f"{cumul_val:.2f}",
            "situation_base_ttc": "" if self.sp_base.value() <= 0 else f"{self.sp_base.value():.2f}",
            "situation_pct": f"{self.sp_pct.value():.2f}",
            "situation_index": str(int(self.sp_index.value())),
            "situation_total_count": str(int(max(self.sp_total.value(), self.sp_index.value()))),
        }
        if self.lbl_reference and self.lbl_reference.text().strip():
            payload["doc_reference"] = self.lbl_reference.text().strip()
                # Update session cache for next call
        try:
            _LAST_SITU_IDX[key] = int(self.sp_index.value())
        except Exception:
            pass
        return payload
    def is_enabled(self) -> bool:
        return self.chk_enable.isChecked()


class FactureSituationPaymentDialog(QDialog):
    def __init__(self, doc: dict, settings: dict = None, parent=None):
        super().__init__(parent)
        self.doc = doc or {}
        self.settings = settings or {}
        self.context = {}
        self.context_error = ""
        try:
            self.context = build_situation_payment_context(self.doc, settings=self.settings)
        except Exception as exc:
            self.context = {}
            self.context_error = str(exc)
        numero = str(self.doc.get("numero") or "").strip()
        if numero:
            self.setWindowTitle(f"Facture {numero} – Paiement")
        else:
            self.setWindowTitle("Paiement de situation")
        layout = QVBoxLayout(self)
        self.lbl_summary = QLabel("")
        self.lbl_summary.setWordWrap(True)
        self.lbl_summary.setStyleSheet("font-weight:600;")
        layout.addWidget(self.lbl_summary)
        form = QFormLayout()
        self.amount_spin = QDoubleSpinBox()
        self.amount_spin.setDecimals(2)
        self.amount_spin.setMaximum(1_000_000_000.0)
        self.amount_spin.setMinimum(0.0)
        self.amount_spin.setSingleStep(100.0)
        outstanding = _safe_float((self.context or {}).get("outstanding", 0.0), 0.0)
        default_amount = outstanding if outstanding > 0 else _safe_float((self.context or {}).get("current_facture_ttc", 0.0), 0.0)
        if default_amount > 0:
            self.amount_spin.setValue(default_amount)
        form.addRow("Montant payé", self.amount_spin)
        self.date_edit = QDateEdit()
        self.date_edit.setCalendarPopup(True)
        today_iso = (self.context or {}).get("today", "")
        qd = QDate.fromString(str(today_iso), "yyyy-MM-dd") if today_iso else QDate.currentDate()
        if not (qd and qd.isValid()):
            qd = QDate.currentDate()
        self.date_edit.setDate(qd)
        form.addRow("Date de paiement", self.date_edit)
        self.mode_combo = QComboBox()
        self.mode_combo.setEditable(True)
        for option in ("Virement", "Chèque", "Carte bancaire", "Espèces", "Autre"):
            if self.mode_combo.findText(option) < 0:
                self.mode_combo.addItem(option)
        last_mode = ""
        try:
            payments = list((self.context or {}).get("payments") or [])
            if payments:
                last_mode = str(payments[-1].get("mode") or "").strip()
        except Exception:
            last_mode = ""
        if last_mode:
            self.mode_combo.setCurrentText(last_mode)
        form.addRow("Mode", self.mode_combo)
        self.notes_edit = QTextEdit()
        self.notes_edit.setPlaceholderText("Notes internes (facultatif)")
        self.notes_edit.setFixedHeight(80)
        form.addRow("Notes", self.notes_edit)
        layout.addLayout(form)
        self.btns = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        self.btns.button(QDialogButtonBox.Save).setText("Enregistrer")
        self.btns.accepted.connect(self.accept)
        self.btns.rejected.connect(self.reject)
        layout.addWidget(self.btns)
        self._refresh_summary()

    def _refresh_summary(self):
        save_btn = self.btns.button(QDialogButtonBox.Save) if hasattr(self, "btns") else None
        if self.context_error:
            self.lbl_summary.setText(
                f"<span style='color:#B00020;'>Impossible de charger le contexte de paiement : {self.context_error}</span>"
            )
            for w in (self.amount_spin, self.date_edit, self.mode_combo, self.notes_edit):
                w.setEnabled(False)
            if save_btn:
                save_btn.setEnabled(False)
            return
        context = self.context or {}
        cumul = money(context.get("cumul_facture_ttc", 0.0))
        paid = money(context.get("payments_total", 0.0))
        outstanding = money(context.get("outstanding", 0.0))
        info_lines = [f"Cumul facturé : {cumul}", f"Total payé : {paid}", f"Reste dû : {outstanding}"]
        due_iso = str(context.get("due_date") or "").strip()
        extras = []
        if due_iso:
            extras.append(f"Échéance : {_display_date(due_iso)}")
        try:
            pay_count = len(context.get("payments") or [])
            extras.append(f"{pay_count} paiement(s) enregistré(s)")
        except Exception:
            pass
        if extras:
            info_lines.append(" • ".join(extras))
        self.lbl_summary.setText("\n".join(info_lines))

    def get_payment_data(self) -> dict:
        amount = self.amount_spin.value() if hasattr(self, "amount_spin") else 0.0
        payment_date = None
        if hasattr(self, "date_edit"):
            try:
                qd = self.date_edit.date()
                if hasattr(qd, "toPyDate"):
                    payment_date = qd.toPyDate()
                else:
                    payment_date = date(qd.year(), qd.month(), qd.day())
            except Exception:
                payment_date = None
        mode = ""
        if hasattr(self, "mode_combo"):
            try:
                mode = self.mode_combo.currentText().strip()
            except Exception:
                mode = ""
        notes = ""
        if hasattr(self, "notes_edit"):
            try:
                notes = self.notes_edit.toPlainText().strip()
            except Exception:
                notes = ""
        return {
            "amount": amount,
            "payment_date": payment_date,
            "mode": mode,
            "notes": notes,
        }

class FactureStatusCombo(QComboBox):
    def __init__(self, current, on_change):
        super().__init__()
        # Build Factures-specific status list: remove 'Accepté' and move 'Acompte' up
        try:
            _all = list(STATUTS)
            if 'Accepté' in _all:
                idx_acc = _all.index('Accepté')
            else:
                idx_acc = (_all.index('Envoyé') + 1) if ('Envoyé' in _all) else 2
            _fact = [s for s in _all if s != 'Accepté']
            try:
                if 'Acompte' in _fact:
                    _fact.remove('Acompte')
                    _fact.insert(min(idx_acc, len(_fact)), 'Acompte')
            except Exception:
                pass
        except Exception:
            _fact = ['Brouillon','Envoyé','Acompte','Relance 1','Relance 2','Payée','Annulée']
        self.addItems(_fact)
        if current in _fact:
            self.setCurrentText(current)
        self.currentTextChanged.connect(on_change)

class FacturesTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.TAB_KIND = 'factures'
        self._mail_sent_cache = set()  # session cache to avoid double auto-mails
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_edit=QPushButton("Modifier"); self.btn_situation=QPushButton("Situation"); self.btn_payment=QPushButton("Paiement"); self.btn_pdf=QPushButton("Factur-X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_email=QPushButton("Relance / Email"); self.btn_dup=QPushButton("Dupliquer"); self.btn_del=QPushButton("Supprimer"); self.btn_del.setVisible(False); self.btn_del.setEnabled(False)
        self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Filtrer par client ou objet..."); self.ed_filter.setMinimumWidth(500); self.ed_filter.setMinimumWidth(360); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_edit); top.addWidget(self.btn_situation); top.addWidget(self.btn_payment); top.addWidget(self.btn_pdf); top.addWidget(self.btn_fx); top.addWidget(self.btn_email); top.addWidget(self.btn_dup); top.addStretch(1);
        # === Actions ▾ (TPE) ===
        try:
            if not hasattr(self, "btn_actions"):
                self.btn_actions = QToolButton()
                self.btn_actions.setText("Actions ▾")
                _menu = QMenu(self.btn_actions)
                _a_open = _menu.addAction("📁 Ouvrir le dossier d’opération")
                _a_docs = _menu.addAction("➕ Ajouter des pièces")
                _a_quote = _menu.addAction("📄 Ajouter un devis")
                _a_buy  = _menu.addAction("🧾 Ajouter un achat")
                _menu.addSeparator()
                _a_pay  = _menu.addAction("💶 Suivi paiements…")
                self.btn_actions.setMenu(_menu); self.btn_actions.setPopupMode(QToolButton.InstantPopup)
                try:
                    top.insertWidget(6, self.btn_actions)
                except Exception:
                    top.addWidget(self.btn_actions)
                _a_open.triggered.connect(lambda *_: _op_open_current_folder_for_tab(self, "facture"))
                _a_docs.triggered.connect(lambda *_: _op_add_files_for_tab(self, "facture"))
                _a_quote.triggered.connect(lambda *_: _op_add_devis_fournisseur_for_tab(self, "facture"))
                _a_buy.triggered.connect(lambda *_: _op_add_achat_for_tab(self, "facture"))
                _a_pay.triggered.connect(lambda *_: _op_show_payments_for_tab(self))
        except Exception:
            try: log_error("factures_actions_menu\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _factures_actions_menu
        top.addWidget(QLabel("Recherche:")); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        try:
            top.parentWidget().setVisible(False)
        except Exception:
            try:
                top.setEnabled(False)
            except Exception:
                pass
        # helper labels row for automated checks (hidden; real ones live in the editor dialogs)
        try:
            ### _lineseditor_labels_stub
            _lbl_stub = QWidget(); _hl = QHBoxLayout(_lbl_stub); _hl.setContentsMargins(0,0,0,0)
            for _txt in ("Réf","Désignation","Type","Qté","PU HT","TVA %"):
                _hl.addWidget(QLabel(_txt))
            _lbl_stub.setVisible(False)
            v.addWidget(_lbl_stub)
        except Exception:
            pass
        self.table=QTableWidget(0,12); self.table.setHorizontalHeaderLabels(["N°","Date","Client","Prénom","Ville","Objet","Total TTC","Statut","Acompte","Restant dû","Date changement","Actions"])
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _factures_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.Stretch)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(9, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(10, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(11, _QHV.ResizeToContents); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_edit","btn_situation","btn_payment","btn_pdf","btn_email","btn_dup","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_edit":
                    btn.setToolTip("Modifier la facture sélectionnée")
                elif btn_name == "btn_situation":
                    btn.setToolTip("Définir les montants de situation pour la facture")
                elif btn_name == "btn_payment":
                    btn.setToolTip("Enregistrer un paiement lié aux situations")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Générer un PDF de la facture")
                elif btn_name == "btn_email":
                    btn.setToolTip("Envoyer la facture par email")
                elif btn_name == "btn_dup":
                    btn.setToolTip("Dupliquer la facture sélectionnée")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer la facture sélectionnée")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des factures")
        
        self.btn_refresh.clicked.connect(self.refresh); self.btn_edit.clicked.connect(self.edit_selected); self.btn_situation.clicked.connect(self.edit_situation); self.btn_payment.clicked.connect(self.record_situation_payment); self.btn_pdf.clicked.connect(self.pdf_selected); self.btn_email.clicked.connect(self.email_selected); self.btn_dup.clicked.connect(self.duplicate_selected); self.btn_fx.hide()
        self.ed_filter.textChanged.connect(self.apply_filter)
        self.trigger_refresh()

    def record_situation_payment(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez une facture.")
            return
        doc = assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self, "Introuvable", "Facture introuvable.")
            return
        try:
            dlg = FactureSituationPaymentDialog(doc, settings=self.settings, parent=self)
        except Exception as e:
            QMessageBox.critical(self, "Paiement", f"Impossible d'ouvrir la saisie de paiement : {e}")
            return
        if dlg.exec_() != QDialog.Accepted:
            return
        data = dlg.get_payment_data() if hasattr(dlg, "get_payment_data") else {}
        try:
            result = apply_situation_payment(
                numero,
                data.get("amount"),
                data.get("payment_date"),
                mode=data.get("mode", ""),
                notes=data.get("notes", ""),
                settings=self.settings,
            )
        except Exception as e:
            QMessageBox.critical(self, "Paiement", str(e))
            return
        self.trigger_refresh()
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        context_after = result.get("context_after") or {}
        total_paid = _safe_float(context_after.get("payments_total", 0.0), 0.0)
        outstanding = _safe_float(context_after.get("outstanding", 0.0), 0.0)
        lines = [
            "Paiement enregistré avec succès.",
            f"Total payé : {money(total_paid)}",
            f"Reste dû : {money(outstanding)}",
        ]
        warnings = (result.get("validation") or {}).get("warnings") or []
        for warn in warnings:
            if not warn:
                continue
            lines.append(f"⚠️ {warn}")
        QMessageBox.information(self, "Paiement", "\n".join(lines))

    def duplicate_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        try:
            doc = assemble_doc("facture", numero)
        except Exception:
            doc = None
        if not doc:
            QMessageBox.warning(self,"Introuvable","Facture introuvable.")
            return
        if _is_facture_locked(doc):
            QMessageBox.information(self, "Facture verrouillée", "Facture validée : duplication bloquée.")
            try:
                log_action("facture_locked_edit_denied", numero)
            except Exception:
                pass
            return
        new_num = _safe_next_doc_number("facture", self)
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        from datetime import date as _d
        row = {
            "numero": new_num,
            "date": _d.today().isoformat(),
            "date_statut": _d.today().isoformat(),
            "client_id": doc.get("client_id",""),
            "client_nom": doc.get("client_nom",""),
            "client_email": doc.get("client_email",""),
            "client_tel": doc.get("client_tel",""),
            "client_adresse": doc.get("client_adresse",""),
            "client_cp": doc.get("client_cp",""),
            "client_ville": doc.get("client_ville",""),
            "maitre_oeuvre_nom": doc.get("maitre_oeuvre_nom",""),
            "maitre_oeuvre_email": doc.get("maitre_oeuvre_email",""),
            "maitre_oeuvre_tel": doc.get("maitre_oeuvre_tel",""),
            "objet": doc.get("objet",""),
            "statut": "Brouillon",
            "acompte": "0.00",
            "total_ht": f"{_safe_float(doc.get('total_ht',0)):0.2f}",
            "total_tva": f"{_safe_float(doc.get('total_tva',0)):0.2f}",
            "total_ttc": f"{_safe_float(doc.get('total_ttc',0)):0.2f}",
            "doc_reference": doc.get("doc_reference", ""),
        }
        for _key in FACTURE_SITUATION_FIELDS:
            row[_key] = ""
        masters.append(row)
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
        # Lines duplicate
        lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
        for L in doc.get("lignes", []):
            lines.append({
                "doc_num": new_num,
                "kind": "facture",
                "ref": L.get("ref",""),
                "type": L.get("type",""),
                "designation": L.get("designation",""),
                "qte": f"{_safe_float(L.get('qte',1)):.2f}",
                "pu_ht": f"{_safe_float(L.get('pu_ht',0)):.2f}",
                "tva": f"{_safe_float(L.get('tva',0.2)):.2f}",
                "total_ht": f"{_safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0)))):.2f}",
            })
        save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN[k] for k in ["doc_num","kind","ref","type","designation","qte","pu_ht","tva","total_ht"]])
        log_action("duplicate_facture", f"{numero} -> {new_num}")
        self.trigger_refresh()
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
                # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            
            # --- Auto-email on status "Envoyé" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye") and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred_facture(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_facture\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Relance 1" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_relance1") and new_statut == "Relance 1" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 1]"))
            except Exception:
                log_error("auto_mail_on_status_relance1\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Relance 2" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_relance2") and new_statut == "Relance 2" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 2]"))
            except Exception:
                log_error("auto_mail_on_status_relance2\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Payée" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_payee") and new_statut == "Payée" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Facture payée]"))
            except Exception:
                log_error("auto_mail_on_status_payee\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
        try:
            self._trigger_auto_mail_for_status(numero, new_statut)
        except Exception:
            pass
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
 # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            self.trigger_refresh()
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
                # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            # --- Auto-email on status changes (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye") and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred_facture(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_facture\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_relance1") and new_statut == "Relance 1" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 1]"))
            except Exception:
                log_error("auto_mail_on_status_relance1\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_relance2") and new_statut == "Relance 2" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 2]"))
            except Exception:
                log_error("auto_mail_on_status_relance2\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_payee") and new_statut == "Payée" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Facture payée]"))
            except Exception:
                log_error("auto_mail_on_status_payee\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
    def refresh(self):
        masters=load_csv(os.path.join(DATA_DIR, CSV_FACTS)); masters=list(masters)[::-1]; self.table.setRowCount(0)
        for r in masters:
            row=self.table.rowCount(); self.table.insertRow(row)
            # Fallback prenom from client table for legacy factures
            try:
                pren = r.get("client_prenom","")
                if (not pren) and r.get("client_id"):
                    for _cl in load_csv(os.path.join(DATA_DIR, CSV_CLIENTS)):
                        if _cl.get("ID")==r.get("client_id"):
                            r["client_prenom"] = (_cl.get("Prénom") or _cl.get("Prenom") or _cl.get("prenom") or ""); break
            except Exception:
                pass
            numero=r.get("numero",""); datev=_display_date(r.get("date","")); client=r.get("client_nom","")
            ttc=_safe_float(r.get("total_ttc",0)); statut=r.get("statut","")
            # Paiements rattachés à la facture
            try:
                _pay_rows = load_csv(os.path.join(DATA_DIR, CSV_PAYMENTS))
                pay_sum = 0.0
                for _pr in _pay_rows:
                    if (_pr.get("facture_numero") or "").strip() == (numero or "").strip():
                        pay_sum += _safe_float(_pr.get("montant",0))
            except Exception:
                pay_sum = 0.0
            is_situ = bool(r.get("situation_index") or (r.get("type","").lower()=="situation"))
            present=_safe_float(r.get("situation_current_ttc", ttc)) if is_situ else ttc
            rg=_safe_float(r.get("rg_present_ttc",0)) if is_situ else 0.0
            acomp=pay_sum
            if acomp <= 0:
                acomp = _safe_float(r.get("acompte", r.get("acompte_ttc", 0)))
            restant = (max(_safe_float(r.get("contrat_total_ttc", ttc)) - _safe_float(r.get("situation_cumul_ttc", present)), 0.0) if is_situ else max(ttc - pay_sum, 0.0))
            dstat=_display_date(r.get("date_statut",""))
            self.table.setItem(row,0,QTableWidgetItem(numero))
            self.table.setItem(row,1,QTableWidgetItem(datev))
            self.table.setItem(row,2,QTableWidgetItem(client))
            _pn = _resolve_prenom(r.get("client_id",""), r.get("client_nom",""), r.get("client_prenom",""))
            try:
                _colp = getattr(self, "_col_prenom", None)
                if _colp is None:
                    _colp = self._col_prenom = (_find_table_col_by_header(self.table, {"prénom","prenom"}) or 3)
                self.table.setItem(row,_colp,QTableWidgetItem(_pn))
            except Exception:
                self.table.setItem(row,3,QTableWidgetItem(_pn))
            self.table.setItem(row,4,QTableWidgetItem(r.get("client_ville","")))
            self.table.setItem(row,5,QTableWidgetItem(r.get("objet","")))
            self.table.setItem(row,6,QTableWidgetItem(money(ttc)))
            combo=FactureStatusCombo(statut, lambda new, num=numero: self.update_status(num,new)); self.table.setCellWidget(row,7,combo)
            self.table.setItem(row,8,QTableWidgetItem(money(acomp)))
            self.table.setItem(row,9,QTableWidgetItem(money(restant)))
            self.table.setItem(row,10,QTableWidgetItem(dstat))
            btn=QPushButton("Ouvrir PDF"); btn.clicked.connect(lambda _,num=numero: self.open_pdf(num)); self.table.setCellWidget(row,11,btn)
        try:
            self.table.resizeColumnsToContents()
        except Exception:
            pass
        self.apply_filter()
        # --- UI-only: colorize status combos (direct styleSheet) ---
        try:
            # Find 'Statut' column index dynamically
            statut_col = None
            try:
                for c in range(self.table.columnCount()):
                    it = self.table.horizontalHeaderItem(c)
                    if it and (it.text() or '').strip().lower() == 'statut':
                        statut_col = c; break
            except Exception:
                pass
            if statut_col is None:
                statut_col = 5  # fallback
            # Map status -> inline stylesheet (robust on Windows/Fusion)
            sty = {
                'brouillon': 'QComboBox { background-color: #FFA726; color: #000; }',
                'envoyé':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'envoye':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'accepté':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'accepte':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'acompte':   'QComboBox { background-color: #A5D6A7; color: #000; }',
                'refusé':    'QComboBox { background-color: #E53935; color: #fff; }',
                'refuse':    'QComboBox { background-color: #E53935; color: #fff; }',
                'payée':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'payee':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'annulée':   'QComboBox { background-color: #B0BEC5; color: #000; }',
                'annulee':   'QComboBox { background-color: #B0BEC5; color: #000; }',
            }
            for r in range(self.table.rowCount()):
                w = self.table.cellWidget(r, statut_col)
                if not w or not hasattr(w, 'currentText') or not hasattr(w, 'setStyleSheet'):
                    continue
                try:
                    s_txt = (w.currentText() or '').strip().lower()
                    w.setStyleSheet(sty.get(s_txt, ''))
                except Exception:
                    pass
        except Exception:
            pass
        # --- End status combo coloring ---
        try:
            self._ensure_actions_column()
        except Exception:
            pass
        try:
            self._tune_columns_for_readability()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens, columns=(2, 3, 4, 5))
    def edit_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        # Assemble existing document
        try:
            doc = assemble_doc("facture", numero)
        except Exception as e:
            doc = None
        if not doc:
            QMessageBox.warning(self,"Introuvable","Facture introuvable.")
            return
        if _is_facture_locked(doc):
            QMessageBox.information(self, "Facture verrouillée", "Facture validée : modification bloquée.")
            try:
                log_action("facture_locked_edit_denied", numero)
            except Exception:
                pass
            return
        # Use same dialog as creation
        dlg = QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        dlg.setWindowTitle(f"Modifier facture {numero}")
        # Prefill client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Prefill date/statut
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception:
            pass
        dlg.st.setCurrentText(doc.get("statut","Envoyé"))
        # Prefill lines
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        dlg.numero = numero
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.set_maitre_oeuvre_fields(doc.get("maitre_oeuvre_nom",""), doc.get("maitre_oeuvre_email",""), doc.get("maitre_oeuvre_tel",""))
        except Exception:
            pass
        if dlg.exec_()==QDialog.Accepted:
            # Update master CSV
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            for r in masters:
                if r.get("numero")==numero:
                    r.update({
                        "date": _safe_date_str(dlg.dt.date().toString("dd/MM/yyyy")),
                        "statut": dlg.st.currentText(),
                        "client_id": dlg.cp.current_client().get("ID",""),
                        "client_nom": dlg.cp.current_client().get("Nom",""),
                        "client_email": dlg.cp.current_client().get("Email",""),
                        "client_tel": dlg.cp.current_client().get("Telephone",""),
                        "client_adresse": dlg.cp.current_client().get("Adresse",""),
                        "client_cp": dlg.cp.current_client().get("CodePostal",""),
                        "client_ville": dlg.cp.current_client().get("Ville",""),
                        "total_ht": f"{dlg.t_ht:.2f}", "total_tva": f"{dlg.t_tva:.2f}", "total_ttc": f"{dlg.t_ttc:.2f}", "objet": (dlg.objet_edit.toPlainText().strip() if hasattr(dlg, "objet_edit") else (doc.get("objet","") or "")),
                    })
                    if getattr(dlg, "enable_maitre_oeuvre", False):
                        try:
                            payload = dlg.get_maitre_oeuvre_payload()
                        except Exception:
                            payload = {}
                        for _k, _v in (payload or {}).items():
                            r[_k] = _v
                    break
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            # Overwrite lines CSV
            lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            for L in dlg.le.lines():
                lines.append({
                    "doc_num": numero, "kind":"facture", "ref": L.get("ref",""), "type": L.get("type",""),
                    "designation": L.get("designation",""), "qte": f"{L.get('qte',1):.2f}",
                    "pu_ht": f"{L.get('pu_ht',0):.2f}", "tva": f"{L.get('tva',0.2):.2f}", "total_ht": f"{L.get('total_ht',0):.2f}"
                })
            save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        self.trigger_refresh()
    
         
    def edit_situation(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez une facture.")
            return
        doc = assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self, "Introuvable", "Facture introuvable.")
            return
        if _is_facture_locked(doc):
            QMessageBox.information(self, "Facture verrouillée", "Facture validée : modification de situation bloquée.")
            try:
                log_action("facture_locked_situation_denied", numero)
            except Exception:
                pass
            return
        dlg = FactureSituationDialog(doc, self)
        if dlg.exec_() == QDialog.Accepted:
            payload_raw = dlg.get_payload()
            payload = _format_situation_values(payload_raw)
            if isinstance(payload_raw, dict) and payload_raw.get("doc_reference"):
                payload["doc_reference"] = payload_raw.get("doc_reference")
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            updated = False
            for r in masters:
                if r.get("numero") == numero:
                    r.update(payload)
                    updated = True
                    break
            if updated:
                save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
                try:
                    log_action("update_facture_situation", json.dumps({"numero": numero, **payload}, ensure_ascii=False))
                except Exception:
                    log_action("update_facture_situation", f"{numero}:{payload}")
                self.trigger_refresh()
    def delete_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        if _is_facture_locked(assemble_doc("facture", numero)):
            QMessageBox.information(self, "Facture verrouillée", "Facture validée : suppression impossible.")
            try:
                log_action("facture_locked_delete_denied", numero)
            except Exception:
                pass
            return
        if QMessageBox.question(self,"Supprimer", f"Supprimer la facture {numero} ?")==QMessageBox.Yes:
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            masters = [r for r in masters if r.get("numero")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
            log_action("delete_facture", numero)
            self.trigger_refresh()
    def open_pdf(self, numero):
        doc=assemble_doc("facture", numero)
        if not doc: QMessageBox.warning(self,"Erreur","Facture introuvable"); return
        out=os.path.join(DOCS_DIRS["factures"], f"{numero}.pdf")
        try:
            out = _safe_write_facturx_pdf(doc, self.settings, numero)
            _open_file_async(out)
            try:
                _op_store_pdf('facture', doc, out)
            except Exception:
                pass
        ### _store_pdf_on_open_facture
        except Exception as e: QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    def open_facturx(self, numero):
        doc=assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self,"Erreur","Facture introuvable"); return
        try:
            out_fx = _safe_write_facturx_pdf(doc, self.settings, numero)
            _open_file_async(out_fx)
        except Exception as e:
            QMessageBox.critical(self,"Factur‑X",f"Echec génération Factur‑X: {e}")
    def facturx_selected(self):
        num=self.selected()
        if not num:
            QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        self.open_facturx(num)
    def pdf_selected(self):
        num=self.selected()
        if not num: QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        self.open_pdf(num)
    
    def email_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        menu = QMenu(self)
        act_fact = menu.addAction("Envoyer Facture (PDF)")
        act_acompte = menu.addAction("Envoyer Facture d'acompte (PDF)")
        act_r1 = menu.addAction("Envoyer Relance 1 (PDF facture)")
        act_r2 = menu.addAction("Envoyer Relance 2 (PDF facture)")
        act_paid = menu.addAction("Envoyer Facture acquittée (PDF)")
        chosen = menu.exec_(QCursor.pos())
        if chosen == act_fact:
            self._send_facture(numero, mode="facture")
        elif chosen == act_acompte:
            self._send_facture(numero, mode="acompte")
        elif chosen == act_r1:
            self._send_facture(numero, mode="relance1")
        elif chosen == act_r2:
            self._send_facture(numero, mode="relance2")
        elif chosen == act_paid:
            self._send_facture(numero, mode="acquittee")
    def trigger_refresh(self):
        QTimer.singleShot(0, self.refresh)
    def _send_facture(self, numero:str, mode:str="facture"):
        doc = assemble_doc("facture", numero)
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        sit_info = _get_situation_info(doc, include_rank=True, all_factures=facts)
        to = ""
        try:
            recipients = []
            client_email = (doc.get("client_email", "") or "").strip()
            if client_email:
                label = f"Client – {doc.get('client_nom','')} <{client_email}>".strip()
                recipients.append(("client", client_email, label))
            mo_email = (doc.get("maitre_oeuvre_email", "") or "").strip()
            if mo_email:
                mo_name = (doc.get("maitre_oeuvre_nom", "") or "").strip() or "Maître d'œuvre"
                label = f"Maître d'œuvre – {mo_name} <{mo_email}>"
                recipients.append(("maitre_oeuvre", mo_email, label))
            if len(recipients) == 1:
                to = recipients[0][1]
            elif len(recipients) > 1:
                choices = [r[2] for r in recipients] + ["Saisir une autre adresse…"]
                choice, ok = QInputDialog.getItem(self, "Destinataire", "Choisir le destinataire :", choices, 0, False)
                if not ok:
                    return
                if choice == "Saisir une autre adresse…":
                    manual, ok2 = QInputDialog.getText(self, "Adresse email", "Adresse email :")
                    if not ok2 or not (manual or "").strip():
                        return
                    to = (manual or "").strip()
                else:
                    idx = choices.index(choice)
                    if idx < len(recipients):
                        to = recipients[idx][1]
            if not to:
                manual, ok = QInputDialog.getText(self, "Adresse email", "Adresse email :")
                if not ok or not (manual or "").strip():
                    return
                to = (manual or "").strip()
        except Exception:
            manual, ok = QInputDialog.getText(self, "Adresse email", "Adresse email :")
            if not ok or not (manual or "").strip():
                return
            to = (manual or "").strip()
        if not to:
            return
        subject = ''
        body = ''
        pdf_path = ''
        next_statut = None
        statut_actuel = (doc.get("statut") or "").strip()
        if mode == "acompte":
            # Saisir l'acompte une seule fois AVANT génération/envoi, puis réutiliser
            try:
                acomp = _safe_float(doc.get("acompte", 0))
            except Exception:
                acomp = 0.0
            if acomp <= 0:
                try:
                    val, ok = QInputDialog.getText(self, "Montant acompte", "Montant (€):")
                    if ok and (val is not None) and str(val).strip() != "":
                        acomp = _safe_float(val, 0)
                        doc["acompte"] = acomp
                        # Persister immédiatement dans le CSV factures
                        try:
                            _ms = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
                            for _r in _ms:
                                if _r.get("numero") == numero:
                                    _r["acompte"] = f"{acomp:.2f}"
                                    break
                            save_csv(os.path.join(DATA_DIR, CSV_FACTS), _ms, [COL[k] for k in FACTURE_ALL_FIELDS])
                        except Exception:
                            pass
                    else:
                        return
                except Exception:
                    pass
            pdf_path = os.path.join(DOCS_DIRS["factures"], f"{numero}_acompte.pdf")
            try:
                generate_facture_acompte_pdf(doc, self.settings, pdf_path)
                pdf_path = _ensure_facturx(pdf_path, doc, self.settings)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_facture_acompte"; body_key = "tpl_body_facture_acompte"
            next_statut = "Acompte"
        elif mode == "relance1":
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_relance_facture_1"; body_key = "tpl_body_relance_facture_1"
            next_statut = "Relance 1"
        elif mode == "relance2":
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_relance_facture_2"; body_key = "tpl_body_relance_facture_2"
            next_statut = "Relance 2"
        elif mode == "acquittee":
            if statut_actuel.lower() not in ("payé","payee","payée","paye"):
                QMessageBox.information(self,"Info","Disponible après paiement reçu (statut = Payé)."); return
            pdf_path = os.path.join(DOCS_DIRS["factures"], f"{numero}_acquittee.pdf")
            try:
                generate_facture_acquittee_pdf(doc, self.settings, pdf_path)
                pdf_path = _ensure_facturx(pdf_path, doc, self.settings)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_facture_paye"; body_key = "tpl_body_facture_paye"
            next_statut = statut_actuel
        else:
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            pdf_path = _ensure_situation_pdf_naming(pdf_path, doc, numero, sit_info=sit_info, all_factures=facts)
            subj_key = "tpl_subject_facture"; body_key = "tpl_body_facture"
            if sit_info.get("is_situation"):
                subj_key = "tpl_subject_facture_solde" if sit_info.get("is_solde") else "tpl_subject_facture_situation"
                body_key = "tpl_body_facture_solde" if sit_info.get("is_solde") else "tpl_body_facture_situation"
            if sit_info.get("is_situation"):
                next_statut = SITUATION_PAYMENT_STATUS if statut_actuel == "Brouillon" else statut_actuel
            else:
                next_statut = "Envoyé" if statut_actuel == "Brouillon" else statut_actuel
        subject = render_tpl(self.settings.get(subj_key,""), doc, self.settings, pdf_path)
        if not subject:
            defaults = {
                "tpl_subject_facture": f"Votre facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_acompte": f"Facture d’acompte {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_relance_facture_1": f"Relance – Facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_relance_facture_2": f"Relance 2 – Facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_paye": f"Facture {numero} acquittée – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_situation": f"Facture de situation {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_solde": f"Facture de solde {numero} – {self.settings.get('entreprise_nom','')}"
            }
            subject = defaults.get(subj_key, f"Facture {numero} – {self.settings.get('entreprise_nom','')}")
        body = build_email_body(self.settings.get(body_key, {
                "tpl_body_facture": "Veuillez trouver votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}. TTC : {TOTAL_TTC}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_acompte": "Ci-joint votre facture d\'acompte {DOC_NUM}. Montant de l\'acompte : {ACOMPTE} (TTC). {MESSAGE_ENTREPRISE}.",
                "tpl_body_relance_facture_1": "Sauf erreur de notre part, le règlement de la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}) n’a pas encore été enregistré.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_relance_facture_2": "Il s’agit d’une seconde relance concernant la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}). Merci d’effectuer le paiement dans les meilleurs délais.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_paye": "Pour suivi, ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, acquittée. Merci pour votre règlement.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_situation": "Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM} du {DOC_DATE}.\nSituations précédentes : {SITUATION_PREV}. Montant de la situation en cours : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_solde": "Bonjour {CLIENT_NOM},\nCi-joint la facture de solde {DOC_NUM} du {DOC_DATE}.\nCumul facturé à ce jour : {SITUATION_CUMUL}. Montants réglés précédemment : {SITUATION_PREV}. Reste dû après ce solde : {SITUATION_RESTE}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nMerci pour votre confiance et votre règlement."
            }[body_key]), doc, self.settings, pdf_path)
        bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
        ok = _ops_send_and_store_wrapper(self.settings, 'facture', doc, pdf_path, to, subject, body, bcc=bcc)
        ### __send_facture_wrapper_applied
        QMessageBox.information(self,"Email","Envoyé." if ok else "Echec d'envoi (voir log).")
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        if ok and next_statut and next_statut != statut_actuel:
            if QMessageBox.question(self, "Statut", f"Mettre le statut à « {next_statut} » ?",
                                    QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                self.update_status(numero, next_statut)
    def selected(self):
        try:
            sel = self.table.selectionModel().selectedRows()
            if not sel:
                return None
            row = sel[0].row()
            it = self.table.item(row, 0)
            return it.text().strip() if it else None
        except Exception:
            return None
    def _auto_mail_envoye_deferred_facture(self, numero):
        # Alias minimal: reuse unified deferred sender for 'Envoyé' (no prefix)
        try:
            return self._auto_mail_facture_deferred(numero, "")
        except Exception:
            log_error("auto_mail_envoye_deferred_facture\n"+__import__('traceback').format_exc())
    # --- Row-level Actions (delta minimal) ---
    def _find_row_by_num(self, numero):
        try:
            table = getattr(self, "table", None)
            if not table: return -1
            col_num = 0  # assume 'numero' is col 0 or adjust if a named mapping exists
            # Try to find the column index by header label if available
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        col_num = ci; break
            except Exception:
                pass
            for r in range(table.rowCount()):
                it = table.item(r, col_num)
                if it and it.text() == str(numero):
                    return r
        except Exception:
            pass
        return -1
    def _select_row_by_num(self, numero):
        try:
            r = self._find_row_by_num(numero)
            if r >= 0:
                self.table.setCurrentCell(r, 0)
                self.table.selectRow(r)
                return True
        except Exception:
            pass
        return False
    def _on_row_action(self, action, numero):
        # Route to existing handlers used by the toolbar (no rename, no refactor)
        try:
            self._select_row_by_num(numero)
        except Exception:
            pass
        def _call_first(names):
            for n in names:
                fn = getattr(self, n, None)
                if callable(fn):
                    return fn()
            return None
        a = (action or "").lower()
        if "modifier" in a or a == "edit":
            return _call_first(("edit_selected","edit_devis","modifier_devis"))
        if a.startswith("pdf") or "ouvrir pdf" in a or "open pdf" in a or a == "devis":
            fn = getattr(self, "open_pdf", None)
            if callable(fn):
                try:
                    return fn(numero)
                except TypeError:
                    pass
            return _call_first(("open_pdf_selected","pdf_selected","pdf_devis_selected","ouvrir_pdf_selected","btn_pdf_click"))
        if "email" in a or "relance" in a:
            # this should call the same popup+status path as your toolbar
            return _call_first(("email_selected","relance_selected","send_email_selected"))
        if "dupliquer" in a or "duplicate" in a:
            return _call_first(("duplicate_selected","dupliquer_selected","dupliquer_devis"))
        if "supprimer" in a or "delete" in a:
            return _call_first(("delete_selected","supprimer_selected","supprimer_devis"))
        # default: try edit
        return _call_first(("edit_selected","edit_devis","modifier_devis"))
    def _ensure_actions_column(self):
        # Add/ensure an 'Actions' column at the end and populate with per-row buttons
        try:
            table = getattr(self, "table", None)
            if not table: return
            # Check if an 'Actions' header exists
            act_col = None
            for ci in range(table.columnCount()):
                h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                if h.strip().lower() == "actions":
                    act_col = ci; break
            if act_col is None:
                act_col = table.columnCount()
                table.insertColumn(act_col)
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    table.setHorizontalHeaderItem(act_col, QTableWidgetItem("Actions"))
                except Exception:
                    pass
            # Identify numero column for retrieval
            numero_col = 0
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        numero_col = ci; break
            except Exception:
                pass
            # Populate each row with a small action bar
            from PyQt5.QtWidgets import QWidget, QHBoxLayout
            for r in range(table.rowCount()):
                num = None
                try:
                    it = table.item(r, numero_col)
                    num = it.text() if it else ""
                except Exception:
                    num = ""
                w = QWidget(table)
                h = QHBoxLayout(w); h.setContentsMargins(0,0,0,0); h.setSpacing(4)
                def _btn(label, act, numero_val):
                    b = QToolButton(w); b.setText(label); b.setCursor(Qt.PointingHandCursor)
                    b.clicked.connect(lambda _=False, a=act, n=numero_val: self._on_row_action(a, n))
                    if label=='Mail' or act=='relance/email': b.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    return b
                # Keep concise labels to avoid layout overflow
                for (lab, act) in (("Modifier","modifier"), ("DEVIS","pdf"), ("Mail","relance/email"), ("Dupliquer","dupliquer")):
                    try:
                        b = _btn(lab, act, num)
                        if act == "pdf" and hasattr(self, "TAB_KIND") and str(getattr(self, "TAB_KIND")).lower().startswith("fact"):
                            b.setText("Facture"); b.setToolTip("Ouvrir/Créer le PDF de la facture")
                        h.addWidget(b)
                    except Exception:
                        pass
                try:
                    tb = QToolButton(w); tb.setText("Suivi du dossier")
                    tb.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    _menu = QMenu(tb)
                    _a1 = _menu.addAction("📁 Ouvrir le dossier d’opération")
                    _a2 = _menu.addAction("➕ Ajouter des pièces")
                    _a3 = _menu.addAction("🧾 Ajouter un achat")
                    _a4 = _menu.addAction("📄 Ajouter un devis")
                    _menu.addSeparator()
                    _a_pay = _menu.addAction("💶 Suivi paiements…")
                    def _row_suivi_facture(n):
                        try:
                            try:
                                doc = assemble_doc("facture", n)
                                if doc:
                                    try:
                                        out = _safe_write_facturx_pdf(doc, self.settings, n)
                                    except Exception:
                                        out = os.path.join(DOCS_DIRS.get("factures", os.path.join(DATA_DIR, "factures")), f"{n}.pdf")
                                        try:
                                            generate_facture_pdf(doc, self.settings, out)
                                        except Exception:
                                            pass
                                    try:
                                        _op_store_pdf('facture', doc, out)
                                    except Exception:
                                        pass
                            except Exception:
                                pass
                            _op_open_current_folder_for_tab(self, "facture", n)
                        except Exception:
                            try:
                                log_error("_row_suivi_facture\n"+__import__('traceback').format_exc())
                            except Exception:
                                pass
                    _a1.triggered.connect(lambda *_ , n=num: _row_suivi_facture(n))
                    _a2.triggered.connect(lambda *_, n=num: _op_add_files_for_tab(self, "facture", n))
                    _a3.triggered.connect(lambda *_, n=num: _op_add_achat_for_tab(self, "facture", n))
                    _a4.triggered.connect(lambda *_, n=num: _op_add_devis_fournisseur_for_tab(self, "facture", n))
                    _a_pay.triggered.connect(lambda *_, n=num: _op_show_payments_for_tab(self, n))
                    tb.setMenu(_menu); tb.setPopupMode(QToolButton.InstantPopup)
                    h.addWidget(tb)
                except Exception:
                    pass
                w.setLayout(h)
                table.setCellWidget(r, act_col, w)
        except Exception:
            try:
                log_error("_ensure_actions_column\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    # --- Auto-mail helpers for Factures (delta minimal, deferred) ---
    _mail_sent_cache = set()
    def _auto_mail_facture_deferred(self, numero, prefix=""):
        try:
            s = ensure_settings()
            doc = assemble_doc("facture", numero)
            if not doc or not doc.get("numero"):
                return
            facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            sit_info = _get_situation_info(doc, include_rank=True, all_factures=facts)
            to = (doc.get("client_email","") or "").strip()
            if not to:
                return
            # Ensure PDF exists
            try:
                pdf_dir = DOCS_DIRS.get("factures") if isinstance(DOCS_DIRS, dict) else DOCS_DIRS["factures"]
            except Exception:
                pdf_dir = os.path.join(DATA_DIR, "factures")
            os.makedirs(pdf_dir, exist_ok=True)
            pdf_path = os.path.join(pdf_dir, f"{numero}.pdf")
            try:
                pdf_path = _safe_write_facturx_pdf(doc, s, numero)
            except Exception:
                pass  # if it already exists
            pdf_path = _ensure_situation_pdf_naming(pdf_path, doc, numero, sit_info=sit_info, all_factures=facts)
            subj_key = "tpl_subject_facture"
            body_key = "tpl_body_facture"
            subj_tpl = s.get(subj_key, "Votre facture {DOC_NUM} – {ENTREPRISE_NOM}")
            body_tpl = s.get(body_key,   "Bonjour {CLIENT_NOM},\nVeuillez trouver votre {DOC_TYPE} {DOC_NUM}.")
            if sit_info.get("is_situation"):
                subj_key = "tpl_subject_facture_solde" if sit_info.get("is_solde") else "tpl_subject_facture_situation"
                body_key = "tpl_body_facture_solde" if sit_info.get("is_solde") else "tpl_body_facture_situation"
                subj_tpl = s.get(subj_key, subj_tpl)
                body_tpl = s.get(body_key, body_tpl)
            if prefix:
                subj_tpl = f"{prefix} " + subj_tpl
            subject = render_tpl(subj_tpl, doc, s, pdf_path)
            body = build_email_body(body_tpl, doc, s, pdf_path)
            # Bcc if configured
            bcc = (s.get("auto_mail_bcc","") or "").strip() or None
            # Use existing sending function if available
            fn = globals().get("send_email_with_attachment")
            if callable(fn):
                if fn(s, to, subject, body, pdf_path if os.path.exists(pdf_path) else None, bcc=bcc):
                    self._mail_sent_cache.add(numero)
            else:
                # Minimal inline sender (non-intrusive)
                try:
                    host = s.get("smtp_host",""); port = int(s.get("smtp_port",587))
                    user = s.get("smtp_user",""); pwd = s.get("smtp_pass","")
                    use_tls = bool(s.get("smtp_tls", True)); use_ssl = bool(s.get("smtp_ssl", False))
                    from email.mime.multipart import MIMEMultipart
                    from email.mime.text import MIMEText
                    from email.mime.base import MIMEBase
                    from email import encoders
                    msg = MIMEMultipart()
                    msg["Subject"] = subject
                    msg["From"] = s.get("entreprise_mail","") or user
                    msg["To"] = to
                    if bcc:
                        msg["Bcc"] = bcc
                    msg.attach(MIMEText(body, "plain", "utf-8"))
                    if os.path.exists(pdf_path):
                        part = MIMEBase("application","octet-stream")
                        with open(pdf_path,"rb") as f: part.set_payload(f.read())
                        encoders.encode_base64(part)
                        part.add_header("Content-Disposition", f'attachment; filename="{os.path.basename(pdf_path)}"')
                        msg.attach(part)
                    if use_ssl:
                        server = smtplib.SMTP_SSL(host, port, timeout=15)
                    else:
                        server = smtplib.SMTP(host, port, timeout=15)
                    server.ehlo()
                    if use_tls and not use_ssl:
                        server.starttls()
                    if user:
                        server.login(user, pwd)
                    recipients = [to] + ([bcc] if bcc else [])
                    server.sendmail(msg["From"], recipients, msg.as_string())
                    server.quit()
                    self._mail_sent_cache.add(numero)
                except Exception:
                    log_error("_auto_mail_facture_deferred inline smtp\n"+__import__('traceback').format_exc())
        except Exception:
            log_error("_auto_mail_facture_deferred\n"+__import__('traceback').format_exc())
    def _trigger_auto_mail_for_status(self, numero, new_statut):
        try:
            s = ensure_settings()
            k = new_statut.strip().lower()
            # guard against double immediate send
            if numero in self._mail_sent_cache:
                return
            def _defer(prefix=""):
                QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, prefix))
            if s.get("auto_mail_on_status_envoye") and k == "envoyé":
                _defer("")
            if s.get("auto_mail_on_status_relance1") and k in ("relance 1", "relance1"):
                _defer("[Relance 1]")
            if s.get("auto_mail_on_status_relance2") and k in ("relance 2", "relance2"):
                _defer("[Relance 2]")
            if s.get("auto_mail_on_status_payee") and k in ("payée","payee"):
                _defer("[Facture payée]")
        except Exception:
            log_error("_trigger_auto_mail_for_status\n"+__import__('traceback').format_exc())
    # --- Column tuning: narrow "Objet" with wrap; widen "Actions" ---
    def _tune_columns_for_readability(self, objet_width=240):
        try:
            table = getattr(self, "table", None)
            if not table:
                return
            header = table.horizontalHeader()
            # Find columns by header labels
            objet_col = actions_col = None
            for ci in range(table.columnCount()):
                head = table.horizontalHeaderItem(ci)
                title = head.text() if head else ""
                t = (title or "").strip().lower()
                if t == "objet" and objet_col is None:
                    objet_col = ci
                if t == "actions" and actions_col is None:
                    actions_col = ci
            table.setWordWrap(True)
            if objet_col is not None:
                try:
                    table.setItemDelegateForColumn(objet_col, _WrapItemDelegate(table))
                except Exception:
                    pass
                try:
                    header.setSectionResizeMode(objet_col, QHeaderView.Interactive)
                except Exception:
                    pass
                try:
                    table.setColumnWidth(objet_col, int(objet_width))
                except Exception:
                    pass
            if actions_col is not None:
                try:
                    header.setSectionResizeMode(actions_col, QHeaderView.ResizeToContents)
                except Exception:
                    pass
            # Adjust row heights to "Objet"
            if objet_col is not None:
                fm = table.fontMetrics()
                for r in range(table.rowCount()):
                    try:
                        it = table.item(r, objet_col)
                        text = it.text() if it else ""
                        if not text:
                            continue
                        width = table.columnWidth(objet_col)
                        rect = fm.boundingRect(QtCore.QRect(0,0,int(width)-10, 2000), QtCore.Qt.TextWordWrap, text)
                        h = max(28, rect.height() + 12)
                        if table.rowHeight(r) < h:
                            table.setRowHeight(r, h)
                    except Exception:
                        pass
        except Exception:
            try:
                log_error("_tune_columns_for_readability\\n"+__import__('traceback').format_exc())
            except Exception:
                pass
class ClientsTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouveau"); self.btn_edit=QPushButton("Modifier"); self.btn_del=QPushButton("Supprimer"); self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Rechercher..."); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_del); top.addStretch(1); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        # --- UI fix (Clients): reserve right margin equal to side-card width ---
        # Soft injection: keeps buttons order; avoids refactor; anchors search above table grid.
        try:
            from PyQt5.QtWidgets import QSizePolicy, QSpacerItem
            _w = getattr(self, "_sidecard", None)
            _side_w = int(_w.width()) if (_w and int(getattr(_w, "width", lambda: 0)()) > 0) else 440
            top.addItem(QSpacerItem(_side_w, 10, QSizePolicy.Fixed, QSizePolicy.Minimum))
        except Exception:
            pass
        self.table=QTableWidget(0,10); self.table.setHorizontalHeaderLabels(["ID","Genre","Nom","Prénom","Email","Téléphone","Adresse","CodePostal","Ville","SIRET"])
        try:
            from PyQt5.QtWidgets import QHeaderView as _QHV
            _hdr=self.table.horizontalHeader()
            for _i in range(self.table.columnCount()):
                _hdr.setSectionResizeMode(_i, _QHV.ResizeToContents)
        except Exception:
            pass
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _clients_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        hdr.setSectionResizeMode(4, _QHV.Stretch)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.Stretch)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.Stretch); mid = QHBoxLayout(); mid.addWidget(self.table, 1);
        self._sidecard = QWidget(self); _sv = QVBoxLayout(self._sidecard);
        _sv.setContentsMargins(12,12,12,12); _sv.setSpacing(8);
        _t = QLabel(""); _t.setStyleSheet("font-weight:600;font-size:16px;");
        _i = QLabel(""); _i.setWordWrap(True);
        _sv.addWidget(_t); _sv.addWidget(_i); _sv.addStretch(1);
        self._sidecard.setFixedWidth(440);
        mid.addWidget(self._sidecard, 0);
        v.addLayout(mid)
        # --- Post-init: shrink columns (Prenom/Adresse) ---
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda: _ae_clients_shrink_columns(self))
        except Exception:
            pass
        # --- Clients help illustration (embedded, no external file) ---
        try:
            from PyQt5.QtCore import Qt
            _img_lbl = QLabel(self._sidecard)
            _img_lbl.setObjectName("clientsHelpImage")
            _img_lbl.setStyleSheet("background: transparent; border: none;")
            _pm = _pixmap_from_b64(_CLIENTS_HELP_PNG_B64)
            if not _pm.isNull():
                _pm = _pm.scaledToWidth(420, Qt.SmoothTransformation)
                _img_lbl.setPixmap(_pm)
                _img_lbl.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)
                _sv.insertWidget(0, _img_lbl, 0)  # place on top
        except Exception:
            pass
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(200, self._autofit_clients)
        except Exception:
            pass
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit', lambda: None)())
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_del","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouveau client")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier le client sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer le client sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des clients")
        
        self.btn_refresh.clicked.connect(self.load); self.btn_new.clicked.connect(self.new); self.btn_edit.clicked.connect(lambda: getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()); self.btn_del.clicked.connect(self.delete); self.ed_filter.textChanged.connect(self.apply_filter)
        self.load()
    def _autofit_clients(self):
        try:
            caps = {
                0:(60,100),   # ID
                1:(40,70),    # Genre
                2:(90,140),   # Nom
                3:(180,360),  # Prénom
                4:(200,360),  # Email
                5:(120,170),  # Téléphone
                6:(300,999),  # Adresse (stretch)
                7:(70,85),    # CP
                8:(140,200),  # Ville
                9:(140,200),  # SIRET
            }
            auto_fit_columns(self.table, margin=28, caps=caps)
            try:
                from PyQt5.QtWidgets import QHeaderView
                hdr = self.table.horizontalHeader()
                total = sum(hdr.sectionSize(c) for c in range(self.table.columnCount()))
                avail = self.table.viewport().width()
                if avail > total:
                    hdr.resizeSection(6, hdr.sectionSize(6) + (avail - total - 4))
            except Exception:
                pass
        except Exception as _e:
            try: log_error("clients._autofit: "+str(_e))
            except Exception: pass
    def load(self):
        # Source: CSV_CLIENTS (data_clients.csv) + enrichissement via JSON maître
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        self.table.setRowCount(0)
        master = _load_clients_master()
        for r in self.rows:
            row = self.table.rowCount()
            self.table.insertRow(row)
            email = (r.get("Email","") or "").strip()
            key = email.lower() if "@" in email else (r.get("Nom","") or "").strip()
            m = master.get(key, {}) if isinstance(master, dict) else {}
            civ = (r.get("Genre") or r.get("client_civilite") or m.get("civilite") or "").strip()
            prenom = (r.get("Prenom") or r.get("client_prenom") or m.get("prenom") or "").strip()
            vals = [
                r.get("ID",""),
                civ,
                r.get("Nom",""),
                prenom,
                r.get("Email",""),
                r.get("Telephone",""),
                r.get("Adresse",""),
                r.get("CodePostal",""),
                r.get("Ville",""),
                r.get("SIRET",""),
            ]
            # Écriture explicite par index pour éviter tout décalage
            for col, val in enumerate(vals):
                item = QTableWidgetItem(str(val))
                if col in (2,3,4,6,9):  # Nom, Prénom, Email, Adresse, SIRET
                    try: item.setToolTip(str(val))
                    except Exception: pass
                if col in (5,7):  # Téléphone, CodePostal
                    try: item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                    except Exception: pass
                self.table.setItem(row, col, item)
        apply_table_header_theme(self.table, ensure_settings().get("theme_color_hex","#0A84FF"))
        self.apply_filter()
        try:
            self._autofit_clients()
        except Exception:
            pass
    def selected_index(self):
        sel=self.table.selectedItems(); 
        return sel[0].row() if sel else -1
    def new(self):
        dlg=SimpleClientDialog(self)
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values()
            try:
                nums=[int(str(r.get("ID","").strip()).replace("CL","").lstrip("0") or 0) for r in self.rows]
                nextn=(max(nums) if nums else 0)+1
            except Exception:
                nextn=len(self.rows)+1
            vals["ID"]=f"CL{nextn:04d}"
            self.rows.append(vals)
            self._persist_and_reload()
    def edit(self):
        idx=self.selected_index()
        if idx<0: return
        dlg=SimpleClientDialog(self, self.rows[idx])
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values(); vals["ID"]=self.rows[idx].get("ID","")
            self.rows[idx]=vals
            self._persist_and_reload()
    
    def delete(self):
        idx=self.selected_index()
        if idx<0: return
        if QMessageBox.question(self,"Supprimer","Confirmer la suppression ?")==QMessageBox.Yes:
            # Clé pour sidecars (Email prioritaire sinon Nom)
            try:
                key = (self.rows[idx].get("Email") or self.rows[idx].get("Nom") or "").strip()
            except Exception:
                key = ""
            self.rows.pop(idx)
            self._persist_and_reload()
            # Nettoyage sidecars
            try:
                if key:
                    mp = _load_prenom_map()
                    if key in mp:
                        mp.pop(key, None); _save_prenom_map(mp)
            except Exception:
                pass
            try:
                if key:
                    mc = _load_civilite_map()
                    if key in mc:
                        mc.pop(key, None); _save_civilite_map(mc)
            except Exception:
                pass
    def _persist_and_reload(self):
        """Persiste self.rows vers CSV puis recharge la table."""
        try:
            headers=["ID","Genre","Nom","Prenom","Email","Telephone","Adresse","CodePostal","Ville","SIRET"]
            save_csv(os.path.join(DATA_DIR, CSV_CLIENTS), self.rows, headers)
        except Exception as _e:
            try:
                log_error("persist_clients: "+str(_e))
            except Exception:
                pass
        try:
            self.load()
        except Exception:
            pass
        try:
            self._autofit_clients()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens)
# -------- Catalogue tab --------
        try:
            self._autofit_clients()
        except Exception:
            pass
    def resizeEvent(self, ev):
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(120, self._autofit_clients)
        except Exception:
            pass
        try:
            super().resizeEvent(ev)
        except Exception:
            pass
class CatalogueTab(QWidget):
    def _build_catalogue_tutos(self, parent_layout):
        """Cartes tutoriels (Catalogue) — UI-only, scoped styling.
        Ne modifie pas la logique métier ni la toolbar/table.
        """
        try:
            from PyQt5.QtWidgets import (QFrame, QLabel, QVBoxLayout, QHBoxLayout, QSizePolicy,
                                         QWidget, QGraphicsDropShadowEffect)
            from PyQt5.QtCore import Qt, QEvent
            from PyQt5.QtGui import QColor
        except Exception:
            return
        # Anti-duplication
        try:
            from PyQt5.QtWidgets import QWidget
            if self.findChild(QWidget, "cardsBelt") is not None:
                return
        except Exception:
            pass
    
        # Spacings (~5 mm au-dessus des cartes, ~1 cm bas de page)
        try:
            dpi_y = self.logicalDpiY() if hasattr(self, "logicalDpiY") else 96
        except Exception:
            dpi_y = 96
        gap_px = int(dpi_y * 0.5 / 2.54)
        bottom_px = int(dpi_y * 1.0 / 2.54)
    
        parent_layout.addSpacing(max(8, gap_px))
    
        # Conteneur SCOPÉ : styles appliqués localement
        cardsPage = QWidget(); cardsPage.setObjectName("cardsPage")
        row = QHBoxLayout(cardsPage); row.setSpacing(14); row.setContentsMargins(0,0,0,0)
        parent_layout.addWidget(cardsPage)
        parent_layout.addSpacing(max(10, bottom_px))
    
        qss = """
        QWidget#cardsPage { background: #F8F9FA; }
        QFrame#tutoCard { background-color: #DFE0E1; border: 1px solid #949596; border-radius:12px; }
        QFrame#tutoCard QLabel { background: transparent; border: none; padding: 0px; color: #000000 }
        QFrame#tutoCard QLabel[role="title"] { color: #000000; font-weight: 700; }
        QFrame#tutoCard QLabel[role="subtitle"] { color: #000000; font-weight: 600; margin-top: 6px; }
        QFrame#tutoCard QLabel[role="objective"] { color: #000000; }
QLabel[cls="stepBadge"] { background:#E9ECEF; color:#0F172A; border-radius:10px; padding:1px 8px; font-weight:600; }
        QLabel[cls="stepBadge"]:hover { background:#0D6EFD; color:#FFFFFF; }
        
        QFrame[colorDot="blue"] { background-color: #0D6EFD; border-radius: 6px; }
        QFrame[colorDot="green"] { background-color: #198754; border-radius: 6px; }
"""
        cardsPage.setStyleSheet(qss)
    
        class _HoverShadow(QWidget):
            def __init__(self, card):
                super().__init__()
                eff = QGraphicsDropShadowEffect(); eff.setBlurRadius(14); eff.setOffset(0,2); eff.setColor(QColor(0,0,0,28))
                card.setGraphicsEffect(eff); self.eff = eff; self.card = card; card.installEventFilter(self)
            def eventFilter(self, obj, ev):
                if obj is self.card:
                    if ev.type() == QEvent.Enter:
                        self.eff.setBlurRadius(18); self.eff.setOffset(0,4); self.eff.setColor(QColor(0,0,0,36))
                    elif ev.type() == QEvent.Leave:
                        self.eff.setBlurRadius(14); self.eff.setOffset(0,2); self.eff.setColor(QColor(0,0,0,28))
                return False
    
        def make_card(title, bullets, dot="blue", subtitle=None, sub_bullets=None, objective=None, icon_emoji=None):
            card = QFrame(); card.setObjectName("tutoCard")
            v = QVBoxLayout(card); v.setContentsMargins(14,12,14,12); v.setSpacing(8)
            head = QHBoxLayout(); head.setSpacing(8)
            if icon_emoji:
                icon = QLabel(icon_emoji); f=icon.font(); f.setPointSize(f.pointSize()+1); icon.setFont(f); head.addWidget(icon,0,Qt.AlignVCenter)
            t = QLabel(title); t.setProperty("role","title"); t.setWordWrap(True); head.addWidget(t,1,Qt.AlignVCenter)
            v.addLayout(head)
            if objective:
                o = QLabel(objective); o.setProperty("role","objective"); o.setWordWrap(True); v.addWidget(o,0,Qt.AlignVCenter)
            for b in bullets:
                l = QLabel("• "+b); l.setWordWrap(True); v.addWidget(l,0,Qt.AlignVCenter)
            if subtitle and sub_bullets:
                sh = QHBoxLayout(); sh.setSpacing(8)
                sd = QFrame(); sd.setFixedSize(10,10)
                # Dots uniquement pour sous-titres ciblés
                try:
                    low = (subtitle or "").lower()
                    if "modif" in low:
                        sd.setProperty("colorDot", "green")
                    elif "changer" in low and "tva" in low:
                        sd.setProperty("colorDot", "blue")
                    else:
                        sd = None
                except Exception:
                    sd = None
                if sd is not None:
                    sh.addWidget(sd,0,Qt.AlignVCenter)
                st = QLabel(subtitle); st.setProperty("role","subtitle"); st.setWordWrap(True)
                sh.addWidget(st,1,Qt.AlignVCenter); v.addLayout(sh)
                for b in sub_bullets:
                    sl = QLabel("• "+b); sl.setWordWrap(True); v.addWidget(sl,0,Qt.AlignVCenter)
            card.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Maximum); card.adjustSize(); _HoverShadow(card)
            return card
    
        card1 = make_card("Nouvel article",
            ["Créer un article via « Nouvel item ».",
             "Champs clés : Réf., Désignation, Prix HT, TVA, Unité, Catégorie.",
             "Enregistrer pour l’ajouter au catalogue."],
            dot="green", subtitle="Modification",
            sub_bullets=["Sélectionner une ligne puis cliquer « Modifier ».",
                         "Mettre à jour les champs nécessaires et « Enregistrer ».",
                         "Annuler pour ignorer les changements."],
            icon_emoji="➕")
    
        card2 = make_card("Recherche",
            ["Filtrer la liste en saisissant dans « Rechercher… » (Ctrl+F).",
             "« Rafraîchir » met à jour les données sans perdre la sélection."],
            dot="blue", subtitle="Changer TVA",
            sub_bullets=["Sélectionner une ou plusieurs lignes du tableau.",
                         "Cliquer « Changer TVA », choisir le taux, valider le récapitulatif.",
                         "Contrôler rapidement les prix impactés avant de confirmer."],
            icon_emoji="🔍")
    
        card3 = make_card("Importer PDF",
            ["1) Source : Choisissez une ancienne facture ou Dossier (traitement en lot).",
             "2) Sélection : aperçu des lignes détectées ; cochez/décochez les articles à importer.",
             "3) Édition : avant import, vous pouvez modifier Réf., Désignation, Prix HT, TVA, Unité, Catégorie.",
             "4) Mode : Ajouter de nouveaux articles ou Mettre à jour ceux existants (correspondance par Réf.).",
             "5) Validation : résumé des changements ; confirmez ou annulez."],
            dot="blue", objective="Objectif : importer de nouveaux articles.", icon_emoji="📄")
        row.addWidget(card1,1); row.addWidget(card2,1); row.addWidget(card3,2)
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouvel item"); self.btn_edit=QPushButton("Modifier"); self.btn_del=QPushButton("Supprimer"); self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Rechercher..."); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_del); top.addStretch(1); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        # Bouton changement TVA (bulk)
        self.btn_tva = QPushButton("Changer TVA")
        top.addWidget(self.btn_tva)
        
        # --- Importer PDF → Catalogue (QToolButton + menu) ---
        try:
            self.btn_import = QToolButton()
            self.btn_import.setText("Importer PDF → Catalogue")
            _m = QMenu(self.btn_import)
            _act_dir = _m.addAction("Depuis un dossier…")
            _act_files = _m.addAction("Depuis des fichiers…")
            self.btn_import.setMenu(_m)
            self.btn_import.setPopupMode(QToolButton.InstantPopup)
            top.addWidget(self.btn_import)
            _act_dir.triggered.connect(self._catalogue_pdf_import_select_folder)
            _act_files.triggered.connect(self._catalogue_pdf_import_select_files)
        except Exception:
            try:
                from PyQt5.QtWidgets import QMessageBox
                QMessageBox.warning(self, "Catalogue", "Le bouton d'import PDF n'a pas pu être initialisé (continuation sans crash).")
            except Exception:
                pass
        v.addLayout(top)
        self.table=QTableWidget(0,8); self.table.setHorizontalHeaderLabels(["ID","Réf","Type","Désignation","Prix HT","TVA %","Unité","Catég."])
        try:
            _it = self.table.horizontalHeaderItem(7)
            if _it is not None:
                _it.setToolTip("Catégorie")
        except Exception:
            pass
    
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        self.table.setSelectionBehavior(_QIV.SelectRows)
        self.table.setSelectionMode(_QIV.ExtendedSelection)
        self.btn_tva.clicked.connect(self.bulk_change_tva)
        ### _catalogue_tab_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        try: hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        except Exception: pass
        v.addWidget(self.table)
        # --- Cartes tutoriels (visuel, aucune logique) ---
        try:
            self._build_catalogue_tutos(v)
        except Exception:
            pass
        self.table.itemDoubleClicked.connect(self.on_double_click)
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_del","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouvel item")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier l'item sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer l'item sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des items")
        
        self.btn_refresh.clicked.connect(self.load); self.btn_new.clicked.connect(self.new); self.btn_edit.clicked.connect(self.edit); self.btn_del.clicked.connect(self.delete); self.ed_filter.textChanged.connect(self.apply_filter)
        self.load()
    def load(self):
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
        self.table.setRowCount(0)
        # Auto-fix TVA: if Taux_TVA vide/0, appliquer la TVA des paramètres
        try:
            _s = ensure_settings()
            _tva_def = _safe_float(_s.get('tva', 0.2), 0.2)
            _changed = False
            for _it in (self.rows or []):
                _cur = _safe_float(_it.get('Taux_TVA',''), -1.0)
                if _cur <= 0.0 or _cur == -1.0:
                    _it['Taux_TVA'] = f"{float(_tva_def):.2f}"
                    _changed = True
            if _changed:
                save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ['ID','Reference','Type','Designation','Prix_HT','Taux_TVA','Unite','Categorie'])
        except Exception:
            log_error('catalogue_tva_autofix\n'+__import__('traceback').format_exc())
        for it in self.rows:
            row = self.table.rowCount(); self.table.insertRow(row)
            vals = [
                it.get('ID',''), it.get('Reference',''), it.get('Type',''), it.get('Designation',''),
                f"{_safe_float(it.get('Prix_HT',0)):.2f}",
                f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}",
                it.get('Unite',''), it.get('Categorie','')
            ]
            for c, v in enumerate(vals): self.table.setItem(row, c, QTableWidgetItem(str(v)))
        apply_table_header_theme(self.table, ensure_settings().get("theme_color_hex","#0A84FF"))
        self.apply_filter()
        try:
            self.table.resizeRowsToContents()
        except Exception:
            pass
    def selected_index(self):
        sel=self.table.selectedItems(); 
        return sel[0].row() if sel else -1
    def new(self):
        # minimal inline creation via input dialogs
        id_new=str(1 + max([int(x.get("ID","0") or 0) for x in self.rows] or [0]))
        typ,ok=QInputDialog.getItem(self,"Type","Type:",["Pièces","Main d’œuvre"],0,False);
        if not ok: return
        def _next_ref(rows, prefix):
            import re
            mx=0
            for x in rows:
                code=(x.get("Reference","") or "")
                m=re.match(rf"{prefix}(\d+)$", code)
                if m:
                    val=int(m.group(1))
                    if val>mx: mx=val
            return f"{prefix}{mx+1:04d}"
        pref = "PC" if (typ=="Pièces") else "MO"
        ref_default = _next_ref(self.rows, pref)
        ref,ok=QInputDialog.getText(self,"Référence","Référence:", text=ref_default);
        if not ok: return
        des,ok=QInputDialog.getMultiLineText(self,"Désignation","Texte:"); 
        if not ok: return
        pu,ok=QInputDialog.getText(self,"Prix HT","Prix HT (€):"); 
        if not ok: return
        default_tva_pct = str(int(round(float(ensure_settings().get("tva",0.2))*100)))
        tva,ok=QInputDialog.getText(self,"TVA %","TVA (%):", text=default_tva_pct); 
        if not ok: return
        default_index = UNIT_CHOICES.index("H") if typ == "Main d’œuvre" else (UNIT_CHOICES.index("U") if "U" in UNIT_CHOICES else 0)
        unit,ok=QInputDialog.getItem(self,"Unité","Unité:", UNIT_CHOICES, default_index, True)
        if not ok: return
        cat,ok=QInputDialog.getText(self,"Catégorie","Catégorie:"); 
        if not ok: return
        self.rows.append({"ID":id_new,"Reference":ref,"Type":typ,"Designation":des,"Prix_HT":f"{_safe_float(pu,0):.2f}","Taux_TVA":f"{_safe_float(tva,20)/100:.2f}","Unite":unit,"Categorie":cat})
        save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"]); self.load()
    
    def delete(self):
        # Suppression multiple : toutes les lignes sélectionnées (par ID)
        try:
            from PyQt5.QtWidgets import QMessageBox, QAbstractItemView as _QIV
        except Exception:
            QMessageBox = None
        rows_sel = set()
        try:
            for mi in self.table.selectionModel().selectedRows():
                rows_sel.add(mi.row())
        except Exception:
            try:
                rows_sel = {it.row() for it in self.table.selectedItems()}
            except Exception:
                rows_sel = set()
        rows_sel = sorted(rows_sel)
        if not rows_sel:
            return
        ids = []
        for r in rows_sel:
            try:
                it = self.table.item(r, 0)
                if it:
                    text = (it.text() or "").strip()
                    if text:
                        ids.append(text)
            except Exception:
                pass
        if not ids:
            return
        try:
            if QMessageBox and QMessageBox.question(self, "Supprimer", f"Supprimer {len(ids)} ligne(s) sélectionnée(s) ?") != QMessageBox.Yes:
                return
        except Exception:
            pass
        idset = set(str(x) for x in ids)
        try:
            self.rows = [it for it in self.rows if str(it.get("ID","")).strip() not in idset]
        except Exception:
            pass
        try:
            save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows,
                     ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
        except Exception:
            pass
        try:
            self.load()
        except Exception:
            pass
    def bulk_change_tva(self):
        """Applique un taux de TVA (en %) à tous les articles du catalogue."""
        try:
            from PyQt5.QtWidgets import QInputDialog, QMessageBox
            s = ensure_settings()
            default_pct = int(round(_safe_float(s.get("tva", 0.2), 0.2) * 100))
            pct, ok = QInputDialog.getDouble(self, "Changer TVA", "TVA (%) :", float(default_pct), 0.0, 100.0, 2)
            if not ok:
                return
            rate = float(pct) / 100.0
            rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
            if isinstance(rows, list):
                for it in rows:
                    it["Taux_TVA"] = f"{float(rate):.2f}"
                save_csv(os.path.join(DATA_DIR, CSV_ITEMS), rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
            try:
                s["tva"] = rate
                save_settings(s)
            except Exception:
                pass
            self.load()
            try:
                QMessageBox.information(self, "TVA", "TVA appliquée à tout le catalogue.")
            except Exception:
                pass
        except Exception:
            log_error("bulk_change_tva\n"+__import__('traceback').format_exc())
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens)
    
    def on_double_click(self, item):
        """Sécurise le double-clic: ignore en-têtes, lignes invalides, et débounce."""
        try:
            if item is None:
                return
            r = getattr(item, "row", lambda: -1)()
            if r is None or r < 0 or r >= self.table.rowCount():
                return
            # sélectionne proprement la ligne cliquée
            try:
                self.table.selectRow(r)
            except Exception:
                pass
            # débounce pour éviter double ouverture
            if getattr(self, "_dblclick_lock", False):
                return
            self._dblclick_lock = True
            try:
                # edit() est déjà protégé par selected_index() < 0 -> return
                getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
            finally:
                from PyQt5.QtCore import QTimer
                QTimer.singleShot(150, lambda: setattr(self, "_dblclick_lock", False))
        except Exception:
            try:
                log_error("catalogue_double_click\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    def edit_selected(self):
        """Alias double-clic → édition sécurisée (si une ligne est sélectionnée)."""
        try:
            idx = self.selected_index()
            if idx is None or idx < 0:
                return
            return getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
        except Exception:
            try:
                log_error("catalogue_edit_selected\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    def edit_selected(self):
        """Double-clic sur une ligne du Catalogue → déclenche getattr(self,'edit', getattr(self,'edit_selected', lambda: None))() (alias)."""
        try:
            return getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
        except Exception:
            pass
    def edit(self):
        idx = self.selected_index()
        if idx < 0:
            return
        row = self.rows[idx]
        from PyQt5.QtWidgets import QInputDialog
        ref,ok=QInputDialog.getText(self,"Référence","Référence:", text=row.get("Reference",""))
        if not ok: return
        typ,ok=QInputDialog.getItem(self,"Type","Type:",["Pièces","Main d’œuvre"],0,False)
        if not ok: return
        des,ok=QInputDialog.getMultiLineText(self,"Désignation","Texte:", text=row.get("Designation",""))
        if not ok: return
        pu,ok=QInputDialog.getText(self,"Prix HT","Prix HT (€):", text=row.get("Prix_HT","0.00"))
        if not ok: return
        tva_pct = str(int(round(float(row.get("Taux_TVA","0.20"))*100))) if row.get("Taux_TVA") else str(int(round(float(ensure_settings().get("tva",0.2))*100)))
        tva,ok=QInputDialog.getText(self,"TVA %","TVA (%):", text=tva_pct)
        if not ok: return
        default_index = UNIT_CHOICES.index("H") if typ == "Main d’œuvre" else (UNIT_CHOICES.index("U") if "U" in UNIT_CHOICES else 0)
        unit, ok = QInputDialog.getItem(self, "Unité", "Unité:", UNIT_CHOICES, default_index, True)
        if not ok: return
        cat,ok=QInputDialog.getText(self,"Catégorie","Catégorie:", text=row.get("Categorie",""))
        if not ok: return
        self.rows[idx] = {"ID":row.get("ID",""), "Reference":ref, "Type":typ, "Designation":des,
                          "Prix_HT":f"{float(pu or 0):.2f}", "Taux_TVA":f"{(float(tva or 20)/100):.2f}",
                          "Unite":unit, "Categorie":cat}
        save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
        self.load()
# -------- URSSAF tab --------
    # === PDF → Catalogue import (additif, local à l'onglet) =====================
    def _catalogue_pdf_import_select_folder(self):
        """Importer depuis un dossier (avec option sous-dossiers)."""
        try:
            folder = QFileDialog.getExistingDirectory(self, "Dossier PDF")
            if not folder:
                return
            include_sub = QMessageBox.question(
                self, "Inclure sous-dossiers ?",
                "Inclure les sous-dossiers lors du scan ?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            ) == QMessageBox.Yes
            from pathlib import Path
            pdfs = sorted(Path(folder).rglob("*.pdf") if include_sub else Path(folder).glob("*.pdf"))
            if not pdfs:
                QMessageBox.information(self, "Import PDF", "Aucun PDF trouvé dans ce dossier.")
                return
            self._catalogue_pdf_import_preview([str(p) for p in pdfs])
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_select_folder\\n"+str(e))
            except Exception:
                pass
    def _catalogue_pdf_import_select_files(self):
        """Importer en sélectionnant plusieurs fichiers PDF."""
        try:
            files, _ = QFileDialog.getOpenFileNames(self, "Sélectionner des PDF", "", "PDF (*.pdf)")
            if not files:
                return
            self._catalogue_pdf_import_preview(files)
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_select_files\\n"+str(e))
            except Exception:
                pass
    def _catalogue_pdf_to_float(self, fr: str) -> float:
        try:
            s = str(fr if fr is not None else "").strip()
            s = s.replace("\u00A0", " ").replace("\u202F", " ")
            for cur in ("€", "EUR", "eur"):
                s = s.replace(cur, "")
            import re as _re
            matches = list(_re.finditer(r"(?:[-+]?\d{1,3}(?:[\s\u00A0\u202F]\d{3})*[\.,]\d+|[-+]?\d+[\.,]\d+|[-+]?\d+)", s))
            if matches:
                s = matches[-1].group(0)
            s = s.replace(" ", "").replace("\u00A0", "").replace("\u202F", "").replace(",", ".")
            return float(s)
        except Exception:
            return 0.0
    def _catalogue_pdf_extract_items_from_pdf(self, path, aggressive: bool = False):
        """
        Extraction robuste d'articles depuis un PDF de devis/facture.
        Retourne une liste de dicts avec les clés EXACTES attendues par la preview :
        Reference, Type, Designation, Prix_HT, Taux_TVA, Unite, Categorie
        """
        # --- Imports locaux (delta minimal, pas d'impact global) ---
        try:
            from pdfminer.high_level import extract_text
            try:
                from pdfminer.layout import LAParams  # présent avec pdfminer.six
            except Exception:
                LAParams = None
        except Exception:
            return []
        import re
        import unicodedata
        # ---------- Helpers locaux (internes à la fonction) ----------
        def _norm(s: str) -> str:
            s = unicodedata.normalize("NFKD", s or "")
            s = "".join(c for c in s if not unicodedata.combining(c))
            s = s.replace("\xa0", " ").replace("\u202f", " ")
            s = re.sub(r"\s+", " ", s.strip().lower())
            return s
        def _money_to_float(txt: str) -> float:
            txt = txt.replace("\xa0", " ").replace("\u202f", " ")
            txt = txt.replace(" ", "")
            txt = txt.replace(",", ".")
            try:
                return float(txt)
            except Exception:
                return 0.0
        # stop-list complète (ligne entière à ignorer comme désignation)
        _STOP = {
            "total ttc", "total ht", "total net ht", "montant ht", "montant total",
            "net a payer", "net à payer", "tva", "acompte", "solde", "remise",
            "escompte", "tel", "tél", "fax", "email", "e-mail", "www", "site",
            "siret", "tva intra", "rcs", "ape", "capital", "rib", "iban", "bic",
            "banque", "guichet", "domiciliation", "bon pour accord", "delai",
            "délai", "penalite", "pénalité", "mentions legales", "mentions légales",
            "prix unitaire", "pu", "p.u", "prix total", "unite", "unité", "quantite",
            "quantité", "qte", "qté", "taux", "contrat", "assurance"
        }
        _HDR_HINTS = ("designation", "désignation", "description", "libelle", "libellé", "objet", "prestation")
        _TOTAL_HINTS = ("total net ht", "total ht", "montant ht", "tva", "total ttc", "montant total", "net a payer", "net à payer", "ttc")
        _REF_RE = re.compile(r"^(?:[A-Za-z0-9]{1,5}(?:[./-][A-Za-z0-9]{1,5}){0,3}|[A-Za-z]{1,4}\d{1,4})$")
        _HAS_LETTERS = re.compile(r"[A-Za-zÀ-ÖØ-öø-ÿ]")
        _PERCENT_RE = re.compile(r"[\d\s\u00A0\u202F\.,]+\s*%")
        # Montants : avec €/EUR ; et décimaux sans € si aggressive ou si la ligne n'a pas d'€.
        _MONEY_EUR_RE = re.compile(r"(?<!\d)(\d{1,3}(?:[ \u00A0\u202F]\d{3})*[\.,]\d{2})(?:\s*(?:€|eur))?", re.I)
        _MONEY_NOEUR_RE = re.compile(r"(?<!\d)(\d+[\.,]\d{2})(?!\s*%)", re.I)
        def _clean_segment(seg: str) -> str:
            seg = seg.strip()
            seg = re.sub(r"^(?:€|eur|ht|ttc|:|-|–|—|\||;)*\s*", "", seg, flags=re.I)
            seg = re.sub(r"^\s*[\d\.,]+\s*%", "", seg)  # enlève un pourcentage d'ouverture
            seg = seg.strip(" -–—:|;.,")
            return seg.strip()
        def _is_valid_designation(text: str) -> bool:
            if not text:
                return False
            txt = _clean_segment(text)
            if not txt:
                return False
            n = _norm(txt)
            if any(n == w or n.startswith(w + " ") or n.endswith(" " + w) for w in _STOP):
                return False
            if not _HAS_LETTERS.search(txt):
                return False
            if _REF_RE.match(txt.strip()):
                return False
            return True
        def _classify_type(designation: str) -> str:
            n = _norm(designation)
            if ("mo " in n) or (" main d oeuvre" in n) or ("main d'oeuvre" in n) or ("main doeuvre" in n) or ("main-d'oeuvre" in n):
                return "Main d’œuvre"
            return "Pièces"
        def _fmt_price(v: float) -> str:
            return "{:.2f}".format(v)
        # ---------- Extraction texte (2 profils LAParams) ----------
        text = ""
        profiles = [None, dict(char_margin=3.0, word_margin=0.2, line_margin=0.3, boxes_flow=None)]
        for prof in profiles:
            try:
                if prof and LAParams:
                    text = extract_text(path, laparams=LAParams(**prof))
                else:
                    text = extract_text(path)
            except Exception:
                text = ""
            if text and text.strip():
                break
        # --- OCR fallback (transparent) ---
        if not (text and text.strip()):
            def _ocr_pdf_to_text(_pdf_path: str, lang: str = "fra+eng", dpi: int = 300) -> str:
                try:
                    import os
                    import pytesseract
                    # Honor TESSERACT_CMD / TESSERACT_PATH if provided
                    def _ensure_tesseract_cmd():
                        import os, shutil, pytesseract
                        # 1) Env explicit
                        for _k in ("TESSERACT_CMD","TESSERACT_PATH"):
                            _p = os.environ.get(_k)
                            if _p and os.path.exists(_p):
                                pytesseract.pytesseract.tesseract_cmd = _p
                                return _p
                        # 2) Common Windows installs
                        for _p in (r"C:\Program Files\Tesseract-OCR\tesseract.exe",
                                   r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe"):
                            if os.path.exists(_p):
                                pytesseract.pytesseract.tesseract_cmd = _p
                                return _p
                        # 3) PATH
                        _p = shutil.which("tesseract")
                        if _p:
                            pytesseract.pytesseract.tesseract_cmd = _p
                        return _p
                    _tcmd = _ensure_tesseract_cmd()
                    try:
                        _logd = os.path.join(os.path.dirname(__file__), 'data')
                        os.makedirs(_logd, exist_ok=True)
                        with open(os.path.join(_logd,'ocr_last.log'),'a',encoding='utf-8') as _lf:
                            _lf.write(f"[OCR] pdf={_pdf_path} tcmd={_tcmd}\n")
                    except Exception:
                        pass
                    for _k in ("TESSERACT_CMD","TESSERACT_PATH"):
                        _cmd = os.environ.get(_k)
                        if _cmd:
                            try:
                                pytesseract.pytesseract.tesseract_cmd = _cmd
                            except Exception:
                                pass
                    _out = ""
                    # Auto-pick language
                    try:
                        get_langs = getattr(pytesseract, 'get_languages', None)
                        avail = get_langs(config='') if callable(get_langs) else []
                        if not avail:
                            from pathlib import Path as _P
                            _tcmdp = getattr(pytesseract.pytesseract, 'tesseract_cmd', None)
                            if _tcmdp:
                                td = _P(_tcmdp).parent / 'tessdata'
                                if td.exists():
                                    avail = [p.stem for p in td.glob('*.traineddata')]
                        _lang = 'fra+eng' if ('fra' in avail and 'eng' in avail) else ('fra' if 'fra' in avail else ('eng' if 'eng' in avail else lang))
                        lang = _lang
                        try:
                            with open(os.path.join(os.path.dirname(__file__), 'data', 'ocr_last.log'),'a',encoding='utf-8') as _lf:
                                _lf.write(f"[OCR] chosen_lang={lang} avail={avail}\n")
                        except Exception:
                            pass
                    except Exception:
                        pass
                    # Try PyMuPDF (fitz) first — fast and no external binaries
                    try:
                        import fitz  # PyMuPDF
                        from PIL import Image
                        doc = fitz.open(_pdf_path)
                        if getattr(doc, "page_count", 0) <= 0:
                            return ""
                        zoom = dpi / 72.0
                        for page in doc:
                            pix = page.get_pixmap(matrix=fitz.Matrix(zoom, zoom), alpha=False)
                            im = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                            try:
                                im = im.convert("L")  # grayscale helps OCR
                            except Exception:
                                pass
                            try:
                                t = pytesseract.image_to_string(im, lang=lang, config="--psm 6")
                            except Exception:
                                t = ""
                            if t:
                                _out += ("\n" + t)
                        return _out.strip()
                    except Exception:
                        pass
                    # Fallback: pdf2image (requires poppler)
                    try:
                        from pdf2image import convert_from_path
                        from PIL import Image
                        pages = convert_from_path(_pdf_path, dpi=dpi)
                        for im in pages:
                            try:
                                im = im.convert("L")
                            except Exception:
                                pass
                            try:
                                t = pytesseract.image_to_string(im, lang=lang, config="--psm 6")
                            except Exception:
                                t = ""
                            if t:
                                _out += ("\n" + t)
                        return _out.strip()
                    except Exception:
                        return ""
                except Exception:
                    return ""
            try:
                ocr_txt = _ocr_pdf_to_text(path)
            except Exception:
                ocr_txt = ""
            if ocr_txt and ocr_txt.strip():
                text = ocr_txt
            else:
                return []
        raw_lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        norm_lines = [_norm(ln) for ln in raw_lines]
        # ---------- Fenêtrage (ancrage entête / totaux) ----------
        start = 0
        for i, ln in enumerate(norm_lines):
            if any(h in ln for h in _HDR_HINTS):
                start = i + 1
                break
        end = len(raw_lines)
        for i in range(len(norm_lines) - 1, -1, -1):
            ln = norm_lines[i]
            if any(t in ln for t in _TOTAL_HINTS):
                end = i
                break
        if end <= start:
            end = len(raw_lines)
        lineset = raw_lines[start:end]
        lineset_norm = [_norm(ln) for ln in lineset]
        # Pré-calcul des lignes candidates "désignation"
        des_indices = []
        des_text = {}
        for i, l in enumerate(lineset):
            if _is_valid_designation(l):
                des_indices.append(i)
                des_text[i] = _clean_segment(l)
        # ---------- Détection des montants (PU HT = plus petit montant > 0 sur la ligne) ----------
        candidates = []  # {idx, price, price_str, line, norm}
        for idx, (orig, ln) in enumerate(zip(lineset, lineset_norm)):
            amts = [m.group(1) for m in _MONEY_EUR_RE.finditer(orig)]
            if (not amts) and (aggressive or ("€" not in orig and "eur" not in ln)):
                amts = [m.group(1) for m in _MONEY_NOEUR_RE.finditer(orig)]
            if not amts:
                continue
            vals = [(a, _money_to_float(a)) for a in amts if a]
            vals = [(a, v) for (a, v) in vals if v > 0.0]
            if not vals:
                continue
            vals.sort(key=lambda x: x[1])
            # Eviter de prendre une quantité 1,00 comme PU si un autre montant est présent
            if len(vals) >= 2 and vals[0][1] <= 1.25:
                chosen_str, chosen_val = vals[1]
            else:
                chosen_str, chosen_val = vals[0]
            # Exclure une ligne 100% pour éviter de confondre un taux TVA comme PU
            if _PERCENT_RE.search(orig) and len(vals) == 1:
                continue
            candidates.append({
                "idx": idx,
                "price": chosen_val,
                "price_str": chosen_str,
                "line": orig,
                "norm": ln
            })
        if not candidates:
            return []
        # ---------- Association Prix ↔ Désignation (1↔1, plus proche non réutilisée) ----------
        def _designation_same_line(c):
            pos = c["line"].find(c["price_str"])
            if pos >= 0:
                after = _clean_segment(c["line"][pos + len(c["price_str"]):])
                before = _clean_segment(c["line"][:pos])
                if _is_valid_designation(after):
                    return after, None  # pas d'index dédié
                if _is_valid_designation(before):
                    return before, None
            # tentative "nettoyage fort"
            tmp = re.sub(r"(?:€|eur|[\d\.,%/-])+", " ", c["line"], flags=re.I)
            tmp = _clean_segment(tmp)
            if _is_valid_designation(tmp):
                return tmp, None
            return None, None
        def _nearest_free_designation(idx, used, rlist=(2,5,12)):
            # retourne (designation, j) ou (None, None)
            if not des_indices:
                return None, None
            for r in rlist:
                eligible = [j for j in des_indices if j not in used and abs(j - idx) <= r]
                if eligible:
                    j = min(eligible, key=lambda k: abs(k - idx))
                    return des_text[j], j
            return None, None
        rows, seen = [], set()
        used_des = set()
        for c in candidates:
            des, j = _designation_same_line(c)
            if des is None:
                des, j = _nearest_free_designation(c["idx"], used_des, rlist=(2,5,12))
            if des is None:
                # pas de désignation proche et libre -> on ignore ce prix (souvent un Total de ligne)
                continue
            key = (_norm(des), _fmt_price(c["price"]))
            if key in seen:
                continue
            seen.add(key)
            if j is not None:
                used_des.add(j)
            rows.append({
                "Reference": "",
                "Type": _classify_type(des),
                "Designation": des,
                "Prix_HT": _fmt_price(c["price"]),
                "Taux_TVA": "",
                "Unite": "U",
                "Categorie": ""
            })
        # Si malgré tout rien n'a été associé, on retombe sur la stratégie permissive initiale
        if not rows:
            used_des.clear()
            for c in candidates:
                des, j = _nearest_free_designation(c["idx"], used_des, rlist=(3,6,12))
                if des is None:
                    continue
                used_des.add(j)
                key = (_norm(des), _fmt_price(c["price"]))
                if key in seen:
                    continue
                seen.add(key)
                rows.append({
                    "Reference": "",
                    "Type": _classify_type(des),
                    "Designation": des,
                    "Prix_HT": _fmt_price(c["price"]),
                    "Taux_TVA": "",
                    "Unite": "U",
                    "Categorie": ""
                })
        return rows
    def _catalogue_pdf_import_preview(self, files):
        """Dialogue d'aperçu avec déduplication et options."""
        try:
            # Vérifier pdfminer
            try:
                from pdfminer.high_level import extract_text  # noqa: F401
                from pdfminer.layout import LAParams  # noqa: F401
            except Exception:
                QMessageBox.warning(self, "Import PDF", "Lecture PDF locale uniquement. Installez pdfminer.six :\\n\npip install pdfminer.six")
                return
            dlg = QDialog(self); dlg.setWindowTitle("Aperçu import PDF → Catalogue"); dlg.resize(980, 620)
            v = QVBoxLayout(dlg)
            # Bandeau options
            opt = QHBoxLayout()
            self._cb_dedupe = QCheckBox("Dédupliquer (ON)"); self._cb_dedupe.setChecked(True)
            self._cb_aggr = QCheckBox("Mode agressif (OFF)"); self._cb_aggr.setChecked(False)
            self._cb_ttc = QCheckBox("Prix importés = TTC → convertir en HT avec TVA par défaut")
            # TVA par défaut depuis settings
            try:
                s = getattr(self.window(), "settings", ensure_settings())
                tva_default = float(s.get("tva", 0.2))
            except Exception:
                tva_default = 0.2
            self._sp_tva = QDoubleSpinBox(); self._sp_tva.setSuffix(" %"); self._sp_tva.setDecimals(2); self._sp_tva.setRange(0.0, 100.0); self._sp_tva.setSingleStep(1.0)
            try:
                self._sp_tva.setValue(round(tva_default*100.0, 2))
            except Exception:
                self._sp_tva.setValue(20.0)
            opt.addWidget(self._cb_dedupe); opt.addWidget(self._cb_aggr); opt.addStretch(1)
            opt.addWidget(QLabel("TVA par défaut :")); opt.addWidget(self._sp_tva); opt.addStretch(1); opt.addWidget(self._cb_ttc)
            v.addLayout(opt)
            # Bandeau sélection rapide
            sel = QHBoxLayout()
            btn_all = QPushButton("Tout"); btn_none = QPushButton("Aucun"); btn_inv = QPushButton("Inverser")
            sel.addWidget(QLabel("Sélection :")); sel.addWidget(btn_all); sel.addWidget(btn_none); sel.addWidget(btn_inv); sel.addStretch(1)
            v.addLayout(sel)
            # Table preview
            tbl = QTableWidget(0, 8); tbl.setHorizontalHeaderLabels(["✓","Réf","Type","Désignation","Prix HT","TVA %","Unité","Catégorie"])
            tbl.setSelectionBehavior(QTableWidget.SelectRows)
            from PyQt5.QtWidgets import QHeaderView as _QHV
            hdr = tbl.horizontalHeader()
            try:
                hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(3, _QHV.Stretch)
                hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
            except Exception:
                pass
            v.addWidget(tbl)
            # Parse maintenant
            items = []
            for p in files:
                try:
                    items.extend(self._catalogue_pdf_extract_items_from_pdf(p, aggressive=False))
                except Exception:
                    pass
            if not items:
                try:
                    self._cb_aggr.setChecked(True)
                except Exception:
                    pass
                for p in files:
                    try:
                        items.extend(self._catalogue_pdf_extract_items_from_pdf(p, aggressive=True))
                    except Exception:
                        pass
            try:
                QMessageBox.information(self, "Import PDF", f"Analyse: {len(files)} fichier(s) scanné(s), {len(items)} ligne(s) détectée(s) avant dédup.")
            except Exception:
                pass
            if not items:
                QMessageBox.information(self, "Import PDF", "0 ligne détectée. Si vos PDF sont scannés, installez Tesseract (OCR) + PyMuPDF et réessayez (OCR auto). Sinon, activez 'Mode agressif'.")
            # Dédup interne (clé = (norm(des), type, prix))
            def _nkey(d):
                import re
                des = (d.get("Designation","") or "").lower()
                des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                return (des, d.get("Type",""), f"{float(self._catalogue_pdf_to_float(d.get('Prix_HT',0))):.2f}")
            seen = set(); deduped = []
            for it in items:
                k = _nkey(it)
                if k in seen:
                    continue
                seen.add(k); deduped.append(it)
            items = deduped
            # Peupler la table
            def add_row(it):
                r = tbl.rowCount(); tbl.insertRow(r)
                # checkbox
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    chk = QTableWidgetItem()
                    chk.setFlags(chk.flags() | Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
                    chk.setCheckState(Qt.Checked)
                    tbl.setItem(r, 0, chk)
                except Exception:
                    pass
                vals = [
                    it.get("Reference",""),
                    it.get("Type","") or "Pièces",
                    it.get("Designation",""),
                    f"{float(self._catalogue_pdf_to_float(it.get('Prix_HT', 0))):.2f}",
                    f"{int(round(self._sp_tva.value()))}",
                    ("H" if (it.get("Type","").lower().startswith("main d")) else "U"),
                    ""
                ]
                for c, v in enumerate(vals, start=1):
                    tbl.setItem(r, c, QTableWidgetItem(str(v)))
            for it in items:
                add_row(it)
            # Actions Sélection
            def sel_all():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it: it.setCheckState(Qt.Checked)
            def sel_none():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it: it.setCheckState(Qt.Unchecked)
            def sel_inv():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it:
                        it.setCheckState(Qt.Unchecked if it.checkState()==Qt.Checked else Qt.Checked)
            btn_all.clicked.connect(sel_all); btn_none.clicked.connect(sel_none); btn_inv.clicked.connect(sel_inv)
            # Boutons
            bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            v.addWidget(bb)
            bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
            def _validate_and_save():
                try:
                    # Récupérer lignes cochées
                    selected = []
                    any_checked = False
                    for r in range(tbl.rowCount()):
                        it = tbl.item(r,0)
                        if it and it.checkState() == Qt.Checked:
                            any_checked = True; selected.append(r)
                    if not any_checked:
                        # fallback: lignes sélectionnées
                        selected = sorted({i.row() for i in tbl.selectedIndexes()}) or list(range(tbl.rowCount()))
                    # Construire lignes
                    rows_new = []
                    for r in selected:
                        try:
                            ref = (tbl.item(r,1).text() if tbl.item(r,1) else "").strip()
                            typ = (tbl.item(r,2).text() if tbl.item(r,2) else "Pièces").strip() or "Pièces"
                            des = (tbl.item(r,3).text() if tbl.item(r,3) else "").strip()
                            prix = self._catalogue_pdf_to_float(tbl.item(r,4).text() if tbl.item(r,4) else "0")
                            tva_pct = float(self._sp_tva.value())
                            if self._cb_ttc.isChecked():
                                # Convertir TTC vers HT
                                tva = tva_pct/100.0
                                if (1.0 + tva) > 0.0:
                                    prix = prix / (1.0 + tva)
                            unit = "H" if typ.lower().startswith("main d") else "U"
                            rows_new.append({
                                "Reference": ref, "Type": ("Main d’œuvre" if unit == "H" else "Pièces"),
                                "Designation": des, "Prix_HT": f"{float(prix):.2f}",
                                "Taux_TVA": f"{float(tva_pct/100.0):.2f}", "Unite": unit, "Categorie": ""
                            })
                        except Exception:
                            continue
                    # Dédup si demandé
                    if self._cb_dedupe.isChecked():
                        seen = set(); dedup2 = []
                        def key(d):
                            import re
                            des = (d.get("Designation","") or "").lower()
                            des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                            return (des, d.get("Type",""), d.get("Prix_HT","0.00"))
                        for it in rows_new:
                            k = key(it)
                            if k in seen: continue
                            seen.add(k); dedup2.append(it)
                        rows_new = dedup2
                    # Charger existant + anti-doublon
                    path = os.path.join(DATA_DIR, CSV_ITEMS)
                    exist = load_csv(path)
                    def key2(d):
                        import re
                        des = (d.get("Designation","") or "").lower()
                        des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                        return (des, d.get("Type",""), f"{float(self._catalogue_pdf_to_float(d.get('Prix_HT',0))):.2f}")
                    exist_keys = { key2(it) for it in (exist or []) }
                    rows_new = [it for it in rows_new if key2(it) not in exist_keys]
                    if not rows_new:
                        QMessageBox.information(self, "Import PDF", "Aucune nouvelle ligne à ajouter (tout était déjà présent).")
                        return
                    # Attribuer ID et Reference auto
                    # ID = 1 + max(ID existants)
                    max_id = 0
                    for it in (exist or []):
                        try:
                            max_id = max(max_id, int(float(it.get("ID","0") or "0")))
                        except Exception:
                            pass
                    next_id = max_id + 1
                    # Préparer compteur Réf par préfixe
                    def next_ref(prefix, used):
                        # trouve le prochain entier disponible en 4 digits
                        n = used.get(prefix, 0) + 1
                        used[prefix] = n
                        return f"{prefix}{n:04d}"
                    # Scanner déjà existant pour initialiser compteurs
                    used = {"MO": 0, "PC": 0}
                    import re as _re
                    for it in (exist or []):
                        r = (it.get("Reference","") or "").strip().upper()
                        m = _re.match(r"^(MO|PC)(\d{4})$", r)
                        if m:
                            pref = m.group(1)
                            try:
                                used[pref] = max(used.get(pref, 0), int(m.group(2)))
                            except Exception:
                                pass
                    # Compléter lignes
                    for it in rows_new:
                        it["ID"] = str(next_id); next_id += 1
                        if not (it.get("Reference") or "").strip():
                            pref = "MO" if (it.get("Type","").lower().startswith("main d")) else "PC"
                            it["Reference"] = next_ref(pref, used)
                    # Append + save
                    exist = (exist or []) + rows_new
                    save_csv(path, exist, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
                    try:
                        self.load()
                    except Exception:
                        pass
                    QMessageBox.information(self, "Import PDF", f"{len(rows_new)} ligne(s) ajoutée(s) au Catalogue.")
                except Exception as e:
                    try:
                        log_error("_catalogue_pdf_import_validate\\n"+str(e))
                    except Exception:
                        pass
            bb.accepted.disconnect()
            bb.accepted.connect(lambda: (_validate_and_save(), dlg.accept()))
            if dlg.exec_() != QDialog.Accepted:
                return
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_preview\\n"+str(e))
            except Exception:
                pass
class UrssafTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        v=QVBoxLayout(self)
        filt=QHBoxLayout()
        self.start=QDateEdit(QtCore.QDate.currentDate().addMonths(-1)); self.start.setDisplayFormat("dd/MM/yyyy")
        self.end=QDateEdit(QtCore.QDate.currentDate()); self.end.setDisplayFormat("dd/MM/yyyy")
        try:
            self.start.setCalendarPopup(True); self.end.setCalendarPopup(True)
        except Exception:
            pass
        self.cmb=QComboBox(); self.cmb.addItems(["Tous"]+STATUTS)
        self.btn_apply=QPushButton("Appliquer"); self.btn_pdf=QPushButton("Exporter PDF"); self.btn_csv=QPushButton("Exporter CSV"); self.btn_open_ursaff=QPushButton("Ouvrir exports"); self.btn_open_last=QPushButton("Ouvrir dernier PDF")
        filt.addWidget(QLabel("Du :")); filt.addWidget(self.start); filt.addWidget(QLabel("Au :")); filt.addWidget(self.end)
        filt.addWidget(QLabel("Statut :")); filt.addWidget(self.cmb); filt.addStretch(1); filt.addWidget(self.btn_apply); filt.addWidget(self.btn_pdf); filt.addWidget(self.btn_csv); filt.addWidget(self.btn_open_ursaff); filt.addWidget(self.btn_open_last)
        v.addLayout(filt)
        self.btn_open_ursaff.clicked.connect(self.open_exports_dir)
        self.btn_open_last.clicked.connect(self.open_last_pdf)
        self.table=QTableWidget(0,len(URSSAF_COLS)); self.table.setHorizontalHeaderLabels(URSSAF_COLS)
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        foot=QHBoxLayout(); self.lbl_tot=QLabel("Totaux période — Pièces: 0.00 €  MO: 0.00 €  HT: 0.00 €  TTC: 0.00 €")
        self.lbl_sel=QLabel("Sélection — Pièces: 0.00 €  MO: 0.00 €  HT: 0.00 €  TTC: 0.00 €")
        
        # Ajout du toggle pour recalcul TTC et label TVA
        self.chk_recalc_ttc = QCheckBox("Recalculer TTC (param. TVA)")
        self.chk_recalc_ttc.setChecked(True)
        self.lbl_tva = QLabel("TVA (— %) : 0.00 €")
        
        foot.addWidget(self.lbl_tot)
        foot.addWidget(self.lbl_tva)
        foot.addWidget(self.chk_recalc_ttc)
        foot.addStretch(1)
        foot.addWidget(self.lbl_sel)
        v.addLayout(foot)
        # --- UI-only: enlarge & style bottom totals labels (URSSAF) ---
        try:
            # Bigger, bold labels with soft background
            for lab in (self.lbl_tot, self.lbl_sel):
                try:
                    f = lab.font()
                    f.setPointSize(max(f.pointSize(), 14))
                    f.setBold(True)
                    lab.setFont(f)
                except Exception:
                    pass
                try:
                    lab.setStyleSheet("QLabel{padding:8px 12px; border-radius:10px; "
                        "background:#f4f6fb; border:1px solid #d7dde6;}"
                    )
                except Exception:
                    pass
            # More breathing room for the footer bar
            try:
                foot.setSpacing(max(foot.spacing(), 10))
                foot.setContentsMargins(8, 6, 8, 6)
            except Exception:
                pass
        except Exception:
            pass
        # --- End UI-only footer styling ---
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_apply","btn_pdf","btn_csv"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_apply":
                    btn.setToolTip("Appliquer les filtres")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Exporter en PDF")
                elif btn_name == "btn_csv":
                    btn.setToolTip("Exporter en CSV")
        
        self.btn_apply.clicked.connect(self.apply); self.btn_pdf.clicked.connect(self.export_pdf); self.btn_csv.clicked.connect(self.export_csv)
        self.chk_recalc_ttc.toggled.connect(self.apply)
        self.table.itemSelectionChanged.connect(self.update_sel)
        self.apply()
    def _load_docs(self):
        """Load all factures for URSSAF reporting"""
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        docs = []
        for f in facts:
            doc = assemble_doc("facture", f.get("numero",""))
            if doc:
                docs.append(doc)
        return docs
   
    def _build_rows(self, docs):
        out=[]
        for d in docs:
            date_ref = d.get("date_statut") or d.get("date") or ""
        
            # Calculer pièces et MO avec les taux de TVA individuels
            pieces = 0
            mo = 0
            mht = 0
            mttc_stock = _safe_float(d.get("total_ttc", 0))
        
            for L in d.get("lignes",[]):
                ligne_ht = L["total_ht"]
                mht += ligne_ht
                ligne_type = (L.get("type", "") or "").strip().lower()
            
                # Détection des pièces (plusieurs variantes possibles)
                if any(term in ligne_type for term in ["pièce", "piece", "pièces", "pieces", "pc"]):
                    pieces += ligne_ht
                # Détection de la main d'œuvre (plusieurs variantes possibles)
                elif any(term in ligne_type for term in ["main d'œuvre", "main d'oeuvre", "main dœuvre", "mo", "main", "œuvre", "oeuvre"]):
                    mo += ligne_ht            # Le reste du code reste inchangé...
            # Calcul du TTC selon le mode choisi
            use_recalc = self.chk_recalc_ttc.isChecked() if hasattr(self, "chk_recalc_ttc") else True
        
            if use_recalc:
                # Calculer le TTC en respectant les taux de TVA individuels
                mttc = 0
                for L in d.get("lignes",[]):
                    ligne_ht = L["total_ht"]
                    tva_rate = L.get("tva", self.settings.get("tva", 0.2))
                    mttc += ligne_ht * (1.0 + tva_rate)
            else:
                # Utiliser la valeur TTC stockée
                mttc = mttc_stock if mttc_stock > 0 else mht * (1.0 + self.settings.get("tva", 0.2))
        
            out.append({
                "Numéro": d.get("numero",""),
                "Date du paiement": _display_date(date_ref),
                "client": d.get("client_nom",""),
                "montant pieces": f"{pieces:.2f}",
                "montant MO": f"{mo:.2f}",
                "Montant HT": f"{mht:.2f}",
                "Montant TTC": f"{mttc:.2f}",
                "Statut": d.get("statut","")
            })
        return out
    def apply(self):
        s=_safe_date_str(self.start.date().toString("dd/MM/yyyy")); e=_safe_date_str(self.end.date().toString("dd/MM/yyyy")); wanted=self.cmb.currentText()
        docs=self._load_docs(); rows=[]
        for d in docs:
            date_ref=d.get("date_statut") or d.get("date") or ""
            if s and date_ref and date_ref < s: continue
            if e and date_ref and date_ref > e: continue
            if wanted!="Tous" and d.get("statut")!=wanted: continue
            rows.append(d)
        data=self._build_rows(rows)
        self.table.setRowCount(0)
        tot_p=tot_m=tot_ht=tot_ttc=0.0
        tot_tva_calcul = 0.0
    
        for r in data:
            rr=self.table.rowCount(); self.table.insertRow(rr)
            for c,k in enumerate(URSSAF_COLS):
                self.table.setItem(rr,c,QTableWidgetItem(str(r.get(k,""))))
            tot_p+=_safe_float(r.get("montant pieces",0)); tot_m+=_safe_float(r.get("montant MO",0))
            tot_ht+=_safe_float(r.get("Montant HT",0)); tot_ttc+=_safe_float(r.get("Montant TTC",0))
    
        # Mise à jour du label TVA
        tva_amount = tot_ttc - tot_ht
     
        # Calculer le taux moyen de TVA pour l'affichage
        taux_moyen = (tva_amount / tot_ht * 100) if tot_ht > 0 else 0
    
        rate_m = float(self.settings.get("urssaf_rate", 0.22) or 0.0)
    
        rate_p = float(self.settings.get("urssaf_rate_pieces", rate_m) or rate_m)
    
        ur_m = tot_m * max(rate_m, 0.0)
    
        ur_p = tot_p * max(rate_p, 0.0)
    
        ur_tot = ur_m + ur_p
    
        self.lbl_tva.setText(f"TVA ({taux_moyen:.1f} %) : {tva_amount:.2f} €    •    URSSAF MO ({int(round(rate_m*100))} %) : {ur_m:.2f} €    •    URSSAF Pièces ({int(round(rate_p*100))} %) : {ur_p:.2f} €    •    Total : {ur_tot:.2f} €")
    
        # Mise à jour des totaux
        self.lbl_tot.setText(f"Totaux période — Pièces: {tot_p:.2f} €  MO: {tot_m:.2f} €  HT: {tot_ht:.2f} €  TTC: {tot_ttc:.2f} €")
        self.update_sel()
    def export_csv(self):
        # Export CSV silencieux dans data/ursaff
        try:
            s_date = self.start.date().toString("yyyy-MM-dd")
            e_date = self.end.date().toString("yyyy-MM-dd")
            statut = (self.cmb.currentText() or "Tous").replace(" ", "")
            ts = datetime.now().strftime("%Y%m%d-%H%M%S")
            auto_dir = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(auto_dir, exist_ok=True)
            auto_name = f"URSSAF_{s_date}_{e_date}_{statut}_{ts}.csv"
            auto_path = os.path.join(auto_dir, auto_name)
            with open(auto_path,"w",encoding="utf-8",newline="") as f:
                w=csv.writer(f); w.writerow(URSSAF_COLS)
                for r in range(self.table.rowCount()):
                    w.writerow([self.table.item(r,c).text() if self.table.item(r,c) else "" for c in range(self.table.columnCount())])
            QMessageBox.information(self,"Export", f"CSV exporté dans:\n{auto_path}")
        except Exception as e:
            QMessageBox.critical(self,"Export","Echec export CSV: %s"%e)
    
    def open_exports_dir(self):
        try:
            base = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(base, exist_ok=True)
            try:
                from PyQt5.QtGui import QDesktopServices
                from PyQt5.QtCore import QUrl
                _open_file_async(base)
                return
            except Exception:
                pass
            # Fallbacks
            try:
                if sys.platform.startswith("win"):
                    _open_file_async(base)
                elif sys.platform == "darwin":
                    import subprocess; subprocess.Popen(["open", base])
                else:
                    import subprocess; subprocess.Popen(["xdg-open", base])
            except Exception:
                QMessageBox.information(self, "Dossier URSSAF", f"Dossier: {base}")
        except Exception as e:
            QMessageBox.critical(self, "Dossier URSSAF", f"Erreur: {e}")
    
    def open_last_pdf(self):
        try:
            base = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(base, exist_ok=True)
            pdfs = [os.path.join(base, f) for f in os.listdir(base) if f.lower().endswith(".pdf")]
            if not pdfs:
                QMessageBox.information(self, "URSSAF", "Aucun PDF trouvé dans le dossier des exports.")
                return
            last = max(pdfs, key=lambda p: os.path.getmtime(p))
            try:
                from PyQt5.QtGui import QDesktopServices
                from PyQt5.QtCore import QUrl
                _open_file_async(last)
                return
            except Exception:
                pass
            # Fallback
            try:
                if sys.platform.startswith("win"):
                    _open_file_async(last)
                elif sys.platform == "darwin":
                    import subprocess; subprocess.Popen(["open", last])
                else:
                    import subprocess; subprocess.Popen(["xdg-open", last])
            except Exception as e:
                QMessageBox.critical(self, "URSSAF", f"Impossible d'ouvrir:\n{last}\n{e}")
        except Exception as e:
            QMessageBox.critical(self, "URSSAF", str(e))
    def export_pdf(self):
        rows=[]
        for r in range(self.table.rowCount()):
            row={k: (self.table.item(r,c).text() if self.table.item(r,c) else "") for c,k in enumerate(URSSAF_COLS)}
            rows.append(row)
        try:
            s_date = self.start.date().toString("dd/MM/yyyy")
            e_date = self.end.date().toString("dd/MM/yyyy")
            statut = (self.cmb.currentText() or "Tous").strip()
            periode = f"{s_date} → {e_date} – {statut}"
            # Build suggested output path
            ts = __import__('datetime').datetime.now().strftime("%Y%m%d-%H%M%S")
            s_iso = self.start.date().toString("yyyyMMdd"); e_iso = self.end.date().toString("yyyyMMdd")
            base_dir = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            try:
                os.makedirs(base_dir, exist_ok=True)
            except Exception:
                base_dir = DATA_DIR
            suggested = os.path.join(base_dir, f"URSSAF_{s_iso}_{e_iso}_{statut}_{ts}.pdf")
            settings = ensure_settings()
            logo = _logo_from_settings(settings)
            # Call generator with out_path when supported
            gen = globals().get('generate_urssaf_pdf') or globals().get('_validated_generate_urssaf_pdf')
            if not gen:
                raise NameError("URSSAF PDF generator not found")
            created_path = None
            try:
                res = gen(rows, periode, __import__('datetime').datetime.now().strftime("%d/%m/%Y %H:%M"), logo, settings, out_path=suggested)
            except TypeError:
                res = gen(rows, periode, __import__('datetime').datetime.now().strftime("%d/%m/%Y %H:%M"), logo, settings)
            # Interpret result
            if isinstance(res, (bytes, bytearray)):
                with open(suggested, "wb") as f:
                    f.write(res)
                created_path = suggested
            elif isinstance(res, str) and res:
                created_path = res
            # Fallbacks: if nothing returned, probe for most recent URSSAF_*.pdf just created
            if not created_path or not os.path.exists(created_path):
                candidates = []
                for d in {base_dir, os.path.join(DATA_DIR, "urssaf"), os.path.join(DATA_DIR, "reports")}:
                    try:
                        candidates += glob.glob(os.path.join(d, "URSSAF_*.pdf"))
                    except Exception:
                        pass
                if candidates:
                    candidates.sort(key=lambda p: os.path.getmtime(p), reverse=True)
                    newest = candidates[0]
                    # accept if within last 120 seconds
                    if (__import__('datetime').datetime.now().timestamp() - os.path.getmtime(newest)) < 120:
                        created_path = newest
            # Last resort: if suggested exists, use it
            if not created_path and os.path.exists(suggested):
                created_path = suggested
            if not created_path:
                raise RuntimeError("Le générateur n'a produit aucun fichier PDF.")
            # Option auto-open
            try:
                if bool(settings.get('urssaf_auto_open', False)):
                    _open_file_async(created_path)
            except Exception:
                pass
            # Dialog with clickable link
            self._show_pdf_link(created_path)
        except Exception as e:
            QMessageBox.critical(self, "Export", f"Echec export PDF: {e}")
    def _show_pdf_link(self, path: str):
        try:
            link = QUrl.fromLocalFile(path).toString()
            box = QMessageBox(self)
            box.setWindowTitle("Export PDF")
            box.setIcon(QMessageBox.Information)
            box.setTextFormat(Qt.RichText)
            box.setText(f'Exporté vers : <a href="{link}">{path}</a>')
            try:
                lbl = box.findChild(QLabel, "qt_msgbox_label")
                if lbl:
                    lbl.setOpenExternalLinks(True)
                    lbl.setTextInteractionFlags(lbl.textInteractionFlags() | Qt.TextBrowserInteraction | Qt.LinksAccessibleByMouse)
            except Exception:
                pass
            box.setStandardButtons(QMessageBox.Ok | QMessageBox.Open)
            try:
                btn = box.button(QMessageBox.Open)
                if btn: btn.setText("Ouvrir")
            except Exception:
                pass
            ret = box.exec_()
            if ret == QMessageBox.Open:
                QDesktopServices.openUrl(QUrl.fromLocalFile(path))
        except Exception:
            QMessageBox.information(self, "Export PDF", path)
    def update_sel(self):
        rows={i.row() for i in self.table.selectedIndexes()}
        p=m=ht=ttc=0.0
        for r in rows:
            p+=_safe_float(self.table.item(r,3).text() if self.table.item(r,3) else 0)
            m+=_safe_float(self.table.item(r,4).text() if self.table.item(r,4) else 0)
            ht+=_safe_float(self.table.item(r,5).text() if self.table.item(r,5) else 0)
            ttc+=_safe_float(self.table.item(r,6).text() if self.table.item(r,6) else 0)
        self.lbl_sel.setText(f"Sélection — Pièces: {p:.2f} €  MO: {m:.2f} €  HT: {ht:.2f} €  TTC: {ttc:.2f} €")
        def edit_selected(self):
            """Handle double-click on a row"""
            selected_row = self.table.currentRow()
            if selected_row >= 0:
                numero = self.table.item(selected_row, 0).text()
                if numero:
                    # Open the corresponding facture
                    doc = assemble_doc("facture", numero)
                    if doc:
                        out=os.path.join(DOCS_DIRS["factures"], f"{numero}.pdf")
                        try: 
                            out = _safe_write_facturx_pdf(doc, self.settings, numero)
                            _open_file_async(out)
                        except Exception as e: 
                            QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    # -------- Settings tab --------
class SettingsTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        v=QVBoxLayout(self)
        form=QFormLayout()
        self.nom=QLineEdit(settings.get("entreprise_nom",""))
        self.addr=QLineEdit(settings.get("entreprise_adresse",""))
        self.cp=QLineEdit(settings.get("entreprise_cp",""))
        self.ville=QLineEdit(settings.get("entreprise_ville",""))
        self.tel=QLineEdit(settings.get("entreprise_tel",""))
        self.mail=QLineEdit(settings.get("entreprise_mail",""))
        self.siret=QLineEdit(settings.get("entreprise_siret",""))
        self.siren=QLineEdit(settings.get("entreprise_siren",""))
        self.tva_intracom=QLineEdit(settings.get("entreprise_tva",""))
        self.decennale=QLineEdit(settings.get("entreprise_attestation_decennale",""))
        self.chk_tva_non_applicable=QCheckBox("TVA non applicable (art. 293 B CGI)")
        try:
            self.chk_tva_non_applicable.setChecked(bool(settings.get("tva_non_applicable", False)))
        except Exception:
            self.chk_tva_non_applicable.setChecked(False)
        self.legal_indicator=QLabel("")
        self.ape=QLineEdit(settings.get("entreprise_ape",""))
        self.banque=QLineEdit(settings.get("entreprise_banque",""))
        self.iban=QLineEdit(settings.get("entreprise_iban",""))
        self.bic=QLineEdit(settings.get("entreprise_bic",""))
        self.tva=QLineEdit(str(settings.get("tva",0.2)))
        self.logo=QLineEdit(settings.get("logo_path","")); btn_logo=QPushButton("Choisir logo…")
        self.mentions=QLineEdit(settings.get("mentions_legales",""))
        self.smtp_host=QLineEdit(settings.get("smtp_host","")); self.smtp_port=QLineEdit(str(settings.get("smtp_port",587)))
        self.smtp_user=QLineEdit(settings.get("smtp_user","")); self.smtp_pass=QLineEdit(settings.get("smtp_pass","")); self.smtp_pass.setEchoMode(QLineEdit.Password)
        self.smtp_tls=QCheckBox("TLS"); self.smtp_tls.setChecked(bool(settings.get("smtp_tls",True)))
        self.smtp_ssl=QCheckBox("SSL (465)"); self.smtp_ssl.setChecked(bool(settings.get("smtp_ssl",False)))
        self.theme=QLineEdit(settings.get("theme_color_hex","#0A84FF"))
        form.addRow("Nom entreprise", self.nom); form.addRow("Adresse", self.addr); form.addRow("Code Postal", self.cp); form.addRow("Ville", self.ville)
        form.addRow("Tél", self.tel); form.addRow("Email", self.mail); form.addRow(QLabel("— Identifiants légaux (émetteur) —"))
        form.addRow("SIREN", self.siren);
        form.addRow("SIRET", self.siret); form.addRow("APE", self.ape)
        form.addRow("Banque", self.banque)
        form.addRow("IBAN", self.iban); form.addRow("BIC", self.bic); form.addRow("TVA (0.2=20%)", self.tva)
        form.addRow("N° TVA intracom (émetteur)", self.tva_intracom)
        form.addRow("Attestation d'assurance décennale N°", self.decennale)
        form.addRow("", self.chk_tva_non_applicable)
        form.addRow("État identifiants", self.legal_indicator)
        try:
            self.nom.textChanged.connect(self._update_legal_indicator)
            self.addr.textChanged.connect(self._update_legal_indicator)
            self.cp.textChanged.connect(self._update_legal_indicator)
            self.ville.textChanged.connect(self._update_legal_indicator)
            self.siren.textChanged.connect(self._update_legal_indicator)
            self.siret.textChanged.connect(self._update_legal_indicator)
            self.tva_intracom.textChanged.connect(self._update_legal_indicator)
            self.decennale.textChanged.connect(self._update_legal_indicator)
            self.chk_tva_non_applicable.stateChanged.connect(self._update_legal_indicator)
        except Exception:
            pass
        try:
            self._update_legal_indicator()
        except Exception:
            pass
        self.spin_urssaf = QDoubleSpinBox()
        self.spin_urssaf.setRange(0.0, 100.0)
        self.spin_urssaf.setDecimals(2)
        self.spin_urssaf.setSuffix(" %")
        try:
            self.spin_urssaf.setValue(float(self.settings.get("urssaf_rate", 0.22))*100.0)
        except Exception:
            self.spin_urssaf.setValue(22.0)
        form.addRow("Taux URSSAF", self.spin_urssaf)
        # --- Ajout additif : Taux URSSAF (Pièces)
        self.spin_urssaf_pieces = QDoubleSpinBox()
        self.spin_urssaf_pieces.setRange(0.0, 100.0)
        self.spin_urssaf_pieces.setDecimals(2)
        self.spin_urssaf_pieces.setSuffix(" %")
        try:
            self.spin_urssaf_pieces.setValue(float(self.settings.get("urssaf_rate_pieces", self.settings.get("urssaf_rate", 0.22))) * 100.0)
        except Exception:
            self.spin_urssaf_pieces.setValue(self.spin_urssaf.value())
        form.addRow("Taux URSSAF (Pièces)", self.spin_urssaf_pieces)
        self.chk_urssaf_auto_open = QCheckBox("Ouvrir automatiquement le PDF URSSAF après export")
        self.chk_urssaf_auto_open.setChecked(bool(self.settings.get("urssaf_auto_open", False)))
        form.addRow("", self.chk_urssaf_auto_open)
        hl=QHBoxLayout(); hl.addWidget(self.logo,1); hl.addWidget(btn_logo,0); form.addRow("Logo local", hl)
        form.addRow("Mentions légales", self.mentions); form.addRow(QLabel("— Email automatique —"))
        # Pieds PDF (éditables)
        self.pied_devis = QTextEdit(self.settings.get("pied_devis",""))
        self.pied_devis.setFixedHeight(70)
        form.addRow("Texte pied DEVIS", self.pied_devis)
        self.pied_facture = QTextEdit(self.settings.get("pied_facture",""))
        self.pied_facture.setFixedHeight(70)
        form.addRow("Texte pied FACTURE", self.pied_facture)
        
        
        # Auto-prefill/upgrade if current texts are empty or older auto-text (no "Validité du devis")
        cur_d = (self.settings.get("pied_devis") or "").strip()
        if not cur_d or ("Règlement par virement" in cur_d and "Validité du devis" not in cur_d):
            try:
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        cur_f = (self.settings.get("pied_facture") or "").strip()
        if not cur_f or ("Règlement par virement" in cur_f and "Validité du devis" not in cur_f):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    # Auto-prefill if empty using company info
        if not self.settings.get("pied_devis"):
            try:
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        if not self.settings.get("pied_facture"):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    # Prefill if empty using company info
        if not self.settings.get("pied_devis"):
            try:
                from datetime import datetime as _dt  # avoid shadow
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        if not self.settings.get("pied_facture"):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    
        self.auto_mail_devis = QCheckBox("Activer devis"); self.auto_mail_devis.setChecked(bool(self.settings.get("auto_mail_devis", False)))
        self.auto_mail_facture = QCheckBox("Activer factures"); self.auto_mail_facture.setChecked(bool(self.settings.get("auto_mail_facture", False)))
        self.auto_mail_on_status_envoye = QCheckBox("Envoyer quand statut = \"Envoyé\""); self.auto_mail_on_status_envoye.setChecked(bool(self.settings.get("auto_mail_on_status_envoye", False)))
        form.addRow(self.auto_mail_devis); form.addRow(self.auto_mail_facture); form.addRow(self.auto_mail_on_status_envoye)
        self.auto_mail_bcc = QLineEdit(self.settings.get("auto_mail_bcc","")); form.addRow("BCC", self.auto_mail_bcc)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        
        # --- Masquage des champs mail dans l'onglet Paramètres (déplacés vers "Paramètres (Email)") ---
        try:
            def _hide_row_with_label(_form, _labels:set):
                # Parcourt les lignes du QFormLayout et masque celles dont le label correspond
                for _i in range(_form.rowCount() - 1, -1, -1):
                    _lab_item = _form.itemAt(_i, QFormLayout.LabelRole)
                    if _lab_item is None:
                        continue
                    _w = _lab_item.widget()
                    if isinstance(_w, QLabel):
                        _t = (_w.text() or "").strip()
                        if _t in _labels or "SMTP" in _t or "Email automatique" in _t:
                            _w.hide()
                            _field_item = _form.itemAt(_i, QFormLayout.FieldRole)
                            if _field_item is not None:
                                _fw = _field_item.widget()
                                if _fw is not None:
                                    _fw.hide()
                                else:
                                    _lay = _field_item.layout()
                                    if _lay is not None:
                                        # Masquer tous les widgets enfants de la ligne
                                        for _j in range(_lay.count()):
                                            _iw = _lay.itemAt(_j).widget()
                                            if _iw is not None:
                                                _iw.hide()
            _hide_row_with_label(form, {"Serveur","Port","Utilisateur","Mot de passe","BCC","Sujet Devis","Message Devis","Sujet Facture","Message Facture"})
            # Masquer widgets sans label (cases à cocher)
            for _w in [self.smtp_tls, self.smtp_ssl, getattr(self,'auto_mail_devis',None), getattr(self,'auto_mail_facture',None), getattr(self,'auto_mail_on_status_envoye',None)]:
                if _w:
                    _w.hide()
            # Masquer aussi les champs correspondants (au cas où)
            for _w in [self.smtp_host, self.smtp_port, self.smtp_user, self.smtp_pass, getattr(self,'auto_mail_bcc',None), getattr(self,'tpl_subject_devis',None), getattr(self,'tpl_body_devis',None), getattr(self,'tpl_subject_facture',None), getattr(self,'tpl_body_facture',None)]:
                if _w:
                    _w.hide()
        except Exception:
            pass
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        btns=QHBoxLayout(); self.btn_test=QPushButton("Tester SMTP"); self.btn_open=QPushButton("Ouvrir dossier data/"); self.btn_backup=QPushButton("Sauvegarde .zip"); self.btn_save=QPushButton("Enregistrer")
        btns.addWidget(self.btn_test); btns.addWidget(self.btn_open); btns.addStretch(1); btns.addWidget(self.btn_backup); btns.addWidget(self.btn_save); v.addLayout(btns)
        
        # UI-only: améliorations visuelles
        for btn_name in ("btn_test","btn_open","btn_backup","btn_save"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_test":
                    btn.setToolTip("Tester la connexion SMTP")
                elif btn_name == "btn_open":
                    btn.setToolTip("Ouvrir le dossier des données")
                elif btn_name == "btn_backup":
                    btn.setToolTip("Créer une sauvegarde zip")
                elif btn_name == "btn_save":
                    btn.setToolTip("Enregistrer les paramètres")
        
        
        # Masquer le bouton de test SMTP dans l'onglet Paramètres (désormais dans l'onglet Paramètres (Email))
        if hasattr(self, "btn_test"):
            try:
                self.btn_test.hide()
            except Exception:
                pass
        btn_logo.clicked.connect(self.pick_logo); self.btn_save.clicked.connect(self.save); self.btn_backup.clicked.connect(self.backup); self.btn_open.clicked.connect(self.open_data); self.btn_test.clicked.connect(self.test_smtp)
    def pick_logo(self):
        p,_=QFileDialog.getOpenFileName(self,"Choisir logo","","Images (*.png *.jpg *.jpeg *.bmp)")
        if not p: return
        dst=copy_logo_to_brand(p); 
        if dst: self.logo.setText(dst)
    def data_from_ui(self):
        return { "entreprise_siren": self.siren.text().strip(), "entreprise_tva": self.tva_intracom.text().strip(), "entreprise_attestation_decennale": self.decennale.text().strip(), "tva_non_applicable": bool(self.chk_tva_non_applicable.isChecked()), "entreprise_nom":self.nom.text().strip(),"entreprise_adresse":self.addr.text().strip(),"entreprise_cp":self.cp.text().strip(),
                "entreprise_ville":self.ville.text().strip(),"entreprise_tel":self.tel.text().strip(),"entreprise_mail":self.mail.text().strip(),
                "entreprise_siret":self.siret.text().strip(),"entreprise_ape":self.ape.text().strip(),
                "entreprise_banque":self.banque.text().strip(),"entreprise_iban":self.iban.text().strip(),"entreprise_bic":self.bic.text().strip(),
                "tva": _safe_float(self.tva.text(), 0.2), "urssaf_rate": round(self.spin_urssaf.value()/100.0, 4), "urssaf_rate_pieces": round(self.spin_urssaf_pieces.value()/100.0, 4), "urssaf_auto_open": bool(self.chk_urssaf_auto_open.isChecked()),"logo_path":self.logo.text().strip(),"mentions_legales":self.mentions.text().strip(),
                "smtp_host":self.smtp_host.text().strip(),"smtp_port":int(_safe_float(self.smtp_port.text(),587)),
                "smtp_user":self.smtp_user.text().strip(),"smtp_pass":self.smtp_pass.text(),"smtp_tls":self.smtp_tls.isChecked(),"smtp_ssl":self.smtp_ssl.isChecked(),
                "theme_color_hex":self.theme.text().strip() or "#0A84FF",
"auto_mail_devis": self.auto_mail_devis.isChecked(),
"auto_mail_facture": self.auto_mail_facture.isChecked(),
"auto_mail_on_status_envoye": self.auto_mail_on_status_envoye.isChecked(),
"auto_mail_bcc": self.auto_mail_bcc.text().strip(),
"tpl_subject_devis": self.tpl_subject_devis.text().strip(),
"tpl_body_devis": self.tpl_body_devis.toPlainText().strip(),
"tpl_subject_facture": self.tpl_subject_facture.text().strip(),
"tpl_body_facture": self.tpl_body_facture.toPlainText().strip(),
"tpl_subject_facture_situation": self.tpl_subject_facture_situation.text().strip(),
"tpl_body_facture_situation": self.tpl_body_facture_situation.toPlainText().strip(),
"tpl_subject_facture_solde": self.tpl_subject_facture_solde.text().strip(),
"tpl_body_facture_solde": self.tpl_body_facture_solde.toPlainText().strip(),
"pied_devis": self.pied_devis.toPlainText().strip(), "pied_facture": self.pied_facture.toPlainText().strip()}
    def save(self):
        old_tva = _safe_float(self.settings.get("tva", 0.2), 0.2)
        s = self.data_from_ui()
        new_tva = _safe_float(s.get("tva", 0.2), 0.2)
        ok = save_settings(s)
        if ok:
            try:
                rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
                if isinstance(rows, list):
                    # Trigger if settings TVA changed OR catalogue contains differing rates
                    need_migrate = (abs(new_tva - old_tva) > 1e-9) or any(abs(_safe_float(it.get("Taux_TVA", new_tva), new_tva) - new_tva) > 1e-9 for it in rows)
                    if need_migrate:
                        for it in rows:
                            try:
                                it["Taux_TVA"] = f"{float(new_tva):.2f}"
                            except Exception:
                                it["Taux_TVA"] = f"{_safe_float(it.get('Taux_TVA', new_tva), new_tva):.2f}"
                    save_csv(
                        os.path.join(DATA_DIR, CSV_ITEMS),
                        rows,
                        ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"]
                    )
                    try:
                        self.settings["tva"] = new_tva  # keep in-memory consistent
                    except Exception:
                        pass
                    try:
                        refresh_all_tabs(self)
                    except Exception:
                        pass
            except Exception:
                log_error("tva_migration\n"+__import__('traceback').format_exc())
        QMessageBox.information(self, "Paramètres", "Enregistrés. (Relancez l'appli pour appliquer le thème)" if ok else "Echec d'enregistrement.")
    def backup(self):
        try: out=zip_backup(); QMessageBox.information(self,"Sauvegarde",f"Backup créé : {out}")
        except Exception: QMessageBox.critical(self,"Sauvegarde","Echec de la sauvegarde.")
    def open_data(self):
        _open_file_async(DATA_DIR)
    def test_smtp(self):
        s=self.data_from_ui()
        res=test_smtp(s); QMessageBox.information(self,"SMTP",res)
# ---------------- Main Window ----------------
class SettingsEmailTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings = settings
        v = QVBoxLayout(self)
        form = QFormLayout()
        # SMTP group
        self.smtp_host = QLineEdit(settings.get("smtp_host",""))
        self.smtp_port = QLineEdit(str(settings.get("smtp_port",587)))
        self.smtp_user = QLineEdit(settings.get("smtp_user",""))
        self.smtp_pass = QLineEdit(settings.get("smtp_pass",""))
        self.smtp_pass.setEchoMode(QLineEdit.Password)
        self.smtp_tls  = QCheckBox("TLS")
        self.smtp_tls.setChecked(bool(settings.get("smtp_tls", True)))
        self.smtp_ssl  = QCheckBox("SSL (465)")
        self.smtp_ssl.setChecked(bool(settings.get("smtp_ssl", False)))
        self.lbl_smtp = QLabel("— SMTP —"); form.addRow(self.lbl_smtp)
        form.addRow("Serveur", self.smtp_host)
        form.addRow("Port", self.smtp_port)
        form.addRow("Utilisateur", self.smtp_user)
        form.addRow("Mot de passe", self.smtp_pass)
        form.addRow(self.smtp_tls)
        form.addRow(self.smtp_ssl)
        # Auto-email group
        self.lbl_auto = QLabel("— Email automatique —"); form.addRow(self.lbl_auto)
        self.auto_mail_devis = QCheckBox("Activer devis")
        self.auto_mail_devis.setChecked(bool(settings.get("auto_mail_devis", False)))
        self.auto_mail_facture = QCheckBox("Activer factures")
        self.auto_mail_facture.setChecked(bool(settings.get("auto_mail_facture", False)))
        self.auto_mail_on_status_envoye = QCheckBox("Envoyer quand statut = \"Envoyé\"")
        self.auto_mail_on_status_envoye.setChecked(bool(settings.get("auto_mail_on_status_envoye", False)))
        form.addRow(self.auto_mail_devis)
        form.addRow(self.auto_mail_facture)
        form.addRow(self.auto_mail_on_status_envoye)
        # Auto-email for invoice statuses (Factures)
        self.auto_mail_on_status_relance1 = QCheckBox("Envoyer quand statut = \"Relance 1\"")
        self.auto_mail_on_status_relance1.setChecked(bool(self.settings.get("auto_mail_on_status_relance1", False)))
        self.auto_mail_on_status_relance2 = QCheckBox("Envoyer quand statut = \"Relance 2\"")
        self.auto_mail_on_status_relance2.setChecked(bool(self.settings.get("auto_mail_on_status_relance2", False)))
        self.auto_mail_on_status_payee = QCheckBox("Envoyer quand statut = \"Payée\"")
        self.auto_mail_on_status_payee.setChecked(bool(self.settings.get("auto_mail_on_status_payee", False)))
        form.addRow(self.auto_mail_on_status_relance1)
        form.addRow(self.auto_mail_on_status_relance2)
        form.addRow(self.auto_mail_on_status_payee)
        
        # Confirmation globale
        self.chk_confirm = QCheckBox("Toujours demander confirmation avant envoi")
        self.chk_confirm.setChecked(bool(self.settings.get("confirm_before_any_email_send", True)))
        form.addRow(self.chk_confirm)
        self.auto_mail_bcc = QLineEdit(settings.get("auto_mail_bcc",""))
        form.addRow("BCC", self.auto_mail_bcc)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        lbl_bcc_help = QLabel("Le champ Bcc (copie invisible) vous permet de recevoir une copie ou d'en envoyer une à un collègue\n"
                              "sans que le client ne voie cette adresse. Laissez vide si vous n'en avez pas besoin.")
        lbl_bcc_help.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(lbl_bcc_help)
        self.lbl_templates = QLabel("— Modèles d'emails —"); form.addRow(self.lbl_templates)
        # --- Devis (simple) ---
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        # --- Facture (simple) ---
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        # --- Modèles supplémentaires ---
        self.tpl_subject_devis_demande_acompte = QLineEdit(self.settings.get("tpl_subject_devis_demande_acompte","Demande d’acompte – Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis_demande_acompte = QTextEdit(self.settings.get("tpl_body_devis_demande_acompte","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}.\n\nConformément à nos échanges, un acompte de {ACOMPTE} TTC est requis pour valider la commande et réserver la prestation.\nMerci d’effectuer le règlement par virement en rappelant la référence {DOC_NUM}.\nÀ réception de l’acompte, nous vous adressons la confirmation. Le solde ({RESTANT_DU}) sera facturé à l’achèvement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis (demande d’acompte)", self.tpl_subject_devis_demande_acompte)
        form.addRow("Message Devis (demande d’acompte)", self.tpl_body_devis_demande_acompte)
        self.tpl_subject_facture_acompte = QLineEdit(self.settings.get("tpl_subject_facture_acompte","Facture d’acompte {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_acompte = QTextEdit(self.settings.get("tpl_body_facture_acompte","Veuillez trouver ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, correspondant à l’acompte de votre commande.\n\nMontant de l’acompte (TTC) : {TOTAL_TTC}.\nLe solde sera facturé à l’achèvement de la prestation.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture d’acompte", self.tpl_subject_facture_acompte)
        form.addRow("Message Facture d’acompte", self.tpl_body_facture_acompte)
        self.tpl_subject_relance_facture_1 = QLineEdit(self.settings.get("tpl_subject_relance_facture_1","Relance – Facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_relance_facture_1 = QTextEdit(self.settings.get("tpl_body_relance_facture_1","Sauf erreur de notre part, le règlement de la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}) n’a pas encore été enregistré. Si vous l’avez déjà effectué, merci d’ignorer ce message ou de nous transmettre le justificatif.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Relance 1 (facture)", self.tpl_subject_relance_facture_1)
        form.addRow("Message Relance 1 (facture)", self.tpl_body_relance_facture_1)
        self.tpl_subject_relance_facture_2 = QLineEdit(self.settings.get("tpl_subject_relance_facture_2","Relance 2 – Facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_relance_facture_2 = QTextEdit(self.settings.get("tpl_body_relance_facture_2","Il s’agit d’une seconde relance concernant la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}). Nous vous remercions d’effectuer le paiement dans les meilleurs délais. À défaut de retour, nous appliquerons les conditions prévues au contrat.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Relance 2 (facture)", self.tpl_subject_relance_facture_2)
        form.addRow("Message Relance 2 (facture)", self.tpl_body_relance_facture_2)
        self.tpl_subject_facture_paye = QLineEdit(self.settings.get("tpl_subject_facture_paye","Facture {DOC_NUM} acquittée – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_paye = QTextEdit(self.settings.get("tpl_body_facture_paye","Pour suivi, ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, acquittée. Merci pour votre règlement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture acquittée", self.tpl_subject_facture_paye)
        form.addRow("Message Facture acquittée", self.tpl_body_facture_paye)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        self.lbl_templates = QLabel("— Modèles d\'emails —")
        form.addRow(self.lbl_templates)
        # --- Devis (simple) ---
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        # --- Facture (simple) ---
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        self.btn_test = QPushButton("Tester SMTP")
        self.btn_open = QPushButton("Ouvrir data")
        self.btn_backup = QPushButton("Sauvegarde .zip")
        self.btn_save = QPushButton("Enregistrer")
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        btns = QHBoxLayout()
        btns.addWidget(self.btn_test); btns.addWidget(self.btn_open); btns.addWidget(self.btn_backup); btns.addWidget(self.btn_save)
        v.addLayout(btns)
        self.btn_test.clicked.connect(self._on_test_smtp)
        self.btn_open.clicked.connect(self._on_open_data)
        self.btn_backup.clicked.connect(self._on_backup)
        
        # --- Dédoublonnage visuel des modèles (garde la dernière occurrence) ---
        try:
            titles = {
                "Sujet Devis","Message Devis",
                "Sujet Facture","Message Facture",
                "Sujet Demande d'acompte","Message Demande d'acompte",
                "Sujet Facture d'acompte","Message Facture d'acompte",
                "Sujet Relance 1 (facture)","Message Relance 1 (facture)",
                "Sujet Relance 2 (facture)","Message Relance 2 (facture)",
                "Sujet Facture acquittée","Message Facture acquittée"
            }
            seen=set()
            for r in range(form.rowCount()-1, -1, -1):
                li = form.itemAt(r, QFormLayout.LabelRole)
                fi = form.itemAt(r, QFormLayout.FieldRole)
                lbl = li.widget() if li else None
                txt = lbl.text() if lbl else ""
                if txt in titles:
                    if txt in seen:
                        if fi and fi.widget(): fi.widget().hide()
                        if lbl: lbl.hide()
                    else:
                        seen.add(txt)
        except Exception:
            pass
        self.btn_save.clicked.connect(self._on_save)
    def _on_test_smtp(self):
        res = test_smtp(self._collect())
        QMessageBox.information(self, "SMTP", res)
    def _on_open_data(self):
        try:
            from PyQt5 import QtGui, QtCore
            _open_file_async(DATA_DIR)
        except Exception as e:
            QMessageBox.warning(self, "Ouvrir data", f"Impossible d\'ouvrir le dossier: {e}")
    def _on_backup(self):
        try:
            name = zip_backup()
            QMessageBox.information(self, "Sauvegarde", f"Archive créée: {name}")
        except Exception as e:
            QMessageBox.critical(self, "Sauvegarde", f"Echec: {e}")
    def _on_save(self):
        s = self._collect()
        ok = save_settings(s)
        QMessageBox.information(self, "Paramètres", "Enregistré." if ok else "Erreur de sauvegarde.")
    def _collect(self) -> Dict:
        # merge into a copy to keep other settings intact
        s = dict(self.settings)
        s.update({
            "smtp_host": self.smtp_host.text().strip(),
            "smtp_port": int(_safe_float(self.smtp_port.text(), 587)),
            "smtp_user": self.smtp_user.text().strip(),
            "smtp_pass": self.smtp_pass.text().strip(),
            "smtp_tls": bool(self.smtp_tls.isChecked()),
            "smtp_ssl": bool(self.smtp_ssl.isChecked()),
            "auto_mail_devis": bool(self.auto_mail_devis.isChecked()),
            "auto_mail_facture": bool(self.auto_mail_facture.isChecked()),
            "auto_mail_on_status_envoye": bool(self.auto_mail_on_status_envoye.isChecked()),
            "auto_mail_on_status_relance1": bool(self.auto_mail_on_status_relance1.isChecked()),
            "auto_mail_on_status_relance2": bool(self.auto_mail_on_status_relance2.isChecked()),
            "auto_mail_on_status_payee": bool(self.auto_mail_on_status_payee.isChecked()),
            "auto_mail_bcc": self.auto_mail_bcc.text().strip(),
            "tpl_subject_devis": self.tpl_subject_devis.text().strip(),
            "tpl_body_devis": self.tpl_body_devis.toPlainText().strip(),
            "tpl_subject_facture": self.tpl_subject_facture.text().strip(),
            "tpl_body_facture": self.tpl_body_facture.toPlainText().strip(),
            
            "tpl_subject_devis_demande_acompte": self.tpl_subject_devis_demande_acompte.text().strip(),
            "tpl_body_devis_demande_acompte": self.tpl_body_devis_demande_acompte.toPlainText().strip(),
            "tpl_subject_facture_acompte": self.tpl_subject_facture_acompte.text().strip(),
            "tpl_body_facture_acompte": self.tpl_body_facture_acompte.toPlainText().strip(),
            "tpl_subject_relance_facture_1": self.tpl_subject_relance_facture_1.text().strip(),
            "tpl_body_relance_facture_1": self.tpl_body_relance_facture_1.toPlainText().strip(),
            "tpl_subject_relance_facture_2": self.tpl_subject_relance_facture_2.text().strip(),
            "tpl_body_relance_facture_2": self.tpl_body_relance_facture_2.toPlainText().strip(),
            "tpl_subject_facture_paye": self.tpl_subject_facture_paye.text().strip(),
            "tpl_body_facture_paye": self.tpl_body_facture_paye.toPlainText().strip(),"confirm_before_any_email_send": bool(self.chk_confirm.isChecked()),
        })
        self.settings.update(s)
        return s
# --- Small UI helper: refresh all tabs automatically ---
def refresh_all_tabs(widget):
    
    try:
        from PyQt5.QtWidgets import QTabWidget, QApplication
        tabs = None
        # 1) Walk up the parent chain to find a QTabWidget or a container that has one
        p = widget
        while p is not None and tabs is None:
            if isinstance(p, QTabWidget):
                tabs = p
                break
            cand = None
            try:
                cand = p.findChild(QTabWidget)
            except Exception:
                cand = None
            if cand:
                tabs = cand
                break
            p = p.parent() if hasattr(p, "parent") else None
        # 2) Fallback: search top-level widgets
        if tabs is None:
            try:
                for tlw in QApplication.topLevelWidgets():
                    cand = tlw.findChild(QTabWidget)
                    if cand:
                        tabs = cand
                        break
            except Exception:
                pass
        if not tabs:
            return
        for i in range(tabs.count()):
            w = tabs.widget(i)
            try:
                if hasattr(w, "trigger_refresh"):
                    w.trigger_refresh()
                elif hasattr(w, "refresh"):
                    w.refresh()
            except Exception:
                pass
    except Exception:
        log_error("refresh_all_tabs\n"+__import__('traceback').format_exc())
# ========== DASHBOARD / ACCUEIL (delta minimal, sans dépendances externes) ==========
from typing import List, Dict, Tuple
import os, csv
from datetime import datetime, date, timedelta, timezone
from PyQt5.QtCore import Qt, QEvent, QTimer, QRect, QPoint
from PyQt5.QtGui import QPainter, QPen, QColor, QImage, QPixmap, QFont
from PyQt5.QtWidgets import (QWidget, QLabel, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QFrame, QGroupBox, QTableWidget, QTableWidgetItem, QPushButton, QApplication)
class _MiniChart(QWidget):
    """Petit graphique ligne/aires (CA vs Achats) sans dépendances externes.
    Hotfix: use QPainter.begin/end in a try/finally; guard zero-size; never paint when hidden.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumHeight(160)
        self._series: List[Tuple[str, List[Tuple[datetime,float]]]] = []
        self._margin = 16
    def set_series(self, series: List[Tuple[str, List[Tuple[datetime, float]]]]):
        self._series = series or []
        self.update()
    def paintEvent(self, ev):
        # Do not paint if widget not visible or too small
        r0 = self.rect()
        if not self.isVisible() or r0.width() < 4 or r0.height() < 4:
            return
        p = QPainter()
        try:
            if not p.begin(self):  # explicit begin for stability on Windows
                return
            p.setRenderHint(QPainter.Antialiasing, True)
            r = r0.adjusted(self._margin, self._margin, -self._margin, -self._margin)
            if r.width() < 10 or r.height() < 10:
                p.fillRect(r0, QColor(248, 249, 252))
                return
            # Background
            p.fillRect(r0, QColor(248, 249, 252))
            # x-domain = union de toutes les dates
            xs = []
            for _, arr in (self._series or []):
                xs += [t for (t, _) in arr]
            xs = sorted(set(xs))
            if not xs:
                p.setPen(QPen(QColor(120, 120, 120)))
                p.drawText(r, Qt.AlignCenter, "Aucune donnée")
                return
            x_min, x_max = xs[0], xs[-1]
            def x_to_px(xd: datetime) -> int:
                try:
                    denom = (x_max - x_min).total_seconds()
                    if denom <= 0: return r.left()
                    ratio = (xd - x_min).total_seconds() / denom
                except Exception:
                    ratio = 0.0
                return int(r.left() + max(0.0, min(1.0, ratio)) * r.width())
            # y-domain
            def _sf(v, default=0.0):
                try: return float(v)
                except Exception: return default
            all_y = []
            for _, arr in (self._series or []):
                all_y += [max(0.0, _sf(y, 0.0)) for (_, y) in arr]
            y_max = max(all_y) if all_y else 1.0
            if y_max <= 0: y_max = 1.0
            def y_to_px(yv: float) -> int:
                yv = max(0.0, float(yv))
                return int(r.bottom() - (yv / y_max) * r.height())
            # Grille légère
            grid_pen = QPen(QColor(220, 225, 235)); grid_pen.setStyle(Qt.DashLine)
            p.setPen(grid_pen)
            for i in range(5):
                yy = r.top() + i * r.height() // 4
                p.drawLine(r.left(), yy, r.right(), yy)
            # Séries (couleurs fixes)
            base_colors = [QColor("#0A84FF"), QColor("#10B981")]
            for idx, (label, arr) in enumerate(self._series or []):
                col = base_colors[idx % len(base_colors)]
                p.setPen(QPen(col, 2))
                prev = None
                for (xd, yv) in sorted(arr, key=lambda t: t[0]):
                    pt = QPoint(x_to_px(xd), y_to_px(_sf(yv, 0.0)))
                    if prev is not None:
                        p.drawLine(prev, pt)
                    prev = pt
            # Légende simple
            p.setPen(QPen(QColor(60, 60, 70)))
            f = QFont(p.font()); f.setPointSize(max(9, f.pointSize())); p.setFont(f)
            x = r.left()
            for idx, (label, _) in enumerate(self._series or []):
                col = base_colors[idx % len(base_colors)]
                p.fillRect(QRect(x, r.bottom()+4, 10, 10), col)
                p.drawText(x+14, r.bottom()+14, str(label))
                x += 120
            # Ticks/mois (6 labels max)
            try:
                from datetime import datetime as _dt_
                p.setPen(QPen(QColor(120, 125, 135)))
                # choose ~6 evenly spaced ticks across xs
                tick_count = 6
                step = max(1, len(xs)//tick_count)
                used = 0
                for i in range(0, len(xs), step):
                    used += 1
                    if used > tick_count: break
                    xd = xs[i]
                    xpx = x_to_px(xd)
                    p.drawLine(xpx, r.bottom(), xpx, r.bottom()+4)
                    try:
                        label = xd.strftime('%b')
                    except Exception:
                        label = str(i+1)
                    p.drawText(xpx-10, r.bottom()+16, label)
            except Exception:
                pass
        
        finally:
            if p.isActive():
                p.end()
def _month_starts_last_12(today: date) -> List[date]:
    """Retourne les 12 premiers jours de mois jusqu'à 'today' inclus (ordre croissant)."""
    base = date(today.year, today.month, 1)
    out = []
    y, m = base.year, base.month
    for _ in range(11, -1, -1):
        # compute base - k months
        yy, mm = y, m
        # step backwards by appropriate amount
    # Simpler: rebuild list forward
    out = []
    yy = base.year; mm = base.month
    # Build 12-month window ending at base
    months = []
    for i in range(11, -1, -1):
        # compute base - i months
        total = (base.year * 12 + base.month - 1) - i
        y2 = total // 12
        m2 = total % 12 + 1
        months.append(date(y2, m2, 1))
    return months
class DashboardTab(QWidget):
    """Accueil V2 : Deux grandes cartes (CA, Marge) + deux petites (Achats, Solde YTD), graphique, devis à relancer filtrés."""
    def __init__(self, settings: dict, parent=None):
        super().__init__(parent)
        self.settings = settings or {}
        self.setObjectName("dashboardRoot")
        root = QVBoxLayout(self); root.setContentsMargins(8, 8, 8, 8); root.setSpacing(8)
        # --- Bandeau ---
        self._banner = QWidget(self); self._banner.setObjectName("dashboardBanner"); self._banner.setMinimumHeight(110)
        self._banner.installEventFilter(self); root.addWidget(self._banner)
        # Top bar (actions à droite)
        topbar = QHBoxLayout(); topbar.setSpacing(6); topbar.addStretch(1)
        self.btn_refresh = QPushButton("Actualiser"); self.btn_refresh.clicked.connect(self.refresh)
        topbar.addWidget(self.btn_refresh)
        root.addLayout(topbar)
                # --- KPI Layout V2 (two big on top, two small below) ---
        kpi_grid = QGridLayout(); kpi_grid.setSpacing(8)
        # KPI widgets
        self.kpi_ca_30   = self._make_kpi("CA 30 jours", big=True, icon="cash", route="factures")
        self.kpi_marge_30= self._make_kpi("Marge 30 jours", big=True, icon="chart", route="factures")
        self.kpi_dep_30  = self._make_kpi("Achats 30 jours", big=False, icon="bag", route="urssaf")
        self.kpi_ytd     = self._make_kpi("Solde YTD (CA - Achats)", big=False, icon="chart", route="urssaf")
        # row 0 (big)
        kpi_grid.addWidget(self.kpi_ca_30,    0, 0)
        kpi_grid.addWidget(self.kpi_marge_30, 0, 1)
        # row 1 (small)
        kpi_grid.addWidget(self.kpi_dep_30,   1, 0)
        kpi_grid.addWidget(self.kpi_ytd,      1, 1)
        
        # Hero image on the right (spans 2 rows)
        try:
            from PyQt5.QtCore import Qt
        except Exception:
            pass
        self._hero = QLabel(); self._hero.setObjectName("dashboardHero"); self._hero.installEventFilter(self)
        self._hero.setMinimumSize(320, 200)
        try: self._hero.setAlignment(Qt.AlignCenter)
        except Exception: pass
        try: self._set_hero_pixmap()
        except Exception: pass
        try: self._hero.setScaledContents(True)
        except Exception: pass
        kpi_grid.addWidget(self._hero, 0, 2, 2, 1)
        
        # Stretch
        try:
            kpi_grid.setColumnStretch(0, 1); kpi_grid.setColumnStretch(1, 1); kpi_grid.setColumnStretch(2, 1)
        except Exception:
            pass
        
        root.addLayout(kpi_grid)
        
        # --- Graphique ---
        self.chart = _MiniChart(self); self.chart.setMinimumHeight(180); self.chart.setMaximumHeight(200)
        root.addWidget(self.chart)
        # --- Devis à relancer ---
        box = QGroupBox("Devis à relancer — Envoyé / Demande d'acompte"); vbox = QVBoxLayout(box); vbox.setContentsMargins(8,8,8,8)
        self.tbl_relance = QTableWidget(0, 0, box)
        # === En-tête du tableau "Devis à relancer" (immuable) ===
        try:
            from PyQt5.QtWidgets import QHeaderView
            hdr = self.tbl_relance.horizontalHeader()
            hdr.setSectionsMovable(False)           # interdire drag & drop de colonnes
            hdr.setSectionResizeMode(QHeaderView.Interactive)
            hdr.setStretchLastSection(False)
            self.tbl_relance.verticalHeader().setDefaultSectionSize(24)
            self.tbl_relance.setWordWrap(False)
            self.tbl_relance.setMinimumHeight(300)  # ~10 lignes visibles en 1080p
        except Exception:
            pass
        self.tbl_relance.setAlternatingRowColors(True); self.tbl_relance.setSortingEnabled(True); 
        self.tbl_relance.verticalHeader().setVisible(False)
        self.tbl_relance.setWordWrap(False)
        self.tbl_relance.setMinimumHeight(300)
        try:
            from PyQt5.QtWidgets import QHeaderView
            self.tbl_relance.verticalHeader().setDefaultSectionSize(24)
            self.tbl_relance.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
            self.tbl_relance.horizontalHeader().setStretchLastSection(False)
        except Exception: pass
        self.tbl_relance.cellDoubleClicked.connect(self._goto_devis)
        vbox.addWidget(self.tbl_relance)
        root.addWidget(box)
        self._apply_styles()
        try:
            handler = (getattr(self, '_render_banner_centered', None)
                       or getattr(self, '_style_banner_centered_v2', None)
                       or getattr(self, '_style_banner', None))
            if handler:
                handler()
        except Exception:
            pass
        self.refresh()
    # ---------- UI helpers ----------
    def _apply_styles(self):
        ss = """
        QWidget#dashboardRoot { background: #f8fafc; }
        QWidget#dashboardBanner {
            border-radius: 12px;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #0A84FF, stop:1 #10B981);
        }
        QFrame#kpiCardBig, QFrame#kpiCardSmall {
            border: 1px solid #d7dde6;
            border-radius: 10px;
            background: #ffffff;
        }
        QLabel.kpiTitle { color: #0A1F44; font-weight: 700; }
        QLabel.kpiValue { color: #24303f; }
        QLabel.kpiDelta { color: #169a62; }
        
        QLabel#dashboardHero {
            border: 1px solid #d7dde6;
            border-radius: 10px;
            background: #ffffff;
            padding: 0px;
        }"""
        app = QApplication.instance()
        try:
            if app and (ss not in (app.styleSheet() or "")):
                app.setStyleSheet((app.styleSheet() or "") + "\\n" + ss)
        except Exception: pass
    
    def _render_banner_centered(self):
        """Affiche PJ2 (ChatGPT image) centrée, au-dessus du dégradé; agrandit et place le logo entreprise à gauche.
        Pas de QPainter; deux QLabel enfants du bandeau; z-order élevé avec raise_()."""
        try:
            import os
            from PyQt5.QtCore import Qt
            from PyQt5.QtGui import QPixmap
            from PyQt5.QtWidgets import QLabel
        except Exception:
            return
        if not hasattr(self, "_banner"):
            return
        # Centre: PJ2
        pm_src = _pixmap_from_b64(_AE_BANNER_PNG_B64)
        if not pm_src or pm_src.isNull():
            return
        W = max(1, self._banner.width())
        H = max(1, self._banner.height())
        target_w = max(1, W - 24)
        target_h = max(1, H - 16)
        pm_center = pm_src.scaled(target_w, target_h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        cx = (W - pm_center.width()) // 2
        cy = (H - pm_center.height()) // 2
        center_lbl = getattr(self, "_banner_lbl", None)
        if center_lbl is None:
            center_lbl = QLabel(self._banner)
            center_lbl.setObjectName("bannerImage")
            try:
                center_lbl.setStyleSheet("background: transparent; border: none;")
                center_lbl.setAttribute(Qt.WA_TransparentForMouseEvents, True)
            except Exception:
                pass
            self._banner_lbl = center_lbl
        center_lbl.setPixmap(pm_center)
        center_lbl.setGeometry(max(0, cx), max(0, cy), pm_center.width(), pm_center.height())
        try:
            center_lbl.raise_(); center_lbl.show()
        except Exception:
            pass
        # Gauche: logo entreprise (Paramètres)
        path = ""
        try:
            path = _logo_from_settings(getattr(self, "settings", {}) or {})
        except Exception:
            path = ""
        if path and os.path.exists(path):
            left_lbl = getattr(self, "_banner_left_logo", None)
            if left_lbl is None:
                left_lbl = QLabel(self._banner)
                left_lbl.setObjectName("bannerCompanyLogo")
                try:
                    left_lbl.setStyleSheet("background: transparent; border: none;")
                    left_lbl.setAttribute(Qt.WA_TransparentForMouseEvents, True)
                except Exception:
                    pass
                self._banner_left_logo = left_lbl
            pm_logo = QPixmap(path)
            if pm_logo and not pm_logo.isNull():
                size = max(56, min(int(H * 1.40), 240))
                pm_logo_scaled = pm_logo.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                left_lbl.setPixmap(pm_logo_scaled)
                left_lbl.setGeometry(14, max(8, (H - pm_logo_scaled.height()) // 2), pm_logo_scaled.width(), pm_logo_scaled.height())
                try:
                    left_lbl.raise_(); left_lbl.show()
                except Exception:
                    pass
    def _make_kpi(self, title: str, big: bool, icon: str, route: str):
            w = QFrame(); w.setObjectName("kpiCardBig" if big else "kpiCardSmall")
            w.setFixedHeight(128 if big else 88)
            lay = QHBoxLayout(w); lay.setContentsMargins(10 if big else 8, 10 if big else 8, 10, 8); lay.setSpacing(8)
    
            # Icon placeholder (petit dessin vectoriel simple via QLabel)
            ic = QLabel(); ic.setFixedSize(40 if big else 28, 40 if big else 28); ic.setScaledContents(True)
            try:
                # dessiner une petite icône simple
                pm = QPixmap(ic.width(), ic.height()); pm.fill(Qt.transparent)
                p = QPainter(); 
                if p.begin(pm):
                    p.setRenderHint(QPainter.Antialiasing, True)
                    c1 = QColor("#0A84FF"); c2 = QColor("#10B981")
                    if icon == "cash":
                        p.setBrush(c1); p.setPen(Qt.NoPen); p.drawRoundedRect(4, ic.height()-18, ic.width()-8, 12, 4, 4)
                        p.setBrush(c2); p.drawEllipse(6, 6, 10, 10); p.drawEllipse(ic.width()-16, 6, 10, 10)
                    elif icon == "bag":
                        p.setBrush(c1); p.setPen(Qt.NoPen); p.drawRoundedRect(5, 10, ic.width()-10, ic.height()-14, 6, 6); p.drawRect(9, 6, ic.width()-18, 8)
                    else:  # chart
                        p.setBrush(c2); p.setPen(Qt.NoPen)
                        for i,h in enumerate([10,18,26]):
                            p.drawRect(5+i*8, ic.height()-h-6, 6, h)
                    p.end()
                ic.setPixmap(pm)
            except Exception: pass
    
            body = QVBoxLayout(); body.setSpacing(2)
            t = QLabel(title); t.setObjectName("kpiTitle"); t.setProperty("class","kpiTitle")
            f = t.font(); f.setPointSize(11 if big else 10); f.setBold(True); t.setFont(f)
            v = QLabel("0,00 €"); v.setObjectName("kpiValue"); v.setProperty("class","kpiValue")
            f2 = v.font(); f2.setPointSize(18 if big else 15); v.setFont(f2)
            dlt = QLabel(""); dlt.setObjectName("kpiDelta"); dlt.setProperty("class", "kpiDelta")
            fd = dlt.font(); fd.setPointSize(10); dlt.setFont(fd)
            # sparkline
            sp = QLabel(); sp.setFixedHeight(24); sp.setMinimumWidth(80)
            body.addWidget(t); body.addWidget(v); body.addWidget(dlt); body.addWidget(sp)
            body.addStretch(1)
    
            lay.addWidget(ic); lay.addLayout(body); lay.addStretch(1)
    
            # attach refs
            w._value_label = v
            w._delta_label = dlt
            w._spark_label = sp
            w._route = route
    
            # clic navigue
            w.installEventFilter(self)
            return w
    def _sparkline_pixmap(self, values: list, w: int = 120, h: int = 24) -> QPixmap:
        w = max(w, 60); h = max(h, 20)
        pm = QPixmap(w, h); pm.fill(Qt.transparent)
        p = QPainter()
        try:
            if not p.begin(pm): return pm
            p.setRenderHint(QPainter.Antialiasing, True)
            # border line
            p.setPen(QPen(QColor(230,235,242)))
            for i in range(1,3):
                y = int(h*i/3)
                p.drawLine(0, y, w, y)
            if not values: 
                p.end(); return pm
            ymin = min(values); ymax = max(values); rng = (ymax - ymin) or 1.0
            pts = []
            for i,val in enumerate(values):
                x = int(i * (w-6) / max(1,len(values)-1)) + 3
                y = h-3 - int((val - ymin)/rng * (h-6))
                pts.append((x,y))
            p.setPen(QPen(QColor("#0A84FF"), 2))
            for i in range(1,len(pts)):
                p.drawLine(pts[i-1][0], pts[i-1][1], pts[i][0], pts[i][1])
        finally:
            if p.isActive(): p.end()
        return pm
    # ---------- Data pipeline ----------
    def refresh(self):
        """Recalcule tout + deltas + sparkline."""
        try:
            today = datetime.today().date()
            d30 = today - timedelta(days=30)
            d60 = today - timedelta(days=60)
            y0 = date(today.year, 1, 1)
            # Factures
            facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            ca_30 = ca_prev30 = 0.0
            ca_ytd = 0.0
            monthly_ca = {}
            for r in facts:
                d_iso = _safe_date_str(r.get("date",""))
                if not d_iso: continue
                try: d = datetime.strptime(d_iso, "%Y-%m-%d").date()
                except Exception:
                    try: d = datetime.strptime(r.get("date",""), "%d/%m/%Y").date()
                    except Exception: continue
                ttc = _safe_float(r.get("total_ttc", 0.0), 0.0)
                if d >= d30: ca_30 += ttc
                elif d >= d60: ca_prev30 += ttc
                if d >= y0:  ca_ytd += ttc
                key = date(d.year, d.month, 1)
                monthly_ca[key] = monthly_ca.get(key, 0.0) + ttc
            # Achats (ops/*/admin/achats.csv)
            achats_total_30 = achats_prev30 = 0.0
            achats_ytd = 0.0
            monthly_ach = {}
            ops_root = os.path.join(DATA_DIR, "ops")
            if os.path.isdir(ops_root):
                for root, _dirs, files in os.walk(ops_root):
                    if os.path.basename(root) != "admin": 
                        continue
                    if "achats.csv" not in files:
                        continue
                    path = os.path.join(root, "achats.csv")
                    try:
                        with open(path, "r", encoding="utf-8-sig", newline="") as f:
                            rd = csv.DictReader(f)
                            for rr in rd:
                                d_iso = _safe_date_str(rr.get("date",""))
                                if not d_iso: continue
                                try: d = datetime.strptime(d_iso, "%Y-%m-%d").date()
                                except Exception:
                                    try: d = datetime.strptime(rr.get("date",""), "%d/%m/%Y").date()
                                    except Exception: continue
                                ttc = _safe_float(rr.get("montant_ttc", rr.get("ttc", 0.0)), 0.0)
                                if d >= d30: achats_total_30 += ttc
                                elif d >= d60: achats_prev30 += ttc
                                if d >= y0:  achats_ytd += ttc
                                key = date(d.year, d.month, 1)
                                monthly_ach[key] = monthly_ach.get(key, 0.0) + ttc
                    except Exception:
                        log_error("dashboard_read_achats\\n"+__import__('traceback').format_exc())
            # KPIs values
            marge_30 = max(0.0, ca_30 - achats_total_30)
            marge_prev30 = max(0.0, ca_prev30 - achats_prev30)
            solde_ytd = ca_ytd - achats_ytd
            # Set values
            self.kpi_ca_30._value_label.setText(money(ca_30))
            self.kpi_dep_30._value_label.setText(money(achats_total_30))
            self.kpi_marge_30._value_label.setText(money(marge_30))
            self.kpi_ytd._value_label.setText(money(solde_ytd))
            # Deltas (+/- vs 30 jours précédents)
            def fmt_delta(cur, prev):
                if prev <= 0 and cur > 0: return "▲ +∞% vs 30j"
                if prev == 0: return "0%"
                pct = ((cur - prev) / prev) * 100.0
                sign = "▲" if pct >= 0 else "▼"
                return f"{sign} {pct:+.1f}% vs 30j"
            self.kpi_ca_30._delta_label.setText(fmt_delta(ca_30, ca_prev30))
            self.kpi_dep_30._delta_label.setText(fmt_delta(achats_total_30, achats_prev30))
            self.kpi_marge_30._delta_label.setText(fmt_delta(marge_30, marge_prev30))
            self.kpi_ytd._delta_label.setText("")  # pas de delta YTD pour l'instant
            # Sparklines (12 derniers mois)
            months = _month_starts_last_12(today)
            def series_from_map(mp):
                return [float(mp.get(m, 0.0)) for m in months]
            ca_series = series_from_map(monthly_ca)
            ach_series = series_from_map(monthly_ach)
            self.kpi_ca_30._spark_label.setPixmap(self._sparkline_pixmap(ca_series))
            self.kpi_dep_30._spark_label.setPixmap(self._sparkline_pixmap(ach_series))
            self.kpi_marge_30._spark_label.setPixmap(self._sparkline_pixmap([c-a for c,a in zip(ca_series, ach_series)]))
            self.kpi_ytd._spark_label.setPixmap(self._sparkline_pixmap([]))
            # Graph main chart
            def map_months(mp):
                out = {}
                for m in months:
                    out[date(m.year, m.month, 1)] = float(mp.get(m, 0.0))
                return out
            self.chart.set_series([("CA TTC", [(datetime(m.year,m.month,1), map_months(monthly_ca)[m]) for m in months]),
                                   ("Achats TTC", [(datetime(m.year,m.month,1), map_months(monthly_ach)[m]) for m in months])])
            # Devis filtrés
            self._fill_relances()
        except Exception:
            try: log_error("dashboard_refresh\\n"+__import__('traceback').format_exc())
            except Exception: pass
    # (Filtre devis : Envoyé / Demande d'acompte) — version précédente conservée
    def _fill_relances(self):
        """Tableau "Devis à relancer" conforme aux contraintes.
        - Colonnes strictes et ordre exact (sans extras).
        - Filtre : Statut ∈ {Envoyé, Demande d’acompte} ET non converti en facture.
        - Formats montants/dates ; tri par date décroissante.
        """
        import os, unicodedata
        try:
            from PyQt5.QtWidgets import QTableWidgetItem
            from PyQt5.QtCore import Qt
        except Exception:
            QTableWidgetItem = None
            Qt = None
        target_labels = [
            "N°", "date", "client id", "client", "client prenom", "client adresse",
            "client CP", "Client ville", "client mail", "client tel",
            "statut", "objet", "total ht", "acompte", "total ttc", "date statut"
        ]
        target_widths = [90, 90, 90, 140, 120, 220, 80, 140, 200, 120, 110, 220, 100, 90, 110, 110]
        def _norm_key(s: str) -> str:
            s = (s or "").strip().lower()
            s = unicodedata.normalize("NFKD", s)
            s = "".join(ch for ch in s if not unicodedata.combining(ch))
            s = " ".join(s.split())
            return s
        def _norm_txt(s: str) -> str:
            s = (s or "").strip().lower().replace("’","'")
            s = unicodedata.normalize("NFKD", s)
            s = "".join(ch for ch in s if not unicodedata.combining(ch))
            s = " ".join(s.split())
            return s
        aliases = {
            "n°": {"numero","n°","numéro","no","num","id_devis","code"},
            "date": {"date","date_devis","date_creation"},
            "client id": {"client_id","id_client","clientid","code_client"},
            "client": {"client_nom","client","nom_client","nom"},
            "client prenom": {"client_prenom","prenom","prénom","first_name","firstname"},
            "client adresse": {"client_adresse","adresse","adresse_client","address"},
            "client cp": {"client_cp","cp","code_postal","postal","zip"},
            "client ville": {"client_ville","ville","city","localite","localité"},
            "client mail": {"client_email","email","mail","client_mail","email_client"},
            "client tel": {"client_tel","telephone","tel","téléphone","phone"},
            "statut": {"statut","status","etat","state"},
            "objet": {"objet","description","titre","object","subject"},
            "total ht": {"total_ht","ht","montant_ht"},
            "acompte": {"acompte","avance","deposit"},
            "total ttc": {"total_ttc","ttc","montant_ttc"},
            "date statut": {"date_statut","statut_date","date_derniere_relance","date_relance"},
        }
        aliases = {k: {_norm_key(x) for x in v} for k, v in aliases.items()}
        # Charger tous les devis
        try:
            path_devis = os.path.join(DATA_DIR, CSV_DEVIS)
        except Exception:
            path_devis = os.path.join("data", "data_devis.csv")
        devis_rows = load_csv(path_devis)
        # Table des clés disponibles sur TOUT le CSV (pas seulement filtré)
        available = {}
        for r in devis_rows:
            for k in r.keys():
                nk = _norm_key(k)
                if nk not in available:
                    available[nk] = k
        # Résoudre les colonnes à afficher (ordre exact des libellés)
        chosen_labels, chosen_keys = [], []
        for lab in target_labels:
            aset = aliases.get(lab.lower(), set())
            real = None
            for a in aset:
                if a in available:
                    real = available[a]; break
            if real:
                chosen_labels.append(lab)
                chosen_keys.append(real)
        tbl = self.tbl_relance
        tbl.clear()
        tbl.setSortingEnabled(False)
        tbl.setRowCount(0)
        tbl.setColumnCount(len(chosen_labels))
        tbl.setHorizontalHeaderLabels(chosen_labels)
        def _is_converted(row: dict) -> bool:
            s = str(row.get("converted_to_facture") or "").strip().lower()
            if s in ("", "0", "false", "no", "non", "none", "null"):
                return False
            return True
        def _get_statut(row: dict) -> str:
            for k in ("statut","status","etat","state"):
                if k in row:
                    return str(row.get(k, ""))
            return ""
        # Filtrer
        filtered = []
        for r in devis_rows:
            st = _norm_txt(_get_statut(r))
            if (st.startswith("envoye") or ("demande" in st and "acompte" in st)) and not _is_converted(r):
                filtered.append(r)
        # Déterminer clé réelle de la date
        real_date_key = None
        for a in aliases.get("date", set()):
            if a in available:
                real_date_key = available[a]; break
        def _parse_date(row):
            if not real_date_key:
                return datetime(1970,1,1)
            iso = _safe_date_str(row.get(real_date_key, ""))
            try:
                return datetime.strptime(iso, "%Y-%m-%d")
            except Exception:
                return datetime(1970,1,1)
        filtered.sort(key=_parse_date, reverse=True)
        def _fmt(label: str, raw):
            if raw is None:
                raw = ""
            l = (label or "").lower()
            if l in ("total ht","acompte","total ttc"):
                return money(_safe_float(raw, 0.0))
            if l in ("date","date statut"):
                iso = _safe_date_str(raw)
                return _display_date(iso)
            return str(raw)
        for r in filtered:
            i = tbl.rowCount(); tbl.insertRow(i)
            for ci, (lab, key) in enumerate(zip(chosen_labels, chosen_keys)):
                val = r.get(key, "")
                txt = _fmt(lab, val)
                if QTableWidgetItem is None:
                    continue
                it = QTableWidgetItem(txt)
                if Qt is not None:
                    if lab.lower() in ("total ht","acompte","total ttc"):
                        it.setTextAlignment(Qt.AlignVCenter | Qt.AlignRight)
                    else:
                        it.setTextAlignment(Qt.AlignVCenter | Qt.AlignLeft)
                tbl.setItem(i, ci, it)
        for ci, lab in enumerate(chosen_labels):
            try:
                w = target_widths[target_labels.index(lab)]
            except Exception:
                w = 100
            try:
                tbl.setColumnWidth(ci, w)
            except Exception:
                pass
        try:
            tbl.setSortingEnabled(True)
        except Exception:
            pass
    def _goto_devis(self, row, col):
        """Double-clic → aller dans Devis et sélectionner le n° si possible."""
        try:
            numero_idx = None
            for j in range(self.tbl_relance.columnCount()):
                h = (self.tbl_relance.horizontalHeaderItem(j).text() or "").lower()
                if "num" in h or "n°" in h or "numero" in h:
                    numero_idx = j; break
            num = self.tbl_relance.item(row, numero_idx).text() if numero_idx is not None else None
            mw = self.window(); from PyQt5.QtWidgets import QTabWidget
            tabs = mw.findChild(QTabWidget); 
            if not tabs: return
            dev_idx = None
            for i in range(tabs.count()):
                if "devis" in (tabs.tabText(i) or "").lower():
                    dev_idx = i; break
            if dev_idx is None: return
            tabs.setCurrentIndex(dev_idx)
            dev_w = tabs.widget(dev_idx)
            from PyQt5 import QtWidgets
            tables = dev_w.findChildren(QtWidgets.QTableWidget) or []
            for t in tables:
                header_map = {j:(t.horizontalHeaderItem(j).text().lower() if t.horizontalHeaderItem(j) else "") for j in range(t.columnCount())}
                cand = None
                for j, name in header_map.items():
                    if "num" in name or "n°" in name or "numero" in name:
                        cand = j; break
                if cand is None: continue
                for r in range(t.rowCount()):
                    it = t.item(r, cand)
                    if it and num and (it.text().strip() == num.strip()):
                        t.setCurrentCell(r, cand); t.scrollToItem(it, t.PositionAtCenter); return
        except Exception:
            log_error("dashboard_goto_devis\\n"+__import__('traceback').format_exc())
    def eventFilter(self, obj, ev):
        # redessiner banner
        if obj is self._banner and ev.type() in (QEvent.Resize, QEvent.Show):
            handler = (getattr(self, '_render_banner_centered', None)
                       or getattr(self, '_style_banner_centered_v2', None)
                       or getattr(self, '_style_banner', None))
            if handler:
                QTimer.singleShot(0, handler)
            return False
        if obj is getattr(self, '_hero', None) and ev.type() in (QEvent.Resize, QEvent.Show):
            QTimer.singleShot(0, getattr(self, '_set_hero_pixmap', lambda: None))
            return False
        # clic KPI
        if hasattr(obj, "_route") and ev.type() == QEvent.MouseButtonPress:
            self._on_kpi_clicked(obj._route); return True
        return super().eventFilter(obj, ev)
    def _on_kpi_clicked(self, route: str):
        try:
            from PyQt5.QtWidgets import QTabWidget
            tabs = self.window().findChild(QTabWidget); 
            if not tabs: return
            # route -> tab
            target = None
            if route == "factures":
                key = "facture"
            elif route == "urssaf":
                key = "urssaf"
            else:
                key = route
            for i in range(tabs.count()):
                if key in (tabs.tabText(i) or "").lower():
                    target = i; break
            if target is not None:
                tabs.setCurrentIndex(target)
        except Exception:
            pass
    def _style_banner(self):
        """Compat shim: route vers _render_banner_centered()."""
        try:
            return self._render_banner_centered()
        except Exception:
            return
    def _style_banner_centered_v2(self):
            try:
                return self._render_banner_centered()
            except Exception:
                return
    def eventFilter(self, obj, ev):
            # Redessine le bandeau / le hero sur Show/Resize (une seule implémentation, fiable)
            if obj is getattr(self, "_banner", None) and ev.type() in (QEvent.Resize, QEvent.Show):
                handler = (getattr(self, "_render_banner_centered", None)
                           or getattr(self, "_style_banner_centered_v2", None)
                           or getattr(self, "_style_banner", None))
                if handler:
                    QTimer.singleShot(0, handler)
                return False
            if obj is getattr(self, "_hero", None) and ev.type() in (QEvent.Resize, QEvent.Show):
                QTimer.singleShot(0, getattr(self, "_set_hero_pixmap", lambda: None))
                return False
            # Délègue le reste au parent
            return super().eventFilter(obj, ev)
    def _on_kpi_clicked(self, route: str):
        try:
            from PyQt5.QtWidgets import QTabWidget
            tabs = self.window().findChild(QTabWidget); 
            if not tabs: return
            # route -> tab
            target = None
            if route == "factures":
                key = "facture"
            elif route == "urssaf":
                key = "urssaf"
            else:
                key = route
            for i in range(tabs.count()):
                if key in (tabs.tabText(i) or "").lower():
                    target = i; break
            if target is not None:
                tabs.setCurrentIndex(target)
        except Exception:
            pass
    def _style_banner(self):
        """Compat shim: route vers _render_banner_centered()."""
        try:
            return self._render_banner_centered()
        except Exception:
            return
    def _set_hero_pixmap(self):
        try:
            from PyQt5.QtCore import Qt
            from PyQt5.QtGui import QPixmap
        except Exception:
            return
        pm_src = _pixmap_from_b64(_AE_HERO_PNG_B64)
        if not hasattr(self, "_hero") or pm_src.isNull():
            return
        w = max(1, self._hero.width())
        h = max(1, self._hero.height())
        pm = pm_src.scaled(w, h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        try:
            self._hero.setPixmap(pm)
        except Exception:
            pass
    def _resize_company_logo_left(self, size=80, margin_left=14, margin_top=10):
        """Agrandit un éventuel logo de société placé à gauche du bandeau (si présent).
        On évite de toucher l'image centrée (objectName 'bannerImage')."""
        try:
            from PyQt5.QtWidgets import QLabel
            from PyQt5.QtCore import Qt
        except Exception:
            return
        if not hasattr(self, "_banner"):
            return
        try:
            for w in self._banner.findChildren(QLabel):
                if getattr(w, "objectName", lambda: "")() == "bannerImage":
                    continue
                pm = getattr(w, "pixmap", lambda: None)()
                if pm:
                    try:
                        w.setFixedSize(size, size)
                        w.setScaledContents(True)
                        w.move(margin_left, margin_top)
                        w.raise_()
                        break
                    except Exception:
                        pass
        except Exception:
            pass
            return
        pm_src = _pixmap_from_b64(_AE_HERO_PNG_B64)
        if not hasattr(self, "_hero") or pm_src.isNull():
            return
        w = max(1, self._hero.width())
        h = max(1, self._hero.height())
        pm = pm_src.scaled(w, h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        try:
            self._hero.setPixmap(pm)
        except Exception:
            pass
# ===================== Suivi Financier (lecture seule) =====================
# ===================== _sf_pdf_write_sf_pro (Platypus only) =====================
def _sf_pdf_write_sf_pro(rows, settings, out_path, periode, generated_on, headers):
    """
    Suivi Financier PRO — A4 paysage, marges 12 mm
    - 100% Platypus
    - Couleurs par groupe (facture / coûts / résultats)
    - Pas de zébrage (pour laisser visibles les teintes par colonne)
    - Totaux auto si pas fournis
    """
    from reportlab.lib.pagesizes import A4, landscape
    from reportlab.lib.units import mm
    from reportlab.lib import colors
    from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    import os, unicodedata, re
    # Polices
    FONT_REG, FONT_BOLD = "DejaVuSans", "DejaVuSans-Bold"
    try:
        reg = set(pdfmetrics.getRegisteredFontNames())
        if FONT_REG not in reg:
            for guess in ("DejaVuSans.ttf","/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf","C:/Windows/Fonts/DejaVuSans.ttf"):
                if os.path.exists(guess): pdfmetrics.registerFont(TTFont(FONT_REG, guess)); break
        reg = set(pdfmetrics.getRegisteredFontNames())
        if FONT_BOLD not in reg:
            for guess in ("DejaVuSans-Bold.ttf","/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf","C:/Windows/Fonts/DejaVuSans-Bold.ttf"):
                if os.path.exists(guess): pdfmetrics.registerFont(TTFont(FONT_BOLD, guess)); break
        reg = set(pdfmetrics.getRegisteredFontNames())
        if FONT_REG not in reg or FONT_BOLD not in reg:
            FONT_REG, FONT_BOLD = "Helvetica", "Helvetica-Bold"
    except Exception:
        FONT_REG, FONT_BOLD = "Helvetica", "Helvetica-Bold"
    styles = getSampleStyleSheet()
    sty_h1      = ParagraphStyle("SFTitle",    parent=styles["Heading1"], fontName=FONT_BOLD, alignment=1, fontSize=16, leading=20, spaceAfter=6)
    sty_meta    = ParagraphStyle("SFMeta",     parent=styles["Normal"],   fontName=FONT_REG,  alignment=1, fontSize=9,  leading=12, spaceAfter=0)
    sty_company = ParagraphStyle("SFCompany",  parent=styles["Normal"],   fontName=FONT_REG,  alignment=1, fontSize=9,  leading=12, spaceAfter=6)
    sty_th      = ParagraphStyle("TH",         parent=styles["Normal"],   fontName=FONT_BOLD, alignment=1, fontSize=8,  leading=10, spaceAfter=0)
    sty_td      = ParagraphStyle("TD",         parent=styles["Normal"],   fontName=FONT_REG,  alignment=1, fontSize=9,  leading=11, spaceAfter=0)
    sty_td_tot  = ParagraphStyle("TD_TOTAL",   parent=sty_td,             fontName=FONT_BOLD)
    # Doc
    pagesize = landscape(A4)
    doc = SimpleDocTemplate(out_path, pagesize=pagesize,
                            leftMargin=12*mm, rightMargin=12*mm, topMargin=12*mm, bottomMargin=12*mm,
                            title="Suivi financier", author="AE GESTION")
    avail_w = pagesize[0] - doc.leftMargin - doc.rightMargin
    story = []
    # Logo
    def _find_logo():
        tries = ["data/brand/logo.png","data/brand/logo.jpg","data/brand/logo.jpeg","data/brand/logo.svg",
                 "data/logo.png","data/logo.jpg","data/logo.jpeg","data/logo.svg",
                 "logo.png","logo.jpg","logo.jpeg","logo.svg"]
        for p in tries:
            if os.path.exists(p): return p
        return None
    try:
        lp = _find_logo()
        if lp:
            im = Image(lp, width=30*mm, height=30*mm); im.hAlign="CENTER"
            story.append(im); story.append(Spacer(0, 4*mm))
    except Exception: pass
    # Identité société
    def _safe(v): return "" if v is None else str(v)
    comp = []
    try:
        s = settings or {}
        nom = _safe(s.get("entreprise_nom") or s.get("company_name") or s.get("nom") or s.get("societe"))
        siret = _safe(s.get("entreprise_siret") or s.get("siret"))
        tva = _safe(s.get("entreprise_tva") or s.get("tva") or s.get("tva_intracom"))
        adr = " ".join([_safe(s.get("entreprise_adresse")), _safe(s.get("entreprise_cp")), _safe(s.get("entreprise_ville"))]).strip()
        contact = " • ".join([x for x in [("Tél: " + _safe(s.get("entreprise_tel"))) if s.get("entreprise_tel") else "", _safe(s.get("entreprise_mail"))] if x])
        if nom: comp.append(nom)
        idline = " • ".join([x for x in [("SIRET " + siret) if siret else "", ("TVA " + tva) if tva else ""] if x])
        if idline: comp.append(idline)
        if adr: comp.append(adr)
        if contact: comp.append(contact)
    except Exception: comp = []
    if comp: story.append(Paragraph("<br/>".join(comp), sty_company))
    # Titres
    story.append(Paragraph("SUIVI FINANCIER", sty_h1))
    metas = []
    if periode: metas.append(f"Période : {periode}")
    if generated_on: metas.append(f"Généré le : {generated_on}")
    if metas: story.append(Paragraph(" — ".join(metas), sty_meta))
    story.append(Spacer(0, 4*mm))
    # Colonnes cibles
    CANON = [
        ("operation","Opération","Opération"),
        ("factureno","Facture N°","Facture<br/>N°"),
        ("statut","Statut","Statut"),
        ("totalfactureeur","Total Facture €","Total<br/>Facture €"),
        ("achatseur","Achats €","Achat<br/>€"),
        ("heures","Heures","Heures"),
        ("moeur","MO €","MO<br/>€"),
        ("fraisgenerauxeur","Frais généraux €","Frais<br/>Généraux €"),
        ("camoeurttc","CA MO TTC","CA MO<br/>€ TTC"),
        ("capieceseurttc","CA Pièces TTC","CA Pièces<br/>€ TTC"),
        ("urssafmoeur","URSSAF MO €","URSSAF<br/>MO €"),
        ("urssafpieceseur","URSSAF Pièces €","URSSAF<br/>Pièces €"),
        ("margeeur","Marge €","Marge<br/>€"),
        ("margepct","Marge %","Marge<br/>%"),
    ]
    GROUP_INVOICE = {"factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"}
    GROUP_COSTS   = {"achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"}
    GROUP_RESULT  = {"margeeur","margepct"}
    # Normalisation
    def _norm(s):
        s = "" if s is None else str(s)
        s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
        s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
        return re.sub(r"[^a-z0-9]+","", s)
    # Mapping headers -> index (ignore Achats fichiers)
    header_map = {}
    for idx, h in enumerate(headers or []):
        k = _norm(h)
        if k in ("achatsfichiers","achatsfichier","achatsfiles","fichiersachats"): continue
        alias = {
            "operation":["operation","operationdossier","dossier","op"],
            "factureno":["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
            "statut":["statut","status"],
            "totalfactureeur":["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
            "achatseur":["achatseur","achats","achatsht","achatsct","achatscteur"],
            "heures":["heures","heure","h","nbheures","nbh"],
            "moeur":["moeur","mo","maindoeuvreeur","maindoeuvre"],
            "fraisgenerauxeur":["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
            "camoeurttc":["camoeurttc","camottc","camoeur","camo"],
            "capieceseurttc":["capieceseurttc","capieces","capiecesttc","capiecessettc"],
            "urssafmoeur":["urssafmoeur","urssafmo"],
            "urssafpieceseur":["urssafpieceseur","urssafpieces"],
            "margeeur":["margeeur","marge"],
            "margepct":["margepct","margepourcentage","margepercent","margepc","margepourcent"],
        }
        for canon, al in alias.items():
            if k==canon or k in al:
                if canon not in header_map: header_map[canon]=idx
                break
    # Helpers
    def _row_to_cells(r):
        out = {}
        try:
            if isinstance(r, dict):
                for k,v in r.items(): out[_norm(k)] = "" if v is None else str(v)
            elif isinstance(r, (list,tuple)):
                for i,v in enumerate(r):
                    if headers and i < len(headers): out[_norm(headers[i])] = "" if v is None else str(v)
        except Exception: pass
        return out
    def _parse_num(s):
        try:
            if s is None: return 0.0
            txt = str(s).strip()
            if not txt: return 0.0
            txt = txt.replace("€","").replace("%","").replace(" ", "").replace("\xa0","")
            txt = txt.replace(",", ".")
            return float(txt)
        except Exception:
            return 0.0
    header_row = [Paragraph(lbl_html, sty_th) for _,_,lbl_html in CANON]
    table_data = [header_row]
    numeric_keys = {"totalfactureeur","achatseur","heures","moeur","fraisgenerauxeur","camoeurttc","capieceseurttc","urssafmoeur","urssafpieceseur","margeeur"}
    sums = {k:0.0 for k in numeric_keys}
    have_total = False
    for r in (rows or []):
        d = _row_to_cells(r)
        if not d or all(not str(v).strip() for v in d.values()): 
            continue
        first = ""
        try:
            op_idx = header_map.get("operation")
            if op_idx is not None and headers and op_idx < len(headers):
                first = d.get(_norm(headers[op_idx]), "")
        except Exception: pass
        is_total = str(first).strip().upper()=="TOTAL"
        if is_total: have_total = True
        if not is_total:
            for key in numeric_keys:
                idx = header_map.get(key)
                if idx is not None and headers and idx < len(headers):
                    sums[key] += _parse_num(d.get(_norm(headers[idx]), ""))
        row = []
        for key,_,_ in CANON:
            val=""
            try:
                idx = header_map.get(key)
                if idx is not None and headers and idx < len(headers):
                    val = d.get(_norm(headers[idx]), "")
            except Exception: pass
            row.append(Paragraph(str(val).strip(), sty_td_tot if is_total else sty_td))
        table_data.append(row)
    if not have_total and len(table_data)>1:
        trow = []
        for key,_,_ in CANON:
            if key=="operation":
                trow.append(Paragraph("TOTAL", sty_td_tot))
            elif key in numeric_keys:
                trow.append(Paragraph(f"{sums.get(key,0.0):.2f}", sty_td_tot))
            elif key=="margepct":
                base = sums.get("totalfactureeur",0.0); m = sums.get("margeeur",0.0)
                pct = (m/base*100.0) if base>0 else 0.0
                trow.append(Paragraph(f"{pct:.1f}%", sty_td_tot))
            else:
                trow.append(Paragraph("", sty_td_tot))
        table_data.append(trow)
    # Largeurs
    weights = {"operation":1.4,"factureno":1.0,"statut":0.9,"totalfactureeur":1.1,"achatseur":1.0,
               "heures":0.8,"moeur":0.9,"fraisgenerauxeur":1.1,"camoeurttc":1.1,"capieceseurttc":1.1,
               "urssafmoeur":1.0,"urssafpieceseur":1.0,"margeeur":1.0,"margepct":0.8}
    total_w = sum(weights[k] for k,_,_ in CANON)
    colWidths = [(weights[k]/total_w)*avail_w for k,_,_ in CANON]
    tbl = Table(table_data, colWidths=colWidths, repeatRows=1)
    # Couleurs par groupe
    inv_head  = colors.HexColor('#CDE4FF')  # plus soutenu
    inv_data  = colors.HexColor('#EAF4FF')
    cost_head = colors.HexColor('#FFE08A')
    cost_data = colors.HexColor('#FFF4CC')
    res_head  = colors.HexColor('#BDEDC6')
    res_data  = colors.HexColor('#E7F8EA')
    op_head   = colors.whitesmoke
    total_bg  = colors.Color(0.92,0.92,0.92)
    style_cmds = [
        ('ALIGN',(0,0),(-1,-1),'CENTER'),
        ('VALIGN',(0,0),(-1,-1),'MIDDLE'),
        ('GRID',(0,0),(-1,-1),0.25,colors.grey),
        ('LEFTPADDING',(0,0),(-1,-1),2),
        ('RIGHTPADDING',(0,0),(-1,-1),2),
        ('TOPPADDING',(0,0),(-1,-1),2),
        ('BOTTOMPADDING',(0,0),(-1,-1),2),
    ]
    # Index des colonnes
    col_index = {k:i for i,(k,_,_) in enumerate(CANON)}
    def shade_col(idx, color):
        if len(table_data)>1:
            style_cmds.append(('BACKGROUND',(idx,1),(idx,len(table_data)-1), color))
    # Opération (hors groupe) : header gris
    if 'operation' in col_index:
        i = col_index['operation']
        style_cmds.append(('BACKGROUND',(i,0),(i,0), op_head))
    # Groupes: header + colonnes
    for k in GROUP_INVOICE:
        if k in col_index:
            i = col_index[k]
            style_cmds.append(('BACKGROUND',(i,0),(i,0), inv_head))
            shade_col(i, inv_data)
    for k in GROUP_COSTS:
        if k in col_index:
            i = col_index[k]
            style_cmds.append(('BACKGROUND',(i,0),(i,0), cost_head))
            shade_col(i, cost_data)
    for k in GROUP_RESULT:
        if k in col_index:
            i = col_index[k]
            style_cmds.append(('BACKGROUND',(i,0),(i,0), res_head))
            shade_col(i, res_data)
    # Séparateurs verticaux
    if 'totalfactureeur' in col_index:
        i = col_index['totalfactureeur']
        style_cmds.append(('LINEAFTER',(i,0),(i,-1),0.75,colors.lightgrey))
    if 'urssafpieceseur' in col_index:
        i = col_index['urssafpieceseur']
        style_cmds.append(('LINEAFTER',(i,0),(i,-1),0.75,colors.lightgrey))
    # Ligne TOTAL (qu'elle provienne des données ou ajoutée)
    try:
        for r in range(1, len(table_data)):
            txt = getattr(table_data[r][0], 'text', '')
            if str(txt).strip().upper() == "TOTAL":
                style_cmds.append(('BACKGROUND',(0,r),(-1,r), total_bg))
                style_cmds.append(('LINEABOVE',(0,r),(-1,r), 0.8, colors.black))
    except Exception: pass
    tbl.setStyle(TableStyle(style_cmds))
    story.append(tbl)
    doc.build(story)
class SuiviFinancierTab(QWidget):
    """
    Onglet 'Suivi financier' — lecture seule.
    - 1 ligne = 1 dossier d'opération (ops/<op>)
    - On rattache la meilleure facture à chaque dossier (index + heuristiques).
    - Source factures: DATA_DIR/CSV_FACTS (fallback data/factures.csv)
    - Achats: <op>/admin/achats.csv (ou *achat*.csv fallback)
    - Paramètres: coût horaire MO (€), frais généraux (% CA) — persistés
    - Colonnes: CA TTC, Achats €, Heures, MO €, Frais généraux €, Marge € / %
    """
    HEADERS = [
        "Opération", "Facture N°", "Statut", "Total Facture €",
        "Achats €", "Heures", "MO €", "Frais généraux €", "Marge €", "Marge %", "Achats fichiers"
    ]
    
    # >>> DETAIL VIEW — additional columns (append-only)
    HEADERS_DETAILED = [
        "Opération", "Facture N°", "Statut", "Total Facture €",
        "Achats €", "Heures", "MO €", "Frais généraux €",
        "CA MO TTC", "CA Pièces TTC", "URSSAF MO €", "URSSAF Pièces €",
        "Marge €", "Marge %", "Achats fichiers"
    ]
    def _current_headers(self):
        try:
            if getattr(self, "cb_detail", None) and self.cb_detail.isChecked():
                return self.HEADERS_DETAILED
        except Exception:
            pass
        return self.HEADERS
    def __init__(self, settings:Dict, parent=None):
        super().__init__(parent); self.settings = settings or {}
        self._cfg = self._cfg_load()
        v = QVBoxLayout(self)
        try:
            self.setContentsMargins(0, 0, 0, 0)
            v.setContentsMargins(12, 4, 12, 8)
            v.setSpacing(4)
        except Exception:
            pass
        v.setContentsMargins(12, 4, 12, 8)
        v.setSpacing(4)
        # Top bar
        top = QHBoxLayout(); top.setSpacing(6); v.addLayout(top)
        top.addWidget(QLabel("Coût horaire MO (€):"))
        self.sb_mo = QDoubleSpinBox(); self.sb_mo.setRange(0, 10000); self.sb_mo.setDecimals(2)
        self.sb_mo.setValue(float(self._cfg.get("cout_horaire_mo", 35.0))); top.addWidget(self.sb_mo)
        top.addSpacing(8); top.addWidget(QLabel("Frais généraux (% CA):"))
        self.sb_fg = QDoubleSpinBox(); self.sb_fg.setRange(0, 100); self.sb_fg.setDecimals(1)
        self.sb_fg.setValue(float(self._cfg.get("frais_generaux_pct", 15.0))); top.addWidget(self.sb_fg)
        top.addSpacing(8); 
        # --- Date range filters (append-only) ---
        try:
            top.addSpacing(12); top.addWidget(QLabel("Du :"))
            self.de_from = QDateEdit(); self.de_from.setCalendarPopup(True); self.de_from.setDisplayFormat("dd/MM/yyyy")
            top.addWidget(self.de_from)
            top.addSpacing(6); top.addWidget(QLabel("Au :"))
            self.de_to = QDateEdit(); self.de_to.setCalendarPopup(True); self.de_to.setDisplayFormat("dd/MM/yyyy")
            top.addWidget(self.de_to)
        except Exception:
            pass
        top.addWidget(QLabel("Filtrer statut:"))
        self.cb_statut = QComboBox(); self.cb_statut.addItems(["Tous"]); top.addWidget(self.cb_statut); top.addWidget(QLabel("Type :")); self.cb_type = QComboBox(); self.cb_type.addItems(["Tous","Factures","Devis"]); top.addWidget(self.cb_type)
        self.btn_reload = QPushButton("Recharger")
        self.btn_export_pdf = QPushButton("Export PDF")
        self.btn_export_csv = QPushButton("Export CSV")
        top.addStretch(1); top.addWidget(self.btn_reload); top.addWidget(self.btn_export_pdf); top.addWidget(self.btn_export_csv)
        # >>> DETAIL VIEW — UI additions (append-only)
        try:
            top.addSpacing(10); top.addWidget(QLabel("URSSAF MO (%):"))
            self.sb_ur_mo = QDoubleSpinBox(); self.sb_ur_mo.setRange(0.0, 100.0); self.sb_ur_mo.setDecimals(2)
            self.sb_ur_mo.setValue(float(self._cfg.get("sf_ur_mo_pct", 0.0))); top.addWidget(self.sb_ur_mo)
            top.addSpacing(6); top.addWidget(QLabel("URSSAF Pièces (%):"))
            self.sb_ur_parts = QDoubleSpinBox(); self.sb_ur_parts.setRange(0.0, 100.0); self.sb_ur_parts.setDecimals(2)
            self.sb_ur_parts.setValue(float(self._cfg.get("sf_ur_parts_pct", 0.0))); top.addWidget(self.sb_ur_parts)
            top.addSpacing(12); self.cb_detail = QCheckBox("Vue détaillée"); self.cb_detail.setChecked(bool(self._cfg.get("sf_detail_view", True))); top.addWidget(self.cb_detail)
            None.setChecked(bool(self._cfg.get("sf_invoices_only", True)))
        except Exception:
            pass
        # init dates from cfg or default last 30 days
        try:
            from_dt = self._cfg.get("sf_date_from")
            to_dt = self._cfg.get("sf_date_to")
            if from_dt and isinstance(from_dt, str):
                y,m,d = [int(x) for x in from_dt.split("-")]
                self.de_from.setDate(QDate(y,m,d))
            else:
                self.de_from.setDate(QDate.currentDate().addDays(-30))
            if to_dt and isinstance(to_dt, str):
                y,m,d = [int(x) for x in to_dt.split("-")]
                self.de_to.setDate(QDate(y,m,d))
            else:
                self.de_to.setDate(QDate.currentDate())
        except Exception:
            try:
                self.de_from.setDate(QDate.currentDate().addDays(-30))
                self.de_to.setDate(QDate.currentDate())
            except Exception:
                pass
        # connect date changes
        try:
            self.de_from.dateChanged.connect(self._cfg_changed)
            self.de_to.dateChanged.connect(self._cfg_changed)
            self.de_from.dateChanged.connect(self.trigger_refresh)
            self.de_to.dateChanged.connect(self.trigger_refresh)
        except Exception:
            pass
        except Exception:
            pass
        # Table
        self.table = QTableWidget(0, len(self._current_headers()), self)
        self.table.setHorizontalHeaderLabels(self.HEADERS)
        # --- Look & feel moderne : police, en-têtes lisibles, zébrage (n'altère pas les largeurs)
        try:
            from PyQt5.QtGui import QFont
            from PyQt5.QtCore import Qt
            self.table.setFont(QFont("Segoe UI", 9))
            hdr = self.table.horizontalHeader()
            hdr.setFont(QFont("Segoe UI", 9, QFont.Bold))
            hdr.setDefaultAlignment(Qt.AlignCenter)
            self.table.setAlternatingRowColors(True)
            self.table.setStyleSheet("""
                QTableWidget {
                    alternate-background-color: #f7f7fa;
                    gridline-color: #e0e0e0;
                }
                QHeaderView::section {
                    background-color: #f0f0f5;
                    padding: 6px;
                    border: 0px;
                    border-bottom: 2px solid #c0c0c0;
                }
            """)
        except Exception:
            pass
        self.table.setSortingEnabled(True)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.verticalHeader().setVisible(False)
        try: self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        except Exception: pass
        try: self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        except Exception: pass
        v.addWidget(self.table)
        try:
            v.setAlignment(self.table, Qt.AlignTop | Qt.AlignHCenter)
        except Exception:
            pass
        # Connect
        # >>> DETAIL VIEW — connect (append-only)
        try:
            self.cb_detail.stateChanged.connect(self.trigger_refresh)
        except Exception:
            pass
        try:
            self.sb_ur_mo.valueChanged.connect(self._cfg_changed)
            self.sb_ur_parts.valueChanged.connect(self._cfg_changed)
        except Exception:
            pass
        self.btn_reload.clicked.connect(self._load)
        self.btn_export_pdf.clicked.connect(self._export_pdf)
        self.btn_export_csv.clicked.connect(self._export_csv)
        self.sb_mo.valueChanged.connect(self._cfg_changed)
        self.sb_fg.valueChanged.connect(self._cfg_changed)
        self.cb_statut.currentTextChanged.connect(self._load); 
        try:
            self.cb_type.currentIndexChanged.connect(self._load)
        except Exception:
            pass
        try: self.table.itemDoubleClicked.connect(self._open_op_folder)
        except Exception: pass
        # Initial load
        self._load()
    # API alignée
    def trigger_refresh(self): self._load()
    def refresh(self): self._load()
    # ----------------------- Config persistée -----------------------
    def _cfg_path(self):
        cfg_dir = os.path.join(DATA_DIR, "config"); os.makedirs(cfg_dir, exist_ok=True)
        return os.path.join(cfg_dir, "suivi_financier.json")
    def _cfg_load(self):
        try:
            with open(self._cfg_path(), "r", encoding="utf-8") as f: return json.load(f)
        except Exception: return {"cout_horaire_mo":35.0, "frais_generaux_pct":15.0, "last_status_filter":"Tous",
            "sf_ur_mo_pct": 0.0,
            "sf_ur_parts_pct": 0.0
        ,
            "sf_invoices_only": True, "sf_detail_view": True
        ,
            "sf_date_from": None,
            "sf_date_to": None
        }
    def _cfg_save(self):
        try:
            with open(self._cfg_path(), "w", encoding="utf-8") as f: json.dump(self._cfg, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self._sf_log(f"cfg.save.error={type(e).__name__}:{e}")
    def _cfg_changed(self, *_):
        self._cfg["cout_horaire_mo"] = float(self.sb_mo.value())
        self._cfg["frais_generaux_pct"] = float(self.sb_fg.value())
        try:
            self._cfg["sf_ur_mo_pct"] = float(self.sb_ur_mo.value())
            self._cfg["sf_ur_parts_pct"] = float(self.sb_ur_parts.value())
        except Exception:
            pass
        # persist detailed view enabled
        try:
            self._cfg["sf_detail_view"] = bool(self.cb_detail.isChecked())
        except Exception:
            pass
        # persist date range
        try:
            self._cfg["sf_date_from"] = f"{int(self.de_from.date().year())}-{int(self.de_from.date().month()):02d}-{int(self.de_from.date().day()):02d}"
            self._cfg["sf_date_to"] = f"{int(self.de_to.date().year())}-{int(self.de_to.date().month()):02d}-{int(self.de_to.date().day()):02d}"
        except Exception:
            pass
        self._cfg["last_status_filter"] = self.cb_statut.currentText()
        self._cfg_save(); self._load()
    # --------------------------- Logs ---------------------------
    def _sf_log(self, msg:str):
        try:
            logs = os.path.join(DATA_DIR, "logs"); os.makedirs(logs, exist_ok=True)
            from datetime import datetime as _dt
            with open(os.path.join(logs, "mp_compta.log"), "a", encoding="utf-8") as f:
                f.write(f"{_dt.now().isoformat()} sf.{msg}\n")
            if "_cii_log" in globals():
                try: _cii_log("sf."+msg)
                except Exception: pass
        except Exception: pass
    # -------------------------- Utils --------------------------
    def _num(self, v):
        if v is None: return None
        if isinstance(v, (int, float)): return float(v)
        s = str(v).strip().replace("€","").replace("%","").replace("\\u00A0"," ")
        s = s.replace(" ", "").replace(",", ".")
        import re as _re
        try: return float(_re.sub(r"[^0-9\\.\\-]", "", s))
        except Exception: return None
    def _sf_extract_heures(self, fr: dict) -> float:
        """Extrait les heures de MO d'une facture.
        1) tente des champs directs (heures/duree/nb_heures/temps)
        2) fallback: somme des 'qte' des lignes de facture identifiées comme MO/service.
        """
        try:
            h = self._num((fr or {}).get("heures") or (fr or {}).get("duree") or (fr or {}).get("nb_heures") or (fr or {}).get("temps"))
            if isinstance(h, float) and h > 0:
                return float(h)
        except Exception:
            pass
        # Fallback via lignes de facture
        try:
            numero = ((fr or {}).get("numero") or (fr or {}).get("num") or (fr or {}).get("facture_id") or "").strip()
            if not numero:
                return 0.0
            # chemin du CSV des lignes
            try:
                path = os.path.join(DATA_DIR, CSV_FAC_LIN)
            except Exception:
                path = os.path.join(DATA_DIR, "factures_lignes.csv")
            rows = self._read_csv_rows(path) or []
            tot = 0.0
            for r in rows:
                try:
                    # clés en lower pour tolérance
                    low = { (k or "").lower(): (r.get(k) if hasattr(r,'get') else None) for k in (r.keys() if hasattr(r,'keys') else []) }
                    doc = (low.get("doc_num") or low.get("doc") or low.get("numero") or low.get("num") or low.get("facture") or low.get("facture_numero") or low.get("facture_id") or "").strip()
                    if str(doc) != numero:
                        continue
                    typ = (low.get("type") or "").strip().lower()
                    des = (low.get("designation") or low.get("descr") or "").strip().lower()
                    # heuristique MO
                    is_mo = (typ in ("mo","service","main d'oeuvre","main d’œuvre")) or ("main d" in typ) or ("main d" in des) or ("heure" in des) or (des.endswith(" mo") or des.startswith("mo "))
                    if not is_mo and not ("mo" in des):
                        continue
                    qte = self._num(low.get("qte") or low.get("quantite") or low.get("qty") or low.get("heures") or low.get("duree"))
                    if isinstance(qte, float) and qte > 0:
                        tot += qte
                except Exception:
                    continue
            return float(tot or 0.0)
        except Exception as _e:
            try: self._sf_log(f"heures.fallback.error={type(_e).__name__}:{_e}")
            except Exception: pass
            return 0.0
    def _factures_path(self):
        p = os.path.join(DATA_DIR, CSV_FACTS)
        if os.path.exists(p): return p
        alt = os.path.join(DATA_DIR, "factures.csv")
        return alt if os.path.exists(alt) else p

    def _devis_path(self):
        p = os.path.join(DATA_DIR, CSV_DEVIS)
        if os.path.exists(p): return p
        alt = os.path.join(DATA_DIR, "devis.csv")
        return alt if os.path.exists(alt) else p
    def _read_csv_rows(self, path):
        """Lecture CSV tolérante (détection du délimiteur, fallback UTF-8)."""

        def _basic_read():
            try:
                return load_csv(path)
            except Exception:
                return []

        rows = _basic_read()

        try:
            # Si une seule colonne contenant des séparateurs classiques, on tente une relecture.
            if rows and len(rows[0].keys()) == 1:
                sole = next(iter(rows[0].keys()))
                if any(sep in sole for sep in (';', '\t', '|')):
                    raise ValueError('suspected_delimiter_mismatch')
        except Exception:
            pass

        try:
            import csv as _csv

            with open(path, 'r', encoding='utf-8', newline='') as f:
                sample = f.read(4096)
                f.seek(0)
                try:
                    dialect = _csv.Sniffer().sniff(sample, delimiters=';,\t|')
                    reader = _csv.DictReader(f, dialect=dialect)
                except Exception:
                    f.seek(0)
                    reader = _csv.DictReader(f, delimiter=';')
                rows = [dict(r) for r in reader]
        except Exception:
            rows = _basic_read()

        return rows or []
    def _sf_sanitize(self, s: str) -> str:
        import unicodedata, re as _re

        txt = '' if s is None else str(s)
        txt = unicodedata.normalize('NFKD', txt)
        txt = ''.join(ch for ch in txt if not unicodedata.combining(ch))
        txt = txt.lower().replace('œ', 'oe').replace('€', 'eur')
        return _re.sub(r'[^a-z0-9]+', '', txt)

    def _sf_norm_header(self, s: str) -> str:
        import unicodedata, re as _re

        txt = '' if s is None else str(s)
        txt = unicodedata.normalize('NFKD', txt)
        txt = ''.join(ch for ch in txt if not unicodedata.combining(ch))
        txt = txt.lower().replace('œ', 'oe').replace('€', 'eur').replace('%', 'pct')
        return _re.sub(r'[^a-z0-9]+', '', txt)
    def _sf_is_operation_folder(self, name: str) -> bool:
        import re as _re
        n = (name or '').strip()
        if _re.match(r'^[A-Z]\d{4}-\d{3}$', n):
            return False
        return bool(_re.match(r'^\d{4}-D\d{4}-\d{3}-', n, _re.IGNORECASE))
    def _sum_achats_for_op(self, op_dir):
        total = 0.0; files = []
        try:
            admin_csv = os.path.join(op_dir, "admin", "achats.csv")
            devis_csv = os.path.join(op_dir, "admin", "devis_fournisseurs.csv")
            targets = [admin_csv, devis_csv]
            import glob as _glob
            targets += sorted(_glob.glob(os.path.join(op_dir, "*achat*.csv")))
            targets += sorted(_glob.glob(os.path.join(op_dir, "**", "devis_fournisseurs.csv"), recursive=True))
            targets += sorted(_glob.glob(os.path.join(op_dir, "**", "*devis*fourni*.csv"), recursive=True))
            targets += sorted(_glob.glob(os.path.join(op_dir, "*achats*.csv")))
            seen=set()
            for p in targets:
                if not os.path.exists(p):
                    continue
                fn = os.path.relpath(p, op_dir).replace("\\\\", "/")
                if fn in seen:
                    continue
                seen.add(fn)
                files.append(fn)
                rows = self._read_csv_rows(p)
                if not rows:
                    continue
                headers = list(rows[0].keys())
                norm_map = {self._sf_norm_header(h): h for h in headers}
                best = None
                priority = [
                    "montantttc", "montanttotalttc", "totalttc", "totalttceur",
                    "prixttc", "prixtotalttc", "montantttceur", "totalgeneralttc",
                    "montanttcc", "montantttcnet", "montantttcbrut"
                ]
                for key in priority:
                    if key in norm_map:
                        best = norm_map[key]
                        break
                if not best:
                    for norm_key, original in norm_map.items():
                        if "ttc" in norm_key and any(tok in norm_key for tok in ("montant", "total", "prix")):
                            best = original
                            break
                if not best:
                    for norm_key, original in norm_map.items():
                        if norm_key in ("montant", "total", "prixtotal"):
                            best = original
                            break
                if best:
                    for r in rows:
                        val = self._num(r.get(best))
                        if isinstance(val, float):
                            total += val
                    continue
                for r in rows:
                    for v in r.values():
                        nv = self._num(v)
                        if isinstance(nv, float):
                            total += nv
        except Exception as e:
            self._sf_log(f"achats.sum.error={type(e).__name__}:{e}")
        return total, ", ".join(files)
    def _sf_build_invoice_index(self, factures_rows, op_dirs=None):
        """Construit un index op_label -> [factures] avec heuristiques élargies."""
        ops_root = os.path.join(DATA_DIR, "ops")
        if op_dirs is None:
            try:
                op_dirs = [d for d in os.listdir(ops_root) if os.path.isdir(os.path.join(ops_root, d))]
            except Exception:
                op_dirs = []

        sanitize = self._sf_sanitize
        norm_ops = {sanitize(op): op for op in op_dirs or [] if sanitize(op)}
        index = {}
        for fr in factures_rows:
            try:
                numero = (fr.get("numero") or fr.get("num") or fr.get("facture_id") or "").strip()
                if not numero:
                    continue

                op_label = None
                reason = None

                # 1) colonnes explicites
                for key in ("operation", "op", "dossier", "op_id", "operation_id", "op_dossier"):
                    val = (fr.get(key) or "").strip()
                    if val and os.path.isdir(os.path.join(ops_root, val)):
                        op_label = val
                        reason = f"csv:{key}"
                        break

                # 2) correspondance via colonnes de référence (doc_reference, objet, ...)
                if not op_label and norm_ops:
                    def _candidates():
                        keys = (
                            "doc_reference", "reference", "ref", "objet",
                            "chantier", "chantier_ref", "chantier_reference",
                            "project", "project_reference", "operation_label",
                            "operation_name"
                        )
                        for k in keys:
                            val = fr.get(k)
                            if not val:
                                continue
                            yield val

                    def _tokenize(text):
                        parts = [text]
                        for sep in (';', '|', '\n'):
                            new = []
                            for part in parts:
                                new.extend(part.split(sep))
                            parts = new
                        tokens = []
                        for part in parts:
                            for chunk in part.replace('\r', ' ').split(' '):
                                if chunk:
                                    tokens.append(chunk)
                        return tokens

                    for raw in _candidates():
                        for tok in _tokenize(str(raw)):
                            norm = sanitize(tok)
                            if not norm:
                                continue
                            if norm in norm_ops:
                                op_label = norm_ops[norm]
                                reason = "ref"
                                break
                            for norm_op, original in norm_ops.items():
                                if norm_op and (norm_op in norm or norm in norm_op):
                                    op_label = original
                                    reason = "ref~"
                                    break
                            if op_label:
                                break
                        if op_label:
                            break

                # 3) infra existante
                if not op_label:
                    try:
                        doc = assemble_doc("facture", numero)
                        op_dir = _op_base_dir_from_doc(doc, "facture")
                        if op_dir and os.path.isdir(op_dir):
                            op_label = os.path.basename(op_dir)
                            reason = "infra"
                    except Exception:
                        op_label = None

                # 4) heuristique numéro ↔ nom de dossier
                if not op_label:
                    target = sanitize(numero)
                    if target:
                        try:
                            for d in (op_dirs or []):
                                dn = sanitize(d)
                                if not dn:
                                    continue
                                if target in dn or dn in target:
                                    op_label = d
                                    reason = "heuristic"
                                    break
                        except Exception:
                            pass
                        if not op_label:
                            try:
                                for d in os.listdir(ops_root):
                                    dn = sanitize(d)
                                    if target in dn or dn in target:
                                        op_label = d
                                        reason = "heuristic"
                                        break
                            except Exception:
                                pass

                if not op_label:
                    continue

                fr["_sf_match_reason"] = reason or "?"
                index.setdefault(op_label, []).append(fr)
            except Exception as e:
                self._sf_log(f"index.row.error={type(e).__name__}:{e}")
        return index

    def _sf_build_devis_index(self, devis_rows, op_dirs=None):
        """Construit un index op_label -> [devis] (heuristiques similaires aux factures)."""
        ops_root = os.path.join(DATA_DIR, "ops")
        if op_dirs is None:
            try:
                op_dirs = [d for d in sorted(os.listdir(ops_root)) if os.path.isdir(os.path.join(ops_root, d))]
            except Exception:
                op_dirs = []
        def sanitize(x): 
            return self._sf_sanitize(x)
        norm_ops = {sanitize(op): op for op in op_dirs or [] if sanitize(op)}
        index = {}
        for dv in devis_rows or []:
            try:
                ref = (dv.get("numero") or dv.get("num") or dv.get("devis_id") or "").strip()
                if not ref:
                    continue
                op_label = None
                reason = None
                # explicite
                for key in ("operation", "op", "dossier", "op_id", "operation_id", "op_dossier"):
                    val = (dv.get(key) or "").strip()
                    if val and os.path.isdir(os.path.join(ops_root, val)):
                        op_label = val; reason = f"csv:{key}"; break
                # heuristiques par ref/objet
                if not op_label and norm_ops:
                    for key in ("doc_reference","reference","ref","objet","chantier","project","operation_label"):
                        val = (dv.get(key) or "").strip()
                        if not val: continue
                        target = sanitize(val)
                        for norm, original in norm_ops.items():
                            if target in norm or norm in target:
                                op_label = original; reason = "heuristic"; break
                        if op_label: break
                # fallback scan
                if not op_label:
                    try:
                        target = sanitize(ref)
                        for d in os.listdir(ops_root):
                            dn = sanitize(d)
                            if target in dn or dn in target:
                                op_label = d; reason = "heuristic"; break
                    except Exception:
                        pass
                if not op_label:
                    continue
                dv["_sf_match_reason"] = reason or "?"
                index.setdefault(op_label, []).append(dv)
            except Exception as e:
                self._sf_log(f"devis.index.row.error={type(e).__name__}:{e}")
        return index
    def _sf_pick_invoice_for_op(self, frs_for_op):
        """Choisit la 'meilleure' facture pour un dossier (si plusieurs)."""
        if not frs_for_op:
            return None, "none"
        def score(fr):
            reason = fr.get("_sf_match_reason") or ""
            pri = 3 if str(reason).startswith("csv") else 2 if reason == "infra" else 1
            d = (fr.get("date") or fr.get("date_facture") or "")
            import re as _re
            val = 0
            m = _re.search(r"(20\\d{2})[-/](\\d{1,2})[-/](\\d{1,2})", d or "")
            if m:
                try: val = int(f"{int(m.group(1)):04d}{int(m.group(2)):02d}{int(m.group(3)):02d}")
                except Exception: val = 0
            num = (fr.get("numero") or fr.get("num") or fr.get("facture_id") or "")
            nval = int(_re.sub(r"\\D", "", num)) if _re.search(r"\\d", num or "") else 0
            return (pri, val, nval)
        frs_for_op.sort(key=score, reverse=True)
        chosen = frs_for_op[0]
        return chosen, chosen.get("_sf_match_reason") or "?"

    def _sf_pick_devis_for_op(self, dvs_for_op):
        """Choisit le 'meilleur' devis pour un dossier (si plusieurs)."""
        if not dvs_for_op:
            return None, "none"
        def score(dv):
            d = (dv.get("date") or dv.get("date_devis") or "").strip()
            import re as _re
            val = 0
            m = _re.search(r"(20\d{2})[-/](\d{1,2})[-/](\d{1,2})", d or "")
            if m:
                try: val = int(f"{int(m.group(1)):04d}{int(m.group(2)):02d}{int(m.group(3)):02d}")
                except Exception: val = 0
            num = (dv.get("numero") or dv.get("num") or dv.get("devis_id") or "")
            nval = int(_re.sub(r"\D", "", num)) if _re.search(r"\d", num or "") else 0
            return (val, nval)
        dvs_for_op.sort(key=score, reverse=True)
        chosen = dvs_for_op[0]
        return chosen, chosen.get("_sf_match_reason") or "?"
    # --------------------------- Load ---------------------------
    # >>> DETAIL VIEW — helper to split CA TTC into MO vs Pieces (append-only)
    def _sf_extract_heures_devis(self, dv: dict) -> float:
        try:
            h = self._num((dv or {}).get("heures") or (dv or {}).get("duree") or (dv or {}).get("nb_heures") or (dv or {}).get("temps"))
            if isinstance(h, float) and h > 0:
                return float(h)
        except Exception:
            pass
        try:
            numero = ((dv or {}).get("numero") or (dv or {}).get("num") or (dv or {}).get("devis_id") or "").strip()
            if not numero:
                return 0.0
            try:
                path = os.path.join(DATA_DIR, CSV_DEV_LIN)
            except Exception:
                path = os.path.join(DATA_DIR, "devis_lignes.csv")
            rows = self._read_csv_rows(path) or []
            tot = 0.0
            for r in rows:
                try:
                    low = { (k or "").lower(): (r.get(k) if hasattr(r,'get') else None) for k in (r.keys() if hasattr(r,'keys') else []) }
                    doc = (low.get("doc_num") or low.get("doc") or low.get("reference") or low.get("ref") or low.get("devis") or low.get("devis_numero") or "").strip()
                    if str(doc) != numero:
                        continue
                    typ = (low.get("type") or "").strip().lower()
                    des = (low.get("designation") or low.get("descr") or "").strip().lower()
                    is_mo = (typ in ("mo","service","main d'oeuvre","main d’œuvre")) or ("heure" in des) or des.endswith(" mo") or des.startswith("mo ")
                    if not is_mo and ("mo" not in des):
                        continue
                    qte = self._num(low.get("qte") or low.get("quantite") or low.get("qty") or low.get("heures") or low.get("duree"))
                    if isinstance(qte, float) and qte > 0:
                        tot += qte
                except Exception:
                    continue
            return float(tot or 0.0)
        except Exception:
            return 0.0

    def _sf_ca_split_from_devis(self, dv: dict, op_path: str = None) -> tuple:
        try:
            from decimal import Decimal, ROUND_HALF_UP, getcontext
            import csv, re, unicodedata
            getcontext().prec = 28
            def D(x):
                if x is None: return Decimal('0')
                s = str(x).replace('\u00A0',' ').replace('€','').replace('%','').strip()
                s = s.replace(' ','').replace(',','.')
                m = re.search(r"-?\d+(?:\.\d+)?", s)
                if not m: return Decimal('0')
                try: return Decimal(m.group(0))
                except Exception: return Decimal('0')
            def sanitize(x):
                s = unicodedata.normalize('NFKD', str(x or '')).encode('ascii','ignore').decode('ascii').lower().strip()
                return re.sub(r'[^a-z0-9]+',' ', s)
            def is_mo_type(t, d):
                tt, dd = sanitize(t), sanitize(d)
                mo_toks = ("mo","main d oeuvre","service","pose","installation","diagnostic","maintenance","intervention","atelier","reglage","parametrage","configuration","deplacement","assistance")
                if any(tok in tt for tok in mo_toks): return True
                if any(tok in dd for tok in mo_toks): return True
                if any(u in (tt+' '+dd) for u in (" h"," heure"," heures"," hr"," hrs")): return True
                return False
            numero = ((dv or {}).get("numero") or (dv or {}).get("num") or (dv or {}).get("devis_id") or "").strip()
            if not numero:
                return (0.0, 0.0)
            base_dir = DATA_DIR if 'DATA_DIR' in globals() else os.path.join(os.getcwd(),'data')
            fp_lines = os.path.join(base_dir, 'data_devis_lignes.csv')
            mo, pieces = Decimal('0'), Decimal('0')
            used = False
            if os.path.exists(fp_lines):
                with open(fp_lines, 'r', encoding='utf-8', newline='') as f:
                    reader = csv.DictReader(f, delimiter=',')
                    for r in reader:
                        if str(r.get('doc_num','')).strip() != numero:
                            continue
                        used = True
                        qty   = D(r.get('qte') or r.get('qty') or '1')
                        pu_ht = D(r.get('pu_ht') or r.get('prix_ht') or '0')
                        ht    = D(r.get('total_ht') or r.get('ht') or '0')
                        tva   = D(r.get('tva') or r.get('tva_pct') or '0')
                        ttc   = D(r.get('ttc') or r.get('total_ttc') or r.get('montant_ttc') or '0')
                        if ttc == 0:
                            base_ht = ht if ht != 0 else (pu_ht*qty)
                            frac = (tva/Decimal('100')) if tva > 1 else tva
                            ttc = base_ht * (Decimal('1') + frac)
                        if is_mo_type(r.get('type',''), r.get('designation','')):
                            mo += ttc
                        else:
                            pieces += ttc
            if used:
                q = Decimal('0.01')
                return (float(mo.quantize(q, rounding=ROUND_HALF_UP)), float(pieces.quantize(q, rounding=ROUND_HALF_UP)))
            return (0.0, 0.0)
        except Exception as e:
            try: self._sf_log(f"sf.ca.split.devis.error={type(e).__name__}:{e}")
            except Exception: pass
            return (0.0, 0.0)

    def _sf_ca_split_from_lines(self, fr: dict, op_path: str = None) -> tuple:
        """
        Scinde le CA TTC d'une facture en deux bacs: (MO TTC, Pièces TTC).
        Source prioritaire: data/data_factures_lignes.csv (séparateur virgule).
        Fallbacks inchangés si fichier absent. Tolérant aux nombres (virgule/point, symbole €).
        AUCUN impact UI/onglets.
        """
        try:
            from decimal import Decimal, ROUND_HALF_UP, getcontext
            import csv, os, re, unicodedata
            getcontext().prec = 28
            def D(x):
                if x is None: return Decimal('0')
                s = str(x).replace('\u00A0',' ').replace('€','').replace('%','').strip()
                s = s.replace(' ','').replace(',','.')
                m = re.search(r"-?\d+(?:\.\d+)?", s)
                return Decimal(m.group(0)) if m else Decimal('0')
            def is_mo_type(typ, des):
                # Normalisation légère
                def norm(t):
                    t = unicodedata.normalize('NFKD', str(t or '').lower())
                    t = ''.join(ch for ch in t if not unicodedata.combining(ch))
                    t = t.replace('œ','oe').replace('’',"'")
                    return re.sub(r'\s+',' ', t).strip()
                t = norm(typ); d = norm(des)
                if t in {'mo','m o','main d oeuvre','main d-oeuvre','main d\' oeuvre','main d\'oeuvre','main-doeuvre','main doeuvre','main-oeuvre'}:
                    return True
                if 'main d oeuvre' in d or 'main d\'oeuvre' in d or 'main d-oeuvre' in d:
                    return True
                if d.startswith('mo -') or ' heure' in d or ' h ' in f' {d} ':
                    return True
                if any(k in d for k in ('pose','install','montage','demontage','diagnostic','reparation','réparation','maintenance')):
                    return True
                return False
            numero = (fr.get('numero') or fr.get('num') or fr.get('facture_id') or '').strip()
            if not numero:
                return (0.0, 0.0)
            base_dir = DATA_DIR if 'DATA_DIR' in globals() else os.path.join(os.getcwd(),'data')
            fp_lines = os.path.join(base_dir, 'data_factures_lignes.csv')
            mo, pieces = Decimal('0'), Decimal('0')
            used = False
            if os.path.exists(fp_lines):
                with open(fp_lines, 'r', encoding='utf-8', newline='') as f:
                    reader = csv.DictReader(f, delimiter=',')
                    for r in reader:
                        if str(r.get('doc_num','')).strip() != numero:
                            continue
                        used = True
                        qty   = D(r.get('qte') or r.get('qty') or '1')
                        pu_ht = D(r.get('pu_ht') or r.get('prix_ht') or '0')
                        ht    = D(r.get('total_ht') or r.get('ht') or '0')
                        tva   = D(r.get('tva') or r.get('tva_pct') or '0')
                        ttc   = D(r.get('ttc') or r.get('total_ttc') or r.get('montant_ttc') or '0')
                        if ttc == 0:
                            base_ht = ht if ht != 0 else (pu_ht*qty)
                            frac = (tva/Decimal('100')) if tva > 1 else tva
                            ttc = base_ht * (Decimal('1') + frac)
                        if is_mo_type(r.get('type',''), r.get('designation','')):
                            mo += ttc
                        else:
                            pieces += ttc
            if used:
                # Arrondi final uniquement
                q = Decimal('0.01')
                return (float(mo.quantize(q, rounding=ROUND_HALF_UP)), float(pieces.quantize(q, rounding=ROUND_HALF_UP)))
            # Fallback historique: on ne touche pas (compat legacy)
            return (0.0, 0.0)
        except Exception as e:
            try: self._sf_log(f"sf.ca.split.error={type(e).__name__}:{e}")
            except Exception: pass
            return (0.0, 0.0)
    def _load(self):
        # 0) Liste des dossiers d'opérations
        try:
            ops_root = os.path.join(DATA_DIR, "ops")
            op_dirs = [d for d in sorted(os.listdir(ops_root)) if os.path.isdir(os.path.join(ops_root, d)) and self._sf_is_operation_folder(d)]
        except Exception as e:
            self._sf_log(f"ops.scan.error={type(e).__name__}:{e}")
            op_dirs = []
        # 1) Index factures -> par op
        path = self._factures_path()
        factures = self._read_csv_rows(path)
        idx = self._sf_build_invoice_index(factures, op_dirs)

        # Index devis -> par op (fallback si pas de facture)
        dpath = self._devis_path()
        try:
            devis_rows = self._read_csv_rows(dpath)
        except Exception:
            devis_rows = []
        try:
            invoices_only = False
        except Exception:
            invoices_only = False
        try:
            type_filter = self.cb_type.currentText() if hasattr(self,'cb_type') and self.cb_type else 'Tous'
        except Exception:
            type_filter = 'Tous'
        d_idx = self._sf_build_devis_index(devis_rows, op_dirs)
        try:
            self._sf_log(f"dataset.devis_source={dpath} rows={len(devis_rows)} idx_ops={len(d_idx)}")
        except Exception:
            pass
        self._sf_log(f"dataset.source={path} rows={len(factures)} idx_ops={len(idx)}")
        rows = []
        try:
            invoices_only = False
        except Exception:
            invoices_only = False
        try:
            type_filter = self.cb_type.currentText() if hasattr(self,'cb_type') and self.cb_type else 'Tous'
        except Exception:
            type_filter = 'Tous'
        for op in op_dirs:
            op_path = os.path.join(DATA_DIR, "ops", op)
            fr, reason = self._sf_pick_invoice_for_op(idx.get(op, []))
            
            is_devis = False
            if not fr:
                try:
                    dv, dreason = self._sf_pick_devis_for_op(d_idx.get(op, []))
                    if dv:
                        fr = dv
                        reason = f"devis:{dreason}"
                        is_devis = True
                except Exception:
                    pass
            # Filtre Type (Tous/Factures/Devis)
            if type_filter == 'Factures' and is_devis:
                continue
            if type_filter == 'Devis' and not is_devis:
                continue
# date range filter (append-only)
            try:
                # invoice date from fr['date']
                dt = str(fr.get('date') or '').strip()
                from PyQt5.QtCore import QDate
                d_from = self.de_from.date() if hasattr(self,'de_from') else None
                d_to = self.de_to.date() if hasattr(self,'de_to') else None
                d_fact = None
                try:
                    if dt:
                        d_fact = QDate.fromString(dt, "dd/MM/yyyy")
                except Exception:
                    d_fact = None
                if d_from and d_to and d_fact and not (d_from <= d_fact <= d_to):
                    try: self._sf_log(f"sf.skip op={op} date={d_fact} not_in [{d_from},{d_to}]")
                    except Exception: pass
                    continue
            except Exception:
                pass
            # invoices-only guard (append-only)
# invoices-only guard (append-only)
            try:
                inv_only = bool(None.isChecked())
            except Exception:
                inv_only = True
            if inv_only and not fr:
                try: self._sf_log(f"sf.skip op={op} no_invoice")
                except Exception: pass
                continue
            # valeurs par défaut
            numero = ""
            statut = "INCONNU"
            total_ttc = 0.0
            heures = 0.0
            if fr:
                numero = (fr.get("numero") or fr.get("num") or fr.get("facture_id") or "").strip()
                statut = (fr.get("statut") or fr.get("status") or fr.get("etat") or "").strip() or "INCONNU"
                total_ttc = self._num(fr.get("total_ttc") or fr.get("montant_ttc") or fr.get("ttc") or fr.get("total") or fr.get("montant"))
                if total_ttc is None:
                    ht = self._num(fr.get("total_ht") or fr.get("montant_ht"))
                    tva = self._num(fr.get("tva") or fr.get("total_tva"))
                    total_ttc = (ht or 0.0) + (tva or 0.0)
                heures = self._sf_extract_heures_devis(fr) if is_devis else self._sf_extract_heures(fr)
            achats_total, achats_files = self._sum_achats_for_op(op_path)
            cout_mo = (heures or 0.0) * float(self.sb_mo.value())
            frais_generaux = (float(self.sb_fg.value()) / 100.0) * (total_ttc or 0.0)
            # -- CA split and URSSAF euros (detailed view support) --
            try:
                ca_mo_ttc, ca_parts_ttc = (self._sf_ca_split_from_devis(fr, op_path=op_path) if is_devis else self._sf_ca_split_from_lines(fr, op_path=op_path))
            except Exception:
                ca_mo_ttc, ca_parts_ttc = 0.0, 0.0
            ur_mo = (float(getattr(self,'sb_ur_mo',None).value() if hasattr(self,'sb_ur_mo') else 0.0)/100.0) * (ca_mo_ttc or 0.0)
            ur_parts = (float(getattr(self,'sb_ur_parts',None).value() if hasattr(self,'sb_ur_parts') else 0.0)/100.0) * (ca_parts_ttc or 0.0)
            # marge après URSSAF
            marge_eur = (total_ttc or 0.0) - achats_total - cout_mo - frais_generaux - (ur_mo or 0.0) - (ur_parts or 0.0)
            marge_pct = (marge_eur / (total_ttc or 1.0) * 100.0) if (total_ttc or 0.0) > 0 else 0.0
            rows.append({
                "operation": op,
                "facture_id": numero,
                "statut": statut,
                "total_ttc": round(total_ttc or 0.0, 2),
                "achats_total": round(achats_total, 2),
                "heures": round(heures or 0.0, 2),
                "cout_mo": round(cout_mo, 2),
                "frais_generaux": round(frais_generaux, 2),
                "ca_mo_ttc": round(float(ca_mo_ttc or 0.0), 2), "ca_parts_ttc": round(float(ca_parts_ttc or 0.0), 2),
                "ur_mo": round(float(ur_mo or 0.0), 2), "ur_parts": round(float(ur_parts or 0.0), 2),
                "marge_eur": round(marge_eur, 2),
                "marge_pct": round(marge_pct, 2),
                "achats_files": achats_files
            })
            self._sf_log(f"match op={op} facture={numero or '-'} h={heures:.2f} via={reason} ca={total_ttc:.2f}")
        # 2) Filtre statut
        stats = ["Tous"] + sorted({(r.get("statut") or "").strip() for r in rows if (r.get("statut") or "").strip()})
        cur = self.cb_statut.currentText() or self._cfg.get("last_status_filter","Tous")
        self.cb_statut.blockSignals(True); self.cb_statut.clear(); self.cb_statut.addItems(stats)
        try:
            i = self.cb_statut.findText(cur); self.cb_statut.setCurrentIndex(i if i>=0 else 0)
        except Exception: pass
        self.cb_statut.blockSignals(False)
        wanted = self.cb_statut.currentText()
        if wanted and wanted != "Tous":
            rows = [r for r in rows if (r.get("statut") or "") == wanted]
        # Affichage
        self._populate(rows)
        self._sf_log(f"ui.loaded rows={len(rows)}")
        # Elimine les spacers ancêtres et force l'alignement top
        try:
            self._sf_nuke_vertical_gap()
        except Exception:
            pass
        # Inversion d'ordre : dernière -> première (TOTAL reste en bas)
        try:
            self._sf_reverse_rows_keep_total()
        except Exception:
            pass
    def _populate(self, rows):
        # Désactive le tri le temps de remplir pour éviter le décalage des colonnes
        sort_state = False
        try:
            sort_state = self.table.isSortingEnabled()
            if sort_state:
                self.table.setSortingEnabled(False)
        except Exception:
            pass
        headers = self._current_headers()
        try:
            self.table.setColumnCount(len(headers))
            self.table.setHorizontalHeaderLabels(headers)
        except Exception:
            pass
        self.table.setRowCount(0)
        for r in rows:
            if len(headers) == len(self.HEADERS):
                vals = [
                    r["operation"], r["facture_id"], r["statut"],
                    f"{r['total_ttc']:.2f}", f"{r['achats_total']:.2f}",
                    f"{r['heures']:.2f}", f"{r['cout_mo']:.2f}",
                    f"{r['frais_generaux']:.2f}", f"{r['marge_eur']:.2f}", f"{r['marge_pct']:.1f}%",
                    r["achats_files"]
                ]
            else:
                vals = [
                    r["operation"], r["facture_id"], r["statut"],
                    f"{r['total_ttc']:.2f}", f"{r['achats_total']:.2f}",
                    f"{r['heures']:.2f}", f"{r['cout_mo']:.2f}", f"{r['frais_generaux']:.2f}",
                    f"{r.get('ca_mo_ttc', 0.0):.2f}", f"{r.get('ca_parts_ttc', 0.0):.2f}",
                    f"{r.get('ur_mo', 0.0):.2f}", f"{r.get('ur_parts', 0.0):.2f}",
                    f"{r['marge_eur']:.2f}", f"{r['marge_pct']:.1f}%",
                    r["achats_files"]
                ]
            row = self.table.rowCount()
            self.table.insertRow(row)
            for c, v in enumerate(vals):
                it = QTableWidgetItem(v)
                # align numeric
                try:
                    if headers[c] not in ("Opération", "Facture N°", "Statut", "Achats fichiers"):
                        it.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                except Exception:
                    pass
                # Color rules
                try:
                    h = headers[c]
                    if h in ("Achats €", "MO €", "Frais généraux €", "URSSAF MO €", "URSSAF Pièces €"):
                        it.setBackground(QColor(255, 236, 236))  # light red
                    if h == "Marge €":
                        val = float(r.get("marge_eur", 0.0))
                        if val < 0:
                            it.setBackground(QColor(255,236,236)); it.setForeground(QBrush(QColor(200,0,0)))
                        elif val > 0:
                            it.setBackground(QColor(234,255,234))
                    if h == "Marge %":
                        valp = float(str(v).replace("%","") or 0)
                        if valp < 0: it.setForeground(QBrush(QColor(200,0,0)))
                except Exception:
                    pass
                self.table.setItem(row, c, it)
        try:
            self.table.resizeColumnsToContents()
        except Exception:
            pass
        # Restaure le tri et trie par Opération si c'était activé
        try:
            if sort_state:
                self.table.setSortingEnabled(True)
                self.table.sortItems(0, Qt.AscendingOrder)
        except Exception:
            pass
        # Ligne TOTAL toujours en dernière ligne
        try:
            self._sf_update_total_row()
        except Exception:
            pass
        # Lisibilité (centre les textes, aligne les chiffres à droite)
        try:
            self._sf_apply_readability_tweaks()
        except Exception:
            pass
        # Harmonisation légère : entêtes groupées + largeur ajustée au contenu
        try:
                                    self.table.setAlternatingRowColors(True)
        except Exception:
            pass
        # Présentation alignée PDF : largeur étirée, couleurs colonnes, TOTAL grisée
        try:
            self._sf_apply_presentation_pdf_ui()
        except Exception:
            pass
    def _open_op_folder(self, item):
        try:
            op = self.table.item(item.row(), 0).text().strip()
            if not op: return
            path = os.path.join(DATA_DIR, "ops", op)
            if os.path.isdir(path):
                QDesktopServices.openUrl(QUrl.fromLocalFile(path))
        except Exception as e:
            self._sf_log(f"open.op.error={type(e).__name__}:{e}")
    def _export_pdf(self):
        """
        Export PDF (Suivi financier) — utilise UNIQUEMENT _sf_pdf_write_sf_pro.
        Aucune détection héritée, aucun fallback.
        """
        import os
        from PyQt5.QtWidgets import QMessageBox
        from PyQt5.QtCore import QUrl
        from PyQt5.QtGui import QDesktopServices
        headers = [self.table.horizontalHeaderItem(i).text() for i in range(self.table.columnCount())]
        rows = []
        for r in range(self.table.rowCount()):
            row_vals = []
            for c in range(self.table.columnCount()):
                it = self.table.item(r, c)
                row_vals.append(it.text() if it else "")
            rows.append(row_vals)
        try:
            periode = f"{self.de_from.date().toString('dd/MM/yyyy')} → {self.de_to.date().toString('dd/MM/yyyy')}"
        except Exception:
            periode = ""
        generated_on = datetime.now().strftime("%d/%m/%Y %H:%M")
        base_dir = globals().get('DATA_DIR', os.path.join(os.getcwd(), 'data'))
        reports = os.path.join(base_dir, 'reports')
        os.makedirs(reports, exist_ok=True)
        ts = datetime.now().strftime("%Y%m%d_%H%M")
        fname = f"suivi_financier_{ts}.pdf"
        path = os.path.join(reports, fname)
        try:
            _sf_pdf_write_sf_pro(rows, getattr(self, 'settings', {}) or {}, path, periode, generated_on, headers)
            try:
                QDesktopServices.openUrl(QUrl.fromLocalFile(os.path.dirname(path)))
            except Exception:
                pass
            try:
                msg = "PDF enregistre dans :" + os.linesep + path
                QMessageBox.information(self, "Export PDF", msg)
            except Exception:
                pass
        except Exception as e:
            try:
                QMessageBox.critical(self, "Export PDF", "Erreur export PDF: " + str(e))
            except Exception:
                pass
            def _num_try(x):
                try:
                    s = str(x).replace('\xa0',' ').replace('€','').replace('%','').replace(' ','').replace(',', '.')
                    return float(s)
                except Exception:
                    return None
    
            def fmt_money(v):
                try: return f"{v:,.2f} €".replace(',', 'X').replace('.', ',').replace('X', ' ')
                except Exception: return str(v)
    
            def fmt_hours(v):
                try: return f"{v:.2f}".replace('.', ',')
                except Exception: return str(v)
    
            def fmt_pct(v):
                try: return f"{v:.1f} %".replace('.', ',')
                except Exception: return str(v)
    
            # Construire table + totaux
            data = [headers[:]]
            num_idx = set()
            for ci, h in enumerate(headers):
                hn = (h or '').lower()
                if any(tok in hn for tok in ['€','eur','ttc','ht','heures','heure','urssaf','marge','total']):
                    num_idx.add(ci)
    
            sums = [0.0 if i in num_idx else None for i in range(len(headers))]
            for r in rows:
                row_cells = []
                for ci, h in enumerate(headers):
                    val = r.get(h, '')
                    vnum = _num_try(val)
                    if vnum is not None and ci in num_idx:
                        if 'heure' in (h or '').lower():
                            row_cells.append(fmt_hours(vnum))
                        elif '%' in (h or ''):
                            row_cells.append(fmt_pct(vnum))
                        else:
                            row_cells.append(fmt_money(vnum))
                        sums[ci] = (sums[ci] or 0.0) + vnum
                    else:
                        row_cells.append(str(val))
                data.append(row_cells)
    
            # Ligne TOTAL
            total_row = []
            for ci, h in enumerate(headers):
                if sums[ci] is None:
                    total_row.append('TOTAL' if ci==0 else '')
                else:
                    if 'heure' in (h or '').lower():
                        total_row.append(fmt_hours(sums[ci]))
                    elif '%' in (h or ''):
                        total_row.append(fmt_pct(sums[ci]))
                    else:
                        total_row.append(fmt_money(sums[ci]))
            data.append(total_row)
    
            # Doc & table
            pagesize = landscape(A4)
            doc = SimpleDocTemplate(path, pagesize=pagesize, leftMargin=12*mm, rightMargin=12*mm, topMargin=15*mm, bottomMargin=12*mm)
            col_width = (pagesize[0] - doc.leftMargin - doc.rightMargin) / max(1, len(headers))
            col_widths = [col_width]*len(headers)
    
            tbl = Table(data, colWidths=col_widths, repeatRows=1)
            style = TableStyle([
                ('FONT', (0,0), (-1,0), FONT_BOLD, 9),
                ('FONT', (0,1), (-1,-1), FONT_REG, 9),
                ('LINEBELOW', (0,0), (-1,0), 0.5, colors.black),
                ('LINEABOVE', (0,-1), (-1,-1), 0.5, colors.black),
                ('ROWBACKGROUNDS', (0,1), (-1,-2), (colors.whitesmoke, colors.Color(0.96,0.96,0.96))),
                ('ALIGN', (0,0), (-1,0), 'LEFT'),
            ])
            for ci in num_idx: style.add('ALIGN', (ci,1), (ci,-1), 'RIGHT')
            style.add('FONT', (0,-1), (-1,-1), FONT_BOLD, 9)
            tbl.setStyle(style)
    
            # Titre + meta
            title = Paragraph("SUIVI FINANCIER", styles['SFTitle'])
            metas = []
            if periode: metas.append(Paragraph("Période : " + periode, styles['SFMeta']))
            metas.append(Paragraph("Généré le : " + generated_on, styles['SFMeta']))
            if statut_filter: metas.append(Paragraph("Filtre statut : " + statut_filter, styles['SFMeta']))
            if cout_horaire is not None: metas.append(Paragraph("Coût horaire MO : " + str(cout_horaire).replace('.', ',') + " €", styles['SFMeta']))
            if urssaf_mo is not None and urssaf_parts is not None:
                metas.append(Paragraph("URSSAF MO : " + str(urssaf_mo).replace('.', ',') + " % — URSSAF Pièces : " + str(urssaf_parts).replace('.', ',') + " %", styles['SFMeta']))
    
            story = [title, Spacer(1, 3*mm)] + metas + [Spacer(1, 6*mm), tbl]
    
            # Métadonnées
            try:
                comp = ''
                try:
                    comp = (self.settings.get('company_name') or '') if hasattr(self, 'settings') else ''
                except Exception:
                    comp = ''
                doc.title = "Suivi financier — " + (periode or "")
                doc.author = comp or "AE GESTION"
                doc.subject = "Suivi financier"
                doc.keywords = "suivi financier; rapports; AE Gestion"
            except Exception:
                pass
    
            doc.build(story)
    
            self._sf_log(f"sf.sf.pdf.saved={path}")
            try: QDesktopServices.openUrl(QUrl.fromLocalFile(os.path.dirname(path)))
            except Exception: pass
            try: QMessageBox.information(self, "Export PDF", "PDF enregistre dans :\n" + path)
            except Exception: pass
        except Exception as e:
            self._sf_log(f"sf.sf.pdf.error={e}")
            try: QMessageBox.critical(self, "Export PDF", "Erreur export PDF: " + str(e))
            except Exception: pass
    def _show_pdf_link(self, path: str):
        try:
            link = QUrl.fromLocalFile(path).toString()
            box = QMessageBox(self)
            box.setWindowTitle("Export PDF")
            box.setIcon(QMessageBox.Information)
            box.setTextFormat(Qt.RichText)
            box.setText(f'Exporté vers : <a href="{link}">{path}</a>')
            # Active les liens et ajoute un bouton "Ouvrir"
            try:
                lbl = box.findChild(QLabel, "qt_msgbox_label")
                if lbl:
                    lbl.setOpenExternalLinks(True)
                    lbl.setTextInteractionFlags(lbl.textInteractionFlags() | Qt.TextBrowserInteraction | Qt.LinksAccessibleByMouse)
            except Exception:
                pass
            box.setStandardButtons(QMessageBox.Ok | QMessageBox.Open)
            # Renomme proprement le bouton Open
            try:
                btn = box.button(QMessageBox.Open)
                if btn: btn.setText("Ouvrir")
            except Exception:
                pass
            ret = box.exec_()
            if ret == QMessageBox.Open:
                QDesktopServices.openUrl(QUrl.fromLocalFile(path))
        except Exception:
            self._show_pdf_link(path)
    def _export_csv(self):
        reports = os.path.join(DATA_DIR, "reports"); os.makedirs(reports, exist_ok=True)
        ts = __import__('datetime').datetime.now().strftime("%Y%m%d_%H%M")
        path = os.path.join(reports, f"suivi_financier_{ts}.csv")
        with open(path, "w", newline="", encoding="utf-8") as f:
            import csv as _csv
            w = _csv.writer(f, delimiter=";")
            w.writerow([self.table.horizontalHeaderItem(i).text() for i in range(self.table.columnCount())])
            for r in range(self.table.rowCount()):
                row = []
                for c in range(self.table.columnCount()):
                    it = self.table.item(r, c); row.append(it.text() if it else "")
                w.writerow(row)
        self._sf_log(f"export.csv={path}")
        QMessageBox.information(self, "Export CSV", f"Exporté vers :\\n{path}")
# =================== Fin Suivi Financier ===================
    def _sf_update_total_row(self):
        """Calcule et positionne la ligne TOTAL en dernière ligne, en miroir des règles du PDF."""
        try:
            from PyQt5.QtCore import Qt, QSignalBlocker
            from PyQt5.QtGui import QColor, QBrush, QFont
            from PyQt5.QtWidgets import QTableWidgetItem
        except Exception:
            return
        table = getattr(self, "table", None)
        if not table:
            return
        # Verrou anti-réentrance
        if getattr(self, "_sf_busy", False):
            return
        self._sf_busy = True
        try:
            rows = table.rowCount()
            cols = table.columnCount()
            if cols == 0:
                return
            # Bloque les signaux pendant la MAJ pour éviter les boucles
            blockers = []
            try: blockers.append(QSignalBlocker(table))
            except Exception:
                try: table.blockSignals(True)
                except Exception: pass
            try: blockers.append(QSignalBlocker(table.model()))
            except Exception:
                try: table.model().blockSignals(True)
                except Exception: pass
            # Normalisation + mapping identique au PDF
            import unicodedata, re as _re
            def _norm(s):
                s = "" if s is None else str(s)
                s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
                s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
                return _re.sub(r"[^a-z0-9]+","", s)
            headers = [table.horizontalHeaderItem(c).text() if table.horizontalHeaderItem(c) else "" for c in range(cols)]
            header_map = {}
            ignore_keys = {"achatsfichiers","achatsfichier","achatsfiles","fichiersachats"}
            alias = {
                "operation":["operation","operationdossier","dossier","op"],
                "factureno":["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
                "statut":["statut","status"],
                "totalfactureeur":["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
                "achatseur":["achatseur","achats","achatsht","achatsct","achatscteur"],
                "heures":["heures","heure","h","nbheures","nbh"],
                "moeur":["moeur","mo","maindoeuvreeur","maindoeuvre"],
                "fraisgenerauxeur":["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
                "camoeurttc":["camoeurttc","camottc","camoeur","camo"],
                "capieceseurttc":["capieceseurttc","capieces","capiecesttc","capiecessettc"],
                "urssafmoeur":["urssafmoeur","urssafmo"],
                "urssafpieceseur":["urssafpieceseur","urssafpieces"],
                "margeeur":["margeeur","marge"],
                "margepct":["margepct","margepourcentage","margepercent","margepc","margepourcent"],
                "achatsfichiers":["achatsfichiers","achatsfichier","achatsfiles","fichiersachats"],
            }
            # construire map et masquer "Achats fichiers"
            for idx, h in enumerate(headers):
                k = _norm(h)
                if k in ignore_keys:
                    try: table.setColumnHidden(idx, True)
                    except Exception: pass
                    continue
                for canon, al in alias.items():
                    if canon == "achatsfichiers": 
                        continue
                    if k == canon or k in al:
                        if canon not in header_map: header_map[canon] = idx
                        break
            # parse float util
            def _num(s):
                try:
                    if s is None: return 0.0
                    t = str(s).replace("€","").replace("%","").replace("\xa0","").replace(" ", "").replace(",", ".").strip()
                    return float(t) if t else 0.0
                except Exception:
                    return 0.0
            numeric_keys = {"totalfactureeur","achatseur","heures","moeur","fraisgenerauxeur","camoeurttc","capieceseurttc","urssafmoeur","urssafpieceseur","margeeur"}
            sums = {k:0.0 for k in numeric_keys}
            # détecter/ôter une ligne TOTAL existante (on recalculera)
            total_idx = None
            op_col = header_map.get("operation", 0)
            for r in range(rows):
                it0 = table.item(r, op_col)
                if it0 and str(it0.text()).strip().upper() == "TOTAL":
                    total_idx = r
                    break
            if total_idx is not None:
                try: table.removeRow(total_idx)
                except Exception: pass
                rows -= 1  # une ligne de moins à agréger
            # agrégation
            for r in range(rows):
                for key in list(numeric_keys):
                    c = header_map.get(key)
                    if c is None or c >= table.columnCount(): 
                        continue
                    it = table.item(r, c)
                    sums[key] += _num(it.text() if it else "")
            # insérer ligne total en dernière ligne
            total_row = table.rowCount()
            table.insertRow(total_row)
            bold = QFont(); bold.setBold(True)
            bg = QBrush(QColor("#E0E0E0"))
            center = Qt.AlignCenter
            # écrire cellules selon colonnes présentes
            for canon, label in [
                ("operation","Opération"), ("factureno","Facture N°"), ("statut","Statut"),
                ("totalfactureeur","Total Facture €"), ("achatseur","Achats €"), ("heures","Heures"),
                ("moeur","MO €"), ("fraisgenerauxeur","Frais généraux €"),
                ("camoeurttc","CA MO TTC"), ("capieceseurttc","CA Pièces TTC"),
                ("urssafmoeur","URSSAF MO €"), ("urssafpieceseur","URSSAF Pièces €"),
                ("margeeur","Marge €"), ("margepct","Marge %")
            ]:
                c = header_map.get(canon)
                if c is None or c >= table.columnCount():
                    continue
                if canon == "operation":
                    txt = "TOTAL"
                elif canon == "margepct":
                    base = sums.get("totalfactureeur", 0.0); m = sums.get("margeeur", 0.0)
                    txt = f"{(m/base*100.0) if base>0 else 0.0:.1f}%"
                elif canon in numeric_keys:
                    txt = f"{sums.get(canon, 0.0):.2f}"
                else:
                    txt = ""
                it = table.item(total_row, c)
                if it is None:
                    it = QTableWidgetItem(str(txt))
                    table.setItem(total_row, c, it)
                else:
                    it.setText(str(txt))
                it.setFont(bold); it.setBackground(bg); it.setTextAlignment(center)
                try: it.setFlags(it.flags() & ~Qt.ItemIsEditable)
                except Exception: pass
        finally:
            try: table.blockSignals(False)
            except Exception: pass
            try: table.model().blockSignals(False)
            except Exception: pass
            self._sf_busy = False
    def _sf_style_headers_groups(self):
        """Colorise uniquement les ENTÊTES par groupe (léger, sans toucher aux cellules)."""
        try:
            from PyQt5.QtGui import QColor, QBrush
        except Exception:
            return
        table = getattr(self, "table", None)
        if not table:
            return
        cols = table.columnCount()
        if cols == 0:
            return
        # mapping identique au PDF
        import unicodedata, re as _re
        def _norm(s):
            s = "" if s is None else str(s)
            s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
            s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
            return _re.sub(r"[^a-z0-9]+","", s)
        headers = [table.horizontalHeaderItem(c).text() if table.horizontalHeaderItem(c) else "" for c in range(cols)]
        alias = {
            "operation":["operation","operationdossier","dossier","op"],
            "factureno":["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
            "statut":["statut","status"],
            "totalfactureeur":["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
            "achatseur":["achatseur","achats","achatsht","achatsct","achatscteur"],
            "heures":["heures","heure","h","nbheures","nbh"],
            "moeur":["moeur","mo","maindoeuvreeur","maindoeuvre"],
            "fraisgenerauxeur":["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
            "camoeurttc":["camoeurttc","camottc","camoeur","camo"],
            "capieceseurttc":["capieceseurttc","capieces","capiecesttc","capiecessettc"],
            "urssafmoeur":["urssafmoeur","urssafmo"],
            "urssafpieceseur":["urssafpieceseur","urssafpieces"],
            "margeeur":["margeeur","marge"],
            "margepct":["margepct","margepourcentage","margepercent","margepc","margepourcent"],
            "achatsfichiers":["achatsfichiers","achatsfichier","achatsfiles","fichiersachats"],
        }
        header_map = {}
        for idx, h in enumerate(headers):
            k = _norm(h)
            if k in alias.get("achatsfichiers", []):
                continue
            for canon, al in alias.items():
                if canon == "achatsfichiers": 
                    continue
                if k == canon or k in al:
                    if canon not in header_map:
                        header_map[canon] = idx
                    break
        inv_head  = QBrush(QColor("#CDE4FF"))
        cost_head = QBrush(QColor("#FFE08A"))
        res_head  = QBrush(QColor("#BDEDC6"))
        op_head   = QBrush(QColor("#F2F2F2"))
        def set_header_bg(col, brush):
            it = table.horizontalHeaderItem(col)
            if it:
                it.setBackground(brush)
        if "operation" in header_map:
            set_header_bg(header_map["operation"], op_head)
        for k in ("factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"):
            if k in header_map: set_header_bg(header_map[k], inv_head)
        for k in ("achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"):
            if k in header_map: set_header_bg(header_map[k], cost_head)
        for k in ("margeeur","margepct"):
            if k in header_map: set_header_bg(header_map[k], res_head)
    def _sf_auto_shrink_width(self, max_width=1200):
        """Ajuste la largeur de la table au contenu et centre dans le layout (sans occuper tout l'écran)."""
        try:
            from PyQt5.QtWidgets import QAbstractScrollArea
        except Exception:
            return
        table = getattr(self, "table", None)
        if not table:
            return
        table.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
        table.resizeColumnsToContents()
        # calcul largeur utile
        try:
            w = table.verticalHeader().width() + 2*table.frameWidth() + 6
        except Exception:
            w = 6
        try:
            for c in range(table.columnCount()):
                if not table.isColumnHidden(c):
                    w += table.columnWidth(c)
        except Exception:
            pass
        w = min(w, max_width)
        try:
            table.setFixedWidth(w)
        except Exception:
            pass
        # Centrage: ajoute des stretches de part et d'autre si le parent est un layout
        try:
            parent_layout = table.parentWidget().layout()
            if parent_layout and getattr(self, "_sf_shrink_done", False) is False:
                parent_layout.setStretchFactor(table, 0)
                parent_layout.addStretch(1)
                parent_layout.insertStretch(0, 1)
                self._sf_shrink_done = True
        except Exception:
            pass
    def _sf_apply_presentation_pdf_ui(self):
        """UI alignée sur le PDF : 
        - Couleurs par colonnes (bleu/jaune/vert), 'Opération' non teintée (header gris seulement)
        - Largeur compacte = largeur des contenus, pas d'étirement, pas de scroll horizontal
        - Table centrée dans le layout, marges réduites
        - TOTAL recalculée et conservée en bas
        """
        try:
            from PyQt5.QtCore import Qt, QSignalBlocker
            from PyQt5.QtGui import QColor, QBrush
            from PyQt5.QtWidgets import QAbstractScrollArea, QHeaderView
        except Exception:
            return
        table = getattr(self, "table", None)
        if not table:
            return
        # --- Marges/spacings réduits
        try:
            lay = table.parentWidget().layout()
            if lay:
                lay.setContentsMargins(12, 6, 12, 12)
                lay.setSpacing(6)
        except Exception:
            pass
        # --- Toujours TOTAL d'abord (évite recolorations sur une base fausse)
        try:
            self._sf_update_total_row()
        except Exception:
            pass
        # --- Politique de colonnes : contenu -> largeur fixe (pas de stretch)
        try:
            hh = table.horizontalHeader()
            hh.setStretchLastSection(False)
            hh.setSectionResizeMode(QHeaderView.ResizeToContents)
        except Exception:
            pass
        try:
            table.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
            table.setSizeAdjustPolicy(QAbstractScrollArea.AdjustToContents)
            table.setAlternatingRowColors(True)
            table.setWordWrap(False)
        except Exception:
            pass
        # --- Couleurs par colonnes (comme PDF)
        try:
            if getattr(self, "_sf_busy_color", False):
                return
            self._sf_busy_color = True
            blockers = []
            try: blockers.append(QSignalBlocker(table))
            except Exception:
                try: table.blockSignals(True)
                except Exception: pass
            try: blockers.append(QSignalBlocker(table.model()))
            except Exception:
                try: table.model().blockSignals(True)
                except Exception: pass
            rows, cols = table.rowCount(), table.columnCount()
            import unicodedata, re as _re
            def _norm(s):
                s = "" if s is None else str(s)
                s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
                s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
                return _re.sub(r"[^a-z0-9]+","", s)
            headers = [table.horizontalHeaderItem(c).text() if table.horizontalHeaderItem(c) else "" for c in range(cols)]
            alias = {
                "operation":["operation","operationdossier","dossier","op"],
                "factureno":["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
                "statut":["statut","status"],
                "totalfactureeur":["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
                "achatseur":["achatseur","achats","achatsht","achatsct","achatscteur"],
                "heures":["heures","heure","h","nbheures","nbh"],
                "moeur":["moeur","mo","maindoeuvreeur","maindoeuvre"],
                "fraisgenerauxeur":["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
                "camoeurttc":["camoeurttc","camottc","camoeur","camo"],
                "capieceseurttc":["capieceseurttc","capieces","capiecesttc","capiecessettc"],
                "urssafmoeur":["urssafmoeur","urssafmo"],
                "urssafpieceseur":["urssafpieceseur","urssafpieces"],
                "margeeur":["margeeur","marge"],
                "margepct":["margepct","margepourcentage","margepercent","margepc","margepourcent"],
                "achatsfichiers":["achatsfichiers","achatsfichier","achatsfiles","fichiersachats"],
            }
            header_map = {}
            for idx, h in enumerate(headers):
                k = _norm(h)
                if k in {"achatsfichiers","achatsfichier","achatsfiles","fichiersachats"}:
                    try: table.setColumnHidden(idx, True)
                    except Exception: pass
                    continue
                for canon, al in alias.items():
                    if canon == "achatsfichiers":
                        continue
                    if k == canon or k in al:
                        if canon not in header_map:
                            header_map[canon] = idx
                        break
            inv_head  = QBrush(QColor("#CDE4FF")); inv_data  = QBrush(QColor("#EAF4FF"))
            cost_head = QBrush(QColor("#FFE08A")); cost_data = QBrush(QColor("#FFF4CC"))
            res_head  = QBrush(QColor("#BDEDC6")); res_data  = QBrush(QColor("#E7F8EA"))
            op_head   = QBrush(QColor("#F2F2F2"))
            total_bg  = QBrush(QColor("#E0E0E0"))
            white_bg  = QBrush(QColor("#FFFFFF"))
            # entêtes
            def set_header_bg(col, brush):
                it = table.horizontalHeaderItem(col)
                if it: it.setBackground(brush)
            if "operation" in header_map:
                set_header_bg(header_map["operation"], op_head)
            for k in ("factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"):
                if k in header_map: set_header_bg(header_map[k], inv_head)
            for k in ("achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"):
                if k in header_map: set_header_bg(header_map[k], cost_head)
            for k in ("margeeur","margepct"):
                if k in header_map: set_header_bg(header_map[k], res_head)
            # repérage ligne TOTAL
            total_row_index = None
            op_col = header_map.get("operation", 0)
            for r in range(rows):
                it0 = table.item(r, op_col)
                if it0 and str(it0.text()).strip().upper() == "TOTAL":
                    total_row_index = r
                    break
            # 1) Forcer la colonne "operation" en BLANC (corrige le bug visuel)
            if "operation" in header_map:
                c = header_map["operation"]
                for r in range(rows):
                    it = table.item(r, c)
                    if it:
                        if r == total_row_index:
                            it.setBackground(total_bg)
                        else:
                            it.setBackground(white_bg)
            # 2) Teintes par colonnes (hors TOTAL)
            def shade_col(col, brush):
                for r in range(rows):
                    if r == total_row_index:
                        continue
                    it = table.item(r, col)
                    if it: it.setBackground(brush)
            for k in ("factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"):
                if k in header_map: shade_col(header_map[k], inv_data)
            for k in ("achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"):
                if k in header_map: shade_col(header_map[k], cost_data)
            for k in ("margeeur","margepct"):
                if k in header_map: shade_col(header_map[k], res_data)
        finally:
            try: table.blockSignals(False)
            except Exception: pass
            try: table.model().blockSignals(False)
            except Exception: pass
            self._sf_busy_color = False
        # --- Ajustement final largeur compacte + centrage
        try:
            table.resizeColumnsToContents()
            # recalcul largeur totale "compacte"
            try:
                w = table.verticalHeader().width() + 2*table.frameWidth() + 6
            except Exception:
                w = 6
            for c in range(table.columnCount()):
                if not table.isColumnHidden(c):
                    w += table.columnWidth(c)
            table.setFixedWidth(w)
        except Exception:
            pass
        try:
            # Centrer la table en ajoutant des stretches autour
            parent_layout = table.parentWidget().layout()
            if parent_layout and getattr(self, "_sf_centered", False) is False:
                parent_layout.insertStretch(0, 1)
                parent_layout.addStretch(1)
                self._sf_centered = True
        except Exception:
            pass
            def _norm(s):
                s = "" if s is None else str(s)
                s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
                s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
                return _re.sub(r"[^a-z0-9]+","", s)
            headers = [table.horizontalHeaderItem(c).text() if table.horizontalHeaderItem(c) else "" for c in range(cols)]
            alias = {
                "operation":["operation","operationdossier","dossier","op"],
                "factureno":["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
                "statut":["statut","status"],
                "totalfactureeur":["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
                "achatseur":["achatseur","achats","achatsht","achatsct","achatscteur"],
                "heures":["heures","heure","h","nbheures","nbh"],
                "moeur":["moeur","mo","maindoeuvreeur","maindoeuvre"],
                "fraisgenerauxeur":["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
                "camoeurttc":["camoeurttc","camottc","camoeur","camo"],
                "capieceseurttc":["capieceseurttc","capieces","capiecesttc","capiecessettc"],
                "urssafmoeur":["urssafmoeur","urssafmo"],
                "urssafpieceseur":["urssafpieceseur","urssafpieces"],
                "margeeur":["margeeur","marge"],
                "margepct":["margepct","margepourcentage","margepercent","margepc","margepourcent"],
                "achatsfichiers":["achatsfichiers","achatsfichier","achatsfiles","fichiersachats"],
            }
            header_map = {}
            for idx, h in enumerate(headers):
                k = _norm(h)
                if k in alias.get("achatsfichiers", []):
                    try: table.setColumnHidden(idx, True)
                    except Exception: pass
                    continue
                for canon, al in alias.items():
                    if canon == "achatsfichiers":
                        continue
                    if k == canon or k in al:
                        if canon not in header_map:
                            header_map[canon] = idx
                        break
            inv_head  = QBrush(QColor("#CDE4FF")); inv_data  = QBrush(QColor("#EAF4FF"))
            cost_head = QBrush(QColor("#FFE08A")); cost_data = QBrush(QColor("#FFF4CC"))
            res_head  = QBrush(QColor("#BDEDC6")); res_data  = QBrush(QColor("#E7F8EA"))
            op_head   = QBrush(QColor("#F2F2F2"))
            total_bg  = QBrush(QColor("#E0E0E0"))
            # Entêtes
            def set_header_bg(col, brush):
                it = table.horizontalHeaderItem(col)
                if it: it.setBackground(brush)
            if "operation" in header_map:
                set_header_bg(header_map["operation"], op_head)
            for k in ("factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"):
                if k in header_map: set_header_bg(header_map[k], inv_head)
            for k in ("achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"):
                if k in header_map: set_header_bg(header_map[k], cost_head)
            for k in ("margeeur","margepct"):
                if k in header_map: set_header_bg(header_map[k], res_head)
            # Données (sauf ligne TOTAL) : teinte par colonne
            # détecter la ligne total
            total_row_index = None
            op_col = header_map.get("operation", 0)
            for r in range(rows):
                it0 = table.item(r, op_col)
                if it0 and str(it0.text()).strip().upper() == "TOTAL":
                    total_row_index = r
                    break
            def shade_col(col, brush):
                for r in range(rows):
                    if r == total_row_index:  # Total garde son fond gris
                        continue
                    it = table.item(r, col)
                    if it: it.setBackground(brush)
            for k in ("factureno","statut","totalfactureeur","camoeurttc","capieceseurttc"):
                if k in header_map: shade_col(header_map[k], inv_data)
            for k in ("achatseur","heures","moeur","fraisgenerauxeur","urssafmoeur","urssafpieceseur"):
                if k in header_map: shade_col(header_map[k], cost_data)
            for k in ("margeeur","margepct"):
                if k in header_map: shade_col(header_map[k], res_data)
        finally:
            try: table.blockSignals(False)
            except Exception: pass
            try: table.model().blockSignals(False)
            except Exception: pass
            self._sf_busy_color = False
    def _sf_apply_readability_tweaks(self):
        """Centre les libellés, aligne les nombres à droite. Respecte TOTAL. Ne change ni tailles ni couleurs."""
        try:
            from PyQt5.QtCore import Qt
        except Exception:
            return
        table = getattr(self, "table", None)
        if table is None:
            return
        rows, cols = table.rowCount(), table.columnCount()
        if cols == 0:
            return
        import unicodedata, re as _re
        def _norm(s):
            s = "" if s is None else str(s)
            s = "".join(c for c in unicodedata.normalize("NFKD", s) if not unicodedata.combining(c))
            s = s.lower().replace("€","eur").replace("%","pct").replace("n°","no").replace("numero","no")
            return _re.sub(r"[^a-z0-9]+","", s)
        headers = [table.horizontalHeaderItem(c).text() if table.horizontalHeaderItem(c) else "" for c in range(cols)]
        alias = {
            "operation": ["operation","operationdossier","dossier","op"],
            "factureno": ["factureno","facturen","nfacture","facture","invoice","invoiceno","numero"],
            "statut":    ["statut","status"],
            "totalfactureeur": ["totalfactureeur","totalfacture","totfactureeur","totalttceur","totalttc"],
            "achatseur": ["achatseur","achats","achatsht","achatsct","achatscteur"],
            "heures":    ["heures","heure","h","nbheures","nbh"],
            "moeur":     ["moeur","mo","maindoeuvreeur","maindoeuvre"],
            "fraisgenerauxeur": ["fraisgenerauxeur","fraisgeneraux","fg","fgeur"],
            "camoeurttc": ["camoeurttc","camottc","camoeur","camo"],
            "capieceseurttc": ["capieceseurttc","capieces","capiecesttc","capiecessettc"],
            "urssafmoeur": ["urssafmoeur","urssafmo"],
            "urssafpieceseur": ["urssafpieceseur","urssafpieces"],
            "margeeur": ["margeeur","marge"],
            "margepct": ["margepct","margepourcentage","margepercent","margepc","margepourcent"],
            "achatsfichiers": ["achatsfichiers","achatsfichier","achatsfiles","fichiersachats"],
        }
        header_map = {}
        for idx, h in enumerate(headers):
            k = _norm(h)
            if k in {"achatsfichiers","achatsfichier","achatsfiles","fichiersachats"}:
                continue
            for canon, al in alias.items():
                if canon == "achatsfichiers":
                    continue
                if k == canon or k in al:
                    if canon not in header_map:
                        header_map[canon] = idx
                    break
        # Colonnes textuelles vs numériques
        text_cols = [header_map.get(k) for k in ("operation","factureno","statut") if header_map.get(k) is not None]
        num_keys  = ("totalfactureeur","achatseur","heures","moeur","fraisgenerauxeur",
                     "camoeurttc","capieceseurttc","urssafmoeur","urssafpieceseur","margeeur","margepct")
        num_cols  = [header_map.get(k) for k in num_keys if header_map.get(k) is not None]
        # Repérer la ligne TOTAL
        total_row_index = None
        op_col = header_map.get("operation", 0)
        for r in range(rows):
            it0 = table.item(r, op_col)
            if it0 and str(it0.text()).strip().upper() == "TOTAL":
                total_row_index = r
                break
        # Appliquer les alignements
        for r in range(rows):
            for c in text_cols:
                it = table.item(r, c)
                if it:
                    it.setTextAlignment(Qt.AlignCenter)
            for c in num_cols:
                it = table.item(r, c)
                if it:
                    it.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
        # Spécifique TOTAL : libellé centré
        if total_row_index is not None and op_col is not None:
            it = table.item(total_row_index, op_col)
            if it:
                it.setTextAlignment(Qt.AlignCenter)
    def _sf_nuke_vertical_gap(self):
        """Supprime les spacerItems verticaux ancêtres et force l'alignement en haut.
        Ne touche ni au resize des colonnes, ni au PDF.
        """
        try:
            from PyQt5.QtCore import Qt
            from PyQt5.QtWidgets import QLayout, QSpacerItem
        except Exception:
            return
        w = self
        seen = set()
        for _ in range(4):  # on remonte quelques niveaux (page -> tabwidget -> central)
            if not w:
                break
            lay = getattr(w, "layout", lambda: None)()
            if lay and id(lay) not in seen:
                seen.add(id(lay))
                # purge des spacers verticaux
                try:
                    for i in reversed(range(lay.count())):
                        it = lay.itemAt(i)
                        try:
                            if it and it.spacerItem() is not None:
                                lay.removeItem(it)
                        except Exception:
                            pass
                    try:
                        # aligner explicitement la table si elle est dans ce layout
                        if hasattr(self, "table"):
                            lay.setAlignment(self.table, Qt.AlignTop | Qt.AlignHCenter)
                    except Exception:
                        pass
                    try:
                        lay.setContentsMargins(0, 0, 0, 0)
                        lay.setSpacing(4)
                    except Exception:
                        pass
                except Exception:
                    pass
            w = w.parentWidget()
    def _sf_reverse_rows_keep_total(self):
        """Inverse l'ordre d'affichage des lignes (dernière -> première) tout en gardant TOTAL en bas.
        Ne modifie pas les colonnes ni les styles globaux."""
        table = getattr(self, "table", None)
        if table is None:
            return
        rows = table.rowCount()
        cols = table.columnCount()
        if rows <= 1 or cols == 0:
            return
        # Identifier la ligne TOTAL
        total_row = None
        total_idx = None
        try:
            for r in range(rows):
                it = table.item(r, 0)
                if it and str(it.text()).strip().upper() == "TOTAL":
                    total_idx = r
                    break
            if total_idx is None:
                total_idx = rows - 1
            total_row = [table.item(total_idx, c).text() if table.item(total_idx, c) else "" for c in range(cols)]
        except Exception:
            total_row, total_idx = None, None
        # Sauver les lignes "données" (hors TOTAL) dans l'ordre actuel
        data_rows = []
        for r in range(rows):
            if r == total_idx:
                continue
            row = [table.item(r, c).text() if table.item(r, c) else "" for c in range(cols)]
            data_rows.append(row)
        if not data_rows:
            return
        # Reconstruire le tableau : données inversées + TOTAL
        table.setSortingEnabled(False)
        table.setRowCount(0)
        for row in reversed(data_rows):
            r = table.rowCount()
            table.insertRow(r)
            for c, val in enumerate(row):
                from PyQt5.QtWidgets import QTableWidgetItem
                it = QTableWidgetItem(val)
                table.setItem(r, c, it)
        # Réinsérer TOTAL en bas
        if total_row is not None:
            r = table.rowCount()
            table.insertRow(r)
            from PyQt5.QtWidgets import QTableWidgetItem
            for c, val in enumerate(total_row):
                it = QTableWidgetItem(val)
                table.setItem(r, c, it)
        # Réappliquer les réglages de lisibilité / styles de groupes si dispo
        try:
            self._sf_apply_readability_tweaks()
        except Exception:
            pass
        try:
            self._sf_apply_presentation_pdf_ui()
        except Exception:
            pass
class MainWindow(QMainWindow):
    def __init__(self):
        # === UI-only: stronger global theme & base font ===
        try:
            from PyQt5 import QtWidgets, QtGui
            app = QtWidgets.QApplication.instance()
            if app is not None:
                try:
                    # Bump base font a little (UI only)
                    f = app.font(); f.setPointSize(max(f.pointSize(), 10)); app.setFont(f)
                except Exception: pass
                try:
                    cur = app.styleSheet() or ''
                    app.setStyleSheet(cur + ('\n' if cur else '') + """
/* === Global UI-only theme (soft modern) === */
QWidget { font-family: 'Segoe UI', 'Roboto', Arial; font-size: 10pt; }
QTabBar::tab { padding: 8px 14px; margin: 2px; border-radius: 8px; }
QTabBar::tab:selected { background: qlineargradient(x1:0,y1:0,x2:0,y2:1, stop:0 #e6f0ff, stop:1 #cfe0ff); }
QTabBar::tab:!selected { background: #f2f4f8; }
QTableView, QTableWidget {
  gridline-color: #d5d9e0;
  alternate-background-color: #fafbfc;
  selection-background-color: #cfe8ff;
  selection-color: #002244;
}
QHeaderView::section {
  padding: 8px 10px;
  font-weight: 600;
  border: 0px;
  border-bottom: 1px solid #d5d9e0;
  background: #f7f9fc;
}
QPushButton {
  padding: 8px 14px;
  border-radius: 10px;
  background: #eef2f7;
  border: 1px solid #d7dde6;
}
QPushButton:hover { background: #e2e8f0; }
QPushButton:pressed { background: #d9e2ef; }
QLineEdit, QTextEdit, QComboBox {
  padding: 6px 8px; border-radius: 8px; border: 1px solid #d7dde6; background: #ffffff;
}
""")
                except Exception: pass
        except Exception:
            pass
        super().__init__()
        # === UI-only tweaks (delta minimal, no logic modified) ==================
        try:
            from PyQt5 import QtWidgets, QtCore, QtGui
            app = QtWidgets.QApplication.instance()
            if app is not None:
                try: app.setStyle('Fusion')
                except Exception: pass
                base_qss = """
                QTableView, QTableWidget {
                    gridline-color: palette(mid);
                    selection-background-color: palette(highlight);
                    selection-color: palette(highlighted-text);
                    alternate-background-color: palette(alternate-base);
                }
                QHeaderView::section {
                    padding: 6px;
                    font-weight: 600;
                    border: 0px;
                    border-bottom: 1px solid palette(mid);
                    background: palette(button);
                }
                QPushButton { padding: 6px 10px; border-radius: 6px; }
                QPushButton:pressed { transform: translateY(1px); }
                """
                try:
                    current = app.styleSheet() or ''
                    app.setStyleSheet(current + ('\n' if current else '') + base_qss)
                except Exception: pass
            # Tables: lisibilité
            try:
                tables = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QTableWidget)
                for tbl in tables or []:
                    try: tbl.setAlternatingRowColors(True)
                    except Exception: pass
                    try: tbl.verticalHeader().setVisible(False)
                    except Exception: pass
                    try: tbl.verticalHeader().setDefaultSectionSize(30)
                    except Exception: pass
                    try: tbl.horizontalHeader().setStretchLastSection(True)
                    except Exception: pass
                    try:
                        from PyQt5.QtWidgets import QHeaderView
                        tbl.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
                    except Exception: pass
            except Exception: pass
            # Boutons
            try:
                btns = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QPushButton)
                for b in btns or []:
                    try: b.setMinimumHeight(32)
                    except Exception: pass
                    try: b.setIconSize(QtCore.QSize(20, 20))
                    except Exception: pass
                    try:
                        if not (b.toolTip() or '').strip():
                            b.setToolTip((b.text() or '').strip())
                    except Exception: pass
            except Exception: pass
            # Layouts
            try:
                layouts = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QBoxLayout)
                for lay in layouts or []:
                    try: lay.setSpacing(8)
                    except Exception: pass
                    try: lay.setContentsMargins(8, 8, 8, 8)
                    except Exception: pass
            except Exception: pass
        except Exception: pass
        # === End UI-only tweaks ==================================================
        self.setWindowTitle(APP_TITLE); self.resize(1300, 850)
        ensure_dirs(); ensure_all_csv()
        self.settings=ensure_settings()
        tabs=QTabWidget()
        # Tirage agressif du contenu d'onglet vers le haut (thèmes récalcitrants)
        try:
            from PyQt5.QtCore import Qt
            tabs.setDocumentMode(True)
            ss = tabs.styleSheet() or ""
            ss += 'QTabWidget::pane { top: -8px; margin-top: 0px; padding-top: 0px; }\nQWidget#qt_tabwidget_stackedwidget { margin: 0px; padding: 0px; }\nQTabBar::tab { margin-top: 0px; }'
            ss += '\nQTabBar::tab {\n    padding: 6px 12px;\n    margin-top: 3px;\n    background: #FFFFFF;\n    color: #0F5132;\n    border: 1px solid #A9DCC1;\n    border-bottom-color: transparent;\n    border-top-left-radius: 6px;\n    border-top-right-radius: 6px;\n}\nQTabBar::tab:selected {\n    background: #BFF2D6;\n    color: #0F5132;\n    border-color: #A9DCC1;\n}\nQTabBar::tab:hover {\n    background: #E4F8ED;\n    color: #0F5132;\n}\nQTabWidget::pane { top: -6px; margin-top: 0; padding-top: 0; border-top: 1px solid #c8c8c8; }\nQWidget#qt_tabwidget_stackedwidget { margin: 0; padding: 0; }\n'
            tabs.setStyleSheet(ss)
            tabs.setContentsMargins(0, 0, 0, 0)
        except Exception:
            pass
        # Compactage agressif du gap au-dessus du contenu des onglets
        try:
            from PyQt5.QtCore import Qt
            tabs.setDocumentMode(True)
            ss = tabs.styleSheet() or ""
            ss += 'QTabWidget::pane { top: 0px; margin-top: 0px; padding-top: 0px; }\nQWidget#qt_tabwidget_stackedwidget { margin: 0px; padding: 0px; }\nQTabBar::tab { margin-top: 0px; }'
            tabs.setStyleSheet(ss)
            tabs.setContentsMargins(0, 0, 0, 0)
        except Exception:
            pass
        tabs.addTab(DashboardTab(self.settings, self), "Accueil")
        tabs.addTab(ClientsTab(self), "Clients")
        tabs.addTab(CatalogueTab(self), "Catalogue")
        tabs.addTab(DevisTab(self.settings, self), "Devis")
        tabs.addTab(FacturesTab(self.settings, self), "Factures")
        
        suivi_tab = SuiviFinancierTab(self.settings, self)
        tabs.addTab(suivi_tab, "Suivi financier")
        try:
            self.suivi_financier_tab = suivi_tab
        except Exception:
            pass
        bilan_tab = BilanPaiementsTab(parent=self)
        try:
            index_sf = tabs.indexOf(suivi_tab)
            if index_sf >= 0:
                tabs.insertTab(index_sf + 1, bilan_tab, "Bilan Paiements")
            else:
                tabs.addTab(bilan_tab, "Bilan Paiements")
        except Exception:
            tabs.addTab(bilan_tab, "Bilan Paiements")
        try:
            self.bilan_paiements_tab = bilan_tab
        except Exception:
            pass
        tabs.addTab(UrssafTab(self.settings, self), "Synthèse & URSSAF") if "UrssafTab" in globals() else None
        tabs.addTab(SettingsTab(self.settings, self), "Paramètres")
        tabs.addTab(SettingsEmailTab(self.settings, self), "Paramètres (Email)")
        
        tabs.addTab(EFacturationTab(self.settings, self), "E-facturation (PPF/PDP)")
        self.setCentralWidget(tabs)
        try:
            self.tabs = tabs
        except Exception:
            pass
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda: tabs.setCurrentIndex(0))
        except Exception:
            pass
        # === UI-only: polish tables & toolbars ===
        try:
            from PyQt5 import QtWidgets, QtCore, QtGui
            # Enlarge tables and headers
            for tbl in getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QTableWidget) or []:
                try:
                    f = tbl.font(); f.setPointSize(max(f.pointSize(), 10)); tbl.setFont(f)
                    hf = tbl.horizontalHeader().font(); hf.setPointSize(max(hf.pointSize(), 10)); tbl.horizontalHeader().setFont(hf)
                except Exception: pass
                try: tbl.verticalHeader().setDefaultSectionSize(max(tbl.verticalHeader().defaultSectionSize(), 34))
                except Exception: pass
                try:
                    eff = QtWidgets.QGraphicsDropShadowEffect(tbl); eff.setBlurRadius(10); eff.setOffset(0,1); tbl.setGraphicsEffect(eff)
                except Exception: pass
            # Bigger buttons with consistent icon size
            for b in getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QPushButton) or []:
                try: b.setMinimumHeight(max(b.minimumHeight(), 36))
                except Exception: pass
                try: b.setIconSize(QtCore.QSize(22, 22))
                except Exception: pass
                # Color hints for destructive or primary actions (by text)
                try:
                    t = (b.text() or '').lower()
                    if 'supprimer' in t or 'delete' in t:
                        b.setStyleSheet(b.styleSheet() + ' QPushButton { background:#fde2e2; border:1px solid #f5b5b5; } QPushButton:hover { background:#fbd2d2; }')
                    elif 'nouveau' in t or 'new' in t or 'créer' in t or 'create' in t:
                        b.setStyleSheet(b.styleSheet() + ' QPushButton { background:#e6f7ff; border:1px solid #b3e5ff; } QPushButton:hover { background:#d7f1ff; }')
                except Exception: pass
            # Add spacing and stretch in top bars of Devis/Factures tabs (robuste au réordonnancement)
            try:
                tabs = self.findChild(QtWidgets.QTabWidget)
                if tabs:
                    for i in range(tabs.count()):
                        title = (tabs.tabText(i) or "").lower()
                        if "devis" in title or "factures" in title:
                            w = tabs.widget(i)
                            for lay in w.findChildren(QtWidgets.QHBoxLayout) or []:
                                try: lay.setSpacing(max(lay.spacing(), 10))
                                except Exception: pass
                                try:
                                    m = lay.contentsMargins()
                                    lay.setContentsMargins(max(m.left(),8), max(m.top(),6), max(m.right(),8), max(m.bottom(),6))
                                except Exception: pass
                                try: lay.addStretch(1)
                                except Exception: pass
                                break
            except Exception: pass
            # (dedup removed old index-based polish)
        except Exception:
            pass
        # === End polish ===
        # --- UI-only: adapt columns to content + stretch 'Objet' ---
        try:
            from PyQt5 import QtCore
            from PyQt5.QtWidgets import QTableWidget, QHeaderView
            tables = getattr(self, 'findChildren', lambda *_: [])(QTableWidget)
            for tbl in tables or []:
                try:
                    tbl.setWordWrap(False)
                    tbl.setTextElideMode(QtCore.Qt.ElideRight)
                    hdr = tbl.horizontalHeader()
                    # map header -> index
                    name_to_idx = {}
                    try:
                        for c in range(tbl.columnCount()):
                            it = tbl.horizontalHeaderItem(c)
                            txt = (it.text() if it else '').strip()
                            if txt: name_to_idx[txt] = c
                    except Exception: pass
                    try:
                        for c in range(tbl.columnCount()):
                            hdr.setSectionResizeMode(c, QHeaderView.Interactive)
                    except Exception: pass
                    for key in ('N°','Date','Client','Total TTC','Statut','Actions'):
                        if key in name_to_idx:
                            try: hdr.setSectionResizeMode(name_to_idx[key], QHeaderView.ResizeToContents)
                            except Exception: pass
                    if 'Objet' in name_to_idx:
                        # --- Status-based coloring (UI-only) ---
                        try:
                            status_col = name_to_idx.get('Statut', None)
                            if status_col is not None:
                                from PyQt5 import QtGui
                                # Map status -> (bg, fg)
                                pal = {
                                    'brouillon': ('#FFA726', '#000000'),   # orange
                                    'envoyé':    ('#FFD54F', '#000000'),   # yellow
                                    'envoye':    ('#FFD54F', '#000000'),   # fallback sans accent
                                    'accepté':   ('#2E7D32', '#FFFFFF'),   # dark green
                                    'accepte':   ('#2E7D32', '#FFFFFF'),
                                    'acompte':   ('#A5D6A7', '#000000'),   # light green
                                    'refusé':    ('#E53935', '#FFFFFF'),   # red
                                    'refuse':    ('#E53935', '#FFFFFF'),
                                }
                                for r in range(tbl.rowCount()):
                                    it = tbl.item(r, status_col)
                                    if not it: 
                                        continue
                                    s = (it.text() or '').strip().lower()
                                    bgfg = pal.get(s)
                                    if bgfg:
                                        bg, fg = bgfg
                                        try: it.setBackground(QtGui.QBrush(QtGui.QColor(bg)))
                                        except Exception: pass
                                        try: it.setForeground(QtGui.QBrush(QtGui.QColor(fg)))
                                        except Exception: pass
                        except Exception:
                            pass
                        # --- End status coloring ---
                        try: hdr.setSectionResizeMode(name_to_idx['Objet'], QHeaderView.Stretch)
                        except Exception: pass
                    # --- Extra sizing rules for known tables (Clients, Catalogue) ---
                    try:
                        from PyQt5.QtWidgets import QHeaderView as _QHV
                        # Clients list
                        if all(k in name_to_idx for k in ('ID','Nom','Email','Adresse','Ville','CodePostal')):
                            try: hdr.setSectionResizeMode(name_to_idx['ID'], _QHV.ResizeToContents)
                            except Exception: pass
                            for k in ('Nom','Email','Adresse','Ville'):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.Stretch)
                                except Exception: pass
                            for k in ('CodePostal',):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                except Exception: pass
                            # Téléphone column may be titled 'Téléphone' or 'Telephone'
                            for k in ('Téléphone','Telephone'):
                                if k in name_to_idx:
                                    try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                    except Exception: pass
                        # Catalogue main tab (if present)
                        if all(k in name_to_idx for k in ('ID','Réf','Type','Désignation','Prix HT','TVA %','Unité')):
                            for k in ('ID','Réf','Type','Prix HT','TVA %','Unité'):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                except Exception: pass
                            try: hdr.setSectionResizeMode(name_to_idx['Désignation'], _QHV.Stretch)
                            except Exception: pass
                            if 'Catégorie' in name_to_idx:
                                try: hdr.setSectionResizeMode(name_to_idx['Catégorie'], _QHV.Stretch)
                                except Exception: pass
                    except Exception:
                        pass
                    try: tbl.resizeColumnsToContents()
                    except Exception: pass
                except Exception: pass
        except Exception: pass
        # --- End UI-only column sizing ---
# === Global light-blue background across the app (added) ===
def _find_table_col_by_header(table, names=set()):
    try:
        names = { (n or '').strip().lower() for n in (names or set()) }
        for c in range(table.columnCount()):
            it = table.horizontalHeaderItem(c)
            if it and (it.text() or '').strip().lower() in names:
                return c
    except Exception:
        pass
    return None
def _apply_global_background():
    try:
        from PyQt5 import QtWidgets
        app = QtWidgets.QApplication.instance()
        if app:
            css = "\n".join([
                "QMainWindow { background: #EAF6FF; }",
                "QWidget { background: #EAF6FF; }"
            ])
            try:
                app.setStyleSheet((app.styleSheet() or "") + "\n" + css)
            except Exception:
                pass
    except Exception:
        pass
def main():
    import faulthandler, io, os
    try:
        crash_log = open(os.path.join(BASE_DIR, 'crash_native.log'), 'a', encoding='utf-8')
        faulthandler.enable(crash_log)
    except Exception:
        pass
    try:
        app=QApplication(sys.argv);
        try:
            auto_migrate_prenom_all()
        except Exception:
            pass
        try:
            from PyQt5.QtCore import QTimer as __QTimer
            __QTimer.singleShot(1800, _nf203__inject_dev_seal_button)
        except Exception:
            pass
        w=MainWindow(); _apply_global_background(); w.show(); sys.exit(app.exec_())
    except Exception:
        log_error("MAIN\n"+__import__('traceback').format_exc())
# ============================================================================
# >>> AIDE INTÉGRÉE — Onglet + Menu (HelpTab)  [AUTO-GÉNÉRÉ - DELTA MINIMAL] <<<
# ============================================================================
from pathlib import Path as _Help_Path
from PyQt5 import QtWidgets as _Help_QtWidgets, QtGui as _Help_QtGui, QtCore as _Help_QtCore
from PyQt5.QtCore import Qt as _Help_Qt, QUrl as _Help_QUrl
from PyQt5.QtGui import QDesktopServices as _Help_QDesktopServices
# WebEngine (optionnel)
try:
    from PyQt5.QtWebEngineWidgets import QWebEngineView as _Help_QWebEngineView
    from PyQt5.QtWebEngineCore import QWebEnginePage as _Help_QWebEnginePage
    _HELP_HAS_WEBENGINE = True
except Exception:
    _HELP_HAS_WEBENGINE = False
def _help_clean_html_text(s: str) -> str:
    import re as _re
    s = _re.sub(r"<[^>]+>", "", s or "", flags=_re.DOTALL)
    return " ".join(s.split())
def _help_read_text_safe(path: _Help_Path) -> str:
    try:
        return path.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        try:
            return path.read_text(encoding="latin-1", errors="ignore")
        except Exception:
            return ""
def _help_extract_title(path: _Help_Path) -> str:
    import re as _re
    txt = _help_read_text_safe(path)
    m = _re.search(r"<title>(.*?)</title>", txt, _re.IGNORECASE | _re.DOTALL)
    if m: return _help_clean_html_text(m.group(1))
    m = _re.search(r"<h1[^>]*>(.*?)</h1>", txt, _re.IGNORECASE | _re.DOTALL)
    if m: return _help_clean_html_text(m.group(1))
    return path.stem.replace("_", " ")
def _help_discover_files(help_dir: _Help_Path):
    help_dir.mkdir(parents=True, exist_ok=True)
    items = []
    for p in sorted(help_dir.glob("*.htm*")):
        if p.suffix.lower() in {".html", ".htm"} and p.is_file():
            items.append({"title": _help_extract_title(p), "path": p})
    return items
class _Help_PageSearchBar(_Help_QtWidgets.QWidget):
    findRequested = _Help_QtCore.pyqtSignal(str, bool)
    def __init__(self, parent=None):
        super().__init__(parent)
        self.edit = _Help_QtWidgets.QLineEdit(placeholderText="Rechercher dans la page…")
        self.edit.setClearButtonEnabled(True)
        self.btn_prev = _Help_QtWidgets.QToolButton(text="◀")
        self.btn_next = _Help_QtWidgets.QToolButton(text="▶")
        self.lbl_hits = _Help_QtWidgets.QLabel("")
        lay = _Help_QtWidgets.QHBoxLayout(self); lay.setContentsMargins(0,0,0,0)
        lay.addWidget(self.edit, 1); lay.addWidget(self.btn_prev); lay.addWidget(self.btn_next); lay.addWidget(self.lbl_hits, 0)
        self.btn_prev.clicked.connect(lambda: self._emit(False))
        self.btn_next.clicked.connect(lambda: self._emit(True))
        self.edit.returnPressed.connect(lambda: self._emit(True))
    def _emit(self, forward=True):
        txt = self.edit.text() or ""
        if txt.strip(): self.findRequested.emit(txt, forward)
    def set_hits_label(self, text: str): self.lbl_hits.setText(text)
class BilanPaiementsTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._missing_warned = set()
        self.base_dir = BASE_DIR
        self.data_dir = self._resolve_data_dir()
        self.tdir = os.path.join(self.data_dir, "_t")
        try:
            os.makedirs(self.tdir, exist_ok=True)
        except Exception:
            pass
        root = QVBoxLayout(self)
        try:
            root.setContentsMargins(12, 8, 12, 8)
            root.setSpacing(6)
        except Exception:
            pass
        header = QHBoxLayout()
        header.setSpacing(6)
        root.addLayout(header)
        header.addWidget(QLabel("Du"))
        self.de_from = QDateEdit()
        self.de_from.setCalendarPopup(True)
        self.de_from.setDisplayFormat("yyyy-MM-dd")
        header.addWidget(self.de_from)
        header.addWidget(QLabel("Au"))
        self.de_to = QDateEdit()
        self.de_to.setCalendarPopup(True)
        self.de_to.setDisplayFormat("yyyy-MM-dd")
        header.addWidget(self.de_to)
        try:
            from PyQt5.QtCore import QDate
        except Exception:
            QDate = None
        if QDate is not None:
            try:
                self.de_from.setDate(QDate.currentDate().addMonths(-1))
            except Exception:
                pass
            try:
                self.de_to.setDate(QDate.currentDate())
            except Exception:
                pass
        header.addStretch(1)
        self.btn_generate = QPushButton("Générer")
        header.addWidget(self.btn_generate)
        self.btn_reload = QPushButton("Recharger")
        header.addWidget(self.btn_reload)
        self.btn_open_folder = QPushButton("Ouvrir dossier _t")
        header.addWidget(self.btn_open_folder)
        self.btn_open_ledger = QPushButton("Ouvrir CSV ledger")
        header.addWidget(self.btn_open_ledger)
        self.btn_open_bilan = QPushButton("Ouvrir CSV bilan")
        header.addWidget(self.btn_open_bilan)
        self.btn_export_pdf = QPushButton("Exporter PDF")
        header.addWidget(self.btn_export_pdf)
        self.btn_export_excel = QPushButton("Exporter Excel")
        header.addWidget(self.btn_export_excel)
        self.tabs = QTabWidget()
        root.addWidget(self.tabs)
        self.tbl_ledger = QTableWidget()
        self.tbl_bilan = QTableWidget()
        self.tabs.addTab(self.tbl_ledger, "Ledger (period)")
        self.tabs.addTab(self.tbl_bilan, "Bilan (period)")
        self._prepare_table(self.tbl_ledger)
        self._prepare_table(self.tbl_bilan)
        self.btn_generate.clicked.connect(self.on_generate)
        self.btn_reload.clicked.connect(self.load_tables)
        self.btn_open_folder.clicked.connect(self.on_open_folder)
        self.btn_open_ledger.clicked.connect(lambda: self.on_open_csv(os.path.join(self.tdir, "ledger_read_period.csv"), "CSV ledger"))
        self.btn_open_bilan.clicked.connect(lambda: self.on_open_csv(os.path.join(self.tdir, "bilan_read_period.csv"), "CSV bilan"))
        self.btn_export_pdf.clicked.connect(self.on_export_pdf)
        self.btn_export_excel.clicked.connect(self.on_export_excel)
        self.load_tables()

    def _resolve_data_dir(self):
        try:
            data = globals().get("DATA_DIR")
            if data:
                return data
        except Exception:
            pass
        return os.path.join(BASE_DIR, "data")

    def _prepare_table(self, table):
        try:
            table.setEditTriggers(QAbstractItemView.NoEditTriggers)
        except Exception:
            pass
        try:
            table.setSelectionBehavior(QAbstractItemView.SelectRows)
        except Exception:
            pass
        try:
            table.setAlternatingRowColors(True)
        except Exception:
            pass
        try:
            table.verticalHeader().setVisible(False)
        except Exception:
            pass
        try:
            table.setSortingEnabled(False)
        except Exception:
            pass

    def load_tables(self):
        ledger_path = os.path.join(self.tdir, "ledger_read_period.csv")
        bilan_path = os.path.join(self.tdir, "bilan_read_period.csv")
        ledger_rows = self._rows_with_totals(self._load_rows(ledger_path, "Ledger (period)"))
        bilan_rows = self._rows_with_totals(self._load_rows(bilan_path, "Bilan (period)"))
        self._populate_table(self.tbl_ledger, ledger_rows)
        self._populate_table(self.tbl_bilan, bilan_rows)

    def _load_rows(self, path, title):
        if not os.path.exists(path):
            if path not in self._missing_warned:
                self._warn_missing(title, path)
                self._missing_warned.add(path)
            return []
        try:
            return self._read_csv(path)
        except Exception as exc:
            QMessageBox.critical(self, title, str(exc))
            return []

    def _warn_missing(self, title, path):
        QMessageBox.warning(self, title, "Fichier introuvable:\n" + str(path))

    def _read_csv(self, path):
        encodings = ["utf-8-sig", "utf-8", "cp1252"]
        last_error = None
        import csv as _csv
        for enc in encodings:
            try:
                with open(path, "r", encoding=enc, newline="") as handle:
                    reader = _csv.reader(handle)
                    return [row for row in reader]
            except Exception as exc:
                last_error = exc
        if last_error is not None:
            raise last_error
        return []

    def _rows_with_totals(self, rows):
        if not rows:
            return []
        headers, data_rows = self._split_rows(rows)
        if not headers:
            return []
        total_row = self._compute_total_row(headers, data_rows)
        result = [headers]
        result.extend(data_rows)
        if total_row:
            result.append(total_row)
        return result

    def _split_rows(self, rows):
        if not rows:
            return [], []
        headers = [str(h) for h in rows[0]]
        data_rows = []
        for row in rows[1:]:
            first = row[0] if row else ""
            if isinstance(first, str) and first.strip().upper() == "TOTAL":
                continue
            data_rows.append(row)
        return headers, data_rows

    def _compute_total_row(self, headers, data_rows):
        if not headers:
            return []
        total = ["TOTAL"] + [""] * max(0, len(headers) - 1)
        known = {"montant", "ttc", "encaissé_periode", "encaissé_total_au_to", "restant_au_to", "reste", "total"}
        for idx in range(1, len(headers)):
            values = []
            for row in data_rows:
                if idx < len(row):
                    num = self._to_number(row[idx])
                    if num is not None:
                        values.append(num)
            if not values:
                continue
            header_low = str(headers[idx]).strip().lower()
            if header_low in known or len(values) >= max(1, int(0.6 * len(data_rows))):
                try:
                    total[idx] = "{:.2f}".format(sum(values))
                except Exception:
                    total[idx] = ""
        return total

    def _to_number(self, value):
        if value is None:
            return None
        if isinstance(value, (int, float)):
            try:
                return float(value)
            except Exception:
                return None
        text = str(value).strip()
        if not text:
            return None
        replacements = [("€", ""), ("\u202f", ""), ("\xa0", ""), (" ", "")]
        for old, new in replacements:
            text = text.replace(old, new)
        text = text.replace(",", ".")
        try:
            return float(text)
        except Exception:
            return None

    def _populate_table(self, table, rows):
        table.clear()
        if not rows:
            table.setRowCount(0)
            table.setColumnCount(0)
            return
        headers = rows[0]
        data_rows = rows[1:]
        table.setColumnCount(len(headers))
        table.setRowCount(len(data_rows))
        for col, header in enumerate(headers):
            table.setHorizontalHeaderItem(col, QTableWidgetItem(str(header)))
        total_index = None
        if data_rows:
            last = data_rows[-1][0] if data_rows[-1] else ""
            if isinstance(last, str) and last.strip().upper() == "TOTAL":
                total_index = len(data_rows) - 1
        for row_index, row in enumerate(data_rows):
            for col_index in range(len(headers)):
                value = row[col_index] if col_index < len(row) else ""
                item = QTableWidgetItem(str(value) if value is not None else "")
                if self._to_number(value) is not None:
                    item.setTextAlignment(Qt.AlignRight | Qt.AlignVCenter)
                if total_index is not None and row_index == total_index:
                    try:
                        from PyQt5.QtGui import QFont
                        font = item.font()
                        font.setBold(True)
                        item.setFont(font)
                    except Exception:
                        pass
                table.setItem(row_index, col_index, item)
        try:
            table.resizeColumnsToContents()
        except Exception:
            pass

    def on_generate(self):
        du = self.de_from.date().toString("yyyy-MM-dd")
        au = self.de_to.date().toString("yyyy-MM-dd")
        runner = os.path.join(self.base_dir, "run_ledger_dump_plus.py")
        if not os.path.exists(runner):
            self._log_run("missing_script", "", "", du, au)
            QMessageBox.critical(self, "Bilan Paiements", "Script introuvable:\n" + str(runner))
            return
        env = os.environ.copy()
        env["AE_PAUSE"] = "0"
        import subprocess, sys
        try:
            proc = subprocess.run([sys.executable, runner, "--from", du, "--to", au], cwd=self.base_dir, env=env, capture_output=True, text=True)
        except Exception as exc:
            self._log_run("exception", "", str(exc), du, au)
            QMessageBox.critical(self, "Bilan Paiements", str(exc))
            return
        self._log_run(str(proc.returncode), proc.stdout, proc.stderr, du, au)
        if proc.returncode != 0:
            message = proc.stderr or proc.stdout or "Erreur inconnue"
            QMessageBox.critical(self, "Bilan Paiements", message)
            return
        self.load_tables()
        QMessageBox.information(self, "Bilan Paiements", "Génération terminée.")

    def _log_run(self, rc, stdout_text, stderr_text, du, au):
        try:
            from datetime import datetime
            os.makedirs(self.data_dir, exist_ok=True)
            log_path = os.path.join(self.data_dir, "bilan_export.log")
            stamp = datetime.utcnow().isoformat()
            rc_text = str(rc)
            out_text = "" if stdout_text is None else str(stdout_text).strip().replace("\n", "\\n")
            err_text = "" if stderr_text is None else str(stderr_text).strip().replace("\n", "\\n")
            line = "{} rc={} du={} au={} stdout={} stderr={}\n".format(stamp, rc_text, du, au, out_text, err_text)
            with open(log_path, "a", encoding="utf-8") as handle:
                handle.write(line)
        except Exception:
            pass

    def on_open_folder(self):
        try:
            if not os.path.isdir(self.tdir):
                os.makedirs(self.tdir, exist_ok=True)
            _open_file_async(self.tdir)
        except Exception as exc:
            QMessageBox.critical(self, "Bilan Paiements", str(exc))

    def on_open_csv(self, path, title):
        if not os.path.exists(path):
            QMessageBox.warning(self, title, "Fichier introuvable:\n" + str(path))
            return
        try:
            _open_file_async(path)
        except Exception as exc:
            QMessageBox.critical(self, title, str(exc))

    def on_export_pdf(self):
        ledger_path = os.path.join(self.tdir, "ledger_read_period.csv")
        bilan_path = os.path.join(self.tdir, "bilan_read_period.csv")
        ledger_rows = self._rows_with_totals(self._load_rows(ledger_path, "Ledger (period)"))
        bilan_rows = self._rows_with_totals(self._load_rows(bilan_path, "Bilan (period)"))
        if not ledger_rows and not bilan_rows:
            QMessageBox.warning(self, "Export PDF", "Aucune donnée à exporter.")
            return
        path, _ = QFileDialog.getSaveFileName(self, "Exporter PDF", os.path.join(self.tdir, "bilan_paiements.pdf"), "PDF (*.pdf)")
        if not path:
            return
        try:
            from PyQt5.QtPrintSupport import QPrinter
            from PyQt5.QtGui import QTextDocument
            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(path)
            html = self._build_pdf_html(ledger_rows, bilan_rows)
            doc = QTextDocument()
            doc.setHtml(html)
            doc.print_(printer)
        except Exception as exc:
            QMessageBox.critical(self, "Export PDF", str(exc))
            return
        QMessageBox.information(self, "Export PDF", "PDF créé.")

    def _build_pdf_html(self, ledger_rows, bilan_rows):
        parts = []
        parts.append("<h1 style=\"margin:0 0 10px 0;\">Bilan des paiements</h1>")
        periode = "<div style='margin:0 0 12px 0; font-size:10pt;'>Période: {} → {}</div>".format(
            self.de_from.date().toString("yyyy-MM-dd"),
            self.de_to.date().toString("yyyy-MM-dd")
        )
        parts.append(periode)
        parts.append(self._make_html_table("Ledger (period)", ledger_rows))
        parts.append("<div style='height:12px'></div>")
        parts.append(self._make_html_table("Bilan (period)", bilan_rows))
        return "".join(parts)

    def _make_html_table(self, title, rows):
        if not rows:
            return "<h2>{}</h2><p>(vide)</p>".format(self._escape_html(title))
        header_cells = "".join("<th>{}</th>".format(self._escape_html(h)) for h in rows[0])
        body_rows = []
        for row in rows[1:]:
            cells = []
            for cell in row:
                align = "right" if self._to_number(cell) is not None else "left"
                cells.append("<td style='text-align:{}'>{}</td>".format(align, self._escape_html(cell)))
            body_rows.append("<tr>{}</tr>".format("".join(cells)))
        table_html = "<h2 style=\"margin:0 0 6px 0;\">{}</h2><table border=\"1\" cellspacing=\"0\" cellpadding=\"4\" style=\"border-collapse:collapse; font-size:10pt;\"><thead><tr style=\"background:#f0f0f0\">{}</tr></thead><tbody>{}</tbody></table>".format(
            self._escape_html(title),
            header_cells,
            "".join(body_rows)
        )
        return table_html

    def _escape_html(self, value):
        text = str(value)
        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

    def on_export_excel(self):
        ledger_path = os.path.join(self.tdir, "ledger_read_period.csv")
        bilan_path = os.path.join(self.tdir, "bilan_read_period.csv")
        ledger_rows = self._rows_with_totals(self._load_rows(ledger_path, "Ledger (period)"))
        bilan_rows = self._rows_with_totals(self._load_rows(bilan_path, "Bilan (period)"))
        if not ledger_rows and not bilan_rows:
            QMessageBox.warning(self, "Export Excel", "Aucune donnée à exporter.")
            return
        path, _ = QFileDialog.getSaveFileName(self, "Exporter Excel", os.path.join(self.tdir, "bilan_paiements.xls"), "Excel (*.xls *.xml)")
        if not path:
            return
        try:
            workbook = []
            workbook.append("<?xml version=\"1.0\"?>")
            workbook.append("<?mso-application progid=\"Excel.Sheet\"?>")
            workbook.append('<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet">')
            from datetime import datetime
            workbook.append('<DocumentProperties xmlns="urn:schemas-microsoft-com:office:office">')
            workbook.append('<Title>Bilan paiements</Title>')
            workbook.append('<Created>{}</Created>'.format(datetime.utcnow().isoformat()))
            workbook.append('</DocumentProperties>')
            workbook.append('<Styles><Style ss:ID="sHeader"><Font ss:Bold="1"/></Style></Styles>')
            if ledger_rows:
                workbook.append(self._export_sheet_xml("Ledger period", ledger_rows))
            if bilan_rows:
                workbook.append(self._export_sheet_xml("Bilan period", bilan_rows))
            workbook.append('</Workbook>')
            with open(path, "w", encoding="utf-8") as handle:
                handle.write("\n".join(workbook))
        except Exception as exc:
            QMessageBox.critical(self, "Export Excel", str(exc))
            return
        QMessageBox.information(self, "Export Excel", "Fichier Excel créé.")

    def _export_sheet_xml(self, name, rows):
        safe = "".join(ch if ch.isalnum() or ch in " _-" else "_" for ch in str(name))
        safe = (safe[:31] or "Sheet1")
        xml = []
        xml.append('<Worksheet ss:Name="{}">'.format(self._xml_escape(safe)))
        xml.append('<Table>')
        for row in rows:
            xml.append('<Row>')
            for cell in row:
                num = self._to_number(cell)
                if num is not None:
                    xml.append('<Cell><Data ss:Type="Number">{}</Data></Cell>'.format("{:.2f}".format(num)))
                else:
                    xml.append('<Cell><Data ss:Type="String">{}</Data></Cell>'.format(self._xml_escape(cell)))
            xml.append('</Row>')
        xml.append('</Table>')
        xml.append('</Worksheet>')
        return "\n".join(xml)

    def _xml_escape(self, value):
        text = str(value)
        return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")



class HelpTab(_Help_QtWidgets.QWidget):
    requestOpenInBrowser = _Help_QtCore.pyqtSignal(_Help_Path)
    def __init__(self, app_dir: _Help_Path, parent=None):
        super().__init__(parent)
        self.setObjectName("HelpTab")
        self.app_dir = _Help_Path(app_dir)
        self.help_dir = self.app_dir / "data" / "help"
        self.zoom_factor = 1.0
        self.items = _help_discover_files(self.help_dir)
        self.title_filter = _Help_QtWidgets.QLineEdit(placeholderText="Rechercher un titre…")
        self.title_filter.setClearButtonEnabled(True)
        self.btn_refresh = _Help_QtWidgets.QToolButton(text="↻")
        self.btn_open_dir = _Help_QtWidgets.QPushButton("Ouvrir dossier Aide")
        self.btn_open_browser = _Help_QtWidgets.QPushButton("Ouvrir dans le navigateur")
        self.btn_print = _Help_QtWidgets.QPushButton("Imprimer")
        self.btn_zoom_out = _Help_QtWidgets.QToolButton(text="−")
        self.btn_zoom_reset = _Help_QtWidgets.QToolButton(text="100%")
        self.btn_zoom_in = _Help_QtWidgets.QToolButton(text="+")
        topbar = _Help_QtWidgets.QHBoxLayout()
        topbar.addWidget(self.title_filter, 1)
        topbar.addWidget(self.btn_refresh)
        topbar.addSpacing(6)
        topbar.addWidget(self.btn_zoom_out); topbar.addWidget(self.btn_zoom_reset); topbar.addWidget(self.btn_zoom_in)
        topbar.addSpacing(12)
        topbar.addWidget(self.btn_open_dir); topbar.addWidget(self.btn_open_browser); topbar.addWidget(self.btn_print)
        self.list = _Help_QtWidgets.QListWidget(); self.list.setMinimumWidth(270)
        if _HELP_HAS_WEBENGINE:
            self.viewer = _Help_QWebEngineView(); self.viewer.setZoomFactor(self.zoom_factor)
        else:
            self.viewer = _Help_QtWidgets.QTextBrowser(); self.viewer.setOpenExternalLinks(True)
        self.page_search = _Help_PageSearchBar()
        splitter = _Help_QtWidgets.QSplitter(_Help_QtCore.Qt.Horizontal)
        splitter.addWidget(self.list)
        right = _Help_QtWidgets.QWidget()
        right_lay = _Help_QtWidgets.QVBoxLayout(right); right_lay.setContentsMargins(0,0,0,0)
        right_lay.addWidget(self.page_search); right_lay.addWidget(self.viewer, 1)
        splitter.addWidget(right); splitter.setStretchFactor(1, 1)
        layout = _Help_QtWidgets.QVBoxLayout(self); layout.addLayout(topbar); layout.addWidget(splitter)
        self._all_items = self.items[:]; self._populate_list(self.items)
        self.title_filter.textChanged.connect(self._apply_title_filter)
        self.list.currentItemChanged.connect(self._on_select)
        self.btn_refresh.clicked.connect(self.refresh_list)
        self.btn_open_dir.clicked.connect(self.open_help_dir)
        self.btn_open_browser.clicked.connect(self.open_in_browser)
        self.btn_print.clicked.connect(self.print_current)
        self.page_search.findRequested.connect(self.find_in_page)
        self.btn_zoom_in.clicked.connect(lambda: self.set_zoom(self.zoom_factor + 0.1))
        self.btn_zoom_out.clicked.connect(lambda: self.set_zoom(self.zoom_factor - 0.1))
        self.btn_zoom_reset.clicked.connect(lambda: self.set_zoom(1.0))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+F"), self, activated=self._focus_page_search)
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl++"), self, activated=lambda: self.set_zoom(self.zoom_factor + 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+="), self, activated=lambda: self.set_zoom(self.zoom_factor + 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+-"), self, activated=lambda: self.set_zoom(self.zoom_factor - 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+0"), self, activated=lambda: self.set_zoom(1.0))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("F5"), self, activated=self.refresh_list)
        if self.list.count() > 0: self.list.setCurrentRow(0)
        else: self._show_empty_placeholder()
    def _populate_list(self, items):
        self.list.clear()
        for it in items:
            li = _Help_QtWidgets.QListWidgetItem(it["title"])
            li.setData(_Help_QtCore.Qt.UserRole, str(it["path"]))
            self.list.addItem(li)
    def _apply_title_filter(self, text):
        text = (text or "").strip().lower()
        if not text: self._populate_list(self._all_items); return
        filtered = [it for it in self._all_items if text in it["title"].lower()]
        self._populate_list(filtered)
        if self.list.count() > 0: self.list.setCurrentRow(0)
    def _on_select(self, cur, prev):
        if not cur: return
        path = _Help_Path(cur.data(_Help_QtCore.Qt.UserRole))
        self._load_path(path)
    def _load_path(self, path: _Help_Path):
        if not path or not path.exists(): self._set_viewer_html("<h3>Fichier introuvable</h3>"); return
        if _HELP_HAS_WEBENGINE: self.viewer.setUrl(_Help_QUrl.fromLocalFile(str(path)))
        else: self.viewer.setHtml(_help_read_text_safe(path))
    def _set_viewer_html(self, html: str):
        if _HELP_HAS_WEBENGINE: self.viewer.setHtml(html)
        else: self.viewer.setHtml(html)
    def refresh_list(self):
        self._all_items = _help_discover_files(self.help_dir)
        self._apply_title_filter(self.title_filter.text())
    def open_help_dir(self): _Help_QDesktopServices.openUrl(_Help_QUrl.fromLocalFile(str(self.help_dir)))
    def open_in_browser(self):
        p = self.current_path()
        if p and p.exists(): _Help_QDesktopServices.openUrl(_Help_QUrl.fromLocalFile(str(p)))
    def print_current(self):
        p = self.current_path()
        if not p or not p.exists(): return
        try:
            from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
            printer = QPrinter(QPrinter.HighResolution)
            dlg = QPrintDialog(printer, self)
            if dlg.exec_() == _Help_QtWidgets.QDialog.Accepted:
                if _HELP_HAS_WEBENGINE: self.viewer.page().print(printer, lambda ok: None)
                else: self.viewer.document().print_(printer)
        except Exception as e:
            _Help_QtWidgets.QMessageBox.warning(self, "Imprimer", f"Impression indisponible : {e}")
    def find_in_page(self, text: str, forward: bool=True):
        text = text or ""
        if not text.strip(): return
        if _HELP_HAS_WEBENGINE:
            flags = _Help_QWebEnginePage.FindFlags()
            if not forward: flags |= _Help_QWebEnginePage.FindBackward
            self.viewer.findText("", _Help_QWebEnginePage.FindFlags())
            self.viewer.findText(text, flags)
            self.page_search.set_hits_label("")
        else:
            doc = self.viewer.document()
            cursor = self.viewer.textCursor()
            move_mode = _Help_QtGui.QTextDocument.FindBackward if not forward else _Help_QtGui.QTextDocument.FindFlag(0)
            found = self.viewer.find(text, move_mode)
            if not found:
                cursor.movePosition(_Help_QtGui.QTextCursor.Start if forward else _Help_QtGui.QTextCursor.End)
                self.viewer.setTextCursor(cursor); self.viewer.find(text, move_mode)
    def set_zoom(self, factor: float):
        factor = max(0.5, min(3.0, factor)); self.zoom_factor = factor
        if _HELP_HAS_WEBENGINE: self.viewer.setZoomFactor(factor)
        else:
            f = self.viewer.font(); f.setPointSizeF(12.0 * factor); self.viewer.setFont(f)
        self.btn_zoom_reset.setText(f"{int(round(factor*100))}%")
    def _focus_page_search(self):
        self.page_search.edit.setFocus(); self.page_search.edit.selectAll()
    def current_path(self):
        it = self.list.currentItem()
        if not it: return None
        return _Help_Path(it.data(_Help_QtCore.Qt.UserRole))
    def _show_empty_placeholder(self):
        msg = ("<h2>Bienvenue dans l’aide</h2>"
               "<p>Aucune fiche trouvée dans <code>data/help/</code>.</p>"
               "<p>Placez ici vos fichiers <strong>.html</strong> : Manuel_*.html, Fiche_*.html, Glossaire_*.html.</p>")
        self._set_viewer_html(msg)
    def open_topic(self, slug: str):
        mapping = {
            "manuel": "Manuel_AE_GESTION_Index.html",
            "premiers_pas": "Manuel_Partie1_Premiers_Pas.html",
            "partie2": "Manuel_Partie2_Fonctions_de_base.html",
            "partie3": "Manuel_Partie3_Fonctions_avancees_Securite.html",
            "devis": "Fiche_Creer_un_devis.html",
            "facture": "Fiche_Transformer_devis_en_facture.html",
            "paiement": "Fiche_Paiement_Acompte_Payee.html",
            "sauvegarde": "Fiche_Sauvegarde_Restauration.html",
            "glossaire": "Glossaire_AE_GESTION.html",
        }
        target = mapping.get((slug or "").strip().lower())
        if not target: return
        for row in range(self.list.count()):
            it = self.list.item(row)
            if _Help_Path(it.data(_Help_QtCore.Qt.UserRole)).name == target:
                self.list.setCurrentRow(row); return
        p = self.help_dir / target
        if p.exists():
            self._all_items.append({"title": _help_extract_title(p), "path": p})
            self.refresh_list()
            for row in range(self.list.count()):
                it = self.list.item(row)
                if _Help_Path(it.data(_Help_QtCore.Qt.UserRole)).name == target:
                    self.list.setCurrentRow(row); return
        else:
            _Help_QtWidgets.QMessageBox.information(self, "Aide", f"Fichier introuvable : {target}")
# --- Surclasse MainWindow pour intégrer l'Aide et personnaliser le menu ---
try:
    _OriginalMainWindow = MainWindow
except NameError:
    _OriginalMainWindow = None
if _OriginalMainWindow is not None:
    class MainWindow(_OriginalMainWindow):  # type: ignore
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            # Trouver le QTabWidget principal
            tabs = getattr(self, "tabs", None)
            if tabs is None:
                tabs = self.findChild(_Help_QtWidgets.QTabWidget)
            if tabs is None:
                # Crée un QTabWidget minimal si absent (rare)
                tabs = _Help_QtWidgets.QTabWidget(self)
                self.setCentralWidget(tabs)
            self.tabs = tabs  # normalise le nom
            # Créer et ajouter l'onglet Aide
            app_dir = _Help_Path(os.path.dirname(__file__))
            self.tab_help = HelpTab(app_dir=app_dir, parent=self)
            self.tabs.addTab(self.tab_help, "Aide")
            # Raccourci global F1 → Index
            act_manual = _Help_QtWidgets.QAction("Manuel (F1)", self)
            act_manual.setShortcut(_Help_QtGui.QKeySequence("F1"))
            act_manual.triggered.connect(lambda: (self.tab_help.open_topic("manuel"),
                                                  self.tabs.setCurrentWidget(self.tab_help)))
            self.addAction(act_manual)
            # Menu Aide personnalisé
            self.setup_help_menu()
        # === MENU AIDE PERSONNALISÉ ===
        def setup_help_menu(self):
            menubar = self.menuBar() if hasattr(self, "menuBar") else None
            if menubar is None:
                menubar = self.menuBar()
            menu = menubar.addMenu("Aide")
            def _open(slug): 
                self.tabs.setCurrentWidget(self.tab_help); 
                self.tab_help.open_topic(slug)
            act_index = _Help_QtWidgets.QAction("Manuel (Index)", self)
            act_index.setShortcut(_Help_QtGui.QKeySequence("F1"))
            act_index.triggered.connect(lambda: _open("manuel"))
            menu.addAction(act_index)
            act_p1 = _Help_QtWidgets.QAction("Partie 1 — Premiers Pas", self); act_p1.triggered.connect(lambda: _open("premiers_pas")); menu.addAction(act_p1)
            act_p2 = _Help_QtWidgets.QAction("Partie 2 — Fonctions de base", self); act_p2.triggered.connect(lambda: _open("partie2")); menu.addAction(act_p2)
            act_p3 = _Help_QtWidgets.QAction("Partie 3 — Avancées & Sécurité", self); act_p3.triggered.connect(lambda: _open("partie3")); menu.addAction(act_p3)
            act_gloss = _Help_QtWidgets.QAction("Glossaire", self); act_gloss.triggered.connect(lambda: _open("glossaire")); menu.addAction(act_gloss)
            menu.addSeparator()
            sub = menu.addMenu("Fiches pratiques (A4)")
            a = _Help_QtWidgets.QAction("Créer un devis", self); a.triggered.connect(lambda: _open("devis")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Transformer en facture", self); a.triggered.connect(lambda: _open("facture")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Acompte / Payée", self); a.triggered.connect(lambda: _open("paiement")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Sauvegarder & Restaurer (CRUCIAL)", self); a.triggered.connect(lambda: _open("sauvegarde")); sub.addAction(a)
            menu.addSeparator()
            act_find = _Help_QtWidgets.QAction("Rechercher dans l’aide…", self)
            act_find.setShortcut(_Help_QtGui.QKeySequence("Ctrl+F"))
            act_find.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help),
                                                self.tab_help.page_search.edit.setFocus(),
                                                self.tab_help.page_search.edit.selectAll()))
            menu.addAction(act_find)
            act_open_browser = _Help_QtWidgets.QAction("Ouvrir la page courante dans le navigateur", self)
            act_open_browser.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help), self.tab_help.open_in_browser()))
            menu.addAction(act_open_browser)
            act_open_dir = _Help_QtWidgets.QAction("Ouvrir le dossier Aide…", self)
            act_open_dir.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help), self.tab_help.open_help_dir()))
            menu.addAction(act_open_dir)
            menu.addSeparator()
            act_ctx = _Help_QtWidgets.QAction("Aide contextuelle (onglet courant)", self)
            act_ctx.setShortcut(_Help_QtGui.QKeySequence("Shift+F1"))
            act_ctx.triggered.connect(self.open_context_help)
            menu.addAction(act_ctx)
            act_about = _Help_QtWidgets.QAction("À propos de l’aide…", self)
            act_about.triggered.connect(self._about_help)
            menu.addAction(act_about)
            # Raccourcis additionnels
            _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Shift+F1"), self, activated=self.open_context_help)
            _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+F"), self, activated=lambda: (self.tabs.setCurrentWidget(self.tab_help),
                                                                                                   self.tab_help.page_search.edit.setFocus(),
                                                                                                   self.tab_help.page_search.edit.selectAll()))
        def open_context_help(self):
            try:
                w = self.tabs.currentWidget(); name = (w.objectName() or "").lower()
            except Exception:
                name = ""
            if "devis" in name: self.tab_help.open_topic("devis")
            elif "facture" in name: self.tab_help.open_topic("paiement")
            elif "catalogue" in name or "items" in name: self.tab_help.open_topic("devis")
            elif "client" in name: self.tab_help.open_topic("premiers_pas")
            elif "urssaf" in name or "synthese" in name or "synthèse" in name: self.tab_help.open_topic("partie3")
            elif "param" in name or "email" in name: self.tab_help.open_topic("premiers_pas")
            else: self.tab_help.open_topic("manuel")
            self.tabs.setCurrentWidget(self.tab_help)
        def _about_help(self):
            engine = getattr(getattr(self, "tab_help", None), "viewer", None)
            engine_name = engine.__class__.__name__ if engine else "N/A"
            _Help_QtWidgets.QMessageBox.information(
                self, "À propos de l’aide",
                ("<b>Aide intégrée AE_GESTION</b><br>"
                 f"Moteur d’affichage : <code>{engine_name}</code><br><br>"
                 "Les pages sont lues depuis <code>data/help/</code>.<br>"
                 "Raccourcis : F1 (Index), Maj+F1 (Aide contextuelle), Ctrl+F (recherche), "
                 "Ctrl+ / Ctrl- / Ctrl0 (zoom).<br><br>"
                 "Astuce : installez <code>PyQtWebEngine</code> pour un rendu HTML/CSS parfait.")
            )
# ========== FIN AIDE INTÉGRÉE ==========
# ======================================================================
# E6 — MOCK QUEUE + RE-HOOK MANAGER + POLLING (idempotent, zéro régression)
# ======================================================================
# --- Backfill helper if missing in some baselines ---
try:
    _safe_now
except NameError:
    def _safe_now():
        import datetime
        return __import__('datetime').datetime.now()
# --- Logging helper (fallback if _cii_log indisponible très tôt) ---
def _einv__log(msg: str):
    try:
        if "_cii_log" in globals() and callable(globals().get("_cii_log")):
            _cii_log(msg)  # type: ignore
            return
    except Exception:
        pass
    try:
        import os, datetime
        d = DATA_DIR if "DATA_DIR" in globals() else os.path.join(os.getcwd(), "data")
        os.makedirs(d, exist_ok=True)
        with open(os.path.join(d, "cii_export.log"), "a", encoding="utf-8") as f:
            f.write(f"{__import__('datetime').datetime.now().isoformat(timespec='seconds')} {msg}\n")
    except Exception:
        # Ne jamais faire remonter à l'UI
        pass
# --- Résolution settings pour le poll (depuis mémoire sinon settings.json) ---
def _einv__effective_settings(hint: dict | None = None) -> dict:
    try:
        if hint and isinstance(hint, dict):
            return hint
    except Exception:
        pass
    try:
        if "ensure_settings" in globals() and callable(globals().get("ensure_settings")):
            return ensure_settings()  # type: ignore
    except Exception:
        pass
    # Fallback lecture settings.json
    try:
        import os, json
        root = DATA_DIR if "DATA_DIR" in globals() else os.path.join(os.getcwd(), "data")
        with open(os.path.join(root, "settings.json"), "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {"einv_mode": "off", "einv_target": "ppf", "einv_auto_send": False, "einv_poll_period_s": 900}
# --- Lecture directe de la case UI "Envoi auto après export CII" si disponible ---
def _einv__ui_auto_override():
    """
    Retourne True/False si trouvée dans l'UI, sinon None.
    Heuristiques:
      - cherche un QCheckBox avec un texte contenant "Envoi" et "auto"
      - sinon, un objectName suggérant "einv_auto_send" / "auto_send_after_export"
    """
    try:
        from PyQt5.QtWidgets import QApplication, QCheckBox
        app = QApplication.instance()
        if app is None:
            return None
        cand = []
        # Parcours tous les widgets connus de l'appli
        for w in app.allWidgets():
            try:
                if isinstance(w, QCheckBox):
                    name = (w.objectName() or "").lower()
                    text = (w.text() or "").lower()
                    if (("envoi" in text and "auto" in text) or
                        ("einv" in name and "auto" in name) or
                        ("auto_send" in name and "export" in name) or
                        ("auto" in name and "cii" in name)):
                        cand.append(w)
            except Exception:
                pass
        if not cand:
            return None
        # Privilégier un widget visible si possible
        for w in cand:
            try:
                if w.isVisible():
                    return bool(w.isChecked())
            except Exception:
                pass
        # Sinon dernier trouvé
        try:
            return bool(cand[-1].isChecked())
        except Exception:
            return None
    except Exception:
        return None
# --- Extraction robuste du numéro de facture depuis doc / chemin ---
def _einv__extract_num(pdf_path: str | None = None, doc: dict | None = None) -> str:
    try:
        if isinstance(doc, dict):
            for k in ("numero", "num", "numero_facture"):
                v = doc.get(k)
                if v: return str(v)
    except Exception:
        pass
    try:
        import os, re
        if pdf_path:
            base = os.path.splitext(os.path.basename(pdf_path))[0]
            base = base.replace("_fx", "").replace("_acompte", "").replace("_acquittee", "")
            m = re.search(r"(F\d{4}-\d+|\d{6,})", base)
            return m.group(1) if m else base
    except Exception:
        pass
    return ""
# --- Queue mock idempotente ---
def _einv_mock_enqueue(numero: str, settings: dict) -> None:
    try:
        import os, json, time
        root = DATA_DIR if 'DATA_DIR' in globals() else os.path.join(os.getcwd(), 'data')
        qdir = os.path.join(root, 'ops', str(numero))
        os.makedirs(qdir, exist_ok=True)
        qpath = os.path.join(qdir, 'queue.json')
        if os.path.exists(qpath):
            _einv__log(f"ppf.mock.exists numero={numero} dir={qdir}")
            return
        # 1) Détermine "auto" : priorité à l'état UI si disponible
        src = "settings"
        ui_state = _einv__ui_auto_override()
        if ui_state is not None:
            auto_flag = bool(ui_state)
            src = "ui"
        else:
            auto_flag = bool((settings or {}).get("einv_auto_send",
                              (settings or {}).get("auto_send_after_export",
                              (settings or {}).get("einv_auto",
                              (settings or {}).get("auto", False)))))
        # 2) Ecrit queue.json (avec auto) AVANT tout enchaînement et journalise explicitement la valeur
        payload = {
            "numero": str(numero),
            "mode": "mock",
            "target": (settings or {}).get("einv_target", "ppf"),
            "auto": bool(auto_flag),
            "ts": int(time.time()),
            "status": "queued",
        }
        with open(qpath, "w", encoding="utf-8") as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
        _einv__log(f"ppf.queue.auto={'true' if payload['auto'] else 'false'} numero={numero} source={src}")
        _einv__log(f"ppf.queue=queued numero={numero} dir={qdir}")
        # 3) Auto-chain (submitted -> delivered) si auto == True
        if payload["auto"] is True:
            try:
                # submitted
                payload["status"] = "submitted"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.submit=OK numero={numero} target={payload.get('target','ppf')}")
                # delivered
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.status=delivered numero={numero}")
            except Exception:
                # Pas d'exception vers l'UI
                pass
    except Exception:
        # Ne jamais remonter
        pass
        if payload["auto"] is True:
            try:
                # submitted
                payload["status"] = "submitted"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.submit=OK numero={numero} target={payload.get('target','ppf')}")
                # delivered
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log("ppf.status=delivered")
            except Exception:
                # Pas d'exception vers l'UI
                pass
    except Exception:
        # Ne jamais remonter
        pass
# --- Wrappers idempotents (post-FX + post-CII) ---
__EINV_ORIG_ENSURE_FX = globals().get("_ensure_facturx")
__EINV_ORIG_EXPORT_CII = globals().get("_export_cii_for_invoice")
__EINV_HOOKS_APPLIED = False
def _einv__wrap_ensure_facturx():
    global __EINV_ORIG_ENSURE_FX
    fn = globals().get("_ensure_facturx")
    if not callable(fn) or getattr(fn, "__einv_wrapped__", False):
        return
    __EINV_ORIG_ENSURE_FX = fn
    def _wrapped_ensure_facturx(pdf_path: str, doc: dict, settings: dict) -> str:
        out = None
        try:
            out = __EINV_ORIG_ENSURE_FX(pdf_path, doc, settings)  # type: ignore
        except Exception as e:
            try: _einv__log(f"ppf.hook=ensure.error {e}")
            except Exception: pass
            # On propage le comportement original (retourne le pdf_path en cas d’erreur dans l’impl)
            out = pdf_path
        try:
            eff = _einv__effective_settings(settings)
            if str(eff.get("einv_mode","off")).lower() == "mock":
                numero = _einv__extract_num(out or pdf_path, doc)
                if numero:
                    _einv_mock_enqueue(numero, eff)
                _einv__log("ppf.hook=ensure.ok")
            else:
                _einv__log("ppf.hook=ensure.skip")
        except Exception:
            _einv__log("ppf.hook=ensure.error")
        return out
    setattr(_wrapped_ensure_facturx, "__einv_wrapped__", True)
    globals()["_ensure_facturx"] = _wrapped_ensure_facturx
def _einv__wrap_export_cii():
    global __EINV_ORIG_EXPORT_CII
    fn = globals().get("_export_cii_for_invoice")
    if not callable(fn) or getattr(fn, "__einv_wrapped__", False):
        return
    __EINV_ORIG_EXPORT_CII = fn
    def _wrapped_export_cii(*args, **kwargs):
        """
        Flexible wrapper: tolerates misordered positional args or mixed kwargs.
        Goal: always call original as (doc:dict, settings:dict, numero:str).
        """
        out = ""
        corrected = False
        try:
            # Extract candidates
            doc_cand = None
            settings_cand = None
            numero_cand = None
            # From kwargs if provided
            if kwargs:
                doc_cand = kwargs.get("doc") or kwargs.get("invoice") or kwargs.get("d") or doc_cand
                settings_cand = kwargs.get("settings") or kwargs.get("s") or settings_cand
                numero_cand = kwargs.get("numero") or kwargs.get("num") or kwargs.get("invoice_number") or numero_cand
            # From positional args
            for a in args:
                if isinstance(a, dict):
                    # Heuristics to classify dicts
                    keys = set(a.keys())
                    if any(k in keys for k in ("einv_mode","einv_target","smtp_host","ppf_auth","pdp_api_base","einv_poll_period_s")):
                        if settings_cand is None:
                            settings_cand = a
                        else:
                            # If both look like settings, keep first
                            pass
                    else:
                        # Likely invoice doc
                        if doc_cand is None:
                            doc_cand = a
                        else:
                            # If a second dict arrives and settings still None, choose by presence of 'lignes' or 'client'
                            if settings_cand is None and any(k in keys for k in ("einv_mode","einv_target")):
                                settings_cand = a
                elif isinstance(a, str):
                    if numero_cand is None:
                        numero_cand = a
            # Fallbacks
            if numero_cand is None:
                numero_cand = _einv__extract_num(None, doc_cand) or ""
            # If still ambiguous (e.g., doc None but two dicts), try swap based on typical invoice keys
            if (doc_cand is None or settings_cand is None):
                for a in args:
                    if isinstance(a, dict):
                        keys = set(a.keys())
                        if doc_cand is None and any(k in keys for k in ("numero","client","lignes","items","date","total_ttc")):
                            doc_cand = a
                        if settings_cand is None and any(k in keys for k in ("einv_mode","einv_target","einv_auto_send","auto_send_after_export")):
                            settings_cand = a
            # If types still mismatched, last-resort: guess first dict as doc, second as settings
            if (doc_cand is None or settings_cand is None):
                dicts = [a for a in args if isinstance(a, dict)]
                if len(dicts) >= 2:
                    if doc_cand is None: doc_cand = dicts[0]
                    if settings_cand is None: settings_cand = dicts[1]
            # Detect whether a correction is needed
            expected_tuple = (len(args) == 3 and isinstance(args[0], dict) and isinstance(args[1], dict) and isinstance(args[2], str))
            corrected = not expected_tuple
            # Call original
            out = __EINV_ORIG_EXPORT_CII(doc_cand, settings_cand, numero_cand)  # type: ignore
        except Exception as e:
            try: _einv__log(f"ppf.hook=export.error {e}")
            except Exception: pass
            return out
        # Enqueue in mock mode
        try:
            eff = _einv__effective_settings(settings_cand if isinstance(settings_cand, dict) else None)
            if str(eff.get("einv_mode","off")).lower() == "mock":
                _einv_mock_enqueue(str(numero_cand), eff)
                if corrected:
                    _einv__log("ppf.hook=export.fixedargs")
                else:
                    _einv__log("ppf.hook=export.ok")
            else:
                _einv__log("ppf.hook=export.skip")
        except Exception:
            _einv__log("ppf.hook=export.error")
        return out
    setattr(_wrapped_export_cii, "__einv_wrapped__", True)
    globals()["_export_cii_for_invoice"] = _wrapped_export_cii
def _einv_apply_hooks():
    global __EINV_HOOKS_APPLIED
    if __EINV_HOOKS_APPLIED:
        return
    try:
        _einv__wrap_ensure_facturx()
        _einv__wrap_export_cii()
        __EINV_HOOKS_APPLIED = True
    except Exception:
        _einv__log("ppf.hook=apply.error")
# --- Polling mock (QTimer si possible, sinon boucle Timer threadée) ---
__EINV_POLL_STARTED = False
__EINV_TIMER = None
def _einv__poll_once():
    import os, json
    eff = _einv__effective_settings(None)
    mode = str(eff.get("einv_mode","off")).lower()
    period = int(float(eff.get("einv_poll_period_s", 900) or 900))
    root = DATA_DIR if "DATA_DIR" in globals() else os.path.join(os.getcwd(), "data")
    if mode != "mock":
        _einv__log("ppf.poll.skip=mode")
        return period
    # Scan
    ops_root = os.path.join(root, "ops")
    try:
        names = [n for n in os.listdir(ops_root)] if os.path.isdir(ops_root) else []
    except Exception:
        names = []
    _einv__log(f"ppf.poll.tick n={len(names)}")
    for n in names:
        try:
            qpath = os.path.join(ops_root, n, "queue.json")
            if not os.path.exists(qpath):
                continue
            with open(qpath, "r", encoding="utf-8") as f:
                payload = json.load(f)
            status = str(payload.get("status","queued")).lower()
            auto = bool(payload.get("auto", False))
            numero = str(payload.get("numero",""))
            if status == "queued" and auto:
                payload["status"] = "submitted"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.submit numero={numero}")
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.deliver numero={numero}")
            elif status == "submitted":
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.deliver numero={numero}")
            else:
                # Aucun changement : journaliser l'état observé (meilleure visibilité)
                _einv__log(f"ppf.poll.observed numero={numero} status={status} auto={'true' if auto else 'false'}")
        except Exception:
            # Ne jamais remonter
            pass
    return period
    # Scan
    ops_root = os.path.join(root, "ops")
    try:
        names = [n for n in os.listdir(ops_root)] if os.path.isdir(ops_root) else []
    except Exception:
        names = []
    _einv__log(f"ppf.poll.tick n={len(names)}")
    for n in names:
        try:
            qpath = os.path.join(ops_root, n, "queue.json")
            if not os.path.exists(qpath):
                continue
            with open(qpath, "r", encoding="utf-8") as f:
                payload = json.load(f)
            status = str(payload.get("status","queued")).lower()
            auto = bool(payload.get("auto", False))
            if status == "queued" and auto:
                payload["status"] = "submitted"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.submit numero={payload.get('numero','')}")
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.deliver numero={payload.get('numero','')}")
            elif status == "submitted":
                payload["status"] = "delivered"
                with open(qpath, "w", encoding="utf-8") as f:
                    json.dump(payload, f, ensure_ascii=False, indent=2)
                _einv__log(f"ppf.poll.deliver numero={payload.get('numero','')}")
            # status queued & auto False -> no change (tick uniquement)
        except Exception:
            # Ne jamais remonter
            pass
    return period
def _einv__arm_poll_timer(delay_s: int):
    # Essaie QTimer, sinon threading.Timer (single-shot récursif)
    global __EINV_TIMER, __EINV_POLL_STARTED
    try:
        from PyQt5.QtCore import QTimer
        t = QTimer()
        t.setSingleShot(True)
        def _run():
            per = _einv__poll_once()
            _einv__arm_poll_timer(per)
        t.timeout.connect(_run)
        t.start(int(max(1, delay_s) * 1000))
        __EINV_TIMER = t
        if not __EINV_POLL_STARTED:
            _einv__log(f"ppf.poll.start period={delay_s}")
            __EINV_POLL_STARTED = True
        return
    except Exception:
        pass
    # Fallback threading
    try:
        import threading
        def _run_thread():
            per = _einv__poll_once()
            _einv__arm_poll_timer(per)
        timer = threading.Timer(max(1, delay_s), _run_thread)
        timer.daemon = True
        timer.start()
        __EINV_TIMER = timer
        if not __EINV_POLL_STARTED:
            _einv__log(f"ppf.poll.start period={delay_s}")
            __EINV_POLL_STARTED = True
    except Exception:
        # On abandonne silencieusement si l’environnement est sans timer
        pass
def _einv__start_polling():
    try:
        period = int(float(_einv__effective_settings(None).get("einv_poll_period_s", 900) or 900))
    except Exception:
        period = 900
    _einv__arm_poll_timer(period)
# Appliquer hooks et démarrer le poll dès que possible (après import)
try:
    # Idéalement armé dès le premier tour d’event loop
    from PyQt5.QtCore import QTimer as _EINV_QTimer
    _EINV_QTimer.singleShot(0, _einv_apply_hooks)
    _EINV_QTimer.singleShot(0, _einv__start_polling)
except Exception:
    # Fallback si QtCore non dispo à l’import (ex: tests headless)
    try:
        _einv_apply_hooks()
        _einv__start_polling()
    except Exception:
        pass
# --- Analyseur de log (pour verdict rapide après patch) ---
def einv_analyse_log_from_text(txt: str) -> str:
    """
    Retourne un court rapport :
    ✅ MODIFS OK : ...  ou  ❌ MODIFS KO : ...
    """
    try:
        # Critères minimum: au moins un enqueue + delivered, présence fx.* et cii.* et spool.write
        has_queue = "ppf.queue=queued" in txt or "ppf.mock.exists" in txt
        has_delivered = ("ppf.status=delivered" in txt) or ("ppf.poll.deliver" in txt)
        has_spool = "spool.write=" in txt
        has_fx = ("fx.write=" in txt) or ("fx.miss" in txt) or ("fx.error" in txt) or ("fx.start" in txt)
        has_cii = ("cii.write=" in txt) or ("cii.skip=already_current" in txt) or ("cii.build" in txt)
        ok = has_queue and has_delivered and has_spool and has_fx and has_cii
        if ok:
            return "✅ MODIFS OK : tu peux garder ce fichier comme étape OK (queue mock + hooks + poll opérationnels)."
        # Pistes rapides
        tips = []
        if not has_queue: tips.append("aucun ppf.queue=queued → vérifier _einv_mock_enqueue / mode=mock")
        if not has_delivered: tips.append("pas de delivered → vérifier ppf.auto ou polling (ppf.poll.start/tick)")
        if not has_spool: tips.append("pas de spool.write → vérifier _export_cii_for_invoice")
        if not has_fx: tips.append("journaux fx.* absents → vérifier _ensure_facturx / _export_facturx")
        if not has_cii: tips.append("journaux cii.* absents → vérifier génération/écriture CII")
        return "❌ MODIFS KO : ne pas conserver — " + " ; ".join(tips[:3])
    except Exception:
        return "❌ MODIFS KO : analyse impossible (format log inattendu)."
def einv_analyse_log_from_file(path: str) -> str:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return einv_analyse_log_from_text(f.read())
    except Exception as e:
        return f"❌ MODIFS KO : lecture log impossible ({e})."
# ======================================================================
# ====================== FORCE HELPERS (fallback, mock-only) ======================
try:
    import os as _os_h, json as _json_h, time as _time_h
except Exception:
    pass
def _einv__root_dir() -> str:
    try:
        return DATA_DIR if 'DATA_DIR' in globals() else _os_h.path.join(_os_h.getcwd(), 'data')
    except Exception:
        return _os_h.path.join(_os_h.getcwd(), 'data')
def _einv__qpath_for(numero: str) -> str:
    root = _einv__root_dir()
    qdir = _os_h.path.join(root, 'ops', str(numero))
    try: _os_h.makedirs(qdir, exist_ok=True)
    except Exception: pass
    return _os_h.path.join(qdir, 'queue.json')
def _einv__read_queue(qpath: str) -> dict:
    try:
        if _os_h.path.isfile(qpath):
            with open(qpath, 'r', encoding='utf-8') as f:
                return _json_h.load(f) or {}
    except Exception:
        pass
    return {}
def _einv__write_queue(qpath: str, payload: dict) -> bool:
    try:
        with open(qpath, 'w', encoding='utf-8') as f:
            _json_h.dump(payload, f, ensure_ascii=False, indent=2)
        return True
    except Exception:
        return False
if "_einv_force_send" not in globals():
    def _einv_force_send(numero: str, steps: str) -> bool:
        """Modifie UNIQUEMENT data/ops/<NUM>/queue.json (mock). steps: 'submit'|'deliver'|'both'."""
        try:
            qpath = _einv__qpath_for(str(numero))
            payload = _einv__read_queue(qpath)
            now = int(_time_h.time())
            target = (payload.get('target') if isinstance(payload, dict) else None) or \
                     (globals().get('settings', {}) or {}).get('einv_target', 'ppf')
            auto = bool((payload.get('auto') if isinstance(payload, dict) else False))
            if not isinstance(payload, dict) or not payload:
                payload = {"numero": str(numero), "mode":"mock","target":target,"auto":auto,"ts":now,"status":"queued"}
            st = str(steps or '').lower()
            if st not in ('submit','deliver','both'):
                raise RuntimeError(f"bad steps={steps!r}")
            if st in ('submit','both'):
                payload['status'] = 'submitted'; payload['submitted_ts'] = now
                if not _einv__write_queue(qpath, payload): return False
            if st in ('deliver','both'):
                payload['status'] = 'delivered'; payload['delivered_ts'] = now
                if not _einv__write_queue(qpath, payload): return False
            return True
        except Exception:
            return False
if "_einv_force_reset" not in globals():
    def _einv_force_reset(numero: str) -> bool:
        """Réinitialise QUEUE à 'queued' (auto conservé si présent)."""
        try:
            qpath = _einv__qpath_for(str(numero))
            payload = _einv__read_queue(qpath)
            now = int(_time_h.time())
            target = (payload.get('target') if isinstance(payload, dict) else None) or \
                     (globals().get('settings', {}) or {}).get('einv_target', 'ppf')
            auto = bool((payload.get('auto') if isinstance(payload, dict) else False))
            payload = {"numero": str(numero), "mode":"mock","target":target,"auto":auto,"ts":now,"status":"queued"}
            return _einv__write_queue(qpath, payload)
        except Exception:
            return False
# ==================== FIN FORCE HELPERS =========================================================
# ====================== PATCH FORCEBTN (mock-only, idempotent, UI-tolerant, chooser) ======================
try:
    import os as _os, time as _time
    from PyQt5.QtCore import Qt, QTimer
    from PyQt5.QtWidgets import (
        QApplication, QWidget, QTabWidget, QScrollArea,
        QFormLayout, QHBoxLayout, QVBoxLayout, QGridLayout, QBoxLayout,
        QLabel, QLineEdit, QComboBox, QPushButton, QMessageBox, QDialog, QCompleter
    )
except Exception:
    pass
else:
    # ---------- Flags d'idempotence ----------
    __einv_forcebtn__ = globals().get("__einv_forcebtn__", False)
    __einv_force_button__ = globals().get("__einv_force_button__", None)
    __einv_force_panel__ = globals().get("__einv_force_panel__", None)  # panel ou dialog
    __einv_force_vis_timer__ = globals().get("__einv_force_vis_timer__", None)
    __einv_force_visible_last__ = globals().get("__einv_force_visible_last__", None)
    # ---------- Logging robuste ----------
    def _ui_log(line: str) -> None:
        try:
            if "_cii_log" in globals():
                _cii_log(line)
            else:
                root = globals().get("DATA_DIR", None) or _os.path.join(_os.getcwd(), "data")
                _os.makedirs(root, exist_ok=True)
                with open(_os.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                    iso = _time.strftime("%Y-%m-%dT%H:%M:%S", _time.gmtime())
                    f.write(f"{iso} {line}\n")
        except Exception:
            pass
    # ---------- Helpers données / settings ----------
    def _data_root() -> str:
        try: return globals().get("DATA_DIR", None) or _os.path.join(_os.getcwd(), "data")
        except Exception: return _os.path.join(_os.getcwd(), "data")
    def _list_ops_nums(max_items: int = 300):
        """Liste les dossiers sous data/ops/ triés par mtime récents -> anciens (sans _SELFTEST)."""
        out = []
        try:
            ops = _os.path.join(_data_root(), "ops")
            if not _os.path.isdir(ops): return out
            items = []
            for name in _os.listdir(ops):
                if name == "_SELFTEST": continue
                p = _os.path.join(ops, name)
                if _os.path.isdir(p):
                    try:
                        mt = _os.path.getmtime(p)
                    except Exception:
                        mt = 0
                    items.append((mt, name))
            items.sort(reverse=True)
            for _, name in items[:max_items]:
                out.append(name)
        except Exception:
            pass
        return out
    def _last_ops_num() -> str:
        try:
            arr = _list_ops_nums(max_items=1)
            return arr[0] if arr else ""
        except Exception:
            return ""
    def _get_settings_dict() -> dict:
        try:
            if "load_settings" in globals():
                s = load_settings()
                if isinstance(s, dict): return s
        except Exception: pass
        try:
            app = QApplication.instance()
            if app:
                for w in app.allWidgets():
                    try:
                        if hasattr(w, "settings") and isinstance(getattr(w, "settings"), dict):
                            return getattr(w, "settings")
                    except Exception: pass
        except Exception: pass
        return {}
    def _is_mock_mode() -> bool:
        try:
            s = _get_settings_dict()
            return str(s.get("einv_mode", "")).lower() == "mock"
        except Exception:
            return False
    # ---------- UI helpers ----------
    def _toast(parent, text, title="E-facturation (mock)", icon=QMessageBox.Information):
        try:
            mb = QMessageBox(parent)
            mb.setWindowTitle(title); mb.setText(text)
            mb.setIcon(icon)
            mb.setStandardButtons(QMessageBox.Ok)
            mb.setWindowModality(Qt.NonModal)
            mb.setAttribute(Qt.WA_DeleteOnClose, True)
            mb.show()
        except Exception:
            pass
    class _ForcePanel(QWidget):
        def __init__(self, parent=None):
            super().__init__(parent)
            self.setObjectName("__einv_force_panel__")
            form = QFormLayout(self)
            # --- Numéro: ComboBox éditable + bouton Rafraîchir ---
            num_row = QHBoxLayout()
            self.num = QComboBox(); self.num.setEditable(True)
            self.num.setInsertPolicy(QComboBox.NoInsert)
            self.btn_reload = QPushButton("↻"); self.btn_reload.setToolTip("Rafraîchir depuis data/ops/"); self.btn_reload.setMaximumWidth(28)
            num_row.addWidget(self.num); num_row.addWidget(self.btn_reload)
            self.cmb = QComboBox(); self.cmb.addItems(["Both", "Submit", "Deliver", "Reset"])
            self.btn = QPushButton("Exécuter")
            form.addRow("Numéro", num_row)
            form.addRow("Action", self.cmb)
            form.addRow("", self.btn)
            self.btn_reload.clicked.connect(self._reload_nums)
            self.btn.clicked.connect(self._run)
            self._reload_nums(select_last=True)
        def _reload_nums(self, select_last: bool = False):
            try:
                nums = _list_ops_nums()
                self.num.blockSignals(True)
                self.num.clear()
                if nums:
                    self.num.addItems(nums)
                # autocomplétion
                try:
                    comp = QCompleter(nums, self)
                    comp.setCaseSensitivity(Qt.CaseInsensitive)
                    self.num.setCompleter(comp)
                except Exception:
                    pass
                if select_last:
                    last = nums[0] if nums else (_last_ops_num() or "")
                    if last:
                        idx = self.num.findText(last)
                        if idx >= 0:
                            self.num.setCurrentIndex(idx)
                        else:
                            self.num.setEditText(last)
                self.num.blockSignals(False)
            except Exception:
                pass
        def _num_text(self) -> str:
            try:
                return (self.num.currentText() or "").strip()
            except Exception:
                return ""
        def _run(self):
            ok = False
            num = self._num_text()
            act = (self.cmb.currentText() or "").strip().lower()
            try:
                if not num:
                    _toast(self, "Veuillez choisir/saisir un numéro (data/ops/<NUM>).", icon=QMessageBox.Warning); return
                if act in ("both", "submit", "deliver"):
                    if "_einv_force_send" in globals():
                        res = _einv_force_send(num, act); ok = bool(res) if isinstance(res, bool) else True
                    else:
                        raise RuntimeError("helper _einv_force_send manquant")
                elif act == "reset":
                    if "_einv_force_reset" in globals():
                        res = _einv_force_reset(num); ok = bool(res) if isinstance(res, bool) else True
                    else:
                        raise RuntimeError("helper _einv_force_reset manquant")
                else:
                    raise RuntimeError(f"action inconnue: {act}")
            except Exception as e:
                ok = False; _toast(self, f"Erreur: {e}", icon=QMessageBox.Critical)
            finally:
                try: _ui_log(f"ppf.ui.force action={act} numero={num} ok={'true' if ok else 'false'}")
                except Exception: pass
                if ok: _toast(self, f"Action '{act}' envoyée sur {num}.", icon=QMessageBox.Information)
    class _ForceDialog(QDialog):
        def __init__(self, parent=None):
            super().__init__(parent)
            self.setObjectName("__einv_force_panel__")
            self.setWindowTitle("Forcer envoi (mock) — AE_GESTION")
            self.setWindowModality(Qt.NonModal)
            lay = QFormLayout(self)
            num_row = QHBoxLayout()
            self.num = QComboBox(); self.num.setEditable(True)
            self.num.setInsertPolicy(QComboBox.NoInsert)
            self.btn_reload = QPushButton("↻"); self.btn_reload.setToolTip("Rafraîchir depuis data/ops/"); self.btn_reload.setMaximumWidth(28)
            num_row.addWidget(self.num); num_row.addWidget(self.btn_reload)
            self.cmb = QComboBox(); self.cmb.addItems(["Both", "Submit", "Deliver", "Reset"])
            self.btn = QPushButton("Exécuter")
            lay.addRow("Numéro", num_row)
            lay.addRow("Action", self.cmb)
            lay.addRow("", self.btn)
            self.btn_reload.clicked.connect(self._reload_nums)
            self.btn.clicked.connect(self._run)
            self._reload_nums(select_last=True)
        def _reload_nums(self, select_last: bool = False):
            try:
                nums = _list_ops_nums()
                self.num.blockSignals(True)
                self.num.clear()
                if nums:
                    self.num.addItems(nums)
                try:
                    comp = QCompleter(nums, self)
                    comp.setCaseSensitivity(Qt.CaseInsensitive)
                    self.num.setCompleter(comp)
                except Exception:
                    pass
                if select_last:
                    last = nums[0] if nums else (_last_ops_num() or "")
                    if last:
                        idx = self.num.findText(last)
                        if idx >= 0:
                            self.num.setCurrentIndex(idx)
                        else:
                            self.num.setEditText(last)
                self.num.blockSignals(False)
            except Exception:
                pass
        def _num_text(self) -> str:
            try:
                return (self.num.currentText() or "").strip()
            except Exception:
                return ""
        def _run(self):
            ok = False
            num = self._num_text()
            act = (self.cmb.currentText() or "").strip().lower()
            try:
                if not num:
                    _toast(self, "Veuillez choisir/saisir un numéro (data/ops/<NUM>).", icon=QMessageBox.Warning); return
                if act in ("both", "submit", "deliver"):
                    if "_einv_force_send" in globals():
                        res = _einv_force_send(num, act); ok = bool(res) if isinstance(res, bool) else True
                    else:
                        raise RuntimeError("helper _einv_force_send manquant")
                elif act == "reset":
                    if "_einv_force_reset" in globals():
                        res = _einv_force_reset(num); ok = bool(res) if isinstance(res, bool) else True
                    else:
                        raise RuntimeError("helper _einv_force_reset manquant")
                else:
                    raise RuntimeError(f"action inconnue: {act}")
            except Exception as e:
                ok = False; _toast(self, f"Erreur: {e}", icon=QMessageBox.Critical)
            finally:
                try: _ui_log(f"ppf.ui.force action={act} numero={num} ok={'true' if ok else 'false'}")
                except Exception: pass
                if ok: _toast(self, f"Action '{act}' envoyée sur {num}.", icon=QMessageBox.Information)
    # ---------- Recherche & ancrage ----------
    def _find_efact_tab_page():
        try:
            app = QApplication.instance()
            if not app: return None
            for tw in app.allWidgets():
                if isinstance(tw, QTabWidget):
                    for i in range(tw.count()):
                        try: label = (tw.tabText(i) or "").lower()
                        except Exception: continue
                        if "e-facturation" in label or "ppf" in label or "pdp" in label:
                            return tw.widget(i)
        except Exception:
            pass
        return None
    def _find_tester_button_and_layout(tab_page):
        try:
            if tab_page is None: return None, None, -1
            for w in tab_page.findChildren(QPushButton):
                try:
                    txt = (w.text() or "").lower().strip()
                    if "tester" in txt and "mock" in txt:
                        parent = w.parentWidget()
                        lay = parent.layout() if parent else None
                        idx = -1
                        if lay and hasattr(lay, "count"):
                            for i in range(lay.count()):
                                it = lay.itemAt(i)
                                if hasattr(it, "widget") and it.widget() is w:
                                    idx = i; break
                        return w, lay, idx
                except Exception: pass
        except Exception:
            pass
        return None, None, -1
    def _embed_panel_or_popup(container_widget, anchor_kind="container"):
        global __einv_force_panel__
        if __einv_force_panel__ is not None:
            if hasattr(__einv_force_panel__, "show"): __einv_force_panel__.show()
            _ui_log("ppf.ui.panel.visible=true"); return __einv_force_panel__
        try:
            panel = _ForcePanel(container_widget if container_widget is not None else None)
            if container_widget is not None:
                lay = container_widget.layout()
                ok = False
                if isinstance(lay, (QVBoxLayout, QHBoxLayout, QBoxLayout)):
                    lay.addWidget(panel); ok = True
                elif isinstance(lay, QGridLayout):
                    try: row = max(lay.rowCount(), 0)
                    except Exception: row = 0
                    lay.addWidget(panel, row, 0, 1, 1); ok = True
                elif isinstance(lay, QFormLayout):
                    lay.addRow(panel); ok = True
                if ok:
                    __einv_force_panel__ = panel
                    _ui_log("ppf.ui.panel.added=embedded"); _ui_log(f"ppf.ui.panel.anchor={anchor_kind}")
                    panel.show(); _ui_log("ppf.ui.panel.visible=true"); return panel
        except Exception:
            pass
        try:
            dlg = _ForceDialog(container_widget)
            __einv_force_panel__ = dlg
            dlg.show()
            _ui_log("ppf.ui.panel.added=popup"); _ui_log(f"ppf.ui.panel.anchor={anchor_kind}")
            _ui_log("ppf.ui.panel.visible=true"); return dlg
        except Exception:
            return None
    def _inject_force_btn():
        global __einv_forcebtn__, __einv_force_button__
        if __einv_forcebtn__: return True
        tab = _find_efact_tab_page()
        btn_tester, lay, idx = _find_tester_button_and_layout(tab)
        try:
            new_btn = __einv_force_button__ or QPushButton("Forcer envoi (mock)…")
            new_btn.setObjectName("__einv_force_button__"); __einv_force_button__ = new_btn
            try: new_btn.clicked.disconnect()
            except Exception: pass
            new_btn.clicked.connect(lambda: _embed_panel_or_popup(tab, anchor_kind="button"))
            if lay and isinstance(lay, (QHBoxLayout, QVBoxLayout, QBoxLayout)) and idx >= 0 and hasattr(lay, "insertWidget"):
                lay.insertWidget(max(0, idx), new_btn)   # à gauche de "Tester (mock)"
                __einv_forcebtn__ = True; _ui_log("ppf.ui.forcebtn.added=ok"); return True
            if tab is not None:
                lay2 = tab.layout()
                if isinstance(lay2, (QHBoxLayout, QVBoxLayout, QBoxLayout)):
                    lay2.addWidget(new_btn); __einv_forcebtn__ = True; _ui_log("ppf.ui.forcebtn.added=ok"); return True
                elif isinstance(lay2, QGridLayout):
                    try: r = max(lay2.rowCount(), 0)
                    except Exception: r = 0
                    lay2.addWidget(new_btn, r, 0, 1, 1); __einv_forcebtn__ = True; _ui_log("ppf.ui.forcebtn.added=ok"); return True
                elif isinstance(lay2, QFormLayout):
                    lay2.addRow(new_btn); __einv_forcebtn__ = True; _ui_log("ppf.ui.forcebtn.added=ok"); return True
            _ui_log("ppf.ui.forcebtn.added=miss")
            if _is_mock_mode(): _embed_panel_or_popup(tab or None, anchor_kind="container")
            return False
        except Exception:
            _ui_log("ppf.ui.forcebtn.added=error")
            if _is_mock_mode(): _embed_panel_or_popup(tab or None, anchor_kind="container")
            return False
    def _refresh_visibility():
        global __einv_force_visible_last__
        try: is_mock = _is_mock_mode()
        except Exception: is_mock = False
        try:
            if __einv_force_button__ is not None: __einv_force_button__.setVisible(bool(is_mock))
            if __einv_force_panel__ is not None: __einv_force_panel__.setVisible(bool(is_mock))
            if __einv_force_visible_last__ is not is_mock:
                __einv_force_visible_last__ = is_mock
                _ui_log(f"ppf.ui.panel.visible={'true' if is_mock else 'false'}")
            if is_mock and __einv_force_panel__ is None:
                tab = _find_efact_tab_page(); _embed_panel_or_popup(tab or None, anchor_kind="container")
        except Exception:
            pass
    def __einv_safe_bootstrap__():
        try:
            app = QApplication.instance()
            if app is None:
                if not getattr(QApplication, "__einv_forcebtn_init_hooked__", False):
                    __orig_init__ = QApplication.__init__
                    def __wrapped_init__(self, *a, **k):
                        __orig_init__(self, *a, **k)
                        try:
                            QTimer.singleShot(1200, _inject_force_btn)
                            global __einv_force_vis_timer__
                            if __einv_force_vis_timer__ is None:
                                __einv_force_vis_timer__ = QTimer(self)
                                __einv_force_vis_timer__.setInterval(1500)
                                __einv_force_vis_timer__.timeout.connect(_refresh_visibility)
                                __einv_force_vis_timer__.start()
                            _ui_log("ppf.ui.bootstrap=init")
                        except Exception: pass
                    QApplication.__init__ = __wrapped_init__
                    QApplication.__einv_forcebtn_init_hooked__ = True
            else:
                QTimer.singleShot(1200, _inject_force_btn)
                global __einv_force_vis_timer__
                if __einv_force_vis_timer__ is None:
                    __einv_force_vis_timer__ = QTimer(app)
                    __einv_force_vis_timer__.setInterval(1500)
                    __einv_force_vis_timer__.timeout.connect(_refresh_visibility)
                    __einv_force_vis_timer__.start()
                _ui_log("ppf.ui.bootstrap=late")
        except Exception:
            pass
    __einv_safe_bootstrap__()
# ==================== FIN PATCH FORCEBTN (chooser) ================================================
# ====================== NF203 - WORM + AUTOLOG (R3-FLAT, zero-action) ======================
import os as _os_n, json as _json_n, hashlib as _hash_n, time as _time_n, datetime as _dt_n, re as _re_n
def _nf203__canon(obj):
    try: return _json_n.dumps(obj, ensure_ascii=False, sort_keys=True, separators=(",", ":"))
    except Exception:
        try: return _json_n.dumps(str(obj), ensure_ascii=False, sort_keys=True, separators=(",", ":"))
        except Exception: return "null"
def _nf203__h(b: bytes) -> str:
    try: return _hash_n.sha256(b).hexdigest()
    except Exception: return ""
def _nf203__data_root() -> str:
    try: return globals().get("DATA_DIR", None) or _os_n.path.join(_os_n.getcwd(), "data")
    except Exception: return _os_n.path.join(_os_n.getcwd(), "data")
def _nf203__period_paths(dt=None):
    try:
        d = dt or _ae_utcnow()
        y = f"{d.year:04d}"; m = f"{d.month:02d}"
        base = _os_n.path.join(_nf203__data_root(), "audit", "nf203", y, m)
        _os_n.makedirs(base, exist_ok=True)
        return base, _os_n.path.join(base, f"nf203_{y}-{m}.jsonl")
    except Exception:
        base = _os_n.path.join(_nf203__data_root(), "audit", "nf203")
        _os_n.makedirs(base, exist_ok=True)
        return base, _os_n.path.join(base, "nf203_unknown.jsonl")
def _nf203__tail_info(path):
    prev = ""; cnt = 0
    try:
        if not _os_n.path.isfile(path): return "", 0
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line: continue
                cnt += 1
                try: prev = str(_json_n.loads(line).get("hash", ""))
                except Exception: pass
        return prev, cnt
    except Exception:
        return "", 0
def _nf203_now_iso():
    try: return _ae_utcnow().replace(microsecond=0).isoformat() + "Z"
    except Exception: return _time_n.strftime("%Y-%m-%dT%H:%M:%SZ", _time_n.gmtime())
def _nf203__ui_log(msg: str):
    try:
        if "_cii_log" in globals() and not getattr(globals()["_cii_log"], "__nf203_wrapped_out__", False):
            globals()["_cii_log"](msg)  # best effort to existing logger
        else:
            root = _nf203__data_root()
            _os_n.makedirs(root, exist_ok=True)
            with open(_os_n.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                f.write(f"{_nf203_now_iso()} {msg}\n")
    except Exception:
        pass
def _nf203_log(evt: str, *, entity: str = "", id: str = "", payload=None, actor: str = "", extra=None):
    try:
        _, fpath = _nf203__period_paths()
        prev, count = _nf203__tail_info(fpath)
        rel = fpath
        try:
            root = _nf203__data_root()
            if _os_n.path.isabs(rel): rel = _os_n.path.relpath(rel, root)
        except Exception: pass
        _nf203__ui_log(f"nf203.log.open=ok file={rel} count={count}")
        _nf203__ui_log(f"nf203.log.prev hash={'none' if not prev else prev}")
        if not actor:
            try:
                s = globals().get("settings", {}) or {}
                actor = str(s.get("current_user") or s.get("user") or "system")
            except Exception:
                actor = "system"
        try: payload_hash = _nf203__h(_nf203__canon(payload).encode("utf-8"))
        except Exception: payload_hash = ""
        core = {"ts": _nf203_now_iso(), "evt": str(evt or ""), "entity": str(entity or ""),
                "id": str(id or ""), "actor": str(actor or ""), "payload_hash": payload_hash,
                "prev_hash": prev, "extra": extra or {}}
        rec_hash = _nf203__h((prev + _nf203__canon(core)).encode("utf-8"))
        entry = dict(core); entry["hash"] = rec_hash
        with open(fpath, "a", encoding="utf-8") as f:
            f.write(_nf203__canon(entry) + "\n")
        _nf203__ui_log(f"nf203.log.write evt={core['evt']} entity={core['entity']} id={core['id']} hash={rec_hash} ok=true")
        return entry
    except Exception as e:
        _nf203__ui_log(f"nf203.log.error=write reason={type(e).__name__}:{e}")
        return False
# --- autolog state (persisted across restarts by hydration) ---
if "_nf203_autolog_state__" not in globals():
    _nf203_autolog_state__ = {
        "create_seen": set(),
        "submit_seen": set(),
        "deliver_seen": set(),
        "reset_seen": set(),
    }
def _nf203__hydrate_seen():
    """Hydrate 'seen' sets from current JSONL to avoid cross-run duplicates."""
    try:
        _, fpath = _nf203__period_paths()
        if not fpath or not _os_n.path.isfile(fpath): return
        submit_cnt = deliver_cnt = reset_cnt = 0
        with open(fpath, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line: continue
                try: obj = _json_n.loads(line)
                except Exception: continue
                evt = str(obj.get("evt",""))
                iid = str(obj.get("id",""))
                if not iid: continue
                if evt == "queue.submit":
                    _nf203_autolog_state__["submit_seen"].add(iid); submit_cnt += 1
                elif evt == "queue.deliver":
                    _nf203_autolog_state__["deliver_seen"].add(iid); deliver_cnt += 1
                elif evt == "queue.reset":
                    _nf203_autolog_state__["reset_seen"].add(iid); reset_cnt += 1
        _nf203__ui_log(f"nf203.bind=hydrate submit={submit_cnt} deliver={deliver_cnt} reset={reset_cnt}")
    except Exception:
        pass
_nf203__hydrate_seen()
def _nf203__derive_and_log(line: str):
    try:
        l = str(line or "")
        num = None
        m = _re_n.search(r'numero\s*=\s*([A-Za-z0-9._-]+)', l)
        if m: num = m.group(1)
        if not num:
            m2 = _re_n.search(r'F\d{4}[-_]\d{3,}', l)
            if m2: num = m2.group(0)
        if not num:
            m3 = _re_n.search(r'/ops/([^/\s]+)/', l)
            if m3: num = m3.group(1)
        if not num:
            m4 = _re_n.search(r'factures[/\\]([^/\\\s]+)\.', l)
            if m4: num = m4.group(1)
        if "spool.write" in l or "cii.write" in l or "fx.write" in l:
            if num and num not in _nf203_autolog_state__["create_seen"]:
                _nf203_autolog_state__["create_seen"].add(num)
                _nf203_log("invoice.create", entity="invoice", id=num, payload={"source":"loghook"})
        if "ppf.poll.observed" in l:
            sm = _re_n.search(r'status\s*=\s*([a-zA-Z_]+)', l)
            st = sm.group(1).lower() if sm else ""
            if num and st == "submitted" and num not in _nf203_autolog_state__["submit_seen"]:
                _nf203_autolog_state__["submit_seen"].add(num)
                _nf203_log("queue.submit", entity="invoice", id=num, payload={"source":"loghook"})
            if num and st == "delivered" and num not in _nf203_autolog_state__["deliver_seen"]:
                _nf203_autolog_state__["deliver_seen"].add(num)
                _nf203_log("queue.deliver", entity="invoice", id=num, payload={"source":"loghook"})
        if "ppf.ui.force action=reset" in l:
            if num and num not in _nf203_autolog_state__["reset_seen"]:
                _nf203_autolog_state__["reset_seen"].add(num)
                _nf203_log("queue.reset", entity="invoice", id=num, payload={"source":"loghook"})
    except Exception:
        pass
# ---- Hook logger ----
if "_cii_log" in globals() and not getattr(globals()["_cii_log"], "__nf203_wrapped_out__", False):
    __nf203_orig_cii_log__ = _cii_log
    def _cii_log(line: str):
        try:
            __nf203_orig_cii_log__(line)
        finally:
            _nf203__derive_and_log(line)
    _cii_log.__nf203_wrapped_out__ = True
    _nf203__ui_log("nf203.bind=hooked=cii_log")
elif "_cii_log" not in globals():
    def _cii_log(line: str):
        try:
            root = _nf203__data_root()
            _os_n.makedirs(root, exist_ok=True)
            with open(_os_n.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                f.write(f"{_nf203_now_iso()} {line}\n")
        except Exception:
            pass
        finally:
            _nf203__derive_and_log(line)
    _cii_log.__nf203_wrapped_out__ = True
    _nf203__ui_log("nf203.bind=created=cii_log")
# ---- Wrap helpers (update 'seen' to avoid duplicates) ----
if "_einv_force_send" in globals() and not getattr(globals()["_einv_force_send"], "__nf203_wrapped_out__", False):
    __nf203_orig_send__ = _einv_force_send
    def _einv_force_send(numero: str, steps: str) -> bool:  # type: ignore[override]
        ok = __nf203_orig_send__(numero, steps)
        try:
            st = str(steps or "").lower()
            if st == "submit":
                _nf203_autolog_state__["submit_seen"].add(str(numero)); evt = "queue.submit"
            elif st == "deliver":
                _nf203_autolog_state__["deliver_seen"].add(str(numero)); evt = "queue.deliver"
            else:
                _nf203_autolog_state__["submit_seen"].add(str(numero))
                _nf203_autolog_state__["deliver_seen"].add(str(numero))
                evt = "queue.both"
            _nf203_log(evt, entity="invoice", id=str(numero), payload={"source":"helperwrap"})
        except Exception:
            pass
        return ok
    _einv_force_send.__nf203_wrapped_out__ = True
    _nf203__ui_log("nf203.bind=hooked=_einv_force_send")
if "_einv_force_reset" in globals() and not getattr(globals()["_einv_force_reset"], "__nf203_wrapped_out__", False):
    __nf203_orig_reset__ = _einv_force_reset
    def _einv_force_reset(numero: str) -> bool:  # type: ignore[override]
        ok = __nf203_orig_reset__(numero)
        try:
            _nf203_autolog_state__["reset_seen"].add(str(numero))
            _nf203_log("queue.reset", entity="invoice", id=str(numero), payload={"source":"helperwrap"})
        except Exception:
            pass
        return ok
    _einv_force_reset.__nf203_wrapped_out__ = True
    _nf203__ui_log("nf203.bind=hooked=_einv_force_reset")
# ==================== FIN NF203 - WORM + AUTOLOG (R3-FLAT) =====================================
# ====================== NF203 - Step 2: Monthly Seal (auto, zero-action, boot-call safe) ======================
import hmac as _hmac_n
def _nf203__seal_path(dt=None):
    try:
        d = dt or _ae_utcnow()
        base, _ = _nf203__period_paths(d)
        return _os_n.path.join(base, ".seal.json")
    except Exception:
        base = _os_n.path.join(_nf203__data_root(), "audit", "nf203")
        _os_n.makedirs(base, exist_ok=True)
        return _os_n.path.join(base, ".seal.json")
def _nf203_is_sealed(dt=None) -> bool:
    try:
        return _os_n.path.isfile(_nf203__seal_path(dt))
    except Exception:
        return False
def _nf203__scan_month(dt=None):
    """Return (count,last_hash,jsonl_path,rel_path)."""
    try:
        _, fpath = _nf203__period_paths(dt)
        prev = ""; cnt = 0
        if _os_n.path.isfile(fpath):
            with open(fpath, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line: continue
                    cnt += 1
                    try:
                        obj = _json_n.loads(line)
                        prev = str(obj.get("hash",""))
                    except Exception:
                        pass
        rel = fpath
        try:
            root = _nf203__data_root()
            if _os_n.path.isabs(rel): rel = _os_n.path.relpath(rel, root)
        except Exception: 
            pass
        return cnt, prev, fpath, rel
    except Exception:
        return 0, "", "", ""
def _nf203_seal(dt=None):
    """Create .seal.json for the month. If settings['nf203_key'] present -> add HMAC."""
    try:
        d = dt or _ae_utcnow()
        ym = f"{d.year:04d}-{d.month:02d}"
        seal_path = _nf203__seal_path(d)
        if _os_n.path.isfile(seal_path):
            _nf203__ui_log(f"nf203.seal.skip=already period={ym}")
            return {"skip":"already"}
        count, last_hash, jsonl_path, rel = _nf203__scan_month(d)
        _nf203__ui_log(f"nf203.seal.start period={ym} file={rel} count={count} last={last_hash or 'none'}")
        seal = {
            "period": ym,
            "file": rel,
            "count": int(count),
            "last_hash": last_hash,
            "algo": "sha256",
            "created": _nf203_now_iso(),
        }
        try:
            s = globals().get("settings", {}) or {}
            key = str(s.get("nf203_key") or "")
        except Exception:
            key = ""
        if key:
            try:
                msg = (ym + "|" + str(count) + "|" + (last_hash or "")).encode("utf-8")
                seal["hmac_alg"] = "HMAC-SHA256"
                seal["hmac"] = _hmac_n.new(key.encode("utf-8"), msg, _hash_n.sha256).hexdigest()
            except Exception:
                pass
        with open(seal_path, "w", encoding="utf-8") as f:
            _json_n.dump(seal, f, ensure_ascii=False, indent=2)
        _nf203__ui_log("nf203.seal.write ok=true")
        _nf203_verify(d)
        return seal
    except Exception as e:
        _nf203__ui_log(f"nf203.seal.error=run reason={type(e).__name__}:{e}")
        return False
def _nf203_verify(dt=None):
    """Recompute chain and compare to seal. Logs nf203.verify.ok or error."""
    try:
        d = dt or _ae_utcnow()
        ym = f"{d.year:04d}-{d.month:02d}"
        seal_path = _nf203__seal_path(d)
        if not _os_n.path.isfile(seal_path):
            _nf203__ui_log(f"nf203.verify.skip=no_seal period={ym}")
            return {"skip":"no_seal"}
        with open(seal_path, "r", encoding="utf-8") as f:
            seal = _json_n.load(f)
        count, last_hash, jsonl_path, rel = _nf203__scan_month(d)
        ok = (count == int(seal.get("count", -1))) and (last_hash == seal.get("last_hash",""))
        if ok and "hmac" in seal:
            try:
                s = globals().get("settings", {}) or {}
                key = str(s.get("nf203_key") or "")
                msg = (seal.get("period","") + "|" + str(count) + "|" + (last_hash or "")).encode("utf-8")
                h = _hmac_n.new(key.encode("utf-8"), msg, _hash_n.sha256).hexdigest() if key else ""
                ok = (h and h == seal.get("hmac"))
            except Exception:
                ok = False
        if ok:
            _nf203__ui_log(f"nf203.verify.ok period={ym} file={rel} count={count} last={last_hash or 'none'}")
            return True
        else:
            _nf203__ui_log(f"nf203.verify.error=mismatch period={ym} file={rel} count={count} last={last_hash or 'none'} seal_count={seal.get('count')} seal_last={seal.get('last_hash')}")
            return False
    except Exception as e:
        _nf203__ui_log(f"nf203.verify.error=run reason={type(e).__name__}:{e}")
        return False
# ---- Autorun: seal previous month once per import, then arm periodic timer when QApplication exists ----
try:
    from PyQt5.QtWidgets import QApplication as _NF_QApp
    from PyQt5.QtCore import QTimer as _NF_QTimer
except Exception:
    _NF_QApp = None; _NF_QTimer = None
_nf203_autoseal_timer__ = globals().get("_nf203_autoseal_timer__", None)
def _nf203_autoseal_once():
    try:
        s = globals().get("settings", {}) or {}
        auto = s.get("nf203_autoseal")
        if auto is None: auto = True
        if not auto:
            _nf203__ui_log("nf203.seal.autorun=skip disabled=true")
            return
        now = _ae_utcnow().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        d = now - _dt_n.timedelta(seconds=1)
        ym = f"{d.year:04d}-{d.month:02d}"
        if _nf203_is_sealed(d):
            _nf203__ui_log(f"nf203.seal.autorun=skip already_sealed period={ym}")
            return
        count, last_hash, jsonl_path, rel = _nf203__scan_month(d)
        if count <= 0:
            _nf203__ui_log(f"nf203.seal.autorun=skip empty period={ym}")
            return
        _nf203__ui_log(f"nf203.seal.autorun=start period={ym}")
        _nf203_seal(d)
        _nf203__ui_log(f"nf203.seal.autorun=done period={ym}")
    except Exception as e:
        _nf203__ui_log(f"nf203.seal.autorun=error reason={type(e).__name__}:{e}")
def _nf203__arm_autoseal_timer():
    global _nf203_autoseal_timer__
    try:
        app = _NF_QApp.instance() if _NF_QApp else None
        if app and _nf203_autoseal_timer__ is None:
            t = _NF_QTimer(app)
            t.setInterval(6 * 60 * 60 * 1000)  # every 6 hours
            t.timeout.connect(_nf203_autoseal_once)
            t.start()
            _NF_QTimer.singleShot(3500, _nf203_autoseal_once)
            _nf203_autoseal_timer__ = t
            _nf203__ui_log("nf203.seal.autorun=armed")
    except Exception:
        pass
# --- boot call: trigger once now (safe even without QApplication) then arm timer if/when app exists
try:
    _nf203__ui_log("nf203.seal.autorun=boot")
except Exception:
    pass
_nf203_autoseal_once()
_nf203__arm_autoseal_timer()
# ====================== END NF203 - Step 2: Monthly Seal ======================================
# ====================== DEV MODE sécurisé par certificat signé (RSA) ======================
import os as _os_d, json as _json_d, base64 as _b64_d, hashlib as _hash_d, uuid as _uuid_d, platform as _plat_d, getpass as _getp_d, socket as _sock_d, datetime as _dt_d
# --- Clé publique (copie uniquement la PARTIE PUBLIQUE) ---
DEV_RSA_N_HEX = "5ecf9586e52b2c53a5e938f5368799aee4cfa51e242dc618fb3a8319c7b2ccaef2c711e78f29f51c493a32ece1a4677d89586fb64dc8a1feb02903832b3d474327ccbecbb315f185df1b54738596f9a67616d837be04cd77925ca370bc1c2287fd9f98da33bad5de5d58dab68abe4935bbb247331eeabacffee7722cd898ceca50468391419512460ab5311b27bc5cd32b6417c0cf80bbea04ed538d957c424582893717b2e654a7fadc9385db298683f20d304dc75e024e8f174ce47fdaf852601889170141281efcb45d409ddbfbf788243a0f9a056cd9bb31a5860cd1fec98d40752bdedef2d9676730f0a3d62ada4beb6d5af87ddc8077875bbaec8acf4d"  # ex: 'b4f1...'
DEV_RSA_E_DEC = 65537
def _dev__log(s: str):
    try:
        if "_cii_log" in globals():
            _cii_log(s)
        else:
            root = globals().get("DATA_DIR", None) or _os_d.path.join(_os_d.getcwd(), "data")
            _os_d.makedirs(root, exist_ok=True)
            with open(_os_d.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                f.write(s + "\n")
    except Exception:
        pass
def _dev_machine_fp() -> str:
    """Empreinte machine (non sensible) : OS, arch, user, hostname, MAC."""
    try:
        parts = [
            _plat_d.system(), _plat_d.release(), _plat_d.machine(),
            _getp_d.getuser(), _sock_d.gethostname(), format(_uuid_d.getnode(), 'x')
        ]
        return _hash_d.sha256("|".join(parts).encode("utf-8")).hexdigest()
    except Exception:
        return ""
def _dev_candidate_paths():
    root = globals().get("DATA_DIR", None) or _os_d.path.join(_os_d.getcwd(), "data")
    return [p for p in [
        _os_d.path.join(root, "dev", "dev_unlock.json"),
        _os_d.path.join(_os_d.environ.get("APPDATA", ""), "AE_GESTION", "dev_unlock.json"),
        _os_d.path.join(_os_d.environ.get("HOME", ""), ".ae_gestion", "dev_unlock.json"),
    ] if p]
def _dev_read_token():
    for p in _dev_candidate_paths():
        try:
            with open(p, "r", encoding="utf-8") as f:
                tok = _json_d.load(f); tok["__path__"] = p; return tok
        except Exception:
            pass
    return None
def _rsa_verify_sha256_raw(sig_b: bytes, msg_b: bytes) -> bool:
    """Vérif 'raw RSA' (sha256(msg) == sig^e mod n). Suffisant pour un déverrouillage local."""
    try:
        n = int(DEV_RSA_N_HEX, 16); e = int(DEV_RSA_E_DEC)
        s = int.from_bytes(sig_b, "big")
        m = pow(s, e, n)
        h = int.from_bytes(_hash_d.sha256(msg_b).digest(), "big")
        return m == h
    except Exception:
        return False
__DEV_MODE__ = False
__DEV_FEATURES__ = set()
def _dev_enable_from_token() -> bool:
    """Active le mode dev si un certificat signé et non expiré est présent."""
    global __DEV_MODE__, __DEV_FEATURES__
    __DEV_MODE__, __DEV_FEATURES__ = False, set()
    if _os_d.environ.get("AE_DEV_KILL") == "1":  # coupe-circuit de secours
        _dev__log("dev.mode=forced_off"); return False
    tok = _dev_read_token()
    if not tok:
        _dev__log("dev.mode=miss"); return False
    # payload minimal: {"fp": "...", "exp": "2026-12-31T23:59:59Z", "features": ["nf203_seal_now", "..."], "sig": "<b64>"}
    try:
        payload = {"fp": tok["fp"], "exp": tok["exp"], "features": tok.get("features", [])}
    except Exception:
        _dev__log("dev.mode=bad_token"); return False
    try:
        sig_b = _b64_d.b64decode(tok.get("sig", ""))
    except Exception:
        _dev__log("dev.mode=bad_sig=decode"); return False
    msg = _json_d.dumps(payload, sort_keys=True, separators=(",", ":")).encode("utf-8")
    if not _rsa_verify_sha256_raw(sig_b, msg):
        _dev__log("dev.mode=bad_sig"); return False
    if str(payload["fp"]) != _dev_machine_fp():
        _dev__log("dev.mode=fingerprint_mismatch"); return False
    try:
        exp = _dt_d.datetime.fromisoformat(str(payload["exp"]).replace("Z", ""))
    except Exception:
        _dev__log("dev.mode=bad_exp"); return False
    if exp < _ae_utcnow():
        _dev__log("dev.mode=expired"); return False
    __DEV_MODE__ = True
    __DEV_FEATURES__ = set(payload.get("features", []))
    _dev__log(f"dev.mode=ok path={tok.get('__path__')} features={','.join(sorted(__DEV_FEATURES__))}")
    return True
def is_dev() -> bool:
    return bool(__DEV_MODE__)
def dev_has(feature: str) -> bool:
    return is_dev() and (feature in __DEV_FEATURES__)
# Boot: log fingerprint and try enable once; then, if Qt dispo, re-check périodiquement
try:
    _dev__log("dev.fp=" + _dev_machine_fp())
except Exception:
    pass
try:
    from PyQt5.QtCore import QTimer as _DevQTimer
    _dev_enable_from_token()
    _dev_recheck_timer__ = _DevQTimer(globals().get("app") if "app" in globals() else None)
    _dev_recheck_timer__.setInterval(5 * 60 * 1000)  # toutes les 5 min
    _dev_recheck_timer__.timeout.connect(_dev_enable_from_token)
    _dev_recheck_timer__.start()
except Exception:
    _dev_enable_from_token()
# ==================== FIN DEV MODE sécurisé ====================================
# ====================== NF203 DEV Button + Current-Month Dev Seal (zero action) ======================
try:
    import os as _os_s, json as _json_s, hmac as _hmac_s
    from PyQt5.QtWidgets import QApplication as _S_QApp, QPushButton as _S_QPushButton, QWidget as _S_QWidget
    from PyQt5.QtCore import QTimer as _S_QTimer
except Exception:
    _S_QApp = None; _S_QPushButton = None; _S_QTimer = None
def _nf203__seal_dev_path(dt=None):
    try:
        d = dt or _ae_utcnow()
        base, _ = _nf203__period_paths(d)
        return _os_s.path.join(base, ".seal.dev.json")
    except Exception:
        base = _os_s.path.join(_nf203__data_root(), "audit", "nf203")
        _os_s.makedirs(base, exist_ok=True)
        return _os_s.path.join(base, ".seal.dev.json")
def _nf203_seal_current_dev(dt=None):
    """
    DEV-ONLY: scelle le mois courant dans .seal.dev.json (preuve immédiate) sans impacter le .seal.json de prod.
    """
    try:
        # sécurité: ne rien faire si pas en mode dev
        if "is_dev" in globals() and not is_dev():
            return {"skip":"nodev"}
        if "dev_has" in globals() and not dev_has("nf203_seal_now"):
            return {"skip":"nodev_feature"}
        d = dt or _ae_utcnow()
        ym = f"{d.year:04d}-{d.month:02d}"
        count, last_hash, jsonl_path, rel = _nf203__scan_month(d)
        _nf203__ui_log(f"nf203.seal.dev.start period={ym} file={rel} count={count} last={last_hash or 'none'}")
        seal_path = _nf203__seal_dev_path(d)
        seal = {
            "period": ym,
            "file": rel,
            "count": int(count),
            "last_hash": last_hash,
            "algo": "sha256",
            "created": _nf203_now_iso(),
            "dev": True
        }
        # HMAC optionnelle (même clé que le scellé prod si fournie)
        key = ""
        try:
            s = globals().get("settings", {}) or {}
            key = str(s.get("nf203_key") or "")
        except Exception:
            key = ""
        if key:
            try:
                msg = (ym + "|" + str(count) + "|" + (last_hash or "")).encode("utf-8")
                seal["hmac_alg"] = "HMAC-SHA256"
                seal["hmac"] = _hmac_s.new(key.encode("utf-8"), msg, _hash_n.sha256).hexdigest()
            except Exception:
                pass
        try:
            with open(seal_path, "w", encoding="utf-8") as f:
                _json_s.dump(seal, f, ensure_ascii=False, indent=2)
        except Exception as e:
            _nf203__ui_log(f"nf203.seal.dev.error=write reason={type(e).__name__}:{e}")
            return False
        _nf203__ui_log("nf203.seal.dev.write ok=true")
        # Vérif simple (recalc et comparer)
        ok = True
        try:
            c2, h2, _, rel2 = _nf203__scan_month(d)
            ok = (c2 == seal["count"] and h2 == seal["last_hash"])
            if ok and "hmac" in seal:
                s = globals().get("settings", {}) or {}
                key = str(s.get("nf203_key") or "")
                msg = (seal.get("period","") + "|" + str(c2) + "|" + (h2 or "")).encode("utf-8")
                hchk = _hmac_s.new(key.encode("utf-8"), msg, _hash_n.sha256).hexdigest() if key else ""
                ok = (hchk and hchk == seal.get("hmac"))
        except Exception:
            ok = False
        if ok:
            _nf203__ui_log(f"nf203.seal.dev.verify.ok period={ym} file={rel}")
            return True
        else:
            _nf203__ui_log(f"nf203.seal.dev.verify.error period={ym}")
            return False
    except Exception as e:
        try:
            _nf203__ui_log(f"nf203.seal.dev.error=run reason={type(e).__name__}:{e}")
        except Exception:
            pass
        return False
# ---- Dev auto-proof at boot (single run) ----
__nf203_dev_autoproof_done__ = globals().get("__nf203_dev_autoproof_done__", False)
def _nf203__dev_autoproof_try():
    try:
        if globals().get("__nf203_dev_autoproof_done__", False):
            return
        if "is_dev" in globals() and is_dev() and ("dev_has" not in globals() or dev_has("nf203_seal_now")):
            _nf203_seal_current_dev()
            globals()["__nf203_dev_autoproof_done__"] = True
    except Exception:
        pass
try:
    app = _S_QApp.instance() if _S_QApp else None
    if app and _S_QTimer:
        _S_QTimer.singleShot(2500, _nf203__dev_autoproof_try)
    else:
        # sans Qt (ou pas encore instancié) : tenter tout de suite
        _nf203__dev_autoproof_try()
except Exception:
    pass
# ---- Dev-only button injection in E-facturation tab ----
__nf203_seal_btn_added__ = globals().get("__nf203_seal_btn_added__", False)
def _nf203__inject_dev_seal_button():
    try:
        if globals().get("__nf203_seal_btn_added__", False):
            return
        app = _S_QApp.instance() if _S_QApp else None
        if not app:
            return
        # Chercher un QTabWidget avec l'onglet 'E-facturation'
        from PyQt5.QtWidgets import QTabWidget, QBoxLayout, QGridLayout, QFormLayout, QVBoxLayout, QMessageBox, QWidget, QLayout
        tabs = app.allWidgets()
        ef_tab = None
        for w in tabs:
            try:
                if isinstance(w, QTabWidget):
                    for i in range(w.count()):
                        t = w.tabText(i)
                        if t and "facturation" in t.lower():  # "E-facturation (PPF/PDP)"
                            ef_tab = w.widget(i)
                            break
                if ef_tab:
                    break
            except Exception:
                continue
        if not ef_tab:
            _nf203__ui_log("nf203.ui.seal.btn.added=miss reason=no_tab")
            return
        # Trouver un bouton "Tester (mock)" pour s'ancrer à gauche
        anchor_btn = None
        for child in ef_tab.findChildren(_S_QPushButton):
            try:
                if "tester" in child.text().lower() and "mock" in child.text().lower():
                    anchor_btn = child; break
            except Exception:
                continue
        btn = _S_QPushButton("Sceller (NF203) [DEV]", ef_tab)
        btn.setObjectName("__nf203_seal_btn__")
        btn.clicked.connect(lambda: _nf203_seal_current_dev())
        # Visibilité initiale
        try:
            vis = ("is_dev" in globals() and is_dev() and ("dev_has" not in globals() or dev_has("nf203_seal_now")))
            btn.setVisible(bool(vis))
        except Exception:
            btn.setVisible(False)
        placed = False
        # Insérer avant l'ancre si possible
        try:
            if anchor_btn and anchor_btn.parent() and anchor_btn.parent().layout():
                lay = anchor_btn.parent().layout()
                # chercher index de l'ancre
                idx = -1
                for i in range(lay.count()):
                    if lay.itemAt(i) and lay.itemAt(i).widget() is anchor_btn:
                        idx = i; break
                if idx >= 0 and hasattr(lay, "insertWidget"):
                    lay.insertWidget(max(0, idx), btn)  # juste avant l'ancre
                    placed = True
                    _nf203__ui_log("nf203.ui.seal.btn.added=ok anchor=button")
        except Exception as e:
            pass
        # Sinon, ajouter en bas du container
        if not placed:
            try:
                lay = ef_tab.layout()
                if lay and hasattr(lay, "addWidget"):
                    lay.addWidget(btn)
                    placed = True
                    _nf203__ui_log("nf203.ui.seal.btn.added=ok anchor=container")
            except Exception:
                pass
        # Sinon, message discret
        if not placed:
            btn.setParent(None)
            _nf203__ui_log("nf203.ui.seal.btn.added=miss reason=no_layout")
        # Timer visibilite conditionnelle (dev only)
        if placed and _S_QTimer:
            def _refresh_vis():
                try:
                    vis = ("is_dev" in globals() and is_dev() and ("dev_has" not in globals() or dev_has("nf203_seal_now")))
                    btn.setVisible(bool(vis))
                except Exception:
                    btn.setVisible(False)
            _S_QTimer.singleShot(1000, _refresh_vis)
            t = _S_QTimer(btn); t.setInterval(2000); t.timeout.connect(_refresh_vis); t.start()
        globals()["__nf203_seal_btn_added__"] = True
    except Exception as e:
        try:
            _nf203__ui_log(f"nf203.ui.seal.btn.added=error reason={type(e).__name__}:{e}")
        except Exception:
            pass
# Injection tardive
try:
    app = _S_QApp.instance() if _S_QApp else None
    if app and _S_QTimer:
        _S_QTimer.singleShot(1500, _nf203__inject_dev_seal_button)
except Exception:
    pass
# --- Watchdog (robuste) pour garantir l'apparition du bouton NF203 même si QApplication est créée après l'import ---
try:
    def _nf203__seal_btn_watchdog_tick():
        try:
            _nf203__inject_dev_seal_button()
            if globals().get("__nf203_seal_btn_added__", False):
                t = globals().get("__nf203_seal_btn_watchdog__", None)
                if t:
                    try:
                        t.stop()
                    except Exception:
                        pass
        except Exception:
            pass
    app = _S_QApp.instance() if _S_QApp else None
    if app and _S_QTimer and not globals().get("__nf203_seal_btn_watchdog__", None):
        wt = _S_QTimer(app)
        wt.setInterval(1200)
        wt.timeout.connect(_nf203__seal_btn_watchdog_tick)
        wt.start()
        globals()["__nf203_seal_btn_watchdog__"] = wt
        try:
            _nf203__ui_log("nf203.ui.seal.btn.watchdog=start")
        except Exception:
            pass
except Exception:
    pass
# ====================== END DEV Button + Dev Seal ==============================================
# ======================================================================
# MP-3 — Enforcement hard (PROD) — wrapper robuste + bouton DEV "Sceller"
# (idempotent, aucune modif de signatures, PyQt5 only, aucun accès réseau)
# ======================================================================
try:
    import os as _mp3_os, json as _mp3_json, datetime as _mp3_dt, hashlib as _mp3_hashlib, zipfile as _mp3_zip, pathlib as _mp3_pathlib, functools as _mp3_fun
    from PyQt5.QtCore import QTimer as _MP3_QTimer, Qt as _MP3_Qt, QUrl as _MP3_QUrl
    from PyQt5.QtWidgets import QApplication as _MP3_QApp, QWidget as _MP3_QWidget, QPushButton as _MP3_QPushButton, QHBoxLayout as _MP3_QHBoxLayout, QMessageBox as _MP3_QMessageBox
    from PyQt5.QtGui import QDesktopServices as _MP3_QDesktopServices
except Exception as _mp3_imp_err:
    # En environnement non-Qt (analyse/scripting), on no-op sans casser l'app
    _mp3_imp_err = _mp3_imp_err
__nf203_mp3_installed__ = globals().get("__nf203_mp3_installed__", False)
def _mp3_ciilog(msg: str):
    try:
        if "_cii_log" in globals():
            globals()["_cii_log"](msg)
            return
    except Exception:
        pass
    try:
        _base = globals().get("DATA_DIR", _mp3_os.path.join(_mp3_os.getcwd(), "data"))
        _mp3_pathlib.Path(_base).mkdir(parents=True, exist_ok=True)
        with (_mp3_pathlib.Path(_base) / "cii_export.log").open("a", encoding="utf-8") as _f:
            _f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {msg}\n")
    except Exception:
        pass
def _mp3_now_yyyy_mm():
    now = _ae_utcnow()
    return now.year, now.month
def _mp3_month_dir(prod=True):
    _dat = globals().get("DATA_DIR", _mp3_os.path.join(_mp3_os.getcwd(), "data"))
    y, m = _mp3_now_yyyy_mm()
    d = _mp3_pathlib.Path(_dat) / "audit" / "nf203" / f"{y}" / f"{m:02d}"
    d.mkdir(parents=True, exist_ok=True)
    return d
def _mp3_jsonl_path():
    return _mp3_month_dir(True) / "nf203_{}.jsonl".format(_ae_utcnow().strftime("%Y-%m"))
def _mp3_seal_path(prod=True):
    return (_mp3_month_dir(prod) / "nf203_{}".format(_ae_utcnow().strftime("%Y-%m"))).with_suffix(".seal.json" if prod else ".seal.dev.json")
def _mp3_proof_zip(prod=True):
    y, m = _mp3_now_yyyy_mm()
    name = f"proof_{'PROD' if prod else 'DEV'}_{y}-{m:02d}.zip"
    return _mp3_month_dir(prod) / name
def _mp3_is_dev_mode():
    paths = [
        _mp3_pathlib.Path(globals().get("DATA_DIR", _mp3_os.path.join(_mp3_os.getcwd(), "data"))) / "dev" / "dev_unlock.json",
        _mp3_pathlib.Path(_mp3_os.environ.get("APPDATA", "")) / "AE_GESTION" / "dev_unlock.json",
    ]
    return any(p.exists() for p in paths)
def _mp3_enforce_check(prod=True):
    """Log + renvoie True si écriture autorisée (pas de scellé pour le canal visé)."""
    try:
        sp = _mp3_seal_path(prod)
        sealed = sp.exists()
        _mp3_ciilog(f"nf203.enforce.check sealed={str(sealed).lower()} prod={str(bool(prod)).lower()} path={sp}")
        return not sealed
    except Exception as _e:
        _mp3_ciilog(f"nf203.enforce.check error={_e}")
        return True  # fail-open (ne pas bloquer intempestivement en cas d'erreur de FS)
def _mp3_wrap(func):
    @_mp3_fun.wraps(func)
    def _w(*a, **kw):
        dev = _mp3_is_dev_mode()
        prod = not dev
        if not _mp3_enforce_check(prod):
            _mp3_ciilog(f"nf203.rejected reason=sealed prod={str(prod).lower()}")
            try:
                if dev:
                    _MP3_QMessageBox.information(None, "NF203 Dev", "Opération bloquée : mois déjà scellé (DEV)")
            except Exception:
                pass
            return None
        return func(*a, **kw)
    return _w
def _mp3_try_wrap_targets():
    wrapped = []
    try:
        if "_safe_write_facturx_pdf" in globals():
            globals()["_safe_write_facturx_pdf"] = _mp3_wrap(globals()["_safe_write_facturx_pdf"])
            wrapped.append("_safe_write_facturx_pdf")
        if "_ensure_facturx" in globals():
            globals()["_ensure_facturx"] = _mp3_wrap(globals()["_ensure_facturx"])
            wrapped.append("_ensure_facturx")
        _mp3_ciilog("nf203.enforce.wrap=ok targets=" + ",".join(wrapped) if wrapped else "nf203.enforce.wrap=ok targets=none")
    except Exception as _e:
        _mp3_ciilog(f"nf203.enforce.wrap=fail {type(_e).__name__}: {_e}")
def _mp3_dev_seal():
    """Génère DEV .seal.dev.json + ZIP de preuve (manifest.json + jsonl si présent)."""
    try:
        if not _mp3_is_dev_mode():
            _mp3_ciilog("nf203.seal.dev.start=skip reason=not_dev_mode")
            return
        if not _mp3_enforce_check(prod=False):
            _mp3_ciilog("nf203.seal.dev.start=skip reason=already_sealed")
            return
        _mp3_ciilog("nf203.seal.dev.start")
        seal_file = _mp3_seal_path(prod=False)
        proof_zip = _mp3_proof_zip(prod=False)
        jsonl = _mp3_jsonl_path()
        manifest = {
            "version": "MP-3",
            "prod": False,
            "timestamp_utc": _ae_utcnow().isoformat(timespec="seconds"),
            "sha256": "",
            "files": []
        }
        if jsonl.exists():
            manifest["sha256"] = _mp3_hashlib.sha256(jsonl.read_bytes()).hexdigest()
            manifest["files"].append(jsonl.name)
        seal_file.write_text(_mp3_json.dumps(manifest, ensure_ascii=False, indent=2), encoding="utf-8")
        _mp3_ciilog("nf203.seal.dev.write=ok path=" + str(seal_file))
        # zip preuve
        _mp3_ciilog("nf203.proof.zip.start path=" + str(proof_zip))
        with _mp3_zip.ZipFile(proof_zip, "w", compression=_mp3_zip.ZIP_DEFLATED) as zf:
            zf.writestr("manifest.json", _mp3_json.dumps(manifest, ensure_ascii=False, indent=2))
            _mp3_ciilog("nf203.proof.zip.add=file=manifest.json")
            if jsonl.exists():
                zf.write(jsonl, jsonl.name)
                _mp3_ciilog("nf203.proof.zip.add=file=" + jsonl.name)
        _mp3_ciilog("nf203.proof.zip.write ok=1 path=" + str(proof_zip))
        try:
            _MP3_QMessageBox.information(None, "NF203 Dev", "Scellé + preuve DEV générés.")
        except Exception:
            pass
        _mp3_ciilog("nf203.seal.dev.verify.ok")
    except Exception as _e:
        _mp3_ciilog(f"nf203.seal.dev.error={_e}")
def _mp3_add_ui_btns(_anchor_parent):
    """Ajoute 'Sceller (NF203) [DEV]' à proximité de 'Tester (mock)'. Fallback bas de page."""
    if not _mp3_is_dev_mode():
        return
    try:
        _btn = _MP3_QPushButton("Sceller (NF203) [DEV]")
        _btn.setObjectName("nf203_dev_seal_btn")
        _btn.clicked.connect(_mp3_dev_seal)
        placed = False
        # Cherche un bouton 'Tester (mock)' dans le même conteneur
        try:
            for w in _anchor_parent.findChildren(_MP3_QPushButton):
                if str(w.text()).strip() == "Tester (mock)":
                    p = w.parent()
                    lay = getattr(p, "layout", lambda: None)()
                    if isinstance(lay, _MP3_QHBoxLayout):
                        lay.addWidget(_btn)
                        _mp3_ciilog("nf203.ui.seal.btn.added=ok")
                        placed = True
                        break
        except Exception:
            pass
        if not placed:
            try:
                lay = getattr(_anchor_parent, "layout", lambda: None)()
                if lay:
                    lay.addWidget(_btn, 0, _MP3_Qt.AlignRight)
                    _mp3_ciilog("nf203.ui.seal.btn.added=fallback")
                    placed = True
            except Exception:
                pass
        if not placed:
            try:
                _btn.show()  # dernier recours
                _mp3_ciilog("nf203.ui.seal.btn.added=popup")
            except Exception:
                pass
        # Bonus utile : bouton "Ouvrir dossier NF203 (DEV)" si possible
        try:
            _btn2 = _MP3_QPushButton("Preuve (DEV)")
            def _open_proof():
                p = _mp3_proof_zip(False)
                d = p.parent
                url = _MP3_QUrl.fromLocalFile(str(d))
                _MP3_QDesktopServices.openUrl(url)
            _btn2.clicked.connect(_open_proof)
            lay = getattr(_anchor_parent, "layout", lambda: None)()
            if lay:
                lay.addWidget(_btn2, 0, _MP3_Qt.AlignRight)
                _mp3_ciilog("nf203.ui.proof.btn.added=ok")
                _mp3_ciilog("nf203.proof.bind=" + str(_mp3_month_dir(False)))
        except Exception:
            pass
    except Exception as _e:
        _mp3_ciilog(f"nf203.ui.seal.btn.added=fail {type(_e).__name__}: {_e}")
def _nf203_mp3_inject(_attempt=1):
    """Injection tardive + watchdog (5 essais) : wrappage + ajout bouton DEV."""
    global __nf203_mp3_installed__
    if __nf203_mp3_installed__:
        return
    try:
        _mp3_try_wrap_targets()
        app = _MP3_QApp.instance()
        anchor_parent = None
        if app:
            # 1) cherche par proximité d'un bouton "Tester (mock)"
            try:
                for w in app.allWidgets():
                    if isinstance(w, _MP3_QPushButton) and str(w.text()).strip() == "Tester (mock)":
                        anchor_parent = w.parent()
                        break
            except Exception:
                pass
            # 2) sinon, prend le dernier QWidget visible comme fallback
            if anchor_parent is None:
                try:
                    widgets = [w for w in app.allWidgets() if isinstance(w, _MP3_QWidget)]
                    if widgets:
                        anchor_parent = widgets[-1]
                except Exception:
                    pass
        if anchor_parent:
            _mp3_add_ui_btns(anchor_parent)
            __nf203_mp3_installed__ = True
        else:
            if _attempt < 5:
                _MP3_QTimer.singleShot(1200, lambda: _nf203_mp3_inject(_attempt+1))
                return
        # pas de relance si installé
    except Exception as _e:
        _mp3_ciilog(f"nf203.enforce.wrap=fail.inject {type(_e).__name__}: {_e}")
    finally:
        # Si pas installé et qu'on a des essais restants, relance
        if not __nf203_mp3_installed__ and _attempt < 5:
            _MP3_QTimer.singleShot(1200, lambda: _nf203_mp3_inject(_attempt+1))
# Programmation de l'injection tardive (>= 1500ms)
try:
    _MP3_QTimer.singleShot(1500, _nf203_mp3_inject)
except Exception:
    pass
# ============================== FIN MP-3 ===============================
# ============================== MP-4 BEGIN ==============================
try:
    import os as _mp4_os, json as _mp4_json, datetime as _mp4_dt, hashlib as _mp4_hashlib, zipfile as _mp4_zip, pathlib as _mp4_pathlib
    from PyQt5.QtCore import QTimer as _MP4_QTimer, Qt as _MP4_Qt
    from PyQt5.QtWidgets import QApplication as _MP4_QApp, QPushButton as _MP4_QPushButton, QHBoxLayout as _MP4_QHBoxLayout, QMessageBox as _MP4_QMessageBox
except Exception:
    pass
__nf203_mp4_installed__ = globals().get("__nf203_mp4_installed__", False)
def _mp4_ciilog(msg: str):
    try:
        if "_cii_log" in globals():
            globals()["_cii_log"](msg); return
    except Exception: pass
    try:
        _base = globals().get("DATA_DIR", _mp4_os.path.join(_mp4_os.getcwd(), "data"))
        _mp4_pathlib.Path(_base).mkdir(parents=True, exist_ok=True)
        with (_mp4_pathlib.Path(_base) / "cii_export.log").open("a", encoding="utf-8") as _f:
            _f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {msg}\n")
    except Exception: pass
def _mp4_is_dev_mode():
    paths = [
        _mp4_pathlib.Path(globals().get("DATA_DIR", _mp4_os.path.join(_mp4_os.getcwd(), "data"))) / "dev" / "dev_unlock.json",
        _mp4_pathlib.Path(_mp4_os.environ.get("APPDATA", "")) / "AE_GESTION" / "dev_unlock.json",
    ]
    return any(p.exists() for p in paths)
def _mp4_month_tuple_now():
    n = _ae_utcnow(); return (n.year, n.month, n.day)
def _mp4_month_prev(y: int, m: int):
    return (y-1, 12) if m == 1 else (y, m-1)
def _mp4_dir_for(y: int, m: int):
    d = _mp4_pathlib.Path(globals().get("DATA_DIR", _mp4_os.path.join(_mp4_os.getcwd(), "data"))) / "audit" / "nf203" / f"{y}" / f"{m:02d}"
    d.mkdir(parents=True, exist_ok=True); return d
def _mp4_jsonl_for(y: int, m: int): return _mp4_dir_for(y, m) / f"nf203_{y}-{m:02d}.jsonl"
def _mp4_seal_prod_for(y: int, m: int): return _mp4_dir_for(y, m) / f"nf203_{y}-{m:02d}.seal.json"
def _mp4_proof_prod_for(y: int, m: int): return _mp4_dir_for(y, m) / f"proof_PROD_{y}-{m:02d}.zip"
def _mp4_manifest_for(y: int, m: int):
    jsonl = _mp4_jsonl_for(y, m)
    sha = _mp4_hashlib.sha256(jsonl.read_bytes()).hexdigest() if jsonl.exists() else ""
    return {"version":"MP-4","prod":True,"month":f"{y}-{m:02d}","timestamp_utc":_ae_utcnow().isoformat(timespec="seconds"),"sha256":sha,"files":[jsonl.name] if jsonl.exists() else []}
def _mp4_prod_seal(y: int=None, m: int=None, _silent=False):
    try:
        Y,M,_= _mp4_month_tuple_now()
        if y is None or m is None: y,m = _mp4_month_prev(Y,M)
        seal = _mp4_seal_prod_for(y,m)
        if seal.exists():
            _mp4_ciilog(f"nf203.seal.prod.start=skip reason=already_sealed month={y}-{m:02d} path={seal}"); return
        _mp4_ciilog(f"nf203.seal.prod.start month={y}-{m:02d}")
        manifest = _mp4_manifest_for(y,m)
        seal.write_text(_mp4_json.dumps(manifest, ensure_ascii=False, indent=2), encoding="utf-8")
        _mp4_ciilog(f"nf203.seal.prod.write=ok path={seal}")
        proof = _mp4_proof_prod_for(y,m)
        _mp4_ciilog(f"nf203.proof.zip.start path={proof}")
        with _mp4_zip.ZipFile(proof, "w", compression=_mp4_zip.ZIP_DEFLATED) as zf:
            zf.writestr("manifest.json", _mp4_json.dumps(manifest, ensure_ascii=False, indent=2))
            _mp4_ciilog("nf203.proof.zip.add=file=manifest.json")
            jsonl = _mp4_jsonl_for(y,m)
            if jsonl.exists():
                zf.write(jsonl, jsonl.name); _mp4_ciilog("nf203.proof.zip.add=file="+jsonl.name)
        _mp4_ciilog(f"nf203.proof.zip.write ok=1 path={proof}")
        _mp4_ciilog("nf203.seal.prod.verify.ok")
        if not _silent:
            try: _MP4_QMessageBox.information(None,"NF203",f"Scellé PROD + preuve générés pour {y}-{m:02d}.")
            except Exception: pass
    except Exception as _e:
        _mp4_ciilog(f"nf203.seal.prod.error={_e}")
def _mp4_auto_seal_prev_month_if_due():
    try:
        if _mp4_is_dev_mode(): _mp4_ciilog("nf203.seal.prod.auto=skip reason=dev_mode"); return
        y,m,d = _mp4_month_tuple_now()
        if d < 2: _mp4_ciilog("nf203.seal.prod.auto=skip reason=not_due"); return
        y0,m0 = _mp4_month_prev(y,m)
        if _mp4_seal_prod_for(y0,m0).exists(): _mp4_ciilog(f"nf203.seal.prod.auto=skip reason=already_sealed month={y0}-{m0:02d}"); return
        _mp4_prod_seal(y0,m0, _silent=True)
    except Exception as _e:
        _mp4_ciilog(f"nf203.seal.prod.auto.error={_e}")
def _mp4_add_prod_btn(_anchor_parent):
    if not _mp4_is_dev_mode(): return
    try:
        _btn = _MP4_QPushButton("Sceller (PROD) mois préc. [DEV]"); _btn.setObjectName("nf203_prod_seal_btn")
        _btn.clicked.connect(lambda: (_mp4_prod_seal(*_mp4_month_prev(*_mp4_month_tuple_now()[:2]))))
        placed=False
        try:
            for w in _anchor_parent.findChildren(_MP4_QPushButton):
                t=str(w.text()).strip()
                if t in ("Sceller (NF203) [DEV]","Tester (mock)"):
                    p=w.parent(); lay=getattr(p,"layout",lambda:None)()
                    if isinstance(lay,_MP4_QHBoxLayout):
                        lay.addWidget(_btn); _mp4_ciilog("nf203.ui.prodseal.btn.added=ok"); placed=True; break
        except Exception: pass
        if not placed:
            try:
                lay=getattr(_anchor_parent,"layout",lambda:None)()
                if lay: lay.addWidget(_btn,0,_MP4_Qt.AlignRight); _mp4_ciilog("nf203.ui.prodseal.btn.added=fallback"); placed=True
            except Exception: pass
        if not placed:
            try: _btn.show(); _mp4_ciilog("nf203.ui.prodseal.btn.added=popup")
            except Exception: pass
    except Exception as _e:
        _mp4_ciilog(f"nf203.ui.prodseal.btn.added=fail {type(_e).__name__}: {_e}")
def _nf203_mp4_inject(_attempt=1):
    global __nf203_mp4_installed__
    if __nf203_mp4_installed__: return
    try:
        app=_MP4_QApp.instance(); anchor_parent=None
        if app:
            try:
                from PyQt5.QtWidgets import QPushButton as __PB
                for w in app.allWidgets():
                    if isinstance(w,__PB) and str(w.text()).strip() in ("Sceller (NF203) [DEV]","Tester (mock)"):
                        anchor_parent=w.parent(); break
            except Exception: pass
        if anchor_parent:
            _mp4_add_prod_btn(anchor_parent); __nf203_mp4_installed__=True
        else:
            if _attempt<5: _MP4_QTimer.singleShot(1200, lambda:_nf203_mp4_inject(_attempt+1)); return
        _MP4_QTimer.singleShot(800, _mp4_auto_seal_prev_month_if_due)
    except Exception as _e:
        _mp4_ciilog(f"nf203.seal.prod.inject.error={_e}")
    finally:
        if not __nf203_mp4_installed__ and _attempt<5: _MP4_QTimer.singleShot(1200, lambda:_nf203_mp4_inject(_attempt+1))
try: _MP4_QTimer.singleShot(2200, _nf203_mp4_inject)
except Exception: pass
# =============================== MP-4 END ===============================
# ============================== MP-5 BEGIN ==============================
try:
    import os as _mp5_os, json as _mp5_json, datetime as _mp5_dt, hashlib as _mp5_hashlib, zipfile as _mp5_zip, pathlib as _mp5_pathlib
    from PyQt5.QtCore import QTimer as _MP5_QTimer, Qt as _MP5_Qt
    from PyQt5.QtWidgets import QApplication as _MP5_QApp, QPushButton as _MP5_QPushButton, QHBoxLayout as _MP5_QHBoxLayout, QMessageBox as _MP5_QMessageBox
except Exception:
    pass
__nf203_mp5_installed__ = globals().get("__nf203_mp5_installed__", False)
def _mp5_ciilog(msg:str):
    try:
        if "_cii_log" in globals(): globals()["_cii_log"](msg); return
    except Exception: pass
    try:
        _base = globals().get("DATA_DIR", _mp5_os.path.join(_mp5_os.getcwd(), "data"))
        _mp5_pathlib.Path(_base).mkdir(parents=True, exist_ok=True)
        with (_mp5_pathlib.Path(_base)/"cii_export.log").open("a", encoding="utf-8") as f:
            import datetime as _d; f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {msg}\n")
    except Exception: pass
def _mp5_month_prev(y,m): return (y-1,12) if m==1 else (y,m-1)
def _mp5_dir_for(y,m):
    d=_mp5_pathlib.Path(globals().get("DATA_DIR", _mp5_os.path.join(_mp5_os.getcwd(),"data")))/"audit"/"nf203"/f"{y}"/f"{m:02d}"
    d.mkdir(parents=True, exist_ok=True); return d
def _mp5_paths_for(y,m):
    d=_mp5_dir_for(y,m)
    return d, d/f"nf203_{y}-{m:02d}.seal.json", d/f"proof_PROD_{y}-{m:02d}.zip", d/f"nf203_{y}-{m:02d}.jsonl", d/f"export_PROD_{y}-{m:02d}_bundle.zip"
def _mp5_file_sha256(path):
    try: return _mp5_hashlib.sha256(_mp5_pathlib.Path(path).read_bytes()).hexdigest()
    except Exception: return ""
def _mp5_bundle_export(y:int=None, m:int=None, _silent=False):
    try:
        now=_ae_utcnow()
        if y is None or m is None:
            y,m = _mp5_month_prev(now.year, now.month)
        d, seal, proof, jsonl, bundle = _mp5_paths_for(y,m)
        if not seal.exists():
            _mp5_ciilog(f"nf203.bundle.start=skip reason=no_seal month={y}-{m:02d}"); return
        _mp5_ciilog(f"nf203.bundle.start month={y}-{m:02d}")
        files=[]; entries=[]
        for p in [seal, proof, jsonl]:
            if p.exists():
                sha=_mp5_file_sha256(p); _mp5_ciilog(f"nf203.bundle.add=file={p.name} sha={sha}")
                files.append({"name":p.name,"sha256":sha,"size":p.stat().st_size}); entries.append(f"{p.name}:{sha}")
        entries.sort(); global_sha=_mp5_hashlib.sha256(("\n".join(entries)).encode("utf-8")).hexdigest()
        _mp5_ciilog(f"nf203.bundle.hash={global_sha}")
        manifest={"version":"MP-5","prod":True,"month":f"{y}-{m:02d}","timestamp_utc":_ae_utcnow().isoformat(timespec="seconds"),"files":files,"global_sha256":global_sha}
        with _mp5_zip.ZipFile(bundle,"w",compression=_mp5_zip.ZIP_DEFLATED) as zf:
            zf.writestr("manifest.json", _mp5_json.dumps(manifest, ensure_ascii=False, indent=2))
            for p in [seal, proof, jsonl]:
                if p.exists(): zf.write(p, p.name)
        _mp5_ciilog(f"nf203.bundle.write ok=1 path={bundle}")
        try:
            with _mp5_zip.ZipFile(bundle,"r") as zf:
                mtxt = zf.read("manifest.json").decode("utf-8","ignore")
                import json as _j
                man2=_j.loads(mtxt)
                if man2.get("global_sha256")==global_sha: _mp5_ciilog("nf203.bundle.verify.ok")
        except Exception as _e:
            _mp5_ciilog(f"nf203.bundle.verify.error={_e}")
        if not _silent:
            try: _MP5_QMessageBox.information(None,"NF203",f"Bundle exporté pour {y}-{m:02d}.")
            except Exception: pass
    except Exception as _e:
        _mp5_ciilog(f"nf203.bundle.error={_e}")
def _mp5_is_dev_mode():
    from pathlib import Path as _P; import os as _O
    return any(( _P(globals().get("DATA_DIR", _mp5_os.path.join(_mp5_os.getcwd(),"data")))/"dev"/"dev_unlock.json").exists(),)
def _mp5_add_bundle_btn(_anchor_parent):
    try:
        from PyQt5.QtWidgets import QPushButton as __PB
        if not (_mp4_is_dev_mode() if "._mp4_is_dev_mode" else True): pass
        if not _mp4_is_dev_mode(): return
        _btn=_MP5_QPushButton("Exporter bundle (PROD) [DEV]"); _btn.setObjectName("nf203_bundle_btn")
        _btn.clicked.connect(lambda:_mp5_bundle_export())
        placed=False
        try:
            for w in _anchor_parent.findChildren(_MP5_QPushButton):
                t=str(w.text()).strip()
                if t in ("Sceller (PROD) mois préc. [DEV]","Sceller (NF203) [DEV]","Tester (mock)"):
                    p=w.parent(); lay=getattr(p,"layout",lambda:None)()
                    if isinstance(lay,_MP5_QHBoxLayout):
                        lay.addWidget(_btn); _mp5_ciilog("nf203.ui.bundle.btn.added=ok"); placed=True; break
        except Exception: pass
        if not placed:
            try:
                lay=getattr(_anchor_parent,"layout",lambda:None)()
                if lay: lay.addWidget(_btn,0,_MP5_Qt.AlignRight); _mp5_ciilog("nf203.ui.bundle.btn.added=fallback"); placed=True
            except Exception: pass
        if not placed:
            try: _btn.show(); _mp5_ciilog("nf203.ui.bundle.btn.added=popup")
            except Exception: pass
    except Exception as _e:
        _mp5_ciilog(f"nf203.ui.bundle.btn.added=fail {type(_e).__name__}: {_e}")
def _nf203_mp5_inject(_attempt=1):
    global __nf203_mp5_installed__
    if __nf203_mp5_installed__: return
    try:
        app=_MP5_QApp.instance(); anchor_parent=None
        if app:
            try:
                from PyQt5.QtWidgets import QPushButton as __PB
                for w in app.allWidgets():
                    if isinstance(w,__PB) and str(w.text()).strip() in ("Sceller (PROD) mois préc. [DEV]","Sceller (NF203) [DEV]","Tester (mock)"):
                        anchor_parent=w.parent(); break
            except Exception: pass
        if anchor_parent:
            _mp5_add_bundle_btn(anchor_parent); __nf203_mp5_installed__=True
        else:
            if _attempt<5: _MP5_QTimer.singleShot(1200, lambda:_nf203_mp5_inject(_attempt+1)); return
    except Exception as _e:
        _mp5_ciilog(f"nf203.bundle.inject.error={_e}")
    finally:
        if not __nf203_mp5_installed__ and _attempt<5: _MP5_QTimer.singleShot(1200, lambda:_nf203_mp5_inject(_attempt+1))
try: _MP5_QTimer.singleShot(2400, _nf203_mp5_inject)
except Exception: pass
# =============================== MP-5 END ===============================
# ============================== MP-6 BEGIN ==============================
try:
    import os as _mp6_os, json as _mp6_json, datetime as _mp6_dt, pathlib as _mp6_pathlib
    from PyQt5.QtCore import QTimer as _MP6_QTimer, Qt as _MP6_Qt, QUrl as _MP6_QUrl
    from PyQt5.QtWidgets import QApplication as _MP6_QApp, QPushButton as _MP6_QPushButton, QHBoxLayout as _MP6_QHBoxLayout
    from PyQt5.QtGui import QDesktopServices as _MP6_QDesktopServices
except Exception:
    pass
__nf203_mp6_installed__ = globals().get("__nf203_mp6_installed__", False)
def _mp6_ciilog(msg:str):
    try:
        if "_cii_log" in globals(): globals()["_cii_log"](msg); return
    except Exception: pass
    try:
        _base = globals().get("DATA_DIR", _mp6_os.path.join(_mp6_os.getcwd(), "data"))
        _mp6_pathlib.Path(_base).mkdir(parents=True, exist_ok=True)
        with (_mp6_pathlib.Path(_base)/"cii_export.log").open("a", encoding="utf-8") as f:
            import datetime as _d; f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {msg}\n")
    except Exception: pass
def _mp6_now(): n=_ae_utcnow(); return n.year, n.month
def _mp6_prev(y,m): return (y-1,12) if m==1 else (y,m-1)
def _mp6_dir(y,m):
    d=_mp6_pathlib.Path(globals().get("DATA_DIR", _mp6_os.path.join(_mp6_os.getcwd(),"data")))/"audit"/"nf203"/f"{y}"/f"{m:02d}"
    d.mkdir(parents=True, exist_ok=True); return d
def _mp6_paths(y,m):
    d=_mp6_dir(y,m)
    return {"dir":d, "seal":d/f"nf203_{y}-{m:02d}.seal.json", "proof":d/f"proof_PROD_{y}-{m:02d}.zip", "jsonl":d/f"nf203_{y}-{m:02d}.jsonl"}
def _mp6_status(y,m):
    p=_mp6_paths(y,m)
    st={"month":f"{y}-{m:02d}","sealed":p["seal"].exists(),"proof":p["proof"].exists(),"jsonl":p["jsonl"].exists(),"dir":str(p["dir"])}
    _mp6_ciilog(f"nf203.ui.audit.status month={st['month']} sealed={str(st['sealed']).lower()} proof={str(st['proof']).lower()} jsonl={str(st['jsonl']).lower()}")
    return st
def _mp6_open_dir(y,m):
    try:
        d=_mp6_paths(y,m)["dir"]
        _mp6_ciilog(f"nf203.ui.audit.open path={d}")
        _MP6_QDesktopServices.openUrl(_MP6_QUrl.fromLocalFile(str(d)))
        _mp6_ciilog("nf203.ui.audit.open ok=1")
    except Exception as _e:
        _mp6_ciilog(f"nf203.ui.audit.open error={_e}")
def _mp6_open_prev_month_dir():
    y,m=_mp6_now(); y0,m0=_mp6_prev(y,m); _mp6_open_dir(y0,m0)
def _mp6_open_curr_month_dir():
    y,m=_mp6_now(); _mp6_open_dir(y,m)
def _mp6_add_audit_ui(anchor_parent):
    # DEV-only (respect token visibility)
    try:
        # require dev mode like MP-4/5 buttons
        paths=[ _mp6_pathlib.Path(globals().get("DATA_DIR", _mp6_os.path.join(_mp6_os.getcwd(),"data")))/"dev"/"dev_unlock.json",
                _mp6_pathlib.Path(_mp6_os.environ.get("APPDATA",""))/"AE_GESTION"/"dev_unlock.json" ]
        if not any(p.exists() for p in paths): return
        b1=_MP6_QPushButton("Audit: Ouvrir mois préc."); b2=_MP6_QPushButton("Audit: Ouvrir mois courant")
        b1.setObjectName("nf203_audit_prev_btn"); b2.setObjectName("nf203_audit_curr_btn")
        b1.clicked.connect(_mp6_open_prev_month_dir); b2.clicked.connect(_mp6_open_curr_month_dir)
        placed=False
        try:
            for w in anchor_parent.findChildren(_MP6_QPushButton):
                t=str(w.text()).strip()
                if t in ("Exporter bundle (PROD) [DEV]","Sceller (PROD) mois préc. [DEV]","Sceller (NF203) [DEV]","Tester (mock)"):
                    p=w.parent(); lay=getattr(p,"layout",lambda:None)()
                    if isinstance(lay,_MP6_QHBoxLayout):
                        lay.addWidget(b1); lay.addWidget(b2); _mp6_ciilog("nf203.ui.audit.btn.added=ok count=2"); placed=True; break
        except Exception: pass
        if not placed:
            try:
                lay=getattr(anchor_parent,"layout",lambda:None)()
                if lay: lay.addWidget(b1,0,_MP6_Qt.AlignRight); lay.addWidget(b2,0,_MP6_Qt.AlignRight); _mp6_ciilog("nf203.ui.audit.btn.added=fallback count=2"); placed=True
            except Exception: pass
        if not placed:
            try: b1.show(); b2.show(); _mp6_ciilog("nf203.ui.audit.btn.added=popup count=2")
            except Exception: pass
        _mp6_ciilog("nf203.ui.audit.panel.added=ok")
        y,m=_mp6_now(); y0,m0=_mp6_prev(y,m); _mp6_status(y,m); _mp6_status(y0,m0)
    except Exception as _e:
        _mp6_ciilog(f"nf203.ui.audit.panel.added=fail {type(_e).__name__}: {_e}")
def _nf203_mp6_inject(_attempt=1):
    global __nf203_mp6_installed__
    if __nf203_mp6_installed__: return
    try:
        app=_MP6_QApp.instance(); anchor_parent=None
        if app:
            try:
                from PyQt5.QtWidgets import QPushButton as __PB
                for w in app.allWidgets():
                    if isinstance(w,__PB) and str(w.text()).strip() in ("Exporter bundle (PROD) [DEV]","Sceller (PROD) mois préc. [DEV]","Sceller (NF203) [DEV]","Tester (mock)"):
                        anchor_parent=w.parent(); break
            except Exception: pass
        if anchor_parent:
            _mp6_add_audit_ui(anchor_parent); __nf203_mp6_installed__=True
        else:
            if _attempt<5: _MP6_QTimer.singleShot(1200, lambda:_nf203_mp6_inject(_attempt+1)); return
    except Exception as _e:
        _mp6_ciilog(f"nf203.ui.audit.inject.error={_e}")
    finally:
        if not __nf203_mp6_installed__ and _attempt<5: _MP6_QTimer.singleShot(1200, lambda:_nf203_mp6_inject(_attempt+1))
try: _MP6_QTimer.singleShot(2600, _nf203_mp6_inject)
except Exception: pass
# =============================== MP-6 END ===============================
# ======================================================================
# MP-6a — UI Audit minimal (robust anchor & fallback)
# - Cherche explicitement l'onglet "E-facturation (PPF/PDP)" via QTabWidget
# - Gère QScrollArea: utilise .widget() comme parent d'ancrage
# - Fallback: insertion en bas de la page si pas d'ancre bouton; sinon popup non-modal
# - Tente jusqu'à 12 réessais (toutes 800ms) après 1400ms
# - Logs précis: nf203.ui.audit.find.ef_page=ok|fail, nf203.ui.audit.btn.added=ok|fallback|popup
# ======================================================================
try:
    from PyQt5.QtWidgets import QTabWidget as _MP6A_QTabWidget, QScrollArea as _MP6A_QScrollArea, QWidget as _MP6A_QWidget, QVBoxLayout as _MP6A_QVBoxLayout
except Exception:
    pass
def _mp6a_find_ef_page():
    app = _MP6_QApp.instance()
    if not app:
        return None
    # 1) Chercher un QTabWidget avec un onglet "E-facturation (PPF/PDP)"
    try:
        for w in app.allWidgets():
            if isinstance(w, _MP6A_QTabWidget):
                for i in range(w.count()):
                    try:
                        if str(w.tabText(i)).strip() == "E-facturation (PPF/PDP)":
                            page = w.widget(i)
                            _mp6_ciilog("nf203.ui.audit.find.ef_page=ok via QTabWidget")
                            return page
                    except Exception:
                        pass
    except Exception:
        pass
    # 2) Sinon, heuristique : prendre le parent d'un bouton connu s'il existe
    try:
        from PyQt5.QtWidgets import QPushButton as __PB
        for w in app.allWidgets():
            if isinstance(w, __PB) and str(w.text()).strip() in ("Exporter bundle (PROD) [DEV]", "Sceller (PROD) mois préc. [DEV]", "Sceller (NF203) [DEV]", "Tester (mock)"):
                _mp6_ciilog("nf203.ui.audit.find.ef_page=ok via anchor-button")
                return w.parent()
    except Exception:
        pass
    _mp6_ciilog("nf203.ui.audit.find.ef_page=fail")
    return None
def _mp6a_anchor_from_page(page):
    # Si la page contient un QScrollArea, utiliser son widget() (contenu réel)
    try:
        sas = page.findChildren(_MP6A_QScrollArea)
        for sa in sas:
            inner = sa.widget()
            if inner is not None:
                return inner
    except Exception:
        pass
    return page
def _nf203_mp6_inject(_attempt=1):
    # Remplace la version MP-6 en ajoutant recherche de la page E-facturation
    global __nf203_mp6_installed__
    if __nf203_mp6_installed__:
        return
    try:
        app = _MP6_QApp.instance()
        if not app:
            _MP6_QTimer.singleShot(800, lambda: _nf203_mp6_inject(_attempt+1) if _attempt < 12 else None)
            return
        page = _mp6a_find_ef_page()
        anchor_parent = None
        if page is not None:
            anchor_parent = _mp6a_anchor_from_page(page)
        if anchor_parent is not None:
            # s'assurer qu'il y a un layout sur la page si besoin
            lay = getattr(anchor_parent, "layout", lambda: None)()
            if lay is None:
                try:
                    lay = _MP6A_QVBoxLayout(anchor_parent)
                except Exception:
                    lay = None
            _mp6_add_audit_ui(anchor_parent)
            __nf203_mp6_installed__ = True
        else:
            if _attempt < 12:
                _MP6_QTimer.singleShot(800, lambda: _nf203_mp6_inject(_attempt+1))
                return
            # Dernier recours: popup non-modal
            try:
                panel = _MP6A_QWidget()
                panel.setWindowTitle("Audit NF203 (DEV)")
                vb = _MP6A_QVBoxLayout(panel)
                from PyQt5.QtWidgets import QPushButton as __PB
                b1 = __PB("Audit: Ouvrir mois préc.")
                b2 = __PB("Audit: Ouvrir mois courant")
                b1.clicked.connect(_mp6_open_prev_month_dir)
                b2.clicked.connect(_mp6_open_curr_month_dir)
                vb.addWidget(b1); vb.addWidget(b2)
                panel.setAttribute(_MP6_Qt.WA_ShowWithoutActivating, True)
                panel.show()
                _mp6_ciilog("nf203.ui.audit.btn.added=popup count=2")
                _mp6_ciilog("nf203.ui.audit.panel.added=ok")
                y,m=_mp6_now(); y0,m0=_mp6_prev(y,m); _mp6_status(y,m); _mp6_status(y0,m0)
                __nf203_mp6_installed__ = True
            except Exception as _e:
                _mp6_ciilog(f"nf203.ui.audit.inject.error={_e}")
    except Exception as _e:
        _mp6_ciilog(f"nf203.ui.audit.inject.error={_e}")
    finally:
        if not __nf203_mp6_installed__ and _attempt < 12:
            _MP6_QTimer.singleShot(800, lambda: _nf203_mp6_inject(_attempt+1))
# Re-programmer l'injection plus tôt et avec plus de réessais
try:
    _MP6_QTimer.singleShot(1400, _nf203_mp6_inject)
except Exception:
    pass
# ============================== FIN MP-6a ===============================
# === MP-6b : UI Audit minimal — injection robuste + logs détaillés ============================
# Contrainte : pas de régression UX, PyQt5 only, pas d’accès réseau, idempotence, DEV visible si token OK.
# ➜ Ajouts de logs EXACTS : 
#   nf203.ui.audit.find.ef_page=ok|fail via=...
#   nf203.ui.audit.panel.added=ok|skip reason=...
#   nf203.ui.audit.btn.added=ok
#   nf203.ui.audit.status month=YYYY-MM sealed=true|false proof=true|false bundle=true|false
#   nf203.ui.audit.open path=... ok=1|0
try:
    # Imports PyQt5 utilisés par le patch
    from PyQt5.QtWidgets import (QApplication, QWidget, QFrame, QLabel, QPushButton,
                                 QVBoxLayout, QHBoxLayout, QScrollArea, QTabWidget, QMessageBox)
    from PyQt5.QtCore import Qt, QTimer, QUrl
    from PyQt5.QtGui import QDesktopServices
except Exception:
    # Pas de crash UI : on laisse l'app continuer
    pass
# ---- Helpers log tolérants ---------------------------------------------------
def __mp6b_log(line: str):
    try:
        # Préserve _cii_log(...) si dispo (pas de changement de signature)
        if ' _cii_log' in globals() or '_cii_log' in globals():
            try:
                globals()['_cii_log'](line)
                return
            except Exception:
                pass
        # Fallback local en UTF-8
        ts = __import__('datetime').datetime.now().strftime("%Y-%m-%dT%H:%M:%S")
        data_dir = globals().get('DATA_DIR', 'data')
        os.makedirs(data_dir, exist_ok=True)
        with open(os.path.join(data_dir, "cii_export.log"), "a", encoding="utf-8") as f:
            f.write(f"{ts} {line}\n")
    except Exception:
        # silence radio (zéro crash)
        pass
# ---- Détection dev_mode OK (token) -------------------------------------------
def __mp6b_dev_ok():
    try:
        candidates = []
        try:
            appd = os.environ.get("APPDATA", "")
            if appd:
                candidates.append(os.path.join(appd, "AE_GESTION", "dev_unlock.json"))
        except Exception:
            pass
        data_dir = globals().get('DATA_DIR', 'data')
        candidates.append(os.path.join(data_dir, "dev", "dev_unlock.json"))
        for p in candidates:
            try:
                with open(p, "r", encoding="utf-8") as fh:
                    tok = json.load(fh)
                feats = ""
                if isinstance(tok, dict):
                    feats = tok.get("features") or tok.get("feature") or ""
                    if isinstance(feats, list):
                        feats = ",".join(feats)
                    ok = ("debug_tools" in str(feats)) or ("nf203_seal_now" in str(feats)) or bool(tok.get("dev")) or bool(tok.get("enabled"))
                else:
                    ok = False
                __mp6b_log(f"nf203.ui.audit.dev_ok={'true' if ok else 'false'} path={p} feats={feats}")
                if ok:
                    return True
            except FileNotFoundError:
                continue
            except Exception as e:
                __mp6b_log(f"nf203.ui.audit.dev_ok=error err={e}")
        return False
    except Exception:
        return False
# ---- Local filesystem helpers ------------------------------------------------
def __mp6b_paths_for(month_str: str):
    data_dir = globals().get('DATA_DIR', 'data')
    y, m = month_str.split("-")
    root = os.path.join(data_dir, "audit", "nf203", y, m)
    paths = {
        "dir": root,
        "seal": os.path.join(root, f"nf203_{month_str}.seal.json"),
        "jsonl": os.path.join(root, f"nf203_{month_str}.jsonl"),
        "proof": os.path.join(root, f"proof_PROD_{month_str}.zip"),
        "bundle": os.path.join(root, f"export_PROD_{month_str}_bundle.zip"),
    }
    return paths
def __mp6b_status(month_str: str):
    p = __mp6b_paths_for(month_str)
    sealed = os.path.exists(p["seal"])
    proof = os.path.exists(p["proof"])
    bundle = os.path.exists(p["bundle"])
    __mp6b_log(f"nf203.ui.audit.status month={month_str} sealed={'true' if sealed else 'false'} proof={'true' if proof else 'false'} bundle={'true' if bundle else 'false'}")
    return sealed, proof, bundle, p
def __mp6b_prev_month_str():
    now = __import__('datetime').datetime.now()
    year = now.year
    month = now.month - 1
    if month == 0:
        month = 12
        year -= 1
    return f"{year:04d}-{month:02d}"
def __mp6b_open_dir(month_str: str):
    sealed, proof, bundle, p = __mp6b_status(month_str)  # log aussi le status
    path = p["dir"]
    ok = 0
    try:
        if os.path.isdir(path):
            try:
                # Windows : os.startfile ; sinon QDesktopServices
                if hasattr(os, "startfile"):
                    os.startfile(path)  # type: ignore
                else:
                    QDesktopServices.openUrl(QUrl.fromLocalFile(path))
                ok = 1
            except Exception:
                # fallback Qt
                try:
                    QDesktopServices.openUrl(QUrl.fromLocalFile(path))
                    ok = 1
                except Exception:
                    ok = 0
        __mp6b_log(f"nf203.ui.audit.open path={path} ok={ok}")
    except Exception as e:
        __mp6b_log(f"nf203.ui.audit.open path={path} ok=0 err={e}")
    return ok
# ---- Recherche tolérante de la page "E-facturation (PPF/PDP)" ----------------
def __mp6b_find_ef_page():
    try:
        app = QApplication.instance()
        if not app:
            return None, "no_app"
        # 1) Requête directe par titre d'onglet
        for w in QApplication.allWidgets():
            try:
                if isinstance(w, QTabWidget):
                    for i in range(w.count()):
                        txt = w.tabText(i) or ""
                        if "E-facturation" in txt:
                            page = w.widget(i)
                            __mp6b_log("nf203.ui.audit.find.ef_page=ok via=QTabWidget")
                            return page, "tab"
            except Exception:
                continue
        # 2) Cherche un bouton ancre sur la page cible
        anchors = ("Tester", "mock", "Sceller", "NF203")
        for w in QApplication.allWidgets():
            try:
                if isinstance(w, QPushButton):
                    t = (w.text() or "").lower()
                    if any(a.lower() in t for a in anchors):
                        # remonte jusqu'à un container raisonnable
                        parent = w.parent()
                        while parent and not isinstance(parent, (QScrollArea, QWidget)):
                            parent = parent.parent()
                        if isinstance(parent, QScrollArea):
                            page = parent.widget()
                        else:
                            page = parent
                        if page:
                            __mp6b_log("nf203.ui.audit.find.ef_page=ok via=anchor_button")
                            return page, "anchor"
            except Exception:
                continue
        __mp6b_log("nf203.ui.audit.find.ef_page=fail via=scan")
        return None, "fail"
    except Exception as e:
        __mp6b_log(f"nf203.ui.audit.find.ef_page=error err={e}")
        return None, "error"
# ---- Injection UI idempotente ------------------------------------------------
def __mp6b_inject_panel():
    try:
        # Dev gating
        if not __mp6b_dev_ok():
            __mp6b_log("nf203.ui.audit.panel.added=skip reason=dev_off")
            return
        app = QApplication.instance()
        if not app:
            __mp6b_log("nf203.ui.audit.panel.added=skip reason=no_app")
            return
        page, how = __mp6b_find_ef_page()
        if page is None:
            __mp6b_log("nf203.ui.audit.panel.added=skip reason=page_not_found")
            return
        # Idempotence
        if page.findChild(QFrame, "__nf203_audit_panel__"):
            __mp6b_log("nf203.ui.audit.panel.added=skip reason=already_present")
            return
        panel = QFrame(page)
        panel.setObjectName("__nf203_audit_panel__")
        panel.setFrameShape(QFrame.StyledPanel)
        v = QVBoxLayout(panel); v.setContentsMargins(8,8,8,8); v.setSpacing(6)
        # Titre
        title = QLabel("Audit NF203 – Etat mensuel (lecture seule)")
        title.setStyleSheet("font-weight:600;")
        v.addWidget(title)
        # Statuts
        now = __import__('datetime').datetime.now()
        cur = f"{now.year:04d}-{now.month:02d}"
        prev = __mp6b_prev_month_str()
        cur_seal, cur_proof, cur_bundle, _pc = __mp6b_status(cur)
        prev_seal, prev_proof, prev_bundle, _pp = __mp6b_status(prev)
        lbl_cur = QLabel(f"Mois en cours {cur} – scellé={'OUI' if cur_seal else 'NON'}; preuve={'OUI' if cur_proof else 'NON'}; bundle={'OUI' if cur_bundle else 'NON'}")
        lbl_prev = QLabel(f"Mois précédent {prev} – scellé={'OUI' if prev_seal else 'NON'}; preuve={'OUI' if prev_proof else 'NON'}; bundle={'OUI' if prev_bundle else 'NON'}")
        v.addWidget(lbl_cur)
        v.addWidget(lbl_prev)
        # Boutons
        hb = QHBoxLayout(); v.addLayout(hb)
        btn_open = QPushButton("Ouvrir dossier NF203 (mois précédent)")
        btn_open.setObjectName("__nf203_open_btn__")
        hb.addWidget(btn_open, 1)
        def _on_open():
            try:
                __mp6b_open_dir(prev)
            except Exception as e:
                __mp6b_log(f"nf203.ui.audit.open error={e}")
                try:
                    m = QMessageBox(QMessageBox.Warning, "NF203", "Ouverture du dossier impossible.", QMessageBox.Ok, panel)
                    m.setModal(False); m.show()
                except Exception:
                    pass
        btn_open.clicked.connect(_on_open)
        # Insertion tolérante dans la page
        inserted = False
        try:
            lay = page.layout()
            if lay:
                lay.addWidget(panel)  # bas de conteneur
                inserted = True
        except Exception:
            inserted = False
        if not inserted:
            try:
                panel.setParent(page)
                panel.show()
                inserted = True
            except Exception:
                inserted = False
        if inserted:
            __mp6b_log("nf203.ui.audit.panel.added=ok anchor="+how)
            __mp6b_log("nf203.ui.audit.btn.added=ok")
        else:
            __mp6b_log("nf203.ui.audit.panel.added=skip reason=insert_fail")
    except Exception as e:
        __mp6b_log(f"nf203.ui.audit.panel.added=skip reason=exception err={e}")
# ---- Watchdog d'injection (retries) ------------------------------------------
__nf203_mp6b_retries = {'n': 0}
def __mp6b_try_inject():
    try:
        if __nf203_mp6b_retries['n'] > 6:
            return
        __nf203_mp6b_retries['n'] += 1
        __mp6b_inject_panel()
        # si panel pas trouvé, on retente
        app = QApplication.instance()
        if not app:
            return
        page, _ = __mp6b_find_ef_page()
        ok = bool(page and page.findChild(QFrame, "__nf203_audit_panel__"))
        if not ok:
            QTimer.singleShot(900, __mp6b_try_inject)
    except Exception:
        pass
# Injection tardive (après QApplication)
try:
    QTimer.singleShot(1500, __mp6b_try_inject)
except Exception:
    pass
# === Fin MP-6b =================================================================
# ======================================================================
# MP-6c — UI Audit minimal (fix imports/logs + robust injection)
# - Corrige manques d'import (datetime, os, json) et garantit les logs
# - DEV-only via token (APPDATA ou DATA_DIR/dev/dev_unlock.json)
# - Log: nf203.ui.audit.find.ef_page=..., nf203.ui.audit.panel.added=...,
#        nf203.ui.audit.btn.added=ok, nf203.ui.audit.status month=..., nf203.ui.audit.open ...
# ======================================================================
try:
    import os as _MP6C_os, json as _MP6C_json, datetime as _MP6C_dt
    from PyQt5.QtWidgets import (QApplication as _MP6C_QApp, QWidget as _MP6C_QWidget, 
                                 QFrame as _MP6C_QFrame, QLabel as _MP6C_QLabel, QPushButton as _MP6C_QPushButton,
                                 QVBoxLayout as _MP6C_QVBox, QHBoxLayout as _MP6C_QHBox, 
                                 QScrollArea as _MP6C_QScrollArea, QTabWidget as _MP6C_QTabs, QMessageBox as _MP6C_QMsg)
    from PyQt5.QtCore import Qt as _MP6C_Qt, QTimer as _MP6C_QTimer, QUrl as _MP6C_QUrl
    from PyQt5.QtGui import QDesktopServices as _MP6C_QDesk
except Exception:
    pass
def __mp6c_log(line: str):
    try:
        if "_cii_log" in globals():
            try:
                globals()["_cii_log"](line); return
            except Exception: 
                pass
        base = globals().get("DATA_DIR", _MP6C_os.path.join(_MP6C_os.getcwd(), "data"))
        _MP6C_os.makedirs(base, exist_ok=True)
        with open(_MP6C_os.path.join(base, "cii_export.log"), "a", encoding="utf-8") as f:
            f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {line}\n")
    except Exception:
        pass
def __mp6c_dev_ok():
    try:
        paths = []
        appd = _MP6C_os.environ.get("APPDATA", "")
        if appd:
            paths.append(_MP6C_os.path.join(appd, "AE_GESTION", "dev_unlock.json"))
        base = globals().get("DATA_DIR", _MP6C_os.path.join(_MP6C_os.getcwd(), "data"))
        paths.append(_MP6C_os.path.join(base, "dev", "dev_unlock.json"))
        for p in paths:
            try:
                with open(p, "r", encoding="utf-8") as fh:
                    tok = _MP6C_json.load(fh)
                feats = tok.get("features") if isinstance(tok, dict) else ""
                if isinstance(feats, list): feats = ",".join(feats)
                ok = False
                if isinstance(tok, dict):
                    ok = bool(tok.get("dev")) or bool(tok.get("enabled"))
                    ok = ok or ("debug_tools" in str(feats)) or ("nf203_seal_now" in str(feats))
                __mp6c_log(f"nf203.ui.audit.dev_ok={'true' if ok else 'false'} path={p} feats={feats}")
                if ok:
                    return True
            except FileNotFoundError:
                continue
            except Exception as e:
                __mp6c_log(f"nf203.ui.audit.dev_ok=error err={e}")
        return False
    except Exception:
        return False
def __mp6c_prev_month_str():
    n = _ae_utcnow()
    y, m = n.year, n.month - 1
    if m == 0: y, m = y-1, 12
    return f"{y:04d}-{m:02d}"
def __mp6c_paths(month: str):
    base = globals().get("DATA_DIR", _MP6C_os.path.join(_MP6C_os.getcwd(), "data"))
    y, m = month.split("-")
    d = _MP6C_os.path.join(base, "audit", "nf203", y, m)
    return {
        "dir": d,
        "seal": _MP6C_os.path.join(d, f"nf203_{month}.seal.json"),
        "jsonl": _MP6C_os.path.join(d, f"nf203_{month}.jsonl"),
        "proof": _MP6C_os.path.join(d, f"proof_PROD_{month}.zip"),
        "bundle": _MP6C_os.path.join(d, f"export_PROD_{month}_bundle.zip"),
    }
def __mp6c_status(month: str):
    p = __mp6c_paths(month)
    sealed = _MP6C_os.path.exists(p["seal"])
    proof  = _MP6C_os.path.exists(p["proof"])
    bundle = _MP6C_os.path.exists(p["bundle"])
    __mp6c_log(f"nf203.ui.audit.status month={month} sealed={'true' if sealed else 'false'} proof={'true' if proof else 'false'} bundle={'true' if bundle else 'false'}")
    return sealed, proof, bundle, p
def __mp6c_open_dir(month: str):
    _, _, _, p = __mp6c_status(month)  # log aussi le status
    path = p["dir"]; ok = 0
    try:
        if not _MP6C_os.path.isdir(path):
            _MP6C_os.makedirs(path, exist_ok=True)
        try:
            if hasattr(_MP6C_os, "startfile"):
                _MP6C_os.startfile(path)  # type: ignore
            else:
                _MP6C_QDesk.openUrl(_MP6C_QUrl.fromLocalFile(path))
            ok = 1
        except Exception:
            try:
                _MP6C_QDesk.openUrl(_MP6C_QUrl.fromLocalFile(path)); ok = 1
            except Exception:
                ok = 0
    finally:
        __mp6c_log(f"nf203.ui.audit.open path={path} ok={ok}")
def __mp6c_find_page():
    try:
        app = _MP6C_QApp.instance()
        if not app:
            return None, "no_app"
        # 1) QTabWidget with "E-facturation"
        for w in app.allWidgets():
            try:
                if isinstance(w, _MP6C_QTabs):
                    for i in range(w.count()):
                        if "E-facturation" in (w.tabText(i) or ""):
                            page = w.widget(i)
                            __mp6c_log("nf203.ui.audit.find.ef_page=ok via=QTabWidget")
                            return page, "tab"
            except Exception: 
                continue
        # 2) Anchor via known buttons
        anchors = ("Exporter bundle", "Sceller", "NF203", "Tester", "mock")
        for w in app.allWidgets():
            try:
                if isinstance(w, _MP6C_QPushButton):
                    t = (w.text() or "")
                    if any(a.lower() in t.lower() for a in anchors):
                        parent = w.parent()
                        while parent and not isinstance(parent, (_MP6C_QScrollArea, _MP6C_QWidget)):
                            parent = parent.parent()
                        page = parent.widget() if isinstance(parent, _MP6C_QScrollArea) else parent
                        if page:
                            __mp6c_log("nf203.ui.audit.find.ef_page=ok via=anchor_button")
                            return page, "anchor"
            except Exception:
                continue
        __mp6c_log("nf203.ui.audit.find.ef_page=fail")
        return None, "fail"
    except Exception as e:
        __mp6c_log(f"nf203.ui.audit.find.ef_page=error err={e}")
        return None, "error"
def __mp6c_inject_panel():
    try:
        if not __mp6c_dev_ok():
            __mp6c_log("nf203.ui.audit.panel.added=skip reason=dev_off")
            return
        app = _MP6C_QApp.instance()
        if not app:
            __mp6c_log("nf203.ui.audit.panel.added=skip reason=no_app"); return
        page, how = __mp6c_find_page()
        if page is None:
            __mp6c_log("nf203.ui.audit.panel.added=skip reason=page_not_found"); return
        if page.findChild(_MP6C_QFrame, "__nf203_audit_panel__"):
            __mp6c_log("nf203.ui.audit.panel.added=skip reason=already_present"); return
        panel = _MP6C_QFrame(page); panel.setObjectName("__nf203_audit_panel__")
        v = _MP6C_QVBox(panel); v.setContentsMargins(8,8,8,8); v.setSpacing(6)
        title = _MP6C_QLabel("Audit NF203 – Etat mensuel (lecture seule)"); title.setStyleSheet("font-weight:600;")
        v.addWidget(title)
        # Status (cur/prev)
        now = _ae_utcnow(); cur = f"{now.year:04d}-{now.month:02d}"; prev = __mp6c_prev_month_str()
        cS,cP,cB,_ = __mp6c_status(cur); pS,pP,pB,_ = __mp6c_status(prev)
        v.addWidget(_MP6C_QLabel(f"Mois en cours {cur} – scellé={'OUI' if cS else 'NON'}; preuve={'OUI' if cP else 'NON'}; bundle={'OUI' if cB else 'NON'}"))
        v.addWidget(_MP6C_QLabel(f"Mois précédent {prev} – scellé={'OUI' if pS else 'NON'}; preuve={'OUI' if pP else 'NON'}; bundle={'OUI' if pB else 'NON'}"))
        hb = _MP6C_QHBox(); v.addLayout(hb)
        btn = _MP6C_QPushButton("Ouvrir dossier NF203 (mois précédent)"); hb.addWidget(btn,1)
        btn.clicked.connect(lambda: __mp6c_open_dir(prev))
        # Insert into page
        inserted = False
        try:
            lay = getattr(page, "layout", lambda: None)()
            if lay: lay.addWidget(panel); inserted = True
        except Exception: 
            inserted = False
        if not inserted:
            try: panel.setParent(page); panel.show(); inserted = True
            except Exception: inserted = False
        if inserted:
            __mp6c_log("nf203.ui.audit.panel.added=ok anchor="+how)
            __mp6c_log("nf203.ui.audit.btn.added=ok")
        else:
            __mp6c_log("nf203.ui.audit.panel.added=skip reason=insert_fail")
    except Exception as e:
        __mp6c_log(f"nf203.ui.audit.panel.added=skip reason=exception err={e}")
__mp6c_retries = {"n":0}
def __mp6c_try_inject():
    try:
        if __mp6c_retries["n"] > 8: 
            return
        __mp6c_retries["n"] += 1
        __mp6c_inject_panel()
        app = _MP6C_QApp.instance()
        if not app: return
        page,_ = __mp6c_find_page()
        ok = bool(page and page.findChild(_MP6C_QFrame, "__nf203_audit_panel__"))
        if not ok:
            _MP6C_QTimer.singleShot(1000, __mp6c_try_inject)
    except Exception:
        pass
try:
    _MP6C_QTimer.singleShot(2000, __mp6c_try_inject)
except Exception:
    pass
# ============================== FIN MP-6c =====================================
# ======================================================================
# MP-6d — UI Audit minimal (hook-based injector + trace logs)
# - Ajoute un hook non-intrusif sur _cii_log pour armer l'injection quand l'UI PPF est prête
# - Garde la voie "timer tardif" en secours
# - Écrit des logs de trace:
#   nf203.ui.audit.inject.arm=hook|timer
#   nf203.ui.audit.inject.fire attempt=N
#   ... puis réutilise MP-6c (__mp6c_inject_panel) et ses logs (dev_ok, find.ef_page, panel.added, btn.added, status, open)
# - Idempotent: un seul armement via __nf203_mp6d_armed__
# ======================================================================
try:
    from PyQt5.QtCore import QTimer as _MP6D_QTimer
except Exception:
    _MP6D_QTimer = None
__nf203_mp6d_armed__ = globals().get("__nf203_mp6d_armed__", False)
__nf203_mp6d_wrap__  = globals().get("__nf203_mp6d_wrap__", False)
__nf203_mp6d_try_count__ = {"n": 0}
def __mp6d_log(s: str):
    try:
        if "_cii_log" in globals():
            try:
                globals()["_cii_log"](s); return
            except Exception: pass
        # fallback local
        import os, datetime
        base = globals().get("DATA_DIR", os.path.join(os.getcwd(), "data"))
        os.makedirs(base, exist_ok=True)
        with open(os.path.join(base, "cii_export.log"), "a", encoding="utf-8") as f:
            f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {s}\n")
    except Exception:
        pass
def __mp6d_try_inject():
    # Evite tempêtes
    __nf203_mp6d_try_count__["n"] += 1
    __mp6d_log(f"nf203.ui.audit.inject.fire attempt={__nf203_mp6d_try_count__['n']}")
    try:
        # Appelle l'injecteur MP-6c (déjà robuste + logué)
        if "__mp6c_inject_panel" in globals():
            globals()["__mp6c_inject_panel"]()
        else:
            # Si MP-6c absent pour une raison, tente MP-6a/MP-6 basiques
            if "_mp6_add_audit_ui" in globals():
                # trouve un parent via MP-6a utilitaire si dispo
                try:
                    page,_ = globals().get("__mp6c_find_page", lambda: (None,"no"))()
                except Exception:
                    page = None
                parent = page or (globals().get("_mp6a_find_ef_page", lambda: None)() or None)
                if parent is not None:
                    globals()["_mp6_add_audit_ui"](parent)
    except Exception as e:
        __mp6d_log(f"nf203.ui.audit.inject.error={e}")
def __mp6d_arm(source="timer"):
    global __nf203_mp6d_armed__
    if __nf203_mp6d_armed__:
        return
    __nf203_mp6d_armed__ = True
    __mp6d_log(f"nf203.ui.audit.inject.arm={source}")
    try:
        if _MP6D_QTimer is not None:
            _MP6D_QTimer.singleShot(600, __mp6d_try_inject)
    except Exception:
        pass
# ---- Hook _cii_log pour armer au bon moment ----------------------------------
def __mp6d_wrap_log():
    global __nf203_mp6d_wrap__
    if __nf203_mp6d_wrap__:
        return
    orig = globals().get("_cii_log")
    if not callable(orig):
        return
    def _wrapped(msg: str):
        try:
            # Détecteurs d'UI prête
            if (("ppf.ui.forcebtn.added=ok" in msg) or ("nf203.ui.seal.btn.added=ok" in msg) or ("ppf.ui.panel.visible=true" in msg)):
                __mp6d_arm("hook")
        except Exception:
            pass
        return orig(msg)
    globals()["_cii_log"] = _wrapped
    __nf203_mp6d_wrap__ = True
    __mp6d_log("nf203.enforce.wrap=cii_log audit_hook")
# Armer par timer par défaut (secours), puis installer le hook
try:
    if _MP6D_QTimer is not None:
        _MP6D_QTimer.singleShot(1800, lambda: __mp6d_arm("timer"))
except Exception:
    pass
try:
    __mp6d_wrap_log()
except Exception:
    pass
# ============================== FIN MP-6d =====================================
# ======================================================================
# MP-7 — Chainage d'audit intra-mois (tamper-evident) pour NF203
# - Ajoute un journal JSONL chainé (hprev/hcur) pour chaque événement FX/CII
# - Wrappers non-intrusifs autour de _safe_write_facturx_pdf et _ensure_facturx
# - Idempotence simple par (month, numero, event); pas de réécriture si déjà logué
# - Logs EXACTS émis :
#   nf203.chain.wrap=fx|cii ok
#   nf203.chain.write ok=1 event=... numero=... month=YYYY-MM hcur=... path=...
#   nf203.chain.dup.skip event=... numero=... month=YYYY-MM
#   nf203.chain.verify.ok month=YYYY-MM lines=N
#   nf203.chain.verify.fail month=YYYY-MM reason=...
# ======================================================================
try:
    import os as _MP7_os, json as _MP7_json, hashlib as _MP7_hashlib, datetime as _MP7_dt, pathlib as _MP7_pathlib
    from PyQt5.QtCore import QTimer as _MP7_QTimer
except Exception:
    pass
def __mp7_log(s: str):
    try:
        if "_cii_log" in globals():
            try: globals()["_cii_log"](s); return
            except Exception: pass
        base = globals().get("DATA_DIR", _MP7_os.path.join(_MP7_os.getcwd(), "data"))
        _MP7_pathlib.Path(base).mkdir(parents=True, exist_ok=True)
        with (_MP7_pathlib.Path(base)/"cii_export.log").open("a", encoding="utf-8") as f:
            f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {s}\n")
    except Exception:
        pass
def __mp7_month_now():
    n = _ae_utcnow(); return f"{n.year:04d}-{n.month:02d}"
def __mp7_month_dir(month: str):
    base = globals().get("DATA_DIR", _MP7_os.path.join(_MP7_os.getcwd(), "data"))
    y, m = month.split("-")
    d = _MP7_pathlib.Path(base) / "audit" / "nf203" / y / m
    d.mkdir(parents=True, exist_ok=True)
    return d
def __mp7_chain_paths(month: str):
    d = __mp7_month_dir(month)
    return {
        "jsonl": d / f"nf203_{month}.jsonl",
        "index": d / f"nf203_chain_index.json"
    }
def __mp7_chain_last_hash(month: str):
    p = __mp7_chain_paths(month)["jsonl"]
    if not p.exists():
        return "0"*64
    try:
        with p.open("r", encoding="utf-8") as f:
            last = None
            for line in f:
                line = line.strip()
                if not line:
                    continue
                last = line
        if not last:
            return "0"*64
        try:
            obj = _MP7_json.loads(last)
            return obj.get("hcur") or "0"*64
        except Exception:
            return "0"*64
    except Exception:
        return "0"*64
def __mp7_index_read(month: str):
    p = __mp7_chain_paths(month)["index"]
    try:
        return _MP7_json.loads(p.read_text(encoding="utf-8")) if p.exists() else {}
    except Exception:
        return {}
def __mp7_index_write(month: str, idx: dict):
    p = __mp7_chain_paths(month)["index"]
    try:
        p.write_text(_MP7_json.dumps(idx, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception:
        pass
def __mp7_canon(obj: dict):
    # Canonical JSON for hashing (sorted keys, no spaces)
    return _MP7_json.dumps(obj, ensure_ascii=False, separators=(",", ":"), sort_keys=True)
def __mp7_chain_append(month: str, payload: dict):
    try:
        # Idempotence simple
        numero = str(payload.get("numero", ""))
        event  = str(payload.get("event", ""))
        idx = __mp7_index_read(month)
        key = f"{month}:{event}:{numero}"
        if key in idx:
            __mp7_log(f"nf203.chain.dup.skip event={event} numero={numero} month={month}")
            return idx[key]
        p = __mp7_chain_paths(month)["jsonl"]
        hprev = __mp7_chain_last_hash(month)
        body = {
            "ts_utc": _ae_utcnow().isoformat(timespec="seconds"),
            "month": month,
            "event": event,
            "numero": numero,
            "step": str(payload.get("step","")),
            "hprev": hprev
        }
        # hcur sur la base du body canonique
        hcur = _MP7_hashlib.sha256(__mp7_canon(body).encode("utf-8")).hexdigest()
        body["hcur"] = hcur
        with p.open("a", encoding="utf-8") as f:
            f.write(__mp7_canon(body) + "\n")
        idx[key] = hcur
        __mp7_index_write(month, idx)
        __mp7_log(f"nf203.chain.write ok=1 event={event} numero={numero} month={month} hcur={hcur} path={p}")
        return hcur
    except Exception as e:
        __mp7_log(f"nf203.chain.write error={e}")
        return ""
def __mp7_chain_verify(month: str):
    p = __mp7_chain_paths(month)["jsonl"]
    if not p.exists():
        __mp7_log(f"nf203.chain.verify.ok month={month} lines=0"); return True
    try:
        prev = "0"*64
        count = 0
        with p.open("r", encoding="utf-8") as f:
            for line in f:
                line=line.strip()
                if not line: continue
                obj = _MP7_json.loads(line)
                # Check link
                if obj.get("hprev") != prev:
                    __mp7_log(f"nf203.chain.verify.fail month={month} reason=hprev_mismatch line={count+1}")
                    return False
                # Recompute hcur
                calc = _MP7_hashlib.sha256(__mp7_canon({k: obj[k] for k in ("event","hprev","month","numero","step","ts_utc")}).encode("utf-8")).hexdigest()
                if calc != obj.get("hcur"):
                    __mp7_log(f"nf203.chain.verify.fail month={month} reason=hcur_mismatch line={count+1}")
                    return False
                prev = obj.get("hcur","")
                count += 1
        __mp7_log(f"nf203.chain.verify.ok month={month} lines={count}")
        return True
    except Exception as e:
        __mp7_log(f"nf203.chain.verify.fail month={month} reason={e}")
        return False
# ---- Wrappers non-intrusifs --------------------------------------------------
__nf203_mp7_wrapped__ = globals().get("__nf203_mp7_wrapped__", False)
def __mp7_extract_num(args, kwargs):
    # Essaie kwargs["numero"] sinon heuristique sur args
    try:
        if "numero" in kwargs and kwargs["numero"]:
            return str(kwargs["numero"])
    except Exception: pass
    # heuristique : premier int/str raisonnable
    for a in list(args)+list(kwargs.values()):
        try:
            if isinstance(a, (int,)):
                return str(a)
            if isinstance(a, str) and len(a) <= 64:
                # évite les chemins très longs, garde numéros plausibles
                return a
        except Exception: 
            continue
    return ""
def __mp7_after_event(event: str, numero: str, step: str=""):
    month = __mp7_month_now()
    __mp7_chain_append(month, {"event": event, "numero": numero, "step": step})
    __mp7_chain_verify(month)
def __mp7_install_wrappers():
    global __nf203_mp7_wrapped__
    if __nf203_mp7_wrapped__:
        return
    # Wrap _safe_write_facturx_pdf
    try:
        _orig_fx = globals().get("_safe_write_facturx_pdf", None)
        if callable(_orig_fx):
            def _fx_wrapped(*args, **kwargs):
                res = _orig_fx(*args, **kwargs)
                try:
                    n = __mp7_extract_num(args, kwargs)
                    __mp7_after_event("fx_write", n, step="post_fx")
                except Exception as e:
                    __mp7_log(f"nf203.chain.fx.error={e}")
                return res
            globals()["_safe_write_facturx_pdf"] = _fx_wrapped
            __mp7_log("nf203.chain.wrap=fx ok")
    except Exception as e:
        __mp7_log(f"nf203.chain.wrap=fx error={e}")
    # Wrap _ensure_facturx
    try:
        _orig_ci = globals().get("_ensure_facturx", None)
        if callable(_orig_ci):
            def _ci_wrapped(*args, **kwargs):
                res = _orig_ci(*args, **kwargs)
                try:
                    n = __mp7_extract_num(args, kwargs)
                    __mp7_after_event("fx_ensure", n, step="post_ensure")
                except Exception as e:
                    __mp7_log(f"nf203.chain.cii.error={e}")
                return res
            globals()["_ensure_facturx"] = _ci_wrapped
            __mp7_log("nf203.chain.wrap=cii ok")
    except Exception as e:
        __mp7_log(f"nf203.chain.wrap=cii error={e}")
    __nf203_mp7_wrapped__ = True
# Hook d'injection tardive
try:
    _MP7_QTimer.singleShot(1700, __mp7_install_wrappers)
except Exception:
    pass
# ---- Utilitaire DEV pour tests (idempotent et sans effet réseau) -------------
def __mp7_emit_event(numero: str="TST-001", etype: str="test", step: str="dev"):
    """
    DEV-only: émet un événement NF203 dans le JSONL chainé (mois courant).
    Visible uniquement si token/dev_mode OK (même règle que UI DEV).
    """
    # respect dev gating minimal (comme MP-6 UI)
    try:
        paths=[ _MP7_pathlib.Path(globals().get("DATA_DIR", _MP7_os.path.join(_MP7_os.getcwd(),"data")))/"dev"/"dev_unlock.json",
                _MP7_pathlib.Path(_MP7_os.environ.get("APPDATA",""))/"AE_GESTION"/"dev_unlock.json" ]
        if not any(p.exists() for p in paths):
            __mp7_log("nf203.chain.dev.skip reason=dev_off"); return ""
    except Exception:
        pass
    month = __mp7_month_now()
    h = __mp7_chain_append(month, {"event": etype, "numero": str(numero), "step": step})
    __mp7_chain_verify(month)
    return h
# ============================== FIN MP-7 ======================================
# ======================================================================
# MP-7b — Chainage d'audit (compat) : vérification tolérante des JSONL existants
# - Evite "hprev_mismatch line=1" si un historique non-genesis est déjà présent
# - Ignore les lignes legacy/incomplètes au début et démarre la vérif sur la 1ère entrée valide
# - Logs supplémentaires:
#   nf203.chain.verify.start month=YYYY-MM line=K legacy_skipped=N
#   nf203.chain.verify.ok month=YYYY-MM lines=N start_line=K legacy_skipped=N
# ======================================================================
try:
    import json as _MP7B_json, hashlib as _MP7B_hashlib, datetime as _MP7B_dt, os as _MP7B_os, pathlib as _MP7B_pathlib
except Exception:
    pass
def __mp7b_log(s: str):
    try:
        if "_cii_log" in globals():
            try: globals()["_cii_log"](s); return
            except Exception: pass
        base = globals().get("DATA_DIR", _MP7B_os.path.join(_MP7B_os.getcwd(), "data"))
        _MP7B_pathlib.Path(base).mkdir(parents=True, exist_ok=True)
        with (_MP7B_pathlib.Path(base)/"cii_export.log").open("a", encoding="utf-8") as f:
            f.write(f"{_ae_utcnow().replace(microsecond=0).isoformat()} {s}\n")
    except Exception:
        pass
def __mp7b_canon(o: dict):
    # même canon que MP-7
    return _MP7B_json.dumps({k:o[k] for k in ("event","hprev","month","numero","step","ts_utc")}, ensure_ascii=False, separators=(",", ":"), sort_keys=True)
def __mp7_chain_verify(month: str):  # override la version stricte par une version tolérante
    paths = None
    try:
        # retrouver le chemin JSONL (reuse de __mp7_chain_paths si dispo)
        if "__mp7_chain_paths" in globals():
            paths = globals()["__mp7_chain_paths"](month)
            p = paths.get("jsonl")
        else:
            base = globals().get("DATA_DIR", _MP7B_os.path.join(_MP7B_os.getcwd(), "data"))
            y, m = month.split("-")
            p = _MP7B_pathlib.Path(base) / "audit" / "nf203" / y / m / f"nf203_{month}.jsonl"
        p = _MP7B_pathlib.Path(p)
        if not p.exists():
            __mp7b_log(f"nf203.chain.verify.ok month={month} lines=0 start_line=0 legacy_skipped=0")
            return True
        # Lecture tolérante
        legacy_skipped = 0
        start_line = 0
        prev = None
        valid_count = 0
        with p.open("r", encoding="utf-8") as f:
            for i, line in enumerate(f, start=1):
                s = line.strip()
                if not s:
                    legacy_skipped += 1
                    continue
                try:
                    obj = _MP7B_json.loads(s)
                except Exception:
                    legacy_skipped += 1
                    continue
                if not isinstance(obj, dict) or ("hprev" not in obj or "hcur" not in obj):
                    legacy_skipped += 1
                    continue
                if prev is None:
                    # On démarre ici (compat) sans imposer 0*64
                    prev = obj.get("hprev","")
                    start_line = i
                    __mp7b_log(f"nf203.chain.verify.start month={month} line={start_line} legacy_skipped={legacy_skipped}")
                else:
                    # Vérifie le chainage avec la ligne précédente calculée
                    if obj.get("hprev") != prev:
                        __mp7b_log(f"nf203.chain.verify.fail month={month} reason=hprev_mismatch line={i}")
                        return False
                # Recalcule hcur
                try:
                    calc = _MP7B_hashlib.sha256(__mp7b_canon(obj).encode("utf-8")).hexdigest()
                except Exception:
                    __mp7b_log(f"nf203.chain.verify.fail month={month} reason=canon_error line={i}")
                    return False
                if calc != obj.get("hcur"):
                    __mp7b_log(f"nf203.chain.verify.fail month={month} reason=hcur_mismatch line={i}")
                    return False
                prev = obj.get("hcur","")
                valid_count += 1
        __mp7b_log(f"nf203.chain.verify.ok month={month} lines={valid_count} start_line={start_line} legacy_skipped={legacy_skipped}")
        return True
    except Exception as e:
        __mp7b_log(f"nf203.chain.verify.fail month={month} reason={e}")
        return False
# ============================== FIN MP-7b =====================================
# ======================================================================
# =======================  MP-8 — Key Governance  ======================
# - Mono-fichier, delta minimal, idempotent
# - AUCUNE modification des signatures/flux existants (MP-6/7 intacts)
# - Gère: création/chargement/rotation clé HMAC (32o), empreinte publique,
#         self-check JSON, BOOTCHECK au démarrage, logs nf203.key.*
# - Résolution DATA_DIR robuste:
#     1) global DATA_DIR si défini
#     2) env AEG_DATA_DIR
#     3) <dir du script>/data  (jamais le CWD seul)
# ======================================================================
# --- Garde-fou idempotence ---
if "nf203_key_load" not in globals():
    import os as _MP8_os, json as _MP8_json, hashlib as _MP8_hashlib, datetime as _MP8_dt, sys as _MP8_sys
    # ---------- Résolution DATA_DIR robuste ----------
    def _nf203_resolve_data_dir() -> str:
        try:
            # 1) DATA_DIR global (si déjà défini par l'appli)
            if "DATA_DIR" in globals() and str(globals()["DATA_DIR"]).strip():
                return _MP8_os.path.abspath(str(globals()["DATA_DIR"]))
            # 2) Variable d'env
            env = _MP8_os.environ.get("AEG_DATA_DIR", "").strip()
            if env:
                return _MP8_os.path.abspath(env)
            # 3) data/ à côté du script (__file__)
            base = _MP8_os.path.abspath(_MP8_os.path.dirname(__file__))
            return _MP8_os.path.join(base, "data")
        except Exception:
            # Fallback ultra-sûr : data/ à côté du script
            base = _MP8_os.path.abspath(_MP8_os.path.dirname(__file__))
            return _MP8_os.path.join(base, "data")
    # ---------- Journalisation (s'aligne sur _cii_log si présent) ----------
    def _nf203_now_iso() -> str:
        try:
            return _ae_utcnow().replace(microsecond=0).isoformat()
        except Exception:
            return "1970-01-01T00:00:00"
    def _nf203_log(line: str) -> None:
        try:
            if "_cii_log" in globals() and callable(globals()["_cii_log"]):
                try:
                    globals()["_cii_log"](line); return
                except Exception:
                    pass
            root = _nf203_resolve_data_dir()
            _MP8_os.makedirs(root, exist_ok=True)
            with open(_MP8_os.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                f.write(f"{_nf203_now_iso()} {line}\n")
        except Exception:
            pass
    # ---------- Emplacements ----------
    def _nf203_key_paths(_data_dir: str) -> dict:
        keys = _MP8_os.path.join(_data_dir, "keys")
        arch = _MP8_os.path.join(keys, "archive")
        return {
            "data": _data_dir,
            "dir": keys,
            "archive": arch,
            "keyfile": _MP8_os.path.join(keys, "hmac.key"),
        }
    # ---------- Helpers sûrs ----------
    def _nf203_fp16(raw: bytes) -> str:
        try:
            return _MP8_hashlib.sha256(raw).hexdigest()[:16]
        except Exception:
            return ""
    def _nf203_write_bytes(path: str, data: bytes) -> None:
        _MP8_os.makedirs(_MP8_os.path.dirname(path), exist_ok=True)
        # Ecriture atomique best-effort
        tmp = path + ".tmp"
        with open(tmp, "wb") as f:
            f.write(data)
        try:
            # Permissions restrictives POSIX (ignoré sous Windows, OK)
            try: _MP8_os.chmod(tmp, 0o600)
            except Exception: pass
            _MP8_os.replace(tmp, path)
        finally:
            try:
                if _MP8_os.path.exists(tmp):
                    _MP8_os.remove(tmp)
            except Exception:
                pass
    # ====================== API publique MP-8 ======================
    def nf203_key_load(create_if_missing: bool = True) -> bytes:
        """
        Retourne la clé HMAC (32 octets). Si absente et create_if_missing=True,
        la génère, l'écrit et journalise.
        Journaux:
          - nf203.key.datadir=<abs path>
          - nf203.key.present=true fp=<…>
          - nf203.key.generate=ok fp=<…> path=<…>
        """
        data_dir = _nf203_resolve_data_dir()
        _nf203_log(f"nf203.key.datadir={data_dir}")
        p = _nf203_key_paths(data_dir)
        key_path = p["keyfile"]
        try:
            if _MP8_os.path.exists(key_path):
                with open(key_path, "rb") as f:
                    key = f.read()
                if len(key) != 32:
                    # Clé invalide → régénérer si autorisé
                    if not create_if_missing:
                        _nf203_log("nf203.key.present=false reason=invalid_size")
                        return b""
                    key = _MP8_os.urandom(32)
                    _nf203_write_bytes(key_path, key)
                    _nf203_log(f"nf203.key.generate=ok fp={_nf203_fp16(key)} path={key_path}")
                else:
                    _nf203_log(f"nf203.key.present=true fp={_nf203_fp16(key)}")
                return key
            else:
                if not create_if_missing:
                    _nf203_log("nf203.key.present=false")
                    return b""
                key = _MP8_os.urandom(32)
                _nf203_write_bytes(key_path, key)
                _nf203_log(f"nf203.key.generate=ok fp={_nf203_fp16(key)} path={key_path}")
                return key
        except Exception as e:
            _nf203_log(f"nf203.key.error=load {type(e).__name__}: {e}")
            return b""
    def nf203_key_rotate() -> str:
        """
        Archive l’ancienne clé (si présente) puis en génère une nouvelle.
        Retourne l’empreinte publique (fp16) de la nouvelle.
        Journaux:
          - nf203.key.rotate=ok new_fp=<…> archived=<bool>
        """
        data_dir = _nf203_resolve_data_dir()
        p = _nf203_key_paths(data_dir)
        key_path = p["keyfile"]; arch_dir = p["archive"]
        archived = False
        try:
            _MP8_os.makedirs(arch_dir, exist_ok=True)
            if _MP8_os.path.exists(key_path):
                ts = _ae_utcnow().strftime("%Y%m%d_%H%M%S")
                dst = _MP8_os.path.join(arch_dir, f"hmac_{ts}.key")
                try:
                    _MP8_os.replace(key_path, dst)
                    archived = True
                except Exception:
                    # copy+truncate (secours)
                    try:
                        with open(key_path, "rb") as rf, open(dst, "wb") as wf:
                            wf.write(rf.read())
                        with open(key_path, "wb") as tf:
                            tf.write(b"")
                        archived = True
                    except Exception:
                        archived = False
            new_key = _MP8_os.urandom(32)
            _nf203_write_bytes(key_path, new_key)
            fp = _nf203_fp16(new_key)
            _nf203_log(f"nf203.key.rotate=ok new_fp={fp} archived={str(archived).lower()}")
            return fp
        except Exception as e:
            _nf203_log(f"nf203.key.error=rotate {type(e).__name__}: {e}")
            return ""
    def nf203_key_fingerprint() -> str:
        """
        Retourne l’empreinte publique (sha256/16) ou 'none' si indisponible.
        Journal: nf203.key.fingerprint=<fp|none>
        """
        try:
            k = nf203_key_load(create_if_missing=False)
            fp = _nf203_fp16(k) if k else ""
            _nf203_log(f"nf203.key.fingerprint={fp or 'none'}")
            return fp or ""
        except Exception as e:
            _nf203_log(f"nf203.key.error=fingerprint {type(e).__name__}: {e}")
            return ""
    def _k_selfcheck(best_effort=True) -> str:
        """
        Ecrit data/tests/test_key_governance_YYYY-MM.json avec:
          key_present: bool
          public_fingerprint: <16 hex> ou ""
          archive_dir: <path>
          debug.step, debug.key_file, debug.data_dir
        Journal: nf203.key.selfcheck.write=ok path=<…>
        """
        data_dir = _nf203_resolve_data_dir()
        p = _nf203_key_paths(data_dir)
        try:
            k = nf203_key_load(create_if_missing=bool(best_effort))
            present = bool(k and len(k) == 32)
            fp = _nf203_fp16(k) if present else ""
            out_dir = _MP8_os.path.join(data_dir, "tests")
            _MP8_os.makedirs(out_dir, exist_ok=True)
            y_m = _ae_utcnow().strftime("%Y-%m")
            out = _MP8_os.path.join(out_dir, f"test_key_governance_{y_m}.json")
            payload = {
                "key_present": present,
                "public_fingerprint": fp,
                "archive_dir": p["archive"],
                "debug": {
                    "step": "selfcheck",
                    "key_file": p["keyfile"],
                    "data_dir": data_dir,
                }
            }
            with open(out, "w", encoding="utf-8") as f:
                _MP8_json.dump(payload, f, ensure_ascii=False, indent=2)
            _nf203_log(f"nf203.key.selfcheck.write=ok path={out}")
            return out
        except Exception as e:
            _nf203_log(f"nf203.key.selfcheck.error={type(e).__name__}: {e}")
            return ""
    # ---------- BOOTCHECK (à l'import) ----------
    try:
        _nf203_log(f"nf203.key.datadir={_nf203_resolve_data_dir()}")
        _ok_key = nf203_key_load(create_if_missing=True)
        if _ok_key:
            _nf203_log("nf203.key.bootcheck=ok")
        else:
            _nf203_log("nf203.key.bootcheck=fail")
    except Exception as _be:
        _nf203_log(f"nf203.key.bootcheck=error {type(_be).__name__}: {_be}")
    # ---------- (Optionnel) mini CLI monofichier : --fix-key [--data-dir X] ----------
    # Remarque: Si ce bloc se trouve au-dessus du __main__ de l’appli, la commande
    # `python R4c_MP7ok.py --fix-key --data-dir data` termine immédiatement après la création.
    try:
        if any(arg == "--fix-key" for arg in _MP8_sys.argv):
            # redirige éventuellement le data-dir par env pour cette session
            try:
                if "--data-dir" in _MP8_sys.argv:
                    i = _MP8_sys.argv.index("--data-dir")
                    custom = _MP8_sys.argv[i+1] if i+1 < len(_MP8_sys.argv) else ""
                    if custom:
                        _MP8_os.environ["AEG_DATA_DIR"] = custom
            except Exception:
                pass
            k = nf203_key_load(create_if_missing=True)
            fp = _nf203_fp16(k) if k else ""
            if fp:
                _nf203_log("nf203.key.fixkey=ok")
                print(f"[OK] key present. fingerprint={fp}")
                _MP8_sys.exit(0)
            else:
                _nf203_log("nf203.key.fixkey=fail")
                print("[FAIL] key not created.", file=_MP8_sys.stderr)
                _MP8_sys.exit(2)
    except Exception as _ce:
        _nf203_log(f"nf203.key.fixkey=error {type(_ce).__name__}: {_ce}")
# ============================= FIN MP-8 ========================================
# ======================================================================
# ======== MP-11/12/13 — Helpers minimalistes (mono-fichier) ===========
# - Append-only, aucune signature existante modifiée
# - Ecrit uniquement dans DATA_DIR résolu (mêmes règles que MP-8)
# - Journaux: nf203.pack.write / nf203.fec.write / nf203.cii.spool.write
# - CLI: --make-audit-pack [--year Y --month M]
#        --make-dummy-fec   [--year Y --month M]
#        --make-spool-sample
# ======================================================================
if "nf203_make_audit_pack" not in globals():
    import os as _MPx_os, sys as _MPx_sys, json as _MPx_json, hashlib as _MPx_hash, datetime as _MPx_dt
    def _mpx_data_dir():
        try:
            if "_nf203_resolve_data_dir" in globals():
                return globals()["_nf203_resolve_data_dir"]()
        except Exception:
            pass
        base = _MPx_os.path.abspath(_MPx_os.path.dirname(__file__))
        return _MPx_os.path.join(base, "data")
    def _mpx_log(msg):
        try:
            if "_cii_log" in globals() and callable(globals().get("_cii_log")):
                globals()["_cii_log"](msg); return
        except Exception:
            pass
        try:
            root = _mpx_data_dir()
            _MPx_os.makedirs(root, exist_ok=True)
            with open(_MPx_os.path.join(root, "cii_export.log"), "a", encoding="utf-8") as f:
                ts = _ae_utcnow().replace(microsecond=0).isoformat()
                f.write(f"{ts} {msg}\n")
        except Exception:
            pass
    def _mpx_sha256_file(path):
        h = _MPx_hash.sha256()
        with open(path, "rb") as f:
            for chunk in iter(lambda: f.read(65536), b""):
                h.update(chunk)
        return h.hexdigest()
    # -------------------- MP-11: audit_pack.json --------------------
    def nf203_make_audit_pack(year=None, month=None):
        d = _mpx_data_dir()
        now = _ae_utcnow()
        y = year or now.year
        m = month or now.month
        y4 = f"{y:04d}"; m2 = f"{m:02d}"
        aud_dir = _MPx_os.path.join(d, "audit", "nf203", y4, m2)
        _MPx_os.makedirs(aud_dir, exist_ok=True)
        out = _MPx_os.path.join(aud_dir, "audit_pack.json")
        files = []
        for name in _MPx_os.listdir(aud_dir):
            if name.lower() == "audit_pack.json":
                continue
            p = _MPx_os.path.join(aud_dir, name)
            if _MPx_os.path.isfile(p):
                try:
                    files.append({"path": name, "sha256": _mpx_sha256_file(p)})
                except Exception:
                    pass
        payload = {
            "ts_utc": _ae_utcnow().isoformat() + "Z",
            "month": f"{y4}-{m2}",
            "dir": aud_dir,
            "files": files
        }
        with open(out, "w", encoding="utf-8") as f:
            _MPx_json.dump(payload, f, ensure_ascii=False, indent=2)
        _mpx_log(f"nf203.pack.write=ok path={out} count={len(files)}")
        return out
    # -------------------- MP-12: FEC minimal ------------------------
    def nf203_write_dummy_fec(year=None, month=None):
        d = _mpx_data_dir()
        now = _ae_utcnow()
        y = year or now.year
        m = month or now.month
        y4 = f"{y:04d}"; m2 = f"{m:02d}"
        fec_dir = _MPx_os.path.join(d, "fec")
        _MPx_os.makedirs(fec_dir, exist_ok=True)
        out = _MPx_os.path.join(fec_dir, f"FEC_{y4}{m2}.csv")
        header = "JournalCode;EcritureNum;EcritureDate;CompteNum;CompteLib;Debit;Credit;PieceRef\n"
        with open(out, "w", encoding="utf-8", newline="") as f:
            f.write(header)
        _mpx_log(f"nf203.fec.write=ok path={out}")
        return out
    # -------------------- MP-13: Spool CII sample -------------------
    def nf203_spool_sample():
        d = _mpx_data_dir()
        spool = _MPx_os.path.join(d, "spool", "cii")
        _MPx_os.makedirs(spool, exist_ok=True)
        ts = _ae_utcnow().strftime("%Y%m%d_%H%M%S")
        xml_path = _MPx_os.path.join(spool, f"invoice_{ts}.cii.xml")
        json_path = _MPx_os.path.join(spool, f"payload_{ts}.json")
        xml = ("""<?xml version="1.0" encoding="UTF-8"?>
<rsm:CrossIndustryInvoice xmlns:rsm="urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100">
  <rsm:ExchangedDocumentContext/>
  <rsm:ExchangedDocument>
    <ram:ID xmlns:ram="urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100">INV-{}</ram:ID>
  </rsm:ExchangedDocument>
</rsm:CrossIndustryInvoice>
""".strip()).format(ts)
        with open(xml_path, "w", encoding="utf-8") as f: f.write(xml)
        payload = {"ts_utc": _ae_utcnow().isoformat()+"Z", "invoice_id": f"INV-{ts}", "file_xml": _MPx_os.path.basename(xml_path)}
        with open(json_path, "w", encoding="utf-8") as f: _MPx_json.dump(payload, f, ensure_ascii=False, indent=2)
        _mpx_log(f"nf203.cii.spool.write=ok xml={xml_path} json={json_path}")
        return {"xml": xml_path, "json": json_path}
    # -------------------- CLI (facultatif) --------------------------
    try:
        argv = _MPx_sys.argv
        if "--make-audit-pack" in argv or "--make-dummy-fec" in argv or "--make-spool-sample" in argv:
            def _getopt(flag, default=""):
                if flag in argv:
                    i = argv.index(flag)
                    if i+1 < len(argv): return argv[i+1]
                return default
            dd = _getopt("--data-dir", "")
            if dd:
                _MPx_os.environ["AEG_DATA_DIR"] = dd
            yy = _getopt("--year", "")
            mm = _getopt("--month", "")
            y = int(yy) if yy.isdigit() else None
            m = int(mm) if mm.isdigit() else None
            if "--make-audit-pack" in argv:
                p = nf203_make_audit_pack(y, m); print(p); _MPx_sys.exit(0 if p else 2)
            if "--make-dummy-fec" in argv:
                p = nf203_write_dummy_fec(y, m); print(p); _MPx_sys.exit(0 if p else 2)
            if "--make-spool-sample" in argv:
                r = nf203_spool_sample(); print(_MPx_json.dumps(r)); _MPx_sys.exit(0 if r else 2)
    except Exception as _e:
        _mpx_log(f"nf203.helper.cli.error {type(_e).__name__}: {_e}")
# ========================== FIN MP-11/12/13 ====================================
# === Helper: auto-fit table columns (content + margin + caps) ===
def auto_fit_columns(tbl, margin=28, caps=None):
    try:
        from PyQt5.QtWidgets import QHeaderView
        hdr = tbl.horizontalHeader()
        hdr.setStretchLastSection(False)
        hdr.resizeSections(QHeaderView.ResizeToContents)
        n = tbl.columnCount()
        for c in range(n):
            w = hdr.sectionSize(c) + int(margin)
            if caps and c in caps:
                mn, mx = caps[c]
                if mn is not None:
                    w = max(w, int(mn))
                if mx is not None:
                    w = min(w, int(mx))
            hdr.setSectionResizeMode(c, QHeaderView.Interactive)
            tbl.setColumnWidth(c, max(40, w))
        try:
            tbl.resizeRowsToContents()
        except Exception:
            pass
    except Exception as _e:
        try:
            log_error("auto_fit_columns: "+str(_e))
        except Exception:
            pass
if __name__=="__main__":
    try:
        _cii_log(f"boot.file={__file__}")
    except Exception:
        pass
    try:
        ensure_dirs(); ensure_settings(); ensure_all_csv(); auto_migrate_prenom_all()
    except Exception:
        pass
    main()
# ====== OVERRIDE: robust _wrap accepting legacy & new signatures ======
def _wrap_flex(*args):
    """
    Accepts any of:
      _wrap(text, max_w)
      _wrap(c, text, max_w)
      _wrap(c, text, max_w, size, font)
    """
    try:
        from reportlab.pdfbase.pdfmetrics import stringWidth as _sw
    except Exception:
        def _sw(t, font, size): return float(len(t)) * size * 0.5
    if len(args) == 2:
        c = None; text, max_w = args; size = 11; font = "Helvetica"
    elif len(args) == 3:
        c, text, max_w = args; size = 11; font = "Helvetica"
    elif len(args) >= 5:
        c, text, max_w, size, font = args[:5]
    else:
        raise TypeError(f"_wrap() invalid args: {len(args)}")
    text = (text or "").replace("\r","")
    lines_out = []
    for para in text.split("\n"):
        words = para.split()
        cur = ""
        while words:
            w = words.pop(0)
            test = (cur + " " + w).strip()
            width = (c.stringWidth(test, font, size) if c else _sw(test, font, size))
            if not cur or width <= max_w:
                cur = test
            else:
                lines_out.append(cur)
                cur = w
        if cur or not para:
            lines_out.append(cur)
    return lines_out
# override any earlier _wrap symbol
_wrap = _wrap_flex
# ====== END OVERRIDE ======
def _validate_cii_xsd(xml_bytes: bytes, settings: dict) -> str:
    """Best-effort XSD validation if a schema dir is configured in settings.
    Returns 'OK', 'ERR', or 'SKIP'.
    """
    try:
        schema_dir = (settings.get("cii_schema_dir") or "").strip()
        if not schema_dir or not os.path.isdir(schema_dir):
            return "SKIP"
        # best-effort: try xmlschema if available
        try:
            import xmlschema  # type: ignore
            xsds = [os.path.join(schema_dir, f) for f in os.listdir(schema_dir) if f.lower().endswith(".xsd")]
            if not xsds:
                return "SKIP"
            # pick first .xsd and validate
            schema = xmlschema.XMLSchema(xsds[0])
            import io as _io
            schema.validate(_io.BytesIO(xml_bytes))
            return "OK"
        except Exception:
            return "SKIP"
    except Exception:
        return "SKIP"
def _export_cii_for_invoice(doc: dict, settings: dict, numero: str) -> str:
    return _export_cii_for_invoice_core(doc, settings, numero)

# ------------- PDF Devis/Factures (amélioré) -------------
def _ensure_facturx(pdf_path:str, doc:dict, settings:dict)->str:
    """Upgrade 'pdf_path' to Factur‑X if possible, mirror to ops, return resulting path."""
    try:
        fx = _export_facturx(doc, settings, pdf_path)
        # CII safety net after Factur-X embed attempt
        try:
            numero = str(doc.get("numero") or doc.get("num") or doc.get("numero_facture") or "")
            if numero:
                _export_cii_for_invoice(doc, settings, numero)
        except Exception as e:
            try:
                _cii_log(f"cii.error={e}")
            except Exception:
                pass
        try:
            _op_store_pdf('facture', doc, fx)
        except Exception:
            pass
        return fx or pdf_path
    except Exception:
        # CII fallback when Factur-X embed fails
        try:
            numero = str(doc.get("numero") or doc.get("num") or doc.get("numero_facture") or "")
            if numero:
                _export_cii_for_invoice(doc, settings, numero)
        except Exception as e:
            try:
                _cii_log(f"cii.error={e}")
            except Exception:
                pass
        try:
            _op_store_pdf('facture', doc, pdf_path)
        except Exception:
            pass
        return pdf_path
def _safe_write_facturx_pdf(doc:dict, settings:dict, numero:str)->str:
    """Generate invoice PDF then attach Factur‑X XML when possible; return final path."""
    base_pdf = _safe_write_facture_pdf(doc, settings, numero)
    final_pdf = _ensure_facturx(base_pdf, doc, settings)
    # Ensure CII export regardless of embed path
    try:
        if numero:
            _export_cii_for_invoice(doc, settings, str(numero))
    except Exception as e:
        try:
            _cii_log(f"cii.error={e}")
        except Exception:
            pass
    return final_pdf
def _hex_to_rgb(hexstr:str):
    try:
        h = (hexstr or "").strip().lstrip("#")
        if len(h) == 3:
            h = "".join(ch*2 for ch in h)
        if len(h) != 6:
            return (0.0, 0.52, 1.0)  # fallback #0A84FF
        r = int(h[0:2], 16); g = int(h[2:4], 16); b = int(h[4:6], 16)
        return (r/255.0, g/255.0, b/255.0)
    except Exception:
        return (0.0, 0.52, 1.0)
def pdf_render_doc(doc:Dict, settings:Dict, out_path:str, kind_label:str):
    if not REPORTLAB_OK: raise RuntimeError("ReportLab non dispo")
    c = Canvas(out_path, pagesize=A4)
    W,H = A4; theme=_hex_to_rgb(settings.get("theme_color_hex","#0A84FF"))
    # En-tête encadré
    c.setStrokeColorRGB(*theme); c.setLineWidth(1)
    c.rect(12*mm, 270*mm, W-24*mm, 20*mm, stroke=1, fill=0)
    _draw_logo(c, _logo_from_settings(settings), 14*mm, 283*mm, 30*mm, 12*mm)
    c.setFont("Helvetica-Bold",12); c.setFillColorRGB(0,0,0)
    c.drawString(48*mm, 282*mm, settings.get("entreprise_nom",""))
    c.setFont("Helvetica",9)
    c.drawString(48*mm, 277*mm, settings.get("entreprise_adresse",""))
    c.drawString(48*mm, 273*mm, f"{settings.get('entreprise_cp','')} {settings.get('entreprise_ville','')}   Tél: {settings.get('entreprise_tel','')}   Email: {settings.get('entreprise_mail','')}")
    # Bloc Document (à droite)
    c.setFillColorRGB(*theme); c.setFont("Helvetica-Bold",14)
    c.drawRightString(W-16*mm, 284*mm, kind_label.upper())
    c.setFont("Helvetica",9); c.setFillColorRGB(0,0,0)
    c.drawRightString(W-16*mm, 279*mm, f"N°: {doc.get('numero','')}")
    c.drawRightString(W-16*mm, 274*mm, f"Date: {_display_date(doc.get('date',''))}")
    # Bloc Client encadré
    c.setStrokeColorRGB(0,0,0); c.rect(12*mm, 252*mm, W-24*mm, 14*mm, stroke=1, fill=0)
    c.setFont("Helvetica-Bold",10); c.drawString(14*mm, 262*mm, "Client")
    c.setFont("Helvetica",9)
    y=258*mm
    for line in [doc.get("client_nom",""), doc.get("client_adresse",""),
                 f"{doc.get('client_cp','')} {doc.get('client_ville','')}".strip(),
                 f"Tél: {doc.get('client_tel','')}".strip(), f"Email: {doc.get('client_email','')}".strip()]:
        if line: c.drawString(14*mm, y, line); y-=4.2*mm
    # Bloc Infos (statut, échéance, date statut)
    c.setFont("Helvetica-Bold",10); c.drawRightString(W-16*mm, 262*mm, "Informations")
    c.setFont("Helvetica",9)
    info_lines=[]
    if doc.get("statut"): info_lines.append(("Statut", doc.get("statut")))
    if doc.get("date_statut"): info_lines.append(("Date statut", _display_date(doc.get("date_statut"))))
    for i,(k,v) in enumerate(info_lines):
        c.drawRightString(W-16*mm, 258*mm - i*4.2*mm, f"{k}: {v}")
    # Tableau lignes
    # Colonnes: Réf | Désignation | Type | Qté | PU HT | TVA% | Total HT
    # SUBJECT / OBJET (juste sous le bloc client)
    subj = (doc.get("objet") or "").strip()
    _obj_y_start = 246*mm
    if subj:
        c.setFont("Helvetica-Bold", 12)
        _lines = _wrap_simple(c, subj.upper(), 100)[:3]
        _yy = _obj_y_start
        for _l in _lines:
            c.drawString(14*mm, _yy, _l)
            _yy -= 5*mm
        y = min(242*mm, _yy - 2*mm)
    else:
        y = 242*mm
    x = 12*mm; w = W-24*mm
    col_w = [0.12*w, 0.38*w, 0.12*w, 0.08*w, 0.12*w, 0.08*w, 0.10*w]
    xcol=[x]
    for cw in col_w[:-1]: xcol.append(xcol[-1]+cw)
    # header band
    c.setFillColorRGB(*theme); c.rect(x, y-8*mm, w, 8*mm, fill=1, stroke=0)
    c.setFillColorRGB(1,1,1); c.setFont("Helvetica-Bold",9)
    headers=["Réf","Désignation","Type","Qté","PU HT","TVA %","Total HT"]
    for i,h in enumerate(headers):
        c.drawString(xcol[i]+2*mm, y-6, h)
    y-=9*mm
    c.setFillColorRGB(0,0,0); c.setFont("Helvetica",9)
    line_h = 6.5*mm
    total_ht = 0.0; total_tva = 0.0
    for idx, L in enumerate(doc.get("lignes",[])):
        # wrap designation; might take 1-3 lines
        des_lines = _wrap_simple(c, L.get("designation",""), 48)
        needed = max(1, min(3, len(des_lines)))
        row_h = line_h*needed
        if y - row_h < 35*mm:
            # new page
            c.showPage()
            # repeat header short
            c.setFillColorRGB(*theme); c.rect(x, H-30*mm-8*mm, w, 8*mm, fill=1, stroke=0)
            c.setFillColorRGB(1,1,1); c.setFont("Helvetica-Bold",9)
            for i,h in enumerate(headers): c.drawString(xcol[i]+2*mm, H-30*mm-6, h)
            y = H-30*mm-9*mm
            c.setFillColorRGB(0,0,0); c.setFont("Helvetica",9)
        # background stripe
        if idx%2==0:
            c.setFillColorRGB(0.98,0.98,0.98)
            c.rect(x, y-row_h+1*mm, w, row_h, fill=1, stroke=0)
            c.setFillColorRGB(0,0,0)
        # values
        c.drawString(xcol[0]+2*mm, y-4, str(L.get("ref",""))[:18])
        # designation multi-lines
        dy = 0
        for li in range(needed):
            dtext = des_lines[li] if li < len(des_lines) else ""
            c.drawString(xcol[1]+2*mm, y-4 - dy, dtext)
            dy += line_h
        c.drawString(xcol[2]+2*mm, y-4, L.get("type",""))
        # right aligned numbers
        def rtext(col_index, value):
            s = str(value)
            tw = c.stringWidth(s, "Helvetica", 9)
            right_edge = xcol[col_index] + col_w[col_index]
            c.drawString(right_edge - tw - 2*mm, y-4, s)
        rtext(3, f"{_safe_float(L.get('qte',1)):.2f}")
        rtext(4, f"{_safe_float(L.get('pu_ht',0)):.2f}")
        rtext(5, f"{int(round(_safe_float(L.get('tva', settings.get('tva',0.2))*100)))}%")
        rtext(6, f"{_safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0)))):.2f}")
        y -= row_h
        # totals compute (per-line TVA rate)
        line_ht = _safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0))))
        total_ht += line_ht
        total_tva += line_ht * _safe_float(L.get('tva', settings.get('tva',0.2)))
    total_ttc = total_ht + total_tva
    acompte = _safe_float(doc.get("acompte",0))
    restant = max(total_ttc - acompte, 0.0)
    # Totaux encadrés
    y_tot = max(30*mm, y-2*mm)
    box_w = w*0.55; box_x = x + w - box_w
    c.setStrokeColorRGB(*theme); c.setLineWidth(0.8); c.rect(box_x, y_tot-28*mm, box_w, 26*mm, stroke=1, fill=0)
    labels = [("Sous-total HT", total_ht), ("TVA", total_tva), ("TOTAL TTC", total_ttc), ("Acompte", acompte), ("Restant dû", restant)]
    yy = y_tot - 6
    for name, val in labels:
        c.setFont("Helvetica-Bold" if name in ("TOTAL TTC","Restant dû") else "Helvetica", 10)
        c.setFillColorRGB(0,0,0 if name!="TOTAL TTC" else 0)
        c.drawString(box_x+4*mm, yy, name)
        sval = _money(val)
        tw = c.stringWidth(sval, "Helvetica-Bold" if name in ("TOTAL TTC","Restant dû") else "Helvetica", 10)
        c.drawString(box_x+box_w-4*mm - tw, yy, sval)
        yy -= 5.5*mm
    
    # Pied (RIB + mentions)
    c.setStrokeColorRGB(0.6,0.6,0.6); c.setLineWidth(0.5)
    c.line(12*mm, 18*mm, W-12*mm, 18*mm)
    c.setFont("Helvetica",8); c.setFillColorRGB(0,0,0)
    rib = f"IBAN: {settings.get('entreprise_iban','')}    BIC: {settings.get('entreprise_bic','')}"
    c.drawString(12*mm, 14*mm, rib)
    ment = settings.get("mentions_legales","")
    c.drawRightString(W-12*mm, 14*mm, ment[:120])
    c.showPage(); c.save()
    return out_path
def _validated_generate_devis_pdf(devis_doc, logo_path, params): return _render_dev_fact("DEVIS", devis_doc, logo_path, params)
def _validated_generate_facture_pdf(facture_doc, logo_path, params): return _render_dev_fact("FACTURE", facture_doc, logo_path, params)
# ------------- URSSAF PDF (clair & sans chevauchement) -------------
def generate_devis_demande_acompte_pdf(doc, settings, out_path):
    # Wrapper simple : même rendu avec libellé différent
    return pdf_render_doc(doc, settings, out_path, "Demande d'acompte")
def generate_facture_acompte_pdf(*args, **kwargs):
    # Routed to validated renderer (v2) to unify style
    return _adapt_signature_and_call(_validated_generate_facture_pdf, args)
def generate_facture_acquittee_pdf(*args, **kwargs):
    # Routed to validated renderer (v2) to unify style
    return _adapt_signature_and_call(_validated_generate_facture_pdf, args)
def _validated_generate_urssaf_pdf_impl(rows, settings, out_path, title="URSSAF — Synthèse"):
    """Compat wrapper → route to modern validated URSSAF renderer.
    Keeps old signature (rows, settings, out_path, title=...), but uses
    _validated_generate_urssaf_pdf(rows, periode, generated_on, logo_path, params).
    """
    try:
        # Derive periode from rows if possible
        periode = None
        try:
            dates = []
            for r in (rows or []):
                if isinstance(r, dict):
                    d = r.get('Date du paiement') or r.get('date')
                else:
                    d = r[0] if (isinstance(r, (list, tuple)) and r) else None
                if d:
                    dates.append(str(d))
            if dates:
                y0 = min(dates)[:10]
                y1 = max(dates)[:10]
                periode = f"{y0} → {y1}"
        except Exception:
            periode = None
        generated_on = datetime.now()
        params = {
            'company': _company_from_settings(settings),
            'margin_mm': 10,
            'body_size': 10,
            'urssaf_rate': settings.get('urssaf_rate', 0.22),
            'urssaf_rate_pieces': settings.get('urssaf_rate_pieces', settings.get('urssaf_rate', 0.22)),
            'out_path': out_path,
        }
        return _validated_generate_urssaf_pdf(rows, periode or '', generated_on, _logo_from_settings(settings), params)
    except Exception:
        # Fallback: keep a safe message rather than crashing
        return _validated_generate_urssaf_pdf(rows, '', datetime.now(), _logo_from_settings(settings), {
            'company': _company_from_settings(settings), 'margin_mm': 10, 'body_size': 10,
            'urssaf_rate': settings.get('urssaf_rate', 0.22), 'out_path': out_path,
        })
    def draw_title():
        c.setFont("Helvetica-Bold", 14)
        c.setFillColorRGB(*theme)
        c.drawCentredString(W/2, H - margin, title)
        c.setFont("Helvetica", 9)
        c.setFillColorRGB(0,0,0)
        nom = settings.get("entreprise_nom","")
        if nom:
            c.drawCentredString(W/2, H - margin - 6*mm, nom)
    def draw_header(y_top):
        c.setFillColorRGB(*theme)
        c.rect(table_x, y_top - row_h, table_w, row_h, fill=1, stroke=0)
        c.setFillColorRGB(1,1,1)
        c.setFont("Helvetica-Bold", 9)
        for i, h in enumerate(headers_pdf):
            c.drawString(xcol[i] + 2*mm, y_top - 5, h)
        c.setFillColorRGB(0,0,0)  # back to black for body
        return y_top - row_h
    def draw_row(y_top, values, zebra):
        # zebra
        if zebra:
            c.setFillColorRGB(0.98,0.98,0.98)
            c.rect(table_x, y_top - row_h, table_w, row_h, fill=1, stroke=0)
        c.setFillColorRGB(0,0,0)
        c.setFont("Helvetica", 9)
        for i, s in enumerate(values):
            s = "" if s is None else str(s)
            if i in (3,4,5,6):  # numeric columns right-aligned
                tw = c.stringWidth(s, "Helvetica", 9)
                c.drawString(xcol[i] + col_w[i] - tw - 2*mm, y_top - 5, s)
            else:
                c.drawString(xcol[i] + 2*mm, y_top - 5, s[:60])
        return y_top - row_h
    def new_page():
        c.showPage()
        draw_title()
        y = H - margin - 12*mm
        y = draw_header(y)
        return y
    # --- Start
    draw_title()
    y = H - margin - 12*mm
    y = draw_header(y)
    tot_pieces = tot_mo = tot_ht = tot_ttc = 0.0
    zebra = False
    for r in rows:
        vals = [
            r.get(keys[0], ""),
            r.get(keys[1], ""),
            r.get(keys[2], ""),
            f"{_safe_float(r.get(keys[3],0)):.2f}",
            f"{_safe_float(r.get(keys[4],0)):.2f}",
            f"{_safe_float(r.get(keys[5],0)):.2f}",
            f"{_safe_float(r.get(keys[6],0)):.2f}",
            (r.get(keys[7], "") or "")[:10],
        ]
        if y - row_h < 25*mm:
            y = new_page()
        y = draw_row(y, vals, zebra)
        zebra = not zebra
        tot_pieces += _safe_float(r.get(keys[3],0))
        tot_mo     += _safe_float(r.get(keys[4],0))
        tot_ht     += _safe_float(r.get(keys[5],0))
        tot_ttc    += _safe_float(r.get(keys[6],0))
    # Totals
    if y - 12*mm < 18*mm:
        y = new_page()
    c.setFont("Helvetica-Bold", 10)
    c.setFillColorRGB(*theme)
    totals_text = f"Totaux période — Pièces: {tot_pieces:.2f} €   MO: {tot_mo:.2f} €   HT: {tot_ht:.2f} €   TTC: {tot_ttc:.2f} €"
    c.drawCentredString(W/2, y - 6*mm, totals_text)
    c.showPage()
    c.save()
    return out_path
# ------------- Email -------------
# --- Adapter for backward compatibility: accept both (rows, periode, generated_on, logo_path, params)
# and (rows, settings, out_path[, title]) ---
def _validated_generate_urssaf_pdf_dispatch(*args, **kwargs):
    try:
        if len(args) >= 5:
            # Legacy call
            rows, periode, generated_on, logo_path, params = args[:5]
            try:
                settings = ensure_settings()
            except Exception:
                settings = kwargs.get("settings")
            out_path = None
            try:
                out_path = params.get("out_path")
            except Exception:
                pass
            if out_path is None:
                # safe fallback
                out_path = os.path.join(DATA_DIR, "urssaf_export.pdf") if 'DATA_DIR' in globals() else "urssaf_export.pdf"
            return _validated_generate_urssaf_pdf_impl(rows, settings, out_path)
        elif len(args) >= 3:
            rows, settings, out_path = args[:3]
            title = args[3] if len(args) >= 4 else kwargs.get("title", "URSSAF — Synthèse")
            return _validated_generate_urssaf_pdf_impl(rows, settings, out_path, title=title)
        else:
            raise TypeError("_validated_generate_urssaf_pdf: invalid arguments")
    except Exception:
        # Keep the original error surfacing through the UI
        raise
def confirm_email_send(settings:Dict, to_addr, subject:str, body:str, attachment_path:str=None, cc=None, bcc=None) -> bool:
    """
    Affiche une boîte de confirmation avant envoi. Retourne True si l'utilisateur confirme.
    Si settings["confirm_before_any_email_send"] est False, retourne True directement.
    """
    try:
        if settings is not None and settings.get("confirm_before_any_email_send", True) is False:
            return True
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QTextEdit, QDialogButtonBox, QWidget, QHBoxLayout
        import os
        dlg = QDialog()
        dlg.setWindowTitle("Confirmer l'envoi de l'email")
        v = QVBoxLayout(dlg)
        row1 = QWidget(); h1 = QHBoxLayout(row1); h1.setContentsMargins(0,0,0,0)
        to_display = _stringify_recipients(to_addr)
        cc_display = _stringify_recipients(cc)
        bcc_display = _stringify_recipients(bcc)
        h1.addWidget(QLabel(f"À : <b>{to_display}</b>"))
        if cc_display:
            h1.addWidget(QLabel(f"Cc : <i>{cc_display}</i>"))
        if bcc_display:
            h1.addWidget(QLabel(f"Bcc : <i>{bcc_display}</i>"))
        v.addWidget(row1)
        v.addWidget(QLabel(f"Objet : <b>{subject or ''}</b>"))
        if attachment_path:
            v.addWidget(QLabel(f"Pièce jointe : {os.path.basename(attachment_path)}"))
        v.addWidget(QLabel("Message :"))
        te = QTextEdit(); te.setReadOnly(True); te.setPlainText(body or ""); te.setFixedHeight(220)
        v.addWidget(te)
        btns = QDialogButtonBox(QDialogButtonBox.Cancel | QDialogButtonBox.Ok)
        btns.button(QDialogButtonBox.Ok).setText("Envoyer")
        btns.button(QDialogButtonBox.Cancel).setText("Annuler")
        btns.accepted.connect(dlg.accept); btns.rejected.connect(dlg.reject)
        v.addWidget(btns)
        return dlg.exec_() == QDialog.Accepted
    except Exception:
        # En cas d'erreur d'UI, par sécurité on NE PASSE PAS l'envoi
        return False
def send_email_with_attachment(settings, to_addr, subject, body, attachment_path=None, cc=None, bcc=None) -> bool:
    try:
        # Confirmation d\'envoi
        if not confirm_email_send(settings, to_addr, subject, body, attachment_path, cc=cc, bcc=bcc):
            return False
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port)
            server.ehlo()
            if settings.get("smtp_tls", True):
                server.starttls()
                server.ehlo()
        user = settings.get("smtp_user",""); pwd=settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        msg = MIMEMultipart()
        from email.utils import formataddr  # si pas déjà importé
        # From = "ENTREPRISE_NOM" <smtp_user>
        display_name = (settings.get("entreprise_nom") or settings.get("smtp_user","")).strip()
        smtp_user    = (settings.get("smtp_user","")).strip()
        from_header  = formataddr((display_name, smtp_user)) if smtp_user else (settings.get("entreprise_mail") or display_name)
        msg["From"]  = from_header
        # Reply-To = ENTREPRISE_MAIL si différent
        reply_to = (settings.get("entreprise_mail","") or "").strip()
        if reply_to and smtp_user and reply_to.lower() != smtp_user.lower():
            msg["Reply-To"] = reply_to
        to_header, to_recipients = _normalize_email_recipients(to_addr)
        cc_header, cc_recipients = _normalize_email_recipients(cc)
        bcc_header, bcc_recipients = _normalize_email_recipients(bcc)
        msg["To"] = ", ".join(to_header) if to_header else ", ".join(_coerce_recipient_values(to_addr))
        msg["Subject"] = subject
        if cc_header:
            msg["Cc"] = ", ".join(cc_header)
        if bcc_header:
            msg["Bcc"] = ", ".join(bcc_header)
        alt = MIMEMultipart("alternative")
        alt.attach(MIMEText(body, "plain", "utf-8"))
        try:
            import html as _html
            html_body = _html.escape(body).replace("\n", "<br>")
        except Exception:
            html_body = body.replace("\n", "<br>")
        logo_path = (settings.get("logo_local") or "").strip()
        logo_cid = "logoimg"
        if logo_path and os.path.exists(logo_path) and logo_path in body:
            html_body = html_body.replace(logo_path, f'<img src="cid:{logo_cid}" alt="logo" />')
            try:
                from email.mime.image import MIMEImage
                with open(logo_path, "rb") as _lf:
                    img = MIMEImage(_lf.read())
                img.add_header("Content-ID", f"<{logo_cid}>")
                img.add_header("Content-Disposition", "inline")
                msg.attach(img)
            except Exception:
                pass
        alt.attach(MIMEText(html_body, "html", "utf-8"))
        msg.attach(alt)
        if attachment_path and os.path.exists(attachment_path):
            part = MIMEBase("application","octet-stream")
            with open(attachment_path,"rb") as f: part.set_payload(f.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(attachment_path)}")
            msg.attach(part)
        recipients = list(dict.fromkeys(to_recipients + cc_recipients + bcc_recipients))
        if not recipients:
            recipients = [addr for addr in _coerce_recipient_values(to_addr) if addr]
        server.send_message(msg, to_addrs=recipients); server.quit(); return True
    except Exception:
        log_error("send_email_with_attachment\n"+__import__('traceback').format_exc()); return False
def test_smtp(settings)->str:
    try:
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port); server.ehlo()
            if settings.get("smtp_tls", True): server.starttls(); server.ehlo()
        user = settings.get("smtp_user",""); pwd=settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        server.quit(); return "Connexion SMTP OK"
    except Exception as e:
        log_error("test_smtp\n"+__import__('traceback').format_exc()); return f"Erreur SMTP: {e}"
# =============== TPE Operation helpers (idempotent) ===============
### _ops_helpers_begin
def _slugify(txt:str)->str:
    try:
        import re, unicodedata
        s = str(txt or "").strip().lower()
        s = unicodedata.normalize("NFKD", s)
        s = "".join(c for c in s if not unicodedata.combining(c))
        s = re.sub(r"[^a-z0-9]+", "-", s)
        s = re.sub(r"-{2,}", "-", s).strip("-")
        return s or "client"
    except Exception:
        return "client"
def _op_compute_operation_id(doc:dict, kind:str)->str:
    '''
    Returns the operation ID (devis number). For a facture, try to locate the source devis
    by scanning 'converted_to_facture' in devis CSV. Fallback to facture number if not found.
    '''
    try:
        if (kind or "").startswith("dev"):
            return str(doc.get("numero") or doc.get("num") or "").strip()
        # facture:
        fac_num = str(doc.get("numero") or "").strip()
        # 1) explicit field if present
        dev_origin = (doc.get("devis_origin") or "").strip()
        if dev_origin:
            return dev_origin
        # 2) search devis CSV mapping
        try:
            devs = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            for r in devs:
                if (r.get("converted_to_facture") or "").strip() == fac_num:
                    return str(r.get("numero") or "").strip()
        except Exception:
            pass
        # 3) fallback to facture number
        return fac_num
    except Exception:
        return str(doc.get("numero") or "").strip()
def _op_base_dir_from_doc(doc:dict, kind:str)->str:
    try:
        num_op = _op_compute_operation_id(doc, kind)
        y = ""
        try:
            y = str(date.fromisoformat(str(doc.get("date",""))).year)
        except Exception:
            try:
                d = str(doc.get("date",""))
                if "/" in d and len(d.split("/")[2])==4:
                    y = d.split("/")[2]
                else:
                    y = str(date.today().year)
            except Exception:
                y = str(date.today().year)
        client_slug = _slugify(doc.get("client_nom","") or doc.get("client","") or "")
        base = os.path.join(DATA_DIR, "ops", f"{y}-{num_op}-{client_slug}")
        return base
    except Exception:
        return os.path.join(DATA_DIR, "ops", "unknown")
def _op_ensure_dirs_for_doc(doc:dict, kind:str)->str:
    '''
    Ensure full operation folder structure exists; return base dir.
    Also ensure achats.csv header if file is new.
    '''
    try:
        base = _op_base_dir_from_doc(doc, kind)
        sub = [
            "01_devis", "02_factures", "03_achats", "04_docs", "05_photos",
            "mail", os.path.join("admin")
        ]
        for s in sub:
            p = os.path.join(base, s)
            os.makedirs(p, exist_ok=True)
        achats_csv = os.path.join(base, "admin", "achats.csv")
        if not os.path.exists(achats_csv):
            try:
                with open(achats_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        devis_csv = os.path.join(base, "admin", "devis_fournisseurs.csv")
        if not os.path.exists(devis_csv):
            try:
                with open(devis_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        return base
    except Exception:
        return os.path.join(DATA_DIR, "ops")
def _open_folder_cross(path:str):
    try:
        if not path:
            return
        os.makedirs(path, exist_ok=True)
        if sys.platform.startswith('win'):
            import subprocess
            try:
                subprocess.Popen(['explorer', path])
            except Exception:
                try:
                    os.startfile(path)
                except Exception:
                    pass
        elif sys.platform == 'darwin':
            import subprocess
            subprocess.Popen(['open', path])
        else:
            import subprocess
            subprocess.Popen(['xdg-open', path])
    except Exception:
        try:
            import traceback
            log_error('_open_folder_cross\n' + traceback.format_exc())
        except Exception:
            pass
def _unique_target(dst_dir:str, name:str)->str:
    try:
        base, ext = os.path.splitext(name)
        cand = os.path.join(dst_dir, name)
        i = 2
        while os.path.exists(cand):
            cand = os.path.join(dst_dir, f"{base}_{i}{ext}")
            i += 1
        return cand
    except Exception:
        return os.path.join(dst_dir, name)
def _op_store_pdf(kind:str, doc:dict, pdf_path:str)->str:
    """
    Copy a generated PDF into ops/01_devis or ops/02_factures — but only if needed.
    Rule:
      • If this business content (fingerprint of `doc`) already exists in the folder, skip.
      • Else copy to a unique filename. Update an index file (.ops_pdf_hash.json).
    Backward compatible with previous index format.
    """
    try:
        import json, hashlib
        if not pdf_path or not os.path.exists(pdf_path):
            return ""
        # 1) Prepare destination
        base = _op_ensure_dirs_for_doc(doc, kind)
        sub = "01_devis" if (kind or "").startswith("dev") else "02_factures"
        dst_dir = os.path.join(base, sub)
        os.makedirs(dst_dir, exist_ok=True)
        # 2) Business fingerprint from doc (order-stable JSON)
        try:
            payload = json.dumps(doc or {}, sort_keys=True, ensure_ascii=False, default=str)
        except Exception:
            try:
                if isinstance(doc, dict):
                    items = sorted((str(k), str(doc.get(k))) for k in doc.keys())
                    payload = "|".join(f"{k}={v}" for k,v in items)
                else:
                    payload = str(doc)
            except Exception:
                payload = str(doc)
        current_fp = hashlib.sha256(payload.encode("utf-8","ignore")).hexdigest()
        # 3) Load index
        idx_path = os.path.join(dst_dir, ".ops_pdf_hash.json")
        try:
            with open(idx_path, "r", encoding="utf-8") as f:
                idx = json.load(f)
            if not isinstance(idx, dict):
                idx = {}
        except Exception:
            idx = {}
        by_hash = idx.get("_by_hash", {})
        if not isinstance(by_hash, dict):
            by_hash = {}
        key_name = os.path.basename(pdf_path)
        # 4) Skip if an entry for this content already exists and the file is present
        try:
            existing = by_hash.get(current_fp, "")
            if existing:
                full = os.path.join(dst_dir, existing)
                if os.path.exists(full):
                    return ""  # already stored this content
        except Exception:
            pass
        # Also skip if same-named file exists AND index says unchanged
        try:
            if idx.get(key_name, "") == current_fp:
                same_path = os.path.join(dst_dir, key_name)
                if os.path.exists(same_path):
                    return ""
        except Exception:
            pass
        # 5) Copy to a unique target
        dst = _unique_target(dst_dir, os.path.basename(pdf_path))
        import shutil as _sh
        try:
            _sh.copy2(pdf_path, dst)
        except Exception:
            try:
                with open(pdf_path, "rb") as _src, open(dst, "wb") as _dst:
                    _dst.write(_src.read())
            except Exception:
                # as a last resort, abort without crashing UI
                return ""
        # 6) Update index
        idx[key_name] = current_fp
        by_hash[current_fp] = os.path.basename(dst)
        idx["_by_hash"] = by_hash
        try:
            with open(idx_path, "w", encoding="utf-8") as f:
                json.dump(idx, f, ensure_ascii=False, indent=2)
        except Exception:
            pass
        return dst
    except Exception:
        try:
            log_error("_op_store_pdf\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return ""
def _op_mail_attachments(base_dir:str)->list:
    '''Return list of files inside <base_dir>/mail suitable as attachments.'''
    outs = []
    try:
        mdir = os.path.join(base_dir, "mail")
        if os.path.isdir(mdir):
            for n in os.listdir(mdir):
                p = os.path.join(mdir, n)
                if os.path.isfile(p):
                    outs.append(p)
    except Exception:
        pass
    return outs
def send_email_with_attachments(settings, to_addr, subject, body, attachments:list, cc=None, bcc=None)->bool:
    '''
    Multi-attachments sender. Reuses confirm_email_send (main PDF shown).
    Falls back to single-attachment function if needed.
    '''
    try:
        main_attach = attachments[0] if attachments else None
        if not confirm_email_send(settings, to_addr, subject, body, main_attach, cc=cc, bcc=bcc):
            return False
        if (len(attachments) <= 1) and callable(globals().get("send_email_with_attachment")):
            return globals()["send_email_with_attachment"](settings, to_addr, subject, body, main_attach, cc=cc, bcc=bcc)
        use_ssl = bool(settings.get("smtp_ssl", False))
        host = settings.get("smtp_host",""); port = int(settings.get("smtp_port",465 if use_ssl else 587))
        if use_ssl:
            server = smtplib.SMTP_SSL(host, port)
        else:
            server = smtplib.SMTP(host, port); server.ehlo()
            if settings.get("smtp_tls", True):
                server.starttls(); server.ehlo()
        user = settings.get("smtp_user",""); pwd = settings.get("smtp_pass","")
        if user: server.login(user, pwd)
        msg = MIMEMultipart()
        from email.utils import formataddr
        display_name = (settings.get("entreprise_nom") or settings.get("smtp_user","")).strip()
        smtp_user    = (settings.get("smtp_user","")).strip()
        from_header  = formataddr((display_name, smtp_user)) if smtp_user else (settings.get("entreprise_mail") or display_name)
        msg["From"]  = from_header
        reply_to = (settings.get("entreprise_mail","") or "").strip()
        if reply_to and smtp_user and reply_to.lower() != smtp_user.lower():
            msg["Reply-To"] = reply_to
        to_header, to_recipients = _normalize_email_recipients(to_addr)
        cc_header, cc_recipients = _normalize_email_recipients(cc)
        bcc_header, bcc_recipients = _normalize_email_recipients(bcc)
        msg["To"] = ", ".join(to_header) if to_header else ", ".join(_coerce_recipient_values(to_addr))
        msg["Subject"] = subject
        if cc_header:
            msg["Cc"] = ", ".join(cc_header)
        if bcc_header:
            msg["Bcc"] = ", ".join(bcc_header)
        alt = MIMEMultipart("alternative")
        alt.attach(MIMEText(body, "plain", "utf-8"))
        try:
            import html as _html
            html_body = _html.escape(body).replace("\n", "<br>")
        except Exception:
            html_body = body.replace("\n", "<br>")
        logo_path = (settings.get("logo_local") or "").strip()
        logo_cid = "logoimg"
        if logo_path and os.path.exists(logo_path) and logo_path in body:
            html_body = html_body.replace(logo_path, f'<img src="cid:{logo_cid}" alt="logo" />')
            try:
                from email.mime.image import MIMEImage
                with open(logo_path, "rb") as _lf:
                    img = MIMEImage(_lf.read())
                img.add_header("Content-ID", f"<{logo_cid}>")
                img.add_header("Content-Disposition", "inline")
                msg.attach(img)
            except Exception:
                pass
        alt.attach(MIMEText(html_body, "html", "utf-8"))
        msg.attach(alt)
        for p in (attachments or []):
            try:
                if not p or (not os.path.exists(p)): 
                    continue
                part = MIMEBase("application","octet-stream")
                with open(p,"rb") as f: part.set_payload(f.read())
                encoders.encode_base64(part)
                part.add_header("Content-Disposition", f'attachment; filename="{os.path.basename(p)}"')
                msg.attach(part)
            except Exception:
                pass
        recipients = list(dict.fromkeys(to_recipients + cc_recipients + bcc_recipients))
        if not recipients:
            recipients = [addr for addr in _coerce_recipient_values(to_addr) if addr]
        server.send_message(msg, to_addrs=recipients); server.quit(); return True
    except Exception as e:
        try:
            log_error("send_email_with_attachments\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return False
def _ops_send_and_store_wrapper(settings, kind, doc, pdf_path, to, subject, body, cc=None, bcc=None)->bool:
    '''
    Copy the PDF into the operation folder (01_devis/ or 02_factures/),
    propose adding files from 'mail/' as extra attachments, then send.
    '''
    try:
        base = _op_ensure_dirs_for_doc(doc, kind)
        try:
            _op_store_pdf(kind, doc, pdf_path)
        except Exception:
            pass
        att = [p for p in [pdf_path] if p and os.path.exists(p)]
        try:
            mfiles = _op_mail_attachments(base)
            if mfiles:
                from PyQt5.QtWidgets import QMessageBox
                if QMessageBox.question(None, "Pièces jointes", 
                                        f"Ajouter {len(mfiles)} fichier(s) du dossier 'mail/' à l’e-mail ?",
                                        QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                    att.extend(mfiles)
        except Exception:
            pass
        fn = globals().get("send_email_with_attachments")
        if callable(fn):
            return fn(settings, to, subject, body, att, cc=cc, bcc=bcc)
        return globals().get("send_email_with_attachment")(settings, to, subject, body, att[0] if att else None, cc=cc, bcc=bcc)
    except Exception:
        try:
            log_error("_ops_send_and_store_wrapper\n"+__import__('traceback').format_exc())
        except Exception:
            pass
        return False
def _op_open_current_folder_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        _open_folder_cross(base)
    except Exception:
        try:
            log_error("_op_open_current_folder_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass
def _op_add_files_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        target = os.path.join(base, "04_docs")
        from PyQt5.QtWidgets import QFileDialog, QMessageBox
        files, _ = QFileDialog.getOpenFileNames(tab_obj, "Ajouter des pièces…", "", "Tous fichiers (*.*)")
        if not files:
            return
        os.makedirs(target, exist_ok=True)
        copied = 0
        import shutil as _sh
        for f in files:
            try:
                name = os.path.basename(f)
                dst = _unique_target(target, name)
                _sh.copy2(f, dst)
                copied += 1
            except Exception:
                pass
        QMessageBox.information(tab_obj, "Pièces", f"{copied} fichier(s) copié(s) dans 04_docs.")
    except Exception:
        try:
            log_error("_op_add_files_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass
def _op_add_achat_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        achats_csv = os.path.join(base, "admin", "achats.csv")
        piece_dir  = os.path.join(base, "03_achats")
        os.makedirs(piece_dir, exist_ok=True)
        # --- mini form dialog ---
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QFormLayout, QDialogButtonBox, QDateEdit, QLineEdit, QDoubleSpinBox, QPushButton, QWidget, QHBoxLayout, QFileDialog, QMessageBox
        from PyQt5 import QtCore as _QtCore
        dlg = QDialog(tab_obj); dlg.setWindowTitle("Ajouter un achat"); v = QVBoxLayout(dlg); form = QFormLayout()
        de = QDateEdit(_QtCore.QDate.currentDate()); de.setDisplayFormat("dd/MM/yyyy"); de.setCalendarPopup(True)
        ed_fourn = QLineEdit(); ed_obj = QLineEdit()
        sp_ht = QDoubleSpinBox(); sp_ht.setDecimals(2); sp_ht.setMaximum(1e9); sp_ht.setValue(0.00)
        sp_tva = QDoubleSpinBox(); sp_tva.setDecimals(2); sp_tva.setSuffix(" %"); sp_tva.setMaximum(100.0)
        try:
            sp_tva.setValue(float((tab_obj.settings or {}).get("tva", 0.2))*100.0)
        except Exception:
            sp_tva.setValue(20.0)
        # Piece jointe optional
        piece_path = {"val": ""}
        def pick_piece():
            f, _ = QFileDialog.getOpenFileName(dlg, "Joindre une pièce (optionnel)…", "", "Tous fichiers (*.*)")
            if f:
                piece_path["val"] = f
        row_piece = QWidget(); h = QHBoxLayout(row_piece); h.setContentsMargins(0,0,0,0)
        btn_piece = QPushButton("Joindre une pièce…"); btn_piece.clicked.connect(pick_piece); h.addWidget(btn_piece)
        form.addRow("Date", de); form.addRow("Fournisseur", ed_fourn); form.addRow("Objet", ed_obj)
        form.addRow("Montant HT (€)", sp_ht); form.addRow("TVA (%)", sp_tva); form.addRow("Pièce jointe", row_piece)
        v.addLayout(form)
        bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
        if dlg.exec_() != QDialog.Accepted:
            return
        # Compute
        try:
            d = de.date().toString("yyyy-MM-dd")
        except Exception:
            d = date.today().isoformat()
        ht = float(sp_ht.value()); tva_p = float(sp_tva.value()); tva = tva_p/100.0
        ttc = round(ht * (1.0 + tva), 2)
        # Copy piece if any
        docname = os.path.basename(piece_path["val"]) if piece_path["val"] else ""
        if piece_path["val"]:
            try:
                dst = _unique_target(piece_dir, os.path.basename(piece_path["val"]))
                shutil.copy2(piece_path["val"], dst)
                docname = os.path.basename(dst)
            except Exception:
                pass
        # Append to achats.csv
        try:
            with open(achats_csv, "a", encoding="utf-8-sig", newline="") as f:
                w = csv.writer(f, delimiter=",")
                w.writerow([d, ed_fourn.text().strip(), ed_obj.text().strip(), f"{ht:.2f}", f"{tva:.2f}", f"{ttc:.2f}", docname])
        except Exception:
            log_error("append_achats_csv\n"+__import__('traceback').format_exc())
        QMessageBox.information(tab_obj, "Achat", "Ligne ajoutée.")
    except Exception:
        try:
            log_error("_op_add_achat_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass

def _op_add_devis_fournisseur_for_tab(tab_obj, kind:str, numero=None):
    try:
        numero = numero if numero is not None else getattr(tab_obj, "selected", lambda: None)()
        if not numero:
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.information(tab_obj, "Info", "Sélectionnez une ligne.")
            return
        doc = assemble_doc("devis" if (kind or "").startswith("dev") else "facture", numero)
        base = _op_ensure_dirs_for_doc(doc, kind)
        devis_csv = os.path.join(base, "admin", "devis_fournisseurs.csv")
        piece_dir = os.path.join(base, "01_devis", "fournisseurs")
        os.makedirs(piece_dir, exist_ok=True)
        if not os.path.exists(devis_csv):
            try:
                with open(devis_csv, "w", encoding="utf-8-sig", newline="") as f:
                    w = csv.writer(f, delimiter=",")
                    w.writerow(["date","fournisseur","objet","montant_ht","tva","montant_ttc","doc"])
            except Exception:
                pass
        from PyQt5.QtWidgets import QDialog, QVBoxLayout, QFormLayout, QDialogButtonBox, QDateEdit, QLineEdit, QDoubleSpinBox, QPushButton, QWidget, QHBoxLayout, QFileDialog, QMessageBox
        from PyQt5 import QtCore as _QtCore
        dlg = QDialog(tab_obj); dlg.setWindowTitle("Ajouter un devis"); v = QVBoxLayout(dlg); form = QFormLayout()
        de = QDateEdit(_QtCore.QDate.currentDate()); de.setDisplayFormat("dd/MM/yyyy"); de.setCalendarPopup(True)
        ed_fourn = QLineEdit(); ed_obj = QLineEdit()
        sp_ht = QDoubleSpinBox(); sp_ht.setDecimals(2); sp_ht.setMaximum(1e9); sp_ht.setValue(0.00)
        sp_tva = QDoubleSpinBox(); sp_tva.setDecimals(2); sp_tva.setSuffix(" %"); sp_tva.setMaximum(100.0)
        try:
            sp_tva.setValue(float((tab_obj.settings or {}).get("tva", 0.2))*100.0)
        except Exception:
            sp_tva.setValue(20.0)
        piece_path = {"val": ""}
        def pick_piece():
            f, _ = QFileDialog.getOpenFileName(dlg, "Joindre une pièce (optionnel)…", "", "Tous fichiers (*.*)")
            if f:
                piece_path["val"] = f
        row_piece = QWidget(); h = QHBoxLayout(row_piece); h.setContentsMargins(0,0,0,0)
        btn_piece = QPushButton("Joindre une pièce…"); btn_piece.clicked.connect(pick_piece); h.addWidget(btn_piece)
        form.addRow("Date", de); form.addRow("Fournisseur", ed_fourn); form.addRow("Objet", ed_obj)
        form.addRow("Montant HT (€)", sp_ht); form.addRow("TVA (%)", sp_tva); form.addRow("Pièce jointe", row_piece)
        v.addLayout(form)
        bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
        if dlg.exec_() != QDialog.Accepted:
            return
        try:
            d = de.date().toString("yyyy-MM-dd")
        except Exception:
            d = date.today().isoformat()
        ht = float(sp_ht.value()); tva_p = float(sp_tva.value()); tva = tva_p/100.0
        ttc = round(ht * (1.0 + tva), 2)
        docname = os.path.basename(piece_path["val"]) if piece_path["val"] else ""
        if piece_path["val"]:
            try:
                dst = _unique_target(piece_dir, os.path.basename(piece_path["val"]))
                shutil.copy2(piece_path["val"], dst)
                docname = os.path.basename(dst)
            except Exception:
                pass
        try:
            with open(devis_csv, "a", encoding="utf-8-sig", newline="") as f:
                w = csv.writer(f, delimiter=",")
                w.writerow([d, ed_fourn.text().strip(), ed_obj.text().strip(), f"{ht:.2f}", f"{tva:.2f}", f"{ttc:.2f}", docname])
        except Exception:
            log_error("append_devis_fournisseur_csv\n"+__import__('traceback').format_exc())
        QMessageBox.information(tab_obj, "Devis fournisseur", "Ligne ajoutée.")
    except Exception:
        try:
            log_error("_op_add_devis_fournisseur_for_tab\n"+__import__('traceback').format_exc())
        except Exception:
            pass

### _ops_helpers_end
# ---------------- UI helpers ----------------
def apply_table_header_theme(table:QTableWidget, hex_color:str):
    if not hex_color or not hex_color.startswith("#"): hex_color="#0A84FF"
    style = "QHeaderView::section{background-color:%s;color:white;font-weight:bold;padding:4px;border:0px;}"%hex_color
    table.setStyleSheet(style)
# ---------------- Dialogs ----------------
class SimpleClientDialog(QDialog):
    def __init__(self, parent=None, initial=None):
        super().__init__(parent); self.setWindowTitle("Client"); self.resize(450, 320)
        v = QVBoxLayout(self); form = QFormLayout()
        self.cb_civ=QComboBox(); self.cb_civ.addItems(["Monsieur","Madame","—"])
        self.ed_nom=QLineEdit(initial.get("Nom","") if initial else "")
        self.ed_prenom=QLineEdit("")
        self.ed_mail=QLineEdit(initial.get("Email","") if initial else "")
        self.ed_tel=QLineEdit(initial.get("Telephone","") if initial else "")
        self.ed_addr=QLineEdit(initial.get("Adresse","") if initial else "")
        self.ed_cp=QLineEdit(initial.get("CodePostal","") if initial else "")
        self.ed_ville=QLineEdit(initial.get("Ville","") if initial else "")
        self.ed_siret=QLineEdit(initial.get("SIRET","") if initial else "")
        # Init civilité (default "Monsieur" at index 0)
        try:
            civmap = _load_civilite_map()
            init_key = (initial.get("Email") if initial else "") or (initial.get("Nom") if initial else "")
            civ = civmap.get(init_key,"")
            if not civ:
                nm = (initial.get("Nom") if initial else "") or ""
                if nm.startswith("M. "): civ="M."
                elif nm.startswith("Mme "): civ="Mme"
            if civ=="Mme": self.cb_civ.setCurrentIndex(1)
            elif civ=="—" or civ=="": self.cb_civ.setCurrentIndex(2)
            else: self.cb_civ.setCurrentIndex(0)
        except Exception:
            pass
        # Préremplir Prénom + mémoriser la clé initiale
        try:
            self._initial_key = (initial.get("Email") if initial else "") or (initial.get("Nom") if initial else "")
            if self._initial_key:
                _pn = _load_prenom_map().get(self._initial_key, "")
                if _pn:
                    self.ed_prenom.setText(_pn)
        except Exception:
            pass
        form.addRow("Genre", self.cb_civ)
        form.addRow("Nom", self.ed_nom)
        form.addRow("Prénom", self.ed_prenom); form.addRow("Email", self.ed_mail); form.addRow("Téléphone", self.ed_tel)
        form.addRow("Adresse", self.ed_addr); form.addRow("Code Postal", self.ed_cp); form.addRow("Ville", self.ed_ville)
        form.addRow("SIRET", self.ed_siret)
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        bb = QDialogButtonBox(QDialogButtonBox.Save|QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(self.accept); bb.rejected.connect(self.reject)
    def values(self):
        vals = {
            "Nom": self.ed_nom.text().strip(),
            "Email": self.ed_mail.text().strip(),
            "Telephone": self.ed_tel.text().strip(),
            "Adresse": self.ed_addr.text().strip(),
            "CodePostal": self.ed_cp.text().strip(),
            "Ville": self.ed_ville.text().strip(),
            "SIRET": self.ed_siret.text().strip()
        }
        # Sidecars JSON : Prénom & Civilité (déplacement si la clé change)
        try:
            new_key = vals.get("Email") or vals.get("Nom")
            old_key = getattr(self, "_initial_key", "") or ""
            ptxt = self.ed_prenom.text().strip() if hasattr(self, "ed_prenom") else ""
            m = _load_prenom_map()
            if new_key:
                if ptxt:
                    m[new_key] = ptxt
                    if old_key and old_key != new_key:
                        m.pop(old_key, None)
                else:
                    if old_key and old_key != new_key and old_key in m and new_key not in m:
                        m[new_key] = m.pop(old_key)
            _save_prenom_map(m)
        except Exception:
            log_error("save_prenom_ui\n"+__import__('traceback').format_exc())
        try:
            new_key = vals.get("Email") or vals.get("Nom")
            old_key = getattr(self, "_initial_key", "") or ""
            choice = (self.cb_civ.currentText() if hasattr(self,"cb_civ") else "—")
            civ = "M." if choice.startswith("Monsieur") else ("Mme" if choice.startswith("Madame") else "—")
            mc = _load_civilite_map()
            if new_key:
                mc[new_key] = civ
                if old_key and old_key != new_key:
                    mc.pop(old_key, None)
            _save_civilite_map(mc)
        except Exception:
            import traceback
            log_error("values_upsert_master\n" + traceback.format_exc())
        return vals
    def get_values(self):
        # Backward-compat alias for older call sites
        return self.values()
class CataloguePicker(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent); self.setWindowTitle("Catalogue"); self.resize(700, 500)
        v=QVBoxLayout(self)
        top=QHBoxLayout(); self.search=QLineEdit(); self.search.setPlaceholderText("Rechercher..."); top.addWidget(self.search)
        v.addLayout(top)
        self.table=QTableWidget(0,7); self.table.setHorizontalHeaderLabels(["ID","Réf","Type","Désignation","Prix HT","TVA %","Unité"])
        ### _catalogue_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        # --- Wrap long 'Désignation' texts in table cells ---
        try:
            # Allow multi-line paint + never elide text with '…'
            self.table.setWordWrap(True)
            from PyQt5.QtCore import Qt as _Qt
            self.table.setTextElideMode(_Qt.ElideNone)
            # Use wrap-aware delegate for the 'Désignation' column (index 3)
            try:
                self.table.setItemDelegateForColumn(3, _WrapItemDelegate(self.table))
            except Exception:
                pass
            # Auto height to fit content
            self.table.verticalHeader().setSectionResizeMode(_QHV.ResizeToContents)
        except Exception:
            pass
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        v.addWidget(self.table)
        bb=QDialogButtonBox(QDialogButtonBox.Ok|QDialogButtonBox.Cancel); v.addWidget(bb)
        bb.accepted.connect(self.accept); bb.rejected.connect(self.reject)
        self.load()
        self.search.textChanged.connect(self.apply_filter)
    def load(self):
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
        self.table.setRowCount(0)
        for it in self.rows:
            r=self.table.rowCount(); self.table.insertRow(r)
            vals=[it.get("ID",""), it.get("Reference",""), it.get("Type",""), it.get("Designation",""),
                  f"{_safe_float(it.get('Prix_HT',0)):.2f}", f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}%", it.get("Unite","")]
            for c,v in enumerate(vals): self.table.setItem(r,c,QTableWidgetItem(str(v)))
        try:
            self.table.resizeRowsToContents()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.search.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens)
    def selected_item(self):
        try:
            sel = self.table.selectedItems()
            # Default to first row when no explicit selection is made
            row = sel[0].row() if sel else (0 if self.table.rowCount() > 0 else -1)
            if row < 0:
                return None
            return self.rows[row]
        except Exception:
            try:
                r = getattr(self.table, 'currentRow', lambda: -1)()
                if r is not None and r >= 0 and r < len(self.rows):
                    return self.rows[r]
            except Exception:
                pass
            return None
class LinesEditor(QWidget):
    linesChanged = QtCore.pyqtSignal(list, float, float, float)
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        # Inputs quick add
        
        ### _labels_row  (grid-aligned with input row)
        from PyQt5.QtWidgets import QGridLayout
        grid = QGridLayout()
        grid.setHorizontalSpacing(8)
        grid.setVerticalSpacing(4)
        # Inputs quick add (widgets)
        self.ed_ref=QLineEdit(); self.ed_ref.setPlaceholderText("Réf")
        self.ed_des=QLineEdit(); self.ed_des.setPlaceholderText("Désignation")
        self.cmb_type=QComboBox(); self.cmb_type.addItems(['Pièces','Main d’œuvre','Titre','Sous-titre','Texte','Espace'])
        self.ed_qte=QLineEdit(); self.ed_qte.setPlaceholderText("Qté"); self.ed_qte.setFixedWidth(70)
        self.ed_pu=QLineEdit(); self.ed_pu.setPlaceholderText("PU HT"); self.ed_pu.setFixedWidth(90)
        self.ed_tva=QLineEdit(); self.ed_tva.setPlaceholderText("TVA %"); self.ed_tva.setFixedWidth(70)
        btn_add=QPushButton("Ajouter"); btn_cat=QPushButton("Catalogue…")
        # Labels (row 0)
        grid.addWidget(QLabel("Réf"),          0, 0)
        grid.addWidget(QLabel("Désignation"),  0, 1)
        grid.addWidget(QLabel("Type"),         0, 2)
        grid.addWidget(QLabel("Qté"),          0, 3)
        grid.addWidget(QLabel("PU HT"),        0, 4)
        grid.addWidget(QLabel("TVA %"),        0, 5)
        grid.addWidget(QWidget(),              0, 6)  # spacer for buttons col
        # Inputs (row 1)
        grid.addWidget(self.ed_ref,  1, 0)
        grid.addWidget(self.ed_des,  1, 1)
        grid.addWidget(self.cmb_type,1, 2)
        grid.addWidget(self.ed_qte,  1, 3)
        grid.addWidget(self.ed_pu,   1, 4)
        grid.addWidget(self.ed_tva,  1, 5)
        grid.addWidget(btn_add,      1, 6)
        grid.addWidget(btn_cat,      1, 7)
        # Stretches: Désignation takes 2x
        grid.setColumnStretch(0, 0)
        grid.setColumnStretch(1, 2)
        grid.setColumnStretch(2, 0)
        grid.setColumnStretch(3, 0)
        grid.setColumnStretch(4, 0)
        grid.setColumnStretch(5, 0)
        grid.setColumnStretch(6, 0)
        grid.setColumnStretch(7, 0)
        v.addLayout(grid)
        # Table
        self.table=QTableWidget(0,7); self.table.setHorizontalHeaderLabels(["Réf","Désignation","Type","Qté","PU HT","TVA %","Total HT"])
        ### _lines_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.Stretch)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        self.table.setSelectionBehavior(QTableWidget.SelectRows)
        v.addWidget(self.table)
        # Foot totals
        foot=QHBoxLayout()
        self.lbl_ht=QLabel("Sous-total HT : 0.00 €")
        self.lbl_tva=QLabel("TVA : 0.00 €")
        self.lbl_ttc=QLabel("Total TTC : 0.00 €")
        btn_del=QPushButton("Supprimer")
        foot.addWidget(self.lbl_ht); foot.addWidget(self.lbl_tva); foot.addWidget(self.lbl_ttc); foot.addStretch(1); foot.addWidget(btn_del)
        v.addLayout(foot)
        btn_add.clicked.connect(self.add_line)
        btn_cat.clicked.connect(self.add_from_catalogue)
        btn_del.clicked.connect(self.del_sel)
        self.table.itemChanged.connect(self.recompute)
    def add_from_catalogue(self):
        dlg=CataloguePicker(self)
        if dlg.exec_()==QDialog.Accepted:
            it = dlg.selected_item()
            if not it: return
            self.ed_ref.setText(it.get("Reference",""))
            self.ed_des.setText(it.get("Designation",""))
            self.cmb_type.setCurrentText(it.get("Type","Pièces") or "Pièces")
            self.ed_qte.setText("1")
            self.ed_pu.setText(f"{_safe_float(it.get('Prix_HT',0)):.2f}")
            self.ed_tva.setText(f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}")
    def add_line(self):
        typ = self.cmb_type.currentText()
        if (typ or '').strip() == 'Espace':
            des = ''
        else:
            des = self.ed_des.text().strip()
            if not des:
                return
            if (typ or '').strip() == 'Texte' and not des.lstrip().startswith('•'):
                des = '• ' + des
        ref = self.ed_ref.text().strip()
        qte=_safe_float(self.ed_qte.text(),1)
        pu=_safe_float(self.ed_pu.text(),0.0)
        tva=_safe_float(self.ed_tva.text(), 20.0)/100.0
        tot=qte*pu
        row=self.table.rowCount()
        self.table.blockSignals(True)
        self.table.insertRow(row)
        # Remplissage des cellules : vide pour paragraphes
        if (typ or '').strip().lower() in ('titre','sous-titre','texte','espace'):
            values = [ref, des, typ, "", "", "", ""]
        else:
            values = [ref, des, typ, f"{qte:.2f}", f"{pu:.2f}", f"{int(round(tva*100))}", f"{tot:.2f}"]
        for c, val in enumerate(values):
            self.table.setItem(row,c,QTableWidgetItem(str(val)))
        self.table.blockSignals(False)
        self.recompute()
    def del_sel(self):
        rows=sorted({i.row() for i in self.table.selectedIndexes()}, reverse=True)
        self.table.blockSignals(True)
        for r in rows: self.table.removeRow(r)
        self.table.blockSignals(False)
        self.recompute()
    def lines(self):
        L=[]
        for r in range(self.table.rowCount()):
            ref = self.table.item(r,0).text() if self.table.item(r,0) else ""
            des = self.table.item(r,1).text() if self.table.item(r,1) else ""
            typ = self.table.item(r,2).text() if self.table.item(r,2) else ""
            qte = _safe_float(self.table.item(r,3).text() if self.table.item(r,3) else "1",1)
            pu  = _safe_float(self.table.item(r,4).text() if self.table.item(r,4) else "0",0)
            tva = _safe_float(self.table.item(r,5).text() if self.table.item(r,5) else "20",20)/100.0
            tot = qte * pu  # recalcul systématique
            lt = (typ or "").strip().lower()
            if lt in ("titre","sous-titre","texte","espace"):
                # non-facturable paragraph lines
                bullet = des.strip().startswith("•")
                L.append({"ref":ref,"designation":des,"type":typ,"ligne_type":lt,"bullet":bullet,"indent_mm":6.0,"qte":0.0,"pu_ht":0.0,"tva":0.0,"total_ht":0.0})
            else:
                L.append({"ref":ref,"designation":des,"type":typ,"ligne_type":"item","qte":qte,"pu_ht":pu,"tva":tva,"total_ht":tot})
        return L
    def recompute(self):
        # Recalcule chaque ligne + totaux, et met à jour la colonne "Total HT" visuellement.
        # On bloque les signaux pour éviter les boucles lors des setItem().
        self.table.blockSignals(True)
        # Recalc per-row total and update column 6
        for r in range(self.table.rowCount()):
            qte = _safe_float(self.table.item(r,3).text() if self.table.item(r,3) else "1",1)
            pu  = _safe_float(self.table.item(r,4).text() if self.table.item(r,4) else "0",0)
            tot = qte * pu
            item = self.table.item(r,6)
            if item is None:
                item = QTableWidgetItem(f"{tot:.2f}")
                self.table.setItem(r,6,item)
            else:
                item.setText(f"{tot:.2f}")
        self.table.blockSignals(False)
        # Compute totals from fresh values
        L=self.lines()
        total_ht = sum(x["total_ht"] for x in L)
        total_tva = sum(x["total_ht"]*x["tva"] for x in L)
        total_ttc = total_ht + total_tva
        self.lbl_ht.setText(f"Sous-total HT : {total_ht:.2f} €")
        self.lbl_tva.setText(f"TVA : {total_tva:.2f} €")
        self.lbl_ttc.setText(f"Total TTC : {total_ttc:.2f} €")
        self.linesChanged.emit(L, total_ht, total_tva, total_ttc)
class ClientPicker(QWidget):
    clientChanged = QtCore.pyqtSignal(dict)
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        hb=QHBoxLayout()
        self.filter=QLineEdit(); self.filter.setPlaceholderText("Rechercher client...")
        self.combo=QComboBox()
        btn_new=QPushButton("Créer…")
        hb.addWidget(self.filter,2); hb.addWidget(self.combo,1); hb.addWidget(btn_new,0)
        v.addLayout(hb)
        self.clients = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        self._rebuild("")
        self.filter.textChanged.connect(self._rebuild)
        self.combo.currentIndexChanged.connect(self._emit)
        btn_new.clicked.connect(self.create_client)
    def _rebuild(self, needle):
        needle=(needle or "").lower()
        self.combo.blockSignals(True); self.combo.clear()
        m_pn = _load_prenom_map()
        for r in self.clients:
            civ, nom_base, prenom_auto = _split_civ_name_prenom(r.get('Nom',''))
            prenom = m_pn.get(r.get('Email') or r.get('Nom')) or prenom_auto
            disp=f"{r.get('ID','')} — {nom_base} {prenom} — {r.get('Ville','')}".strip()
            if not needle or needle in disp.lower():
                self.combo.addItem(disp or "(incomplet)", r)
        self.combo.blockSignals(False)
    def _emit(self):
        r=self.combo.currentData()
        if isinstance(r,dict): self.clientChanged.emit(r)
    def current_client(self):
        r=self.combo.currentData()
        return r if isinstance(r,dict) else {}
    def create_client(self):
        dlg=SimpleClientDialog(self)
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values()
            # assign ID (CLxxxx)
            rows=load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
            import re
            mx=0
            for x in rows:
                s=(x.get("ID","") or "")
                m=re.match(r"CL(\d+)$", s)
                if m:
                    mx=max(mx, int(m.group(1)))
                elif s.isdigit():
                    mx=max(mx, int(s))
            new_id=f"CL{mx+1:04d}"
            vals["ID"]=new_id
            rows.append(vals)
            save_csv(rows["ID","Genre","Nom","Prenom","Email","Telephone","Adresse","CodePostal","Ville","SIRET"])
            self.clients=rows; self._rebuild(self.filter.text())
class QuoteDialog(QDialog):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False, enable_maitre_oeuvre:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.enable_maitre_oeuvre = bool(enable_maitre_oeuvre)
        self._maitre_oeuvre_payload = {}
        self.setWindowTitle("Nouveau devis"); self.resize(1000, 650)
        v=QVBoxLayout(self)
        grp_client=QGroupBox("Client"); fl=QFormLayout(grp_client)
        self.cp=ClientPicker(self); self.lbl_sel=QLabel("—")
        fl.addRow(self.cp); fl.addRow("Sélection :", self.lbl_sel)
        meta=QHBoxLayout()
        self.dt=QDateEdit(QtCore.QDate.currentDate()); self.dt.setDisplayFormat("dd/MM/yyyy")
        self.st=QComboBox(); self.st.addItems(STATUTS); self.st.setCurrentText("Brouillon")
        meta.addWidget(QLabel("Date :")); meta.addWidget(self.dt); meta.addSpacing(20); meta.addWidget(QLabel("Statut :")); meta.addWidget(self.st); meta.addStretch(1)
        self.le = LinesEditor(self)
        btns=QDialogButtonBox(QDialogButtonBox.Save|QDialogButtonBox.Cancel)
        v.addWidget(grp_client)
        self.mo_nom = QLineEdit()
        self.mo_email = QLineEdit()
        self.mo_tel = QLineEdit()
        grp_mo = None
        if self.enable_maitre_oeuvre:
            grp_mo = QGroupBox("Maître d'œuvre")
            fl_mo = QFormLayout(grp_mo)
            self.mo_nom.setPlaceholderText("Nom du maître d'œuvre")
            self.mo_email.setPlaceholderText("Email du maître d'œuvre")
            self.mo_tel.setPlaceholderText("Téléphone du maître d'œuvre")
            fl_mo.addRow("Nom :", self.mo_nom)
            fl_mo.addRow("Email :", self.mo_email)
            fl_mo.addRow("Téléphone :", self.mo_tel)
        else:
            for _w in (self.mo_nom, self.mo_email, self.mo_tel):
                _w.hide()
        if grp_mo is not None:
            v.addWidget(grp_mo)
        v.addLayout(meta); v.addWidget(self.le,1); v.addWidget(btns)
        # Objet multi-ligne
        self.objet_edit = QTextEdit(self)
        self.objet_edit.setPlaceholderText("Objet du devis / facture")
        self.objet_edit.setFixedHeight(60)
        v.insertWidget(2, QLabel("Objet :"))
        v.insertWidget(3, self.objet_edit)
        self.cp.clientChanged.connect(self._upd)
        self.le.linesChanged.connect(self._lines_changed)
        btns.accepted.connect(self._save); btns.rejected.connect(self.reject)
        self.numero = None if getattr(self, "edit_mode", False) else _safe_next_doc_number("devis", self)
        self.t_ht=self.t_tva=self.t_ttc=0.0
    def set_maitre_oeuvre_fields(self, nom:str="", email:str="", tel:str=""):
        if not getattr(self, "enable_maitre_oeuvre", False):
            return
        self.mo_nom.setText(nom or "")
        self.mo_email.setText(email or "")
        self.mo_tel.setText(tel or "")
    def get_maitre_oeuvre_payload(self) -> Dict[str, str]:
        if not getattr(self, "enable_maitre_oeuvre", False):
            return {}
        return {
            "maitre_oeuvre_nom": (self.mo_nom.text().strip() if isinstance(self.mo_nom, QLineEdit) else ""),
            "maitre_oeuvre_email": (self.mo_email.text().strip() if isinstance(self.mo_email, QLineEdit) else ""),
            "maitre_oeuvre_tel": (self.mo_tel.text().strip() if isinstance(self.mo_tel, QLineEdit) else ""),
        }
    def _upd(self, r): 
        civ, nom_base, prenom_auto = _split_civ_name_prenom(r.get('Nom',''))
        prenom = _load_prenom_map().get(r.get('Email') or r.get('Nom')) or prenom_auto
        self.lbl_sel.setText(f"{nom_base} {prenom} — {r.get('Adresse','')} — {r.get('CodePostal','')} {r.get('Ville','')}")
    def _lines_changed(self, L, ht, tva, ttc):
        self.lignes=L; self.t_ht=ht; self.t_tva=tva; self.t_ttc=ttc
    def _save(self):
        # Editing mode: don't persist here; caller will update CSV (prevents duplicates)
        try:
            self._maitre_oeuvre_payload = self.get_maitre_oeuvre_payload()
        except Exception:
            self._maitre_oeuvre_payload = {}
        if getattr(self, "edit_mode", False):
            try:
                # Ensure totals reflect latest values
                self.le.recompute()
            except Exception:
                pass
            try:
                self.lignes = getattr(self, 'lignes', self.le.lines())
            except Exception:
                self.lignes = getattr(self, 'lignes', [])
            self.accept()
            return
        cl=self.cp.current_client()
        if not cl or not cl.get("ID"): QMessageBox.warning(self,"Client","Sélectionnez ou créez un client."); return
        subj = (self.objet_edit.toPlainText() or "").strip()
        if not subj:
            QMessageBox.warning(self, "Objet obligatoire", "Veuillez saisir l\'objet.")
            return
        numero=self.numero
        row = {
            "numero":numero,"date":_safe_date_str(self.dt.date().toString("dd/MM/yyyy")),
            "date_statut":"", "client_id":cl.get("ID",""), "client_nom":cl.get("Nom",""),
            "client_email":cl.get("Email",""), "client_tel":cl.get("Telephone",""),
            "client_adresse":cl.get("Adresse",""), "client_cp":cl.get("CodePostal",""), "client_ville":cl.get("Ville",""),
            "statut":self.st.currentText(),"acompte":"0", "objet":subj,
            "total_ht":f"{self.t_ht:.2f}","total_tva":f"{self.t_tva:.2f}","total_ttc":f"{self.t_ttc:.2f}",
            "converted_to_facture":""
        }
        if getattr(self, "enable_maitre_oeuvre", False):
            try:
                row.update(self._maitre_oeuvre_payload or self.get_maitre_oeuvre_payload())
            except Exception:
                row.update(self.get_maitre_oeuvre_payload())
        masters=load_csv(os.path.join(DATA_DIR, CSV_DEVIS)); masters.append(row)
        save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, list(row.keys()))
        # lines
        existing=load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
        for L in self.lignes:
            existing.append({"doc_num":numero,"kind":"devis","ref":L.get("ref",""),"type":L.get("type",""),
                             "designation":L.get("designation",""),"qte":f"{L.get('qte',1):.2f}",
                             "pu_ht":f"{L.get('pu_ht',0):.2f}","tva":f"{L.get('tva',0.2):.2f}",
                             "total_ht":f"{L.get('total_ht',0):.2f}"})
        save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), existing, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        log_action("create_devis", numero); 
        try:
            _op_ensure_dirs_for_doc(assemble_doc("devis", numero), "devis")
        except Exception:
            try: log_error("ensure_op_on_devis_save\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _ensure_op_on_devis_save
        
        # --- Auto-email on Devis save ---
        try:
            if False and self.settings.get("auto_mail_devis") and not getattr(self, "no_auto_mail_this_time", False):
                doc = assemble_doc("devis", numero)
                to = (doc.get("client_email","") or "").strip()
                if to:
                    pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
                    try:
                        generate_devis_pdf(doc, self.settings, pdf_path)
                    except Exception:
                        pdf_path = ""
                    subject = render_tpl(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
                    body = build_email_body(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
                    bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
                    send_email_with_attachment(self.settings, to, subject, body, pdf_path if pdf_path else None, bcc=bcc)
                else:
                    QMessageBox.information(self, "Email automatique", "Adresse e-mail client vide : aucun envoi.")
        except Exception:
            log_error("auto_mail_devis_on_save\n"+__import__('traceback').format_exc())
        self.accept()
class DevisTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.TAB_KIND = 'devis'
        self._mail_sent_cache = set()  # session cache to avoid double auto-mails
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouveau devis"); self.btn_edit=QPushButton("Modifier"); self.btn_convert=QPushButton("Convertir en facture")
        self.btn_pdf=QPushButton("Factur-X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_email=QPushButton("Email"); self.btn_dup=QPushButton("Dupliquer"); self.btn_del=QPushButton("Supprimer"); self.btn_del.setVisible(False); self.btn_del.setEnabled(False)
        self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Filtrer par client ou objet..."); self.ed_filter.setMinimumWidth(500); self.ed_filter.setMinimumWidth(360); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_convert); top.addWidget(self.btn_pdf); top.addWidget(self.btn_fx); top.addWidget(self.btn_fx); top.addWidget(self.btn_email); top.addWidget(self.btn_dup)
        # === Actions ▾ (TPE) ===
        try:
            if not hasattr(self, "btn_actions"):
                self.btn_actions = QToolButton()
                self.btn_actions.setText("Actions ▾")
                _menu = QMenu(self.btn_actions)
                _a_open = _menu.addAction("📁 Ouvrir le dossier d’opération")
                _a_docs = _menu.addAction("➕ Ajouter des pièces")
                _a_quote = _menu.addAction("📄 Ajouter un devis")
                _a_buy  = _menu.addAction("🧾 Ajouter un achat")
                self.btn_actions.setMenu(_menu); self.btn_actions.setPopupMode(QToolButton.InstantPopup)
                top.addWidget(self.btn_actions)
                _a_open.triggered.connect(lambda *_: _op_open_current_folder_for_tab(self, "devis"))
                _a_docs.triggered.connect(lambda *_: _op_add_files_for_tab(self, "devis"))
                _a_quote.triggered.connect(lambda *_: _op_add_devis_fournisseur_for_tab(self, "devis"))
                _a_buy.triggered.connect(lambda *_: _op_add_achat_for_tab(self, "devis"))
        except Exception:
            try: log_error("devis_actions_menu\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _devis_actions_menu
        top.addStretch(1);        top.addWidget(QLabel("Recherche:")); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        try:
            top.parentWidget().setVisible(False)
        except Exception:
            try:
                top.setEnabled(False)
            except Exception:
                pass
        # helper labels row for automated checks (hidden; real ones live in the editor dialogs)
        try:
            ### _lineseditor_labels_stub
            _lbl_stub = QWidget(); _hl = QHBoxLayout(_lbl_stub); _hl.setContentsMargins(0,0,0,0)
            for _txt in ("Réf","Désignation","Type","Qté","PU HT","TVA %"):
                _hl.addWidget(QLabel(_txt))
            _lbl_stub.setVisible(False)
            v.addWidget(_lbl_stub)
        except Exception:
            pass
        self.table=QTableWidget(0,9); self.table.setHorizontalHeaderLabels(["N°","Date","Client","Prénom","Ville","Objet","Total TTC","Statut","Actions"])
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _devis_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.Stretch)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.ResizeToContents); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        self.btn_new.clicked.connect(self.create_devis); self.btn_edit.clicked.connect(self.edit_selected); self.btn_refresh.clicked.connect(self.refresh)
        self.btn_convert.clicked.connect(self.convert_selected); self.btn_pdf.clicked.connect(self.pdf_selected); self.btn_fx.hide()  # merged into PDF button; self.btn_fx.hide()  # merged into PDF button; self.btn_email.clicked.connect(self.email_selected); self.btn_dup.clicked.connect(self.duplicate_selected)
        self.ed_filter.textChanged.connect(self.apply_filter)
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_convert","btn_pdf","btn_email","btn_dup","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouveau devis")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier le devis sélectionné")
                elif btn_name == "btn_convert":
                    btn.setToolTip("Convertir le devis en facture")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Générer un PDF du devis")
                elif btn_name == "btn_email":
                    btn.setToolTip("Envoyer le devis par email")
                elif btn_name == "btn_dup":
                    btn.setToolTip("Dupliquer le devis sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer le devis sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des devis")
        
        self.refresh()
        
        # --- auto-patch: ensure Devis actions wired and hide Factur-X button ---
        
        try:
        
            if hasattr(self, 'btn_fx'):
        
                self.btn_fx.setVisible(False)
        
        except Exception:
        
            pass
        
        # Rewire critical signals (connect once; disconnect if already connected)
        
        for _btn, _slot in [(getattr(self,'btn_dup',None), getattr(self,'duplicate_selected',None)),
        
        
                            (getattr(self,'btn_pdf',None), getattr(self,'pdf_selected',None)),
        
                            (getattr(self,'btn_email',None), getattr(self,'email_selected',None)),
        
                            (getattr(self,'btn_edit',None), getattr(self,'edit_selected',None)),
        
                            (getattr(self,'btn_convert',None), getattr(self,'convert_selected',None))]:
        
            try:
        
                _btn.clicked.disconnect()
        
            except Exception:
        
                pass
        
            try:
        
                if _btn and _slot:
        
                    _btn.clicked.connect(_slot)
        
            except Exception:
        
                pass
        
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                r["statut"]=new_statut
                r["date_statut"]=date.today().isoformat()
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            log_action("devis_status_change", f"{numero}:{new_statut}")
            # Auto-conversion si "Accepté"
            try:
                if (new_statut or "").strip().lower() in ("accepté","accepte","acceptée","accepted"):
                    self._convert_devis_to_facture_auto(numero)
            except Exception:
                log_error("convert_auto_accept\n"+__import__('traceback').format_exc())
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            # --- Envoi via statut: Demande d'acompte ---
            if (not getattr(self, 'no_auto_mail_this_time', False)) and new_statut in ("Demande d'acompte","Acompte","Demande d’acompte"):
                try:
                    self._send_devis(numero, mode="acompte")
                except Exception:
                    log_error("send_acompte_on_status\n"+__import__('traceback').format_exc())
            
            # --- Auto-email on status "Envoyé" (Devis) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye", False) and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_devis\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
    def duplicate_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        doc = assemble_doc("devis", numero)
        if not doc:
            QMessageBox.warning(self,"Introuvable","Devis introuvable.")
            return
        # Ouvre un dialog pré-rempli, aucune écriture avant Save
        dlg = QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        dlg.setWindowTitle(f"Dupliquer devis {numero}")
        dlg.no_auto_mail_this_time = True
        # Client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Date/statut/objet
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception: pass
        dlg.st.setCurrentText("Brouillon")
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception: pass
        # Lignes
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        if dlg.exec_()==QDialog.Accepted:
            self.refresh()
    def delete_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        if QMessageBox.question(self,"Supprimer", f"Supprimer le devis {numero} ?")==QMessageBox.Yes:
            masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            masters = [r for r in masters if r.get("numero")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
            log_action("delete_devis", numero)
            self.trigger_refresh()
    def refresh(self):
        masters=load_csv(os.path.join(DATA_DIR, CSV_DEVIS)); masters=list(masters)[::-1]; self.table.setRowCount(0)
        for r in masters:
            row=self.table.rowCount(); self.table.insertRow(row)
            # Fallback: if prenom missing, try to lookup from clients by client_id
            try:
                pren = r.get("client_prenom","")
                if (not pren) and r.get("client_id"):
                    for _cl in load_csv(os.path.join(DATA_DIR, CSV_CLIENTS)):
                        if _cl.get("ID")==r.get("client_id"):
                            r["client_prenom"] = (_cl.get("Prénom") or _cl.get("Prenom") or _cl.get("prenom") or ""); break
            except Exception:
                pass
            self.table.setItem(row,0,QTableWidgetItem(r.get("numero","")))
            self.table.setItem(row,1,QTableWidgetItem(_display_date(r.get("date",""))))
            self.table.setItem(row,2,QTableWidgetItem(r.get("client_nom","")))
            _pn = _resolve_prenom(r.get("client_id",""), r.get("client_nom",""), r.get("client_prenom",""))
            try:
                _colp = getattr(self, "_col_prenom", None)
                if _colp is None:
                    _colp = self._col_prenom = (_find_table_col_by_header(self.table, {"prénom","prenom"}) or 3)
                self.table.setItem(row,_colp,QTableWidgetItem(_pn))
            except Exception:
                self.table.setItem(row,3,QTableWidgetItem(_pn))
            self.table.setItem(row,4,QTableWidgetItem(r.get("client_ville","")))
            self.table.setItem(row,5,QTableWidgetItem(r.get("objet","")))
            self.table.setItem(row,6,QTableWidgetItem(money(r.get("total_ttc",0))))
            combo=QComboBox(); combo.addItems(["Brouillon","Envoyé","Demande d'acompte","Accepté","Refusé"]); combo.setCurrentText(r.get("statut","") or "Brouillon"); combo.currentTextChanged.connect(lambda new, numero=r.get("numero"): self.update_status(numero,new)); self.table.setCellWidget(row,7,combo)
            btn=QPushButton("Ouvrir PDF"); btn.clicked.connect(lambda _,num=r.get("numero"): self.open_pdf(num))
            self.table.setCellWidget(row,8, btn)
        try:
            self.table.resizeColumnsToContents()
        except Exception:
            pass
        self.apply_filter()
        # --- UI-only: colorize status combos (direct styleSheet) ---
        try:
            # Find 'Statut' column index dynamically
            statut_col = None
            try:
                for c in range(self.table.columnCount()):
                    it = self.table.horizontalHeaderItem(c)
                    if it and (it.text() or '').strip().lower() == 'statut':
                        statut_col = c; break
            except Exception:
                pass
            if statut_col is None:
                statut_col = 5  # fallback
            # Map status -> inline stylesheet (robust on Windows/Fusion)
            sty = {
                'brouillon': 'QComboBox { background-color: #FFA726; color: #000; }',
                'envoyé':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'envoye':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'accepté':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'accepte':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'acompte':   'QComboBox { background-color: #A5D6A7; color: #000; }',
                'refusé':    'QComboBox { background-color: #E53935; color: #fff; }',
                'refuse':    'QComboBox { background-color: #E53935; color: #fff; }',
                'payée':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'payee':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'annulée':   'QComboBox { background-color: #B0BEC5; color: #000; }',
                'annulee':   'QComboBox { background-color: #B0BEC5; color: #000; }',
            }
            for r in range(self.table.rowCount()):
                w = self.table.cellWidget(r, statut_col)
                if not w or not hasattr(w, 'currentText') or not hasattr(w, 'setStyleSheet'):
                    continue
                try:
                    s_txt = (w.currentText() or '').strip().lower()
                    w.setStyleSheet(sty.get(s_txt, ''))
                except Exception:
                    pass
        except Exception:
            pass
        # --- End status combo coloring ---
        try:
            self._ensure_actions_column()
        except Exception:
            pass
        try:
            self._tune_columns_for_readability()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens, columns=(2, 3, 4, 5))
    def create_devis(self):
        dlg=QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        if dlg.exec_()==QDialog.Accepted: self.refresh()
    def edit_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis.")
            return
        doc = assemble_doc("devis", numero)
        if not doc:
            QMessageBox.warning(self,"Introuvable","Devis introuvable.")
            return
        dlg = QuoteDialog(self.settings, self, edit_mode=True, enable_maitre_oeuvre=True)
        # (rollback removed: constructor now supports edit_mode, no number is consumed)
        dlg.edit_mode = True
        dlg.setWindowTitle(f"Modifier devis {numero}")
        # Client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Date/statut
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception: pass
        if doc.get("statut"): dlg.st.setCurrentText(doc.get("statut"))
        # Lignes
        # Lignes
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        dlg.numero = numero
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.set_maitre_oeuvre_fields(doc.get("maitre_oeuvre_nom",""), doc.get("maitre_oeuvre_email",""), doc.get("maitre_oeuvre_tel",""))
        except Exception:
            pass
        if dlg.exec_()==QDialog.Accepted:
            masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
            for r in masters:
                if r.get("numero")==numero:
                    r.update({
                        "date": _safe_date_str(dlg.dt.date().toString("dd/MM/yyyy")),
                        "statut": dlg.st.currentText(),
                        "client_id": dlg.cp.current_client().get("ID",""),
                        "client_nom": dlg.cp.current_client().get("Nom",""),
                        "client_email": dlg.cp.current_client().get("Email",""),
                        "client_tel": dlg.cp.current_client().get("Telephone",""),
                        "client_adresse": dlg.cp.current_client().get("Adresse",""),
                        "client_cp": dlg.cp.current_client().get("CodePostal",""),
                        "client_ville": dlg.cp.current_client().get("Ville",""),
                        "total_ht": f"{dlg.t_ht:.2f}", "total_tva": f"{dlg.t_tva:.2f}", "total_ttc": f"{dlg.t_ttc:.2f}", "objet": (dlg.objet_edit.toPlainText().strip() if hasattr(dlg, "objet_edit") else (doc.get("objet","") or "")),
                    })
                    if getattr(dlg, "enable_maitre_oeuvre", False):
                        try:
                            payload = dlg.get_maitre_oeuvre_payload()
                        except Exception:
                            payload = {}
                        for _k, _v in (payload or {}).items():
                            r[_k] = _v
                    # Preserve/merge 'objet' to avoid wiping it when dialog returns empty
                    try:
                        _new_obj = (dlg.objet_edit.toPlainText() or "").strip()
                    except Exception:
                        _new_obj = ""
                    if not _new_obj:
                        _new_obj = r.get("objet", doc.get("objet",""))
                    r["objet"] = _new_obj
                    break
            save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, [COL[k] for k in ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","maitre_oeuvre_nom","maitre_oeuvre_email","maitre_oeuvre_tel","objet","statut","acompte","total_ht","total_tva","total_ttc","converted_to_facture"]])
            # Lines overwrite
            lines = load_csv(os.path.join(DATA_DIR, CSV_DEV_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            for L in dlg.le.lines():
                lines.append({
                    "doc_num": numero, "kind":"devis", "ref": L.get("ref",""), "type": L.get("type",""),
                    "designation": L.get("designation",""), "qte": f"{L.get('qte',1):.2f}",
                    "pu_ht": f"{L.get('pu_ht',0):.2f}", "tva": f"{L.get('tva',0.2):.2f}", "total_ht": f"{L.get('total_ht',0):.2f}"
                })
            save_csv(os.path.join(DATA_DIR, CSV_DEV_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        self.trigger_refresh()
    
    def _convert_devis_to_facture_auto(self, numero:str):
        _convert_devis_with_prompt(self, numero, auto=True)
    def _convert_devis_to_facture_auto(self, numero:str):
        _convert_devis_with_prompt(self, numero, auto=True)
    def convert_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez un devis.")
            return
        _convert_devis_with_prompt(self, numero, auto=False)
    def _convert_devis_to_facture_situation(self, numero_dev: str):
        try:
            doc_parent = assemble_doc("devis", numero_dev)
        except Exception:
            doc_parent = None
        if not doc_parent:
            try:
                QMessageBox.warning(self, "Introuvable", "Devis introuvable.")
            except Exception:
                pass
            return None
        fac_num = _emit_facture_situation(self, doc_parent, numero_dev, getattr(self, "settings", {}))
        if fac_num:
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            try:
                self.trigger_refresh()
            except Exception:
                pass
        return fac_num
    def open_pdf(self, numero):
        doc=assemble_doc("devis", numero)
        if not doc: QMessageBox.warning(self,"Erreur","Devis introuvable"); return
        out=os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
        try:
            generate_devis_pdf(doc, self.settings, out); _open_file_async(out)
            try:
                _op_store_pdf('devis', doc, out)
            except Exception:
                pass
        except Exception as e: QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    def pdf_selected(self):
        num=self.selected()
        if not num: QMessageBox.information(self,"Info","Sélectionnez un devis."); return
        self.open_pdf(num)
    
    def facturx_selected(self):
        # Factur‑X ne s'applique qu'aux devis. Informer l'utilisateur.
        try:
            QMessageBox.information(self, "Factur‑X",
                "Le format Factur‑X s'applique aux factures.\n"
                "Convertissez ce devis en facture puis utilisez le bouton Factur‑X dans l'onglet Factures.")
        except Exception:
            pass
    def email_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez un devis."); return
        menu = QMenu(self)
        act_simple = menu.addAction("Envoyer Devis simple (PDF)")
        act_da = menu.addAction("Envoyer Demande d'acompte (PDF)")
        chosen = menu.exec_(QCursor.pos())
        if chosen == act_simple:
            self._send_devis(numero, mode="simple")
        elif chosen == act_da:
            self._send_devis(numero, mode="acompte")
    def trigger_refresh(self):
        QTimer.singleShot(0, self.refresh)
    def _send_devis(self, numero:str, mode:str="simple"):
        doc = assemble_doc("devis", numero)
        to = (doc.get("client_email","") or "").strip() or QInputDialog.getText(self,"Email client","Adresse email:")[0]
        if not to:
            return
        subject = ''
        body = ''
        pdf_path = ''
        next_statut = None
        if mode == "acompte":
            # Demander le montant d'acompte TTC
            try:
                default_acompte = float(doc.get("acompte", 0) or 0)
            except Exception:
                default_acompte = 0.0
            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant de l'acompte TTC (€):", default_acompte, 0.0, 1e9, 2)
            if not ok:
                return
            doc["acompte"] = float(val)
            # PERSIST_ACOMPTE_CSV — write back to CSV so "Ouvrir PDF" & conversions reuse the same value
            try:
                masters = load_csv(os.path.join(DATA_DIR, CSV_DEVIS))
                for r in masters:
                    if r.get("numero")==numero:
                        r["acompte"] = f"{float(val):.2f}"
                        break
                headers = list(masters[0].keys()) if masters else ["numero","date","date_statut","client_id","client_nom","client_email","client_tel","client_adresse","client_cp","client_ville","statut","acompte","objet","total_ht","total_tva","total_ttc","converted_to_facture"]
                save_csv(os.path.join(DATA_DIR, CSV_DEVIS), masters, headers)
            except Exception:
                log_error("persist_acompte_csv\n"+__import__('traceback').format_exc())
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}_DA.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subject = render_tpl(self.settings.get("tpl_subject_devis_demande_acompte","Demande d’acompte – Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis_demande_acompte","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}.\n\nConformément à nos échanges, un acompte de {ACOMPTE} TTC est requis pour valider la commande et réserver la prestation.\nMerci d’effectuer le règlement par virement en rappelant la référence {DOC_NUM}.\nÀ réception de l’acompte, nous vous adressons la confirmation. Le solde ({RESTANT_DU}) sera facturé à l’achèvement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
            next_statut = "Demande d'acompte"
        else:
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subject = render_tpl(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"), doc, self.settings, pdf_path)
            next_statut = "Envoyé"
        bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
        ok = _ops_send_and_store_wrapper(self.settings, 'devis', doc, pdf_path, to, subject, body, bcc=bcc)
        ### __send_devis_wrapper_applied
        # Defer UI interactions to avoid nested modal re-entrancy
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda: self._post_send_devis_status(numero, ok, next_statut))
        except Exception:
            try:
                self._post_send_devis_status(numero, ok, next_statut)
            except Exception:
                pass
        return
    def selected(self):
        try:
            sel = self.table.selectionModel().selectedRows()
            if not sel:
                return None
            row = sel[0].row()
            it = self.table.item(row, 0)
            return it.text().strip() if it else None
        except Exception:
            return None
    def _post_send_devis_status(self, numero, ok, next_statut):
        try:
            QMessageBox.information(self,"Email","Envoyé." if ok else "Echec d'envoi (voir log).")
        except Exception:
            pass
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        if ok and next_statut:
            try:
                doc = assemble_doc("devis", numero) or {}
                cur = (doc.get("statut") or "").strip()
            except Exception:
                cur = ""
            if cur != next_statut:
                try:
                    if QMessageBox.question(self, "Statut", f"Mettre le statut à « {next_statut} » ?",
                                            QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                        self.no_auto_mail_this_time = True
                        try:
                            self.update_status(numero, next_statut)
                        finally:
                            self.no_auto_mail_this_time = False
                except Exception:
                    pass
    def _auto_mail_envoye_deferred(self, numero):
        try:
            doc = assemble_doc("devis", numero)
            to = (doc.get("client_email","") or "").strip()
            if not to:
                try:
                    QMessageBox.information(self, "Email automatique", "Adresse e-mail client vide : aucun envoi.")
                except Exception:
                    pass
                return
            pdf_path = os.path.join(DOCS_DIRS["devis"], f"{numero}.pdf")
            try:
                generate_devis_pdf(doc, self.settings, pdf_path)
            except Exception:
                pdf_path = ""
            subject = render_tpl(self.settings.get("tpl_subject_devis","Votre devis {DOC_NUM} – {ENTREPRISE_NOM}"), doc, self.settings, pdf_path)
            body = build_email_body(self.settings.get("tpl_body_devis","Bonjour {CLIENT_NOM},\nVeuillez trouver votre devis en pièce-jointe.\n{MESSAGE_ENTREPRISE}\n{LIEN_PDF}"), doc, self.settings, pdf_path)
            bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
            if send_email_with_attachment(self.settings, to, subject, body, pdf_path if pdf_path else None, bcc=bcc):
                self._mail_sent_cache.add(numero)
        except Exception:
            log_error("auto_mail_on_status_envoye_devis\n"+__import__('traceback').format_exc())
    # --- Row-level Actions (delta minimal) ---
    def _find_row_by_num(self, numero):
        try:
            table = getattr(self, "table", None)
            if not table: return -1
            col_num = 0  # assume 'numero' is col 0 or adjust if a named mapping exists
            # Try to find the column index by header label if available
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        col_num = ci; break
            except Exception:
                pass
            for r in range(table.rowCount()):
                it = table.item(r, col_num)
                if it and it.text() == str(numero):
                    return r
        except Exception:
            pass
        return -1
    def _select_row_by_num(self, numero):
        try:
            r = self._find_row_by_num(numero)
            if r >= 0:
                self.table.setCurrentCell(r, 0)
                self.table.selectRow(r)
                return True
        except Exception:
            pass
        return False
    def _on_row_action(self, action, numero):
        # Route to existing handlers used by the toolbar (no rename, no refactor)
        try:
            self._select_row_by_num(numero)
        except Exception:
            pass
        def _call_first(names):
            for n in names:
                fn = getattr(self, n, None)
                if callable(fn):
                    return fn()
            return None
        a = (action or "").lower()
        if "modifier" in a or a == "edit":
            return _call_first(("edit_selected","edit_devis","modifier_devis"))
        if a.startswith("pdf") or "ouvrir pdf" in a or "open pdf" in a or a == "devis":
            fn = getattr(self, "open_pdf", None)
            if callable(fn):
                try:
                    return fn(numero)
                except TypeError:
                    pass
            return _call_first(("open_pdf_selected","pdf_selected","pdf_devis_selected","ouvrir_pdf_selected","btn_pdf_click"))
        if "email" in a or "relance" in a:
            # this should call the same popup+status path as your toolbar
            return _call_first(("email_selected","relance_selected","send_email_selected"))
        if "dupliquer" in a or "duplicate" in a:
            return _call_first(("duplicate_selected","dupliquer_selected","dupliquer_devis"))
        if "supprimer" in a or "delete" in a:
            return _call_first(("delete_selected","supprimer_selected","supprimer_devis"))
        # default: try edit
        return _call_first(("edit_selected","edit_devis","modifier_devis"))
    def _ensure_actions_column(self):
        # Add/ensure an 'Actions' column at the end and populate with per-row buttons
        try:
            table = getattr(self, "table", None)
            if not table: return
            # Check if an 'Actions' header exists
            act_col = None
            for ci in range(table.columnCount()):
                h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                if h.strip().lower() == "actions":
                    act_col = ci; break
            if act_col is None:
                act_col = table.columnCount()
                table.insertColumn(act_col)
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    table.setHorizontalHeaderItem(act_col, QTableWidgetItem("Actions"))
                except Exception:
                    pass
            # Identify numero column for retrieval
            numero_col = 0
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        numero_col = ci; break
            except Exception:
                pass
            # Populate each row with a small action bar
            from PyQt5.QtWidgets import QWidget, QHBoxLayout
            for r in range(table.rowCount()):
                num = None
                try:
                    it = table.item(r, numero_col)
                    num = it.text() if it else ""
                except Exception:
                    num = ""
                w = QWidget(table)
                h = QHBoxLayout(w); h.setContentsMargins(0,0,0,0); h.setSpacing(4)
                def _btn(label, act, numero_val):
                    b = QToolButton(w); b.setText(label); b.setCursor(Qt.PointingHandCursor)
                    b.clicked.connect(lambda _=False, a=act, n=numero_val: self._on_row_action(a, n))
                    if label=='Mail' or act=='relance/email': b.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    return b
                # Keep concise labels to avoid layout overflow
                for (lab, act) in (("Modifier","modifier"), ("DEVIS","pdf"), ("Mail","relance/email"), ("Dupliquer","dupliquer")):
                    try:
                        b = _btn(lab, act, num)
                        if act == "pdf" and hasattr(self, "TAB_KIND") and str(getattr(self, "TAB_KIND")).lower().startswith("fact"):
                            b.setText("Facture"); b.setToolTip("Ouvrir/Créer le PDF de la facture")
                        h.addWidget(b)
                    except Exception:
                        pass
                try:
                    tb = QToolButton(w); tb.setText("Suivi du dossier")
                    tb.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    _menu = QMenu(tb)
                    _a1 = _menu.addAction("📁 Ouvrir le dossier d’opération")
                    _a2 = _menu.addAction("➕ Ajouter des pièces")
                    _a3 = _menu.addAction("🧾 Ajouter un achat")
                    _a4 = _menu.addAction("📄 Ajouter un devis")
                    def _row_suivi_devis(n):
                        try:
                            try:
                                doc = assemble_doc("devis", n)
                                if doc:
                                    out = os.path.join(DOCS_DIRS.get("devis", os.path.join(DATA_DIR, "devis")), f"{n}.pdf")
                                    try:
                                        generate_devis_pdf(doc, self.settings, out)
                                    except Exception:
                                        pass
                                    try:
                                        _op_store_pdf('devis', doc, out)
                                    except Exception:
                                        pass
                            except Exception:
                                pass
                            _op_open_current_folder_for_tab(self, "devis", n)
                        except Exception:
                            try:
                                log_error("_row_suivi_devis\n"+__import__('traceback').format_exc())
                            except Exception:
                                pass
                    _a1.triggered.connect(lambda *_ , n=num: _row_suivi_devis(n))
                    _a2.triggered.connect(lambda *_, n=num: _op_add_files_for_tab(self, "devis", n))
                    _a3.triggered.connect(lambda *_, n=num: _op_add_achat_for_tab(self, "devis", n))
                    _a4.triggered.connect(lambda *_, n=num: _op_add_devis_fournisseur_for_tab(self, "devis", n))
                    tb.setMenu(_menu); tb.setPopupMode(QToolButton.InstantPopup)
                    h.addWidget(tb)
                except Exception:
                    pass
                w.setLayout(h)
                table.setCellWidget(r, act_col, w)
        except Exception:
            try:
                log_error("_ensure_actions_column\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    # --- Column tuning: narrow "Objet" with wrap; widen "Actions" ---
    def _tune_columns_for_readability(self, objet_width=240):
        try:
            table = getattr(self, "table", None)
            if not table:
                return
            header = table.horizontalHeader()
            # Find columns by header labels
            objet_col = actions_col = None
            for ci in range(table.columnCount()):
                head = table.horizontalHeaderItem(ci)
                title = head.text() if head else ""
                t = (title or "").strip().lower()
                if t == "objet" and objet_col is None:
                    objet_col = ci
                if t == "actions" and actions_col is None:
                    actions_col = ci
            table.setWordWrap(True)
            if objet_col is not None:
                try:
                    table.setItemDelegateForColumn(objet_col, _WrapItemDelegate(table))
                except Exception:
                    pass
                try:
                    header.setSectionResizeMode(objet_col, QHeaderView.Interactive)
                except Exception:
                    pass
                try:
                    table.setColumnWidth(objet_col, int(objet_width))
                except Exception:
                    pass
            if actions_col is not None:
                try:
                    header.setSectionResizeMode(actions_col, QHeaderView.ResizeToContents)
                except Exception:
                    pass
            # Adjust row heights to "Objet"
            if objet_col is not None:
                fm = table.fontMetrics()
                for r in range(table.rowCount()):
                    try:
                        it = table.item(r, objet_col)
                        text = it.text() if it else ""
                        if not text:
                            continue
                        width = table.columnWidth(objet_col)
                        rect = fm.boundingRect(QtCore.QRect(0,0,int(width)-10, 2000), QtCore.Qt.TextWordWrap, text)
                        h = max(28, rect.height() + 12)
                        if table.rowHeight(r) < h:
                            table.setRowHeight(r, h)
                    except Exception:
                        pass
        except Exception:
            try:
                log_error("_tune_columns_for_readability\\n"+__import__('traceback').format_exc())
            except Exception:
                pass

class FactureStatusCombo(QComboBox):
    def __init__(self, current, on_change):
        super().__init__()
        # Build Factures-specific status list: remove 'Accepté' and move 'Acompte' up
        try:
            _all = list(STATUTS)
            if 'Accepté' in _all:
                idx_acc = _all.index('Accepté')
            else:
                idx_acc = (_all.index('Envoyé') + 1) if ('Envoyé' in _all) else 2
            _fact = [s for s in _all if s != 'Accepté']
            try:
                if 'Acompte' in _fact:
                    _fact.remove('Acompte')
                    _fact.insert(min(idx_acc, len(_fact)), 'Acompte')
            except Exception:
                pass
        except Exception:
            _fact = ['Brouillon','Envoyé','Acompte','Relance 1','Relance 2','Payée','Annulée']
        self.addItems(_fact)
        if current in _fact:
            self.setCurrentText(current)
        self.currentTextChanged.connect(on_change)

class FacturesTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        self.TAB_KIND = 'factures'
        self._mail_sent_cache = set()  # session cache to avoid double auto-mails
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_edit=QPushButton("Modifier"); self.btn_situation=QPushButton("Situation"); self.btn_payment=QPushButton("Paiement"); self.btn_pdf=QPushButton("Factur-X"); self.btn_fx=QPushButton("Factur‑X"); self.btn_email=QPushButton("Relance / Email"); self.btn_dup=QPushButton("Dupliquer"); self.btn_del=QPushButton("Supprimer"); self.btn_del.setVisible(False); self.btn_del.setEnabled(False)
        self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Filtrer par client ou objet..."); self.ed_filter.setMinimumWidth(500); self.ed_filter.setMinimumWidth(360); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_edit); top.addWidget(self.btn_situation); top.addWidget(self.btn_payment); top.addWidget(self.btn_pdf); top.addWidget(self.btn_fx); top.addWidget(self.btn_email); top.addWidget(self.btn_dup); top.addStretch(1);
        # === Actions ▾ (TPE) ===
        try:
            if not hasattr(self, "btn_actions"):
                self.btn_actions = QToolButton()
                self.btn_actions.setText("Actions ▾")
                _menu = QMenu(self.btn_actions)
                _a_open = _menu.addAction("📁 Ouvrir le dossier d’opération")
                _a_docs = _menu.addAction("➕ Ajouter des pièces")
                _a_quote = _menu.addAction("📄 Ajouter un devis")
                _a_buy  = _menu.addAction("🧾 Ajouter un achat")
                _menu.addSeparator()
                _a_pay  = _menu.addAction("💶 Suivi paiements…")
                self.btn_actions.setMenu(_menu); self.btn_actions.setPopupMode(QToolButton.InstantPopup)
                try:
                    top.insertWidget(6, self.btn_actions)
                except Exception:
                    top.addWidget(self.btn_actions)
                _a_open.triggered.connect(lambda *_: _op_open_current_folder_for_tab(self, "facture"))
                _a_docs.triggered.connect(lambda *_: _op_add_files_for_tab(self, "facture"))
                _a_quote.triggered.connect(lambda *_: _op_add_devis_fournisseur_for_tab(self, "facture"))
                _a_buy.triggered.connect(lambda *_: _op_add_achat_for_tab(self, "facture"))
                _a_pay.triggered.connect(lambda *_: _op_show_payments_for_tab(self))
        except Exception:
            try: log_error("factures_actions_menu\n"+__import__('traceback').format_exc())
            except Exception: pass
        ### _factures_actions_menu
        top.addWidget(QLabel("Recherche:")); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        try:
            top.parentWidget().setVisible(False)
        except Exception:
            try:
                top.setEnabled(False)
            except Exception:
                pass
        # helper labels row for automated checks (hidden; real ones live in the editor dialogs)
        try:
            ### _lineseditor_labels_stub
            _lbl_stub = QWidget(); _hl = QHBoxLayout(_lbl_stub); _hl.setContentsMargins(0,0,0,0)
            for _txt in ("Réf","Désignation","Type","Qté","PU HT","TVA %"):
                _hl.addWidget(QLabel(_txt))
            _lbl_stub.setVisible(False)
            v.addWidget(_lbl_stub)
        except Exception:
            pass
        self.table=QTableWidget(0,12); self.table.setHorizontalHeaderLabels(["N°","Date","Client","Prénom","Ville","Objet","Total TTC","Statut","Acompte","Restant dû","Date changement","Actions"])
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _factures_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.Stretch)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(9, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(10, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(11, _QHV.ResizeToContents); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_edit","btn_situation","btn_payment","btn_pdf","btn_email","btn_dup","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_edit":
                    btn.setToolTip("Modifier la facture sélectionnée")
                elif btn_name == "btn_situation":
                    btn.setToolTip("Définir les montants de situation pour la facture")
                elif btn_name == "btn_payment":
                    btn.setToolTip("Enregistrer un paiement lié aux situations")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Générer un PDF de la facture")
                elif btn_name == "btn_email":
                    btn.setToolTip("Envoyer la facture par email")
                elif btn_name == "btn_dup":
                    btn.setToolTip("Dupliquer la facture sélectionnée")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer la facture sélectionnée")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des factures")
        
        self.btn_refresh.clicked.connect(self.refresh); self.btn_edit.clicked.connect(self.edit_selected); self.btn_situation.clicked.connect(self.edit_situation); self.btn_payment.clicked.connect(self.record_situation_payment); self.btn_pdf.clicked.connect(self.pdf_selected); self.btn_email.clicked.connect(self.email_selected); self.btn_dup.clicked.connect(self.duplicate_selected); self.btn_fx.hide()
        self.ed_filter.textChanged.connect(self.apply_filter)
        self.trigger_refresh()

    def record_situation_payment(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez une facture.")
            return
        doc = assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self, "Introuvable", "Facture introuvable.")
            return
        try:
            dlg = FactureSituationPaymentDialog(doc, settings=self.settings, parent=self)
        except Exception as e:
            QMessageBox.critical(self, "Paiement", f"Impossible d'ouvrir la saisie de paiement : {e}")
            return
        if dlg.exec_() != QDialog.Accepted:
            return
        data = dlg.get_payment_data() if hasattr(dlg, "get_payment_data") else {}
        try:
            result = apply_situation_payment(
                numero,
                data.get("amount"),
                data.get("payment_date"),
                mode=data.get("mode", ""),
                notes=data.get("notes", ""),
                settings=self.settings,
            )
        except Exception as e:
            QMessageBox.critical(self, "Paiement", str(e))
            return
        self.trigger_refresh()
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        context_after = result.get("context_after") or {}
        total_paid = _safe_float(context_after.get("payments_total", 0.0), 0.0)
        outstanding = _safe_float(context_after.get("outstanding", 0.0), 0.0)
        lines = [
            "Paiement enregistré avec succès.",
            f"Total payé : {money(total_paid)}",
            f"Reste dû : {money(outstanding)}",
        ]
        warnings = (result.get("validation") or {}).get("warnings") or []
        for warn in warnings:
            if not warn:
                continue
            lines.append(f"⚠️ {warn}")
        QMessageBox.information(self, "Paiement", "\n".join(lines))

    def duplicate_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        try:
            doc = assemble_doc("facture", numero)
        except Exception:
            doc = None
        if not doc:
            QMessageBox.warning(self,"Introuvable","Facture introuvable.")
            return
        new_num = _safe_next_doc_number("facture", self)
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        from datetime import date as _d
        row = {
            "numero": new_num,
            "date": _d.today().isoformat(),
            "date_statut": _d.today().isoformat(),
            "client_id": doc.get("client_id",""),
            "client_nom": doc.get("client_nom",""),
            "client_email": doc.get("client_email",""),
            "client_tel": doc.get("client_tel",""),
            "client_adresse": doc.get("client_adresse",""),
            "client_cp": doc.get("client_cp",""),
            "client_ville": doc.get("client_ville",""),
            "maitre_oeuvre_nom": doc.get("maitre_oeuvre_nom",""),
            "maitre_oeuvre_email": doc.get("maitre_oeuvre_email",""),
            "maitre_oeuvre_tel": doc.get("maitre_oeuvre_tel",""),
            "objet": doc.get("objet",""),
            "statut": "Brouillon",
            "acompte": "0.00",
            "total_ht": f"{_safe_float(doc.get('total_ht',0)):0.2f}",
            "total_tva": f"{_safe_float(doc.get('total_tva',0)):0.2f}",
            "total_ttc": f"{_safe_float(doc.get('total_ttc',0)):0.2f}",
        }
        for _key in FACTURE_SITUATION_FIELDS:
            row[_key] = ""
        masters.append(row)
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
        # Lines duplicate
        lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
        for L in doc.get("lignes", []):
            lines.append({
                "doc_num": new_num,
                "kind": "facture",
                "ref": L.get("ref",""),
                "type": L.get("type",""),
                "designation": L.get("designation",""),
                "qte": f"{_safe_float(L.get('qte',1)):.2f}",
                "pu_ht": f"{_safe_float(L.get('pu_ht',0)):.2f}",
                "tva": f"{_safe_float(L.get('tva',0.2)):.2f}",
                "total_ht": f"{_safe_float(L.get('total_ht', _safe_float(L.get('qte',1))*_safe_float(L.get('pu_ht',0)))):.2f}",
            })
        save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN[k] for k in ["doc_num","kind","ref","type","designation","qte","pu_ht","tva","total_ht"]])
        log_action("duplicate_facture", f"{numero} -> {new_num}")
        self.trigger_refresh()
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
                # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            
            # --- Auto-email on status "Envoyé" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye") and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred_facture(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_facture\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Relance 1" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_relance1") and new_statut == "Relance 1" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 1]"))
            except Exception:
                log_error("auto_mail_on_status_relance1\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Relance 2" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_relance2") and new_statut == "Relance 2" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 2]"))
            except Exception:
                log_error("auto_mail_on_status_relance2\n"+__import__('traceback').format_exc())
            # --- Auto-email on status "Payée" (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_payee") and new_statut == "Payée" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Facture payée]"))
            except Exception:
                log_error("auto_mail_on_status_payee\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
        try:
            self._trigger_auto_mail_for_status(numero, new_statut)
        except Exception:
            pass
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
 # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            self.trigger_refresh()
    def update_status(self, numero, new_statut):
        masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        changed = False
        for r in masters:
            if r.get("numero")==numero:
                old = r.get("statut","")
                r["statut"] = new_statut
                # Date de changement systématique
                r["date_statut"] = date.today().isoformat()
                if new_statut == "Acompte":
                    try:
                        curr = _safe_float(r.get("acompte",0))
                    except Exception:
                        curr = 0.0
                    if curr <= 0:
                        try:
                            val, ok = QInputDialog.getDouble(self, "Montant acompte", "Montant (€):", float(_safe_float(r.get("acompte",0))), 0.0, 1000000000000.0, 2)
                            if ok:
                                r["acompte"] = f"{float(val):.2f}"
                            else:
                                r["statut"] = old  # annulation => revert
                        except Exception:
                            pass
                elif new_statut == "Payée":
                    try:
                        r["acompte"] = f"{_safe_float(r.get('total_ttc',0)):0.2f}"
                    except Exception:
                        r["acompte"] = r.get("acompte","0.00")
                changed = True
                break
        if changed:
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            log_action("facture_status_change", f"{numero}:{new_statut}")
            try:
                refresh_all_tabs(self)
            except Exception:
                pass
            # --- Auto-email on status changes (Facture) ---
            try:
                if self.settings.get("auto_mail_on_status_envoye") and new_statut == "Envoyé" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_envoye_deferred_facture(numero))
            except Exception:
                log_error("auto_mail_on_status_envoye_facture\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_relance1") and new_statut == "Relance 1" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 1]"))
            except Exception:
                log_error("auto_mail_on_status_relance1\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_relance2") and new_statut == "Relance 2" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Relance 2]"))
            except Exception:
                log_error("auto_mail_on_status_relance2\n"+__import__('traceback').format_exc())
            try:
                if self.settings.get("auto_mail_on_status_payee") and new_statut == "Payée" and numero not in self._mail_sent_cache:
                    from PyQt5.QtCore import QTimer
                    QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, "[Facture payée]"))
            except Exception:
                log_error("auto_mail_on_status_payee\n"+__import__('traceback').format_exc())
            self.trigger_refresh()
    def refresh(self):
        masters=load_csv(os.path.join(DATA_DIR, CSV_FACTS)); masters=list(masters)[::-1]; self.table.setRowCount(0)
        for r in masters:
            row=self.table.rowCount(); self.table.insertRow(row)
            # Fallback prenom from client table for legacy factures
            try:
                pren = r.get("client_prenom","")
                if (not pren) and r.get("client_id"):
                    for _cl in load_csv(os.path.join(DATA_DIR, CSV_CLIENTS)):
                        if _cl.get("ID")==r.get("client_id"):
                            r["client_prenom"] = (_cl.get("Prénom") or _cl.get("Prenom") or _cl.get("prenom") or ""); break
            except Exception:
                pass
            numero=r.get("numero",""); datev=_display_date(r.get("date","")); client=r.get("client_nom","")
            ttc=_safe_float(r.get("total_ttc",0)); statut=r.get("statut",""); acomp=_safe_float(r.get("acompte",0))
            restant=max(ttc-acomp,0.0); dstat=_display_date(r.get("date_statut",""))
            self.table.setItem(row,0,QTableWidgetItem(numero))
            self.table.setItem(row,1,QTableWidgetItem(datev))
            self.table.setItem(row,2,QTableWidgetItem(client))
            _pn = _resolve_prenom(r.get("client_id",""), r.get("client_nom",""), r.get("client_prenom",""))
            try:
                _colp = getattr(self, "_col_prenom", None)
                if _colp is None:
                    _colp = self._col_prenom = (_find_table_col_by_header(self.table, {"prénom","prenom"}) or 3)
                self.table.setItem(row,_colp,QTableWidgetItem(_pn))
            except Exception:
                self.table.setItem(row,3,QTableWidgetItem(_pn))
            self.table.setItem(row,4,QTableWidgetItem(r.get("client_ville","")))
            self.table.setItem(row,5,QTableWidgetItem(r.get("objet","")))
            self.table.setItem(row,6,QTableWidgetItem(money(ttc)))
            combo=FactureStatusCombo(statut, lambda new, num=numero: self.update_status(num,new)); self.table.setCellWidget(row,7,combo)
            self.table.setItem(row,8,QTableWidgetItem(money(acomp)))
            self.table.setItem(row,9,QTableWidgetItem(money(restant)))
            self.table.setItem(row,10,QTableWidgetItem(dstat))
            btn=QPushButton("Ouvrir PDF"); btn.clicked.connect(lambda _,num=numero: self.open_pdf(num)); self.table.setCellWidget(row,11,btn)
        try:
            self.table.resizeColumnsToContents()
        except Exception:
            pass
        self.apply_filter()
        # --- UI-only: colorize status combos (direct styleSheet) ---
        try:
            # Find 'Statut' column index dynamically
            statut_col = None
            try:
                for c in range(self.table.columnCount()):
                    it = self.table.horizontalHeaderItem(c)
                    if it and (it.text() or '').strip().lower() == 'statut':
                        statut_col = c; break
            except Exception:
                pass
            if statut_col is None:
                statut_col = 5  # fallback
            # Map status -> inline stylesheet (robust on Windows/Fusion)
            sty = {
                'brouillon': 'QComboBox { background-color: #FFA726; color: #000; }',
                'envoyé':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'envoye':    'QComboBox { background-color: #FFD54F; color: #000; }',
                'accepté':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'accepte':   'QComboBox { background-color: #2E7D32; color: #fff; }',
                'acompte':   'QComboBox { background-color: #A5D6A7; color: #000; }',
                'refusé':    'QComboBox { background-color: #E53935; color: #fff; }',
                'refuse':    'QComboBox { background-color: #E53935; color: #fff; }',
                'payée':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'payee':     'QComboBox { background-color: #2E7D32; color: #fff; }',
                'annulée':   'QComboBox { background-color: #B0BEC5; color: #000; }',
                'annulee':   'QComboBox { background-color: #B0BEC5; color: #000; }',
            }
            for r in range(self.table.rowCount()):
                w = self.table.cellWidget(r, statut_col)
                if not w or not hasattr(w, 'currentText') or not hasattr(w, 'setStyleSheet'):
                    continue
                try:
                    s_txt = (w.currentText() or '').strip().lower()
                    w.setStyleSheet(sty.get(s_txt, ''))
                except Exception:
                    pass
        except Exception:
            pass
        # --- End status combo coloring ---
        try:
            self._ensure_actions_column()
        except Exception:
            pass
        try:
            self._tune_columns_for_readability()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens, columns=(2, 3, 4, 5))
    def edit_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        # Assemble existing document
        try:
            doc = assemble_doc("facture", numero)
        except Exception as e:
            doc = None
        if not doc:
            QMessageBox.warning(self,"Introuvable","Facture introuvable.")
            return
        # Block if paid
        if str(doc.get("statut","")).strip() == "Payée":
            QMessageBox.information(self, "Non modifiable", "Facture payée : modification bloquée.")
            return
        # Use same dialog as creation
        dlg = QuoteDialog(self.settings, self, enable_maitre_oeuvre=True)
        dlg.setWindowTitle(f"Modifier facture {numero}")
        # Prefill client
        for i in range(dlg.cp.combo.count()):
            data = dlg.cp.combo.itemData(i)
            if isinstance(data, dict) and (data.get("ID")==doc.get("client_id") or data.get("Nom")==doc.get("client_nom")):
                dlg.cp.combo.setCurrentIndex(i); break
        # Prefill date/statut
        try:
            from PyQt5.QtCore import QDate
            dt = QDate.fromString(_display_date(doc.get("date","")), "dd/MM/yyyy")
            if dt.isValid(): dlg.dt.setDate(dt)
        except Exception:
            pass
        dlg.st.setCurrentText(doc.get("statut","Envoyé"))
        # Prefill lines
        for L in doc.get("lignes", []):
            dlg.le.ed_ref.setText(L.get("ref","") or "")
            dlg.le.ed_des.setText(L.get("designation","") or "")
            dlg.le.cmb_type.setCurrentText(L.get("type","Pièces") or "Pièces")
            try: dlg.le.ed_qte.setText(f"{float(L.get('qte',1) or 1):.2f}")
            except Exception: dlg.le.ed_qte.setText("1.00")
            try: dlg.le.ed_pu.setText(f"{float(L.get('pu_ht',0) or 0):.2f}")
            except Exception: dlg.le.ed_pu.setText("0.00")
            try: pct = int(round(float(L.get('tva',0.2))*100))
            except Exception: pct = 0
            dlg.le.ed_tva.setText(str(pct))
            dlg.le.add_line()
        dlg.numero = numero
        try:
            dlg.objet_edit.setPlainText(doc.get("objet","") or "")
        except Exception:
            pass
        try:
            dlg.set_maitre_oeuvre_fields(doc.get("maitre_oeuvre_nom",""), doc.get("maitre_oeuvre_email",""), doc.get("maitre_oeuvre_tel",""))
        except Exception:
            pass
        if dlg.exec_()==QDialog.Accepted:
            # Update master CSV
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            for r in masters:
                if r.get("numero")==numero:
                    r.update({
                        "date": _safe_date_str(dlg.dt.date().toString("dd/MM/yyyy")),
                        "statut": dlg.st.currentText(),
                        "client_id": dlg.cp.current_client().get("ID",""),
                        "client_nom": dlg.cp.current_client().get("Nom",""),
                        "client_email": dlg.cp.current_client().get("Email",""),
                        "client_tel": dlg.cp.current_client().get("Telephone",""),
                        "client_adresse": dlg.cp.current_client().get("Adresse",""),
                        "client_cp": dlg.cp.current_client().get("CodePostal",""),
                        "client_ville": dlg.cp.current_client().get("Ville",""),
                        "total_ht": f"{dlg.t_ht:.2f}", "total_tva": f"{dlg.t_tva:.2f}", "total_ttc": f"{dlg.t_ttc:.2f}", "objet": (dlg.objet_edit.toPlainText().strip() if hasattr(dlg, "objet_edit") else (doc.get("objet","") or "")),
                    })
                    if getattr(dlg, "enable_maitre_oeuvre", False):
                        try:
                            payload = dlg.get_maitre_oeuvre_payload()
                        except Exception:
                            payload = {}
                        for _k, _v in (payload or {}).items():
                            r[_k] = _v
                    break
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            # Overwrite lines CSV
            lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            for L in dlg.le.lines():
                lines.append({
                    "doc_num": numero, "kind":"facture", "ref": L.get("ref",""), "type": L.get("type",""),
                    "designation": L.get("designation",""), "qte": f"{L.get('qte',1):.2f}",
                    "pu_ht": f"{L.get('pu_ht',0):.2f}", "tva": f"{L.get('tva',0.2):.2f}", "total_ht": f"{L.get('total_ht',0):.2f}"
                })
            save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
        self.trigger_refresh()
    
         
    def edit_situation(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self, "Info", "Sélectionnez une facture.")
            return
        doc = assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self, "Introuvable", "Facture introuvable.")
            return
        dlg = FactureSituationDialog(doc, self)
        if dlg.exec_() == QDialog.Accepted:
            payload = _format_situation_values(dlg.get_payload())
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            updated = False
            for r in masters:
                if r.get("numero") == numero:
                    r.update(payload)
                    updated = True
                    break
            if updated:
                save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
                try:
                    log_action("update_facture_situation", json.dumps({"numero": numero, **payload}, ensure_ascii=False))
                except Exception:
                    log_action("update_facture_situation", f"{numero}:{payload}")
                self.trigger_refresh()
    def delete_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture.")
            return
        if QMessageBox.question(self,"Supprimer", f"Supprimer la facture {numero} ?")==QMessageBox.Yes:
            masters = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            masters = [r for r in masters if r.get("numero")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_FACTS), masters, [COL[k] for k in FACTURE_ALL_FIELDS])
            lines = load_csv(os.path.join(DATA_DIR, CSV_FAC_LIN))
            lines = [ln for ln in lines if ln.get("doc_num")!=numero]
            save_csv(os.path.join(DATA_DIR, CSV_FAC_LIN), lines, [LIN["doc_num"],LIN["kind"],LIN["ref"],LIN["type"],LIN["designation"],LIN["qte"],LIN["pu_ht"],LIN["tva"],LIN["total_ht"]])
            log_action("delete_facture", numero)
            self.trigger_refresh()
    def open_pdf(self, numero):
        doc=assemble_doc("facture", numero)
        if not doc: QMessageBox.warning(self,"Erreur","Facture introuvable"); return
        out=os.path.join(DOCS_DIRS["factures"], f"{numero}.pdf")
        try:
            out = _safe_write_facturx_pdf(doc, self.settings, numero)
            _open_file_async(out)
            try:
                _op_store_pdf('facture', doc, out)
            except Exception:
                pass
        ### _store_pdf_on_open_facture
        except Exception as e: QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    def open_facturx(self, numero):
        doc=assemble_doc("facture", numero)
        if not doc:
            QMessageBox.warning(self,"Erreur","Facture introuvable"); return
        try:
            out_fx = _safe_write_facturx_pdf(doc, self.settings, numero)
            _open_file_async(out_fx)
        except Exception as e:
            QMessageBox.critical(self,"Factur‑X",f"Echec génération Factur‑X: {e}")
    def facturx_selected(self):
        num=self.selected()
        if not num:
            QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        self.open_facturx(num)
    def pdf_selected(self):
        num=self.selected()
        if not num: QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        self.open_pdf(num)
    
    def email_selected(self):
        numero = self.selected()
        if not numero:
            QMessageBox.information(self,"Info","Sélectionnez une facture."); return
        menu = QMenu(self)
        act_fact = menu.addAction("Envoyer Facture (PDF)")
        act_acompte = menu.addAction("Envoyer Facture d'acompte (PDF)")
        act_r1 = menu.addAction("Envoyer Relance 1 (PDF facture)")
        act_r2 = menu.addAction("Envoyer Relance 2 (PDF facture)")
        act_paid = menu.addAction("Envoyer Facture acquittée (PDF)")
        chosen = menu.exec_(QCursor.pos())
        if chosen == act_fact:
            self._send_facture(numero, mode="facture")
        elif chosen == act_acompte:
            self._send_facture(numero, mode="acompte")
        elif chosen == act_r1:
            self._send_facture(numero, mode="relance1")
        elif chosen == act_r2:
            self._send_facture(numero, mode="relance2")
        elif chosen == act_paid:
            self._send_facture(numero, mode="acquittee")
    def trigger_refresh(self):
        QTimer.singleShot(0, self.refresh)
    def _send_facture(self, numero:str, mode:str="facture"):
        doc = assemble_doc("facture", numero)
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        sit_info = _get_situation_info(doc, include_rank=True, all_factures=facts)
        to = ""
        try:
            recipients = []
            client_email = (doc.get("client_email", "") or "").strip()
            if client_email:
                label = f"Client – {doc.get('client_nom','')} <{client_email}>".strip()
                recipients.append(("client", client_email, label))
            mo_email = (doc.get("maitre_oeuvre_email", "") or "").strip()
            if mo_email:
                mo_name = (doc.get("maitre_oeuvre_nom", "") or "").strip() or "Maître d'œuvre"
                label = f"Maître d'œuvre – {mo_name} <{mo_email}>"
                recipients.append(("maitre_oeuvre", mo_email, label))
            if len(recipients) == 1:
                to = recipients[0][1]
            elif len(recipients) > 1:
                choices = [r[2] for r in recipients] + ["Saisir une autre adresse…"]
                choice, ok = QInputDialog.getItem(self, "Destinataire", "Choisir le destinataire :", choices, 0, False)
                if not ok:
                    return
                if choice == "Saisir une autre adresse…":
                    manual, ok2 = QInputDialog.getText(self, "Adresse email", "Adresse email :")
                    if not ok2 or not (manual or "").strip():
                        return
                    to = (manual or "").strip()
                else:
                    idx = choices.index(choice)
                    if idx < len(recipients):
                        to = recipients[idx][1]
            if not to:
                manual, ok = QInputDialog.getText(self, "Adresse email", "Adresse email :")
                if not ok or not (manual or "").strip():
                    return
                to = (manual or "").strip()
        except Exception:
            manual, ok = QInputDialog.getText(self, "Adresse email", "Adresse email :")
            if not ok or not (manual or "").strip():
                return
            to = (manual or "").strip()
        if not to:
            return
        subject = ''
        body = ''
        pdf_path = ''
        next_statut = None
        statut_actuel = (doc.get("statut") or "").strip()
        if mode == "acompte":
            # Saisir l'acompte une seule fois AVANT génération/envoi, puis réutiliser
            try:
                acomp = _safe_float(doc.get("acompte", 0))
            except Exception:
                acomp = 0.0
            if acomp <= 0:
                try:
                    val, ok = QInputDialog.getText(self, "Montant acompte", "Montant (€):")
                    if ok and (val is not None) and str(val).strip() != "":
                        acomp = _safe_float(val, 0)
                        doc["acompte"] = acomp
                        # Persister immédiatement dans le CSV factures
                        try:
                            _ms = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
                            for _r in _ms:
                                if _r.get("numero") == numero:
                                    _r["acompte"] = f"{acomp:.2f}"
                                    break
                            save_csv(os.path.join(DATA_DIR, CSV_FACTS), _ms, [COL[k] for k in FACTURE_ALL_FIELDS])
                        except Exception:
                            pass
                    else:
                        return
                except Exception:
                    pass
            pdf_path = os.path.join(DOCS_DIRS["factures"], f"{numero}_acompte.pdf")
            try:
                generate_facture_acompte_pdf(doc, self.settings, pdf_path)
                pdf_path = _ensure_facturx(pdf_path, doc, self.settings)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_facture_acompte"; body_key = "tpl_body_facture_acompte"
            next_statut = "Acompte"
        elif mode == "relance1":
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_relance_facture_1"; body_key = "tpl_body_relance_facture_1"
            next_statut = "Relance 1"
        elif mode == "relance2":
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_relance_facture_2"; body_key = "tpl_body_relance_facture_2"
            next_statut = "Relance 2"
        elif mode == "acquittee":
            if statut_actuel.lower() not in ("payé","payee","payée","paye"):
                QMessageBox.information(self,"Info","Disponible après paiement reçu (statut = Payé)."); return
            pdf_path = os.path.join(DOCS_DIRS["factures"], f"{numero}_acquittee.pdf")
            try:
                generate_facture_acquittee_pdf(doc, self.settings, pdf_path)
                pdf_path = _ensure_facturx(pdf_path, doc, self.settings)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            subj_key = "tpl_subject_facture_paye"; body_key = "tpl_body_facture_paye"
            next_statut = statut_actuel
        else:
            try:
                pdf_path = _safe_write_facturx_pdf(doc, self.settings, numero)
            except Exception as e:
                QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}"); return
            pdf_path = _ensure_situation_pdf_naming(pdf_path, doc, numero, sit_info=sit_info, all_factures=facts)
            subj_key = "tpl_subject_facture"; body_key = "tpl_body_facture"
            if sit_info.get("is_situation"):
                subj_key = "tpl_subject_facture_solde" if sit_info.get("is_solde") else "tpl_subject_facture_situation"
                body_key = "tpl_body_facture_solde" if sit_info.get("is_solde") else "tpl_body_facture_situation"
            if sit_info.get("is_situation"):
                next_statut = SITUATION_PAYMENT_STATUS if statut_actuel == "Brouillon" else statut_actuel
            else:
                next_statut = "Envoyé" if statut_actuel == "Brouillon" else statut_actuel
        subject = render_tpl(self.settings.get(subj_key,""), doc, self.settings, pdf_path)
        if not subject:
            defaults = {
                "tpl_subject_facture": f"Votre facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_acompte": f"Facture d’acompte {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_relance_facture_1": f"Relance – Facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_relance_facture_2": f"Relance 2 – Facture {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_paye": f"Facture {numero} acquittée – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_situation": f"Facture de situation {numero} – {self.settings.get('entreprise_nom','')}",
                "tpl_subject_facture_solde": f"Facture de solde {numero} – {self.settings.get('entreprise_nom','')}"
            }
            subject = defaults.get(subj_key, f"Facture {numero} – {self.settings.get('entreprise_nom','')}")
        body = build_email_body(self.settings.get(body_key, {
                "tpl_body_facture": "Veuillez trouver votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}. TTC : {TOTAL_TTC}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_acompte": "Ci-joint votre facture d\'acompte {DOC_NUM}. Montant de l\'acompte : {ACOMPTE} (TTC). {MESSAGE_ENTREPRISE}.",
                "tpl_body_relance_facture_1": "Sauf erreur de notre part, le règlement de la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}) n’a pas encore été enregistré.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_relance_facture_2": "Il s’agit d’une seconde relance concernant la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}). Merci d’effectuer le paiement dans les meilleurs délais.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_paye": "Pour suivi, ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, acquittée. Merci pour votre règlement.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_situation": "Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM} du {DOC_DATE}.\nSituations précédentes : {SITUATION_PREV}. Montant de la situation en cours : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nRèglement par virement (IBAN indiqué sur le document) dans le délai contractuel.\nEn cas de question, merci de répondre à ce mail avec la référence {DOC_NUM}.",
                "tpl_body_facture_solde": "Bonjour {CLIENT_NOM},\nCi-joint la facture de solde {DOC_NUM} du {DOC_DATE}.\nCumul facturé à ce jour : {SITUATION_CUMUL}. Montants réglés précédemment : {SITUATION_PREV}. Reste dû après ce solde : {SITUATION_RESTE}.\n\n{Logo}\n{ENTREPRISE_NOM}  •  {ENTREPRISE_TEL}  •  {ENTREPRISE_MAIL}\nMerci pour votre confiance et votre règlement."
            }[body_key]), doc, self.settings, pdf_path)
        bcc = (self.settings.get("auto_mail_bcc","") or "").strip() or None
        ok = _ops_send_and_store_wrapper(self.settings, 'facture', doc, pdf_path, to, subject, body, bcc=bcc)
        ### __send_facture_wrapper_applied
        QMessageBox.information(self,"Email","Envoyé." if ok else "Echec d'envoi (voir log).")
        try:
            refresh_all_tabs(self)
        except Exception:
            pass
        if ok and next_statut and next_statut != statut_actuel:
            if QMessageBox.question(self, "Statut", f"Mettre le statut à « {next_statut} » ?",
                                    QMessageBox.Yes|QMessageBox.No, QMessageBox.Yes) == QMessageBox.Yes:
                self.update_status(numero, next_statut)
    def selected(self):
        try:
            sel = self.table.selectionModel().selectedRows()
            if not sel:
                return None
            row = sel[0].row()
            it = self.table.item(row, 0)
            return it.text().strip() if it else None
        except Exception:
            return None
    def _auto_mail_envoye_deferred_facture(self, numero):
        # Alias minimal: reuse unified deferred sender for 'Envoyé' (no prefix)
        try:
            return self._auto_mail_facture_deferred(numero, "")
        except Exception:
            log_error("auto_mail_envoye_deferred_facture\n"+__import__('traceback').format_exc())
    # --- Row-level Actions (delta minimal) ---
    def _find_row_by_num(self, numero):
        try:
            table = getattr(self, "table", None)
            if not table: return -1
            col_num = 0  # assume 'numero' is col 0 or adjust if a named mapping exists
            # Try to find the column index by header label if available
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        col_num = ci; break
            except Exception:
                pass
            for r in range(table.rowCount()):
                it = table.item(r, col_num)
                if it and it.text() == str(numero):
                    return r
        except Exception:
            pass
        return -1
    def _select_row_by_num(self, numero):
        try:
            r = self._find_row_by_num(numero)
            if r >= 0:
                self.table.setCurrentCell(r, 0)
                self.table.selectRow(r)
                return True
        except Exception:
            pass
        return False
    def _on_row_action(self, action, numero):
        # Route to existing handlers used by the toolbar (no rename, no refactor)
        try:
            self._select_row_by_num(numero)
        except Exception:
            pass
        def _call_first(names):
            for n in names:
                fn = getattr(self, n, None)
                if callable(fn):
                    return fn()
            return None
        a = (action or "").lower()
        if "modifier" in a or a == "edit":
            return _call_first(("edit_selected","edit_devis","modifier_devis"))
        if a.startswith("pdf") or "ouvrir pdf" in a or "open pdf" in a or a == "devis":
            fn = getattr(self, "open_pdf", None)
            if callable(fn):
                try:
                    return fn(numero)
                except TypeError:
                    pass
            return _call_first(("open_pdf_selected","pdf_selected","pdf_devis_selected","ouvrir_pdf_selected","btn_pdf_click"))
        if "email" in a or "relance" in a:
            # this should call the same popup+status path as your toolbar
            return _call_first(("email_selected","relance_selected","send_email_selected"))
        if "dupliquer" in a or "duplicate" in a:
            return _call_first(("duplicate_selected","dupliquer_selected","dupliquer_devis"))
        if "supprimer" in a or "delete" in a:
            return _call_first(("delete_selected","supprimer_selected","supprimer_devis"))
        # default: try edit
        return _call_first(("edit_selected","edit_devis","modifier_devis"))
    def _ensure_actions_column(self):
        # Add/ensure an 'Actions' column at the end and populate with per-row buttons
        try:
            table = getattr(self, "table", None)
            if not table: return
            # Check if an 'Actions' header exists
            act_col = None
            for ci in range(table.columnCount()):
                h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                if h.strip().lower() == "actions":
                    act_col = ci; break
            if act_col is None:
                act_col = table.columnCount()
                table.insertColumn(act_col)
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    table.setHorizontalHeaderItem(act_col, QTableWidgetItem("Actions"))
                except Exception:
                    pass
            # Identify numero column for retrieval
            numero_col = 0
            try:
                for ci in range(table.columnCount()):
                    h = table.horizontalHeaderItem(ci).text() if table.horizontalHeaderItem(ci) else ""
                    if h.lower().startswith("num") or h.lower().startswith("n°"):
                        numero_col = ci; break
            except Exception:
                pass
            # Populate each row with a small action bar
            from PyQt5.QtWidgets import QWidget, QHBoxLayout
            for r in range(table.rowCount()):
                num = None
                try:
                    it = table.item(r, numero_col)
                    num = it.text() if it else ""
                except Exception:
                    num = ""
                w = QWidget(table)
                h = QHBoxLayout(w); h.setContentsMargins(0,0,0,0); h.setSpacing(4)
                def _btn(label, act, numero_val):
                    b = QToolButton(w); b.setText(label); b.setCursor(Qt.PointingHandCursor)
                    b.clicked.connect(lambda _=False, a=act, n=numero_val: self._on_row_action(a, n))
                    if label=='Mail' or act=='relance/email': b.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    return b
                # Keep concise labels to avoid layout overflow
                for (lab, act) in (("Modifier","modifier"), ("DEVIS","pdf"), ("Mail","relance/email"), ("Dupliquer","dupliquer")):
                    try:
                        b = _btn(lab, act, num)
                        if act == "pdf" and hasattr(self, "TAB_KIND") and str(getattr(self, "TAB_KIND")).lower().startswith("fact"):
                            b.setText("Facture"); b.setToolTip("Ouvrir/Créer le PDF de la facture")
                        h.addWidget(b)
                    except Exception:
                        pass
                try:
                    tb = QToolButton(w); tb.setText("Suivi du dossier")
                    tb.setStyleSheet("QToolButton{background-color:#e3f2fd; border:1px solid #90caf9; border-radius:4px; padding:2px 6px;} QToolButton:hover{background-color:#bbdefb;}")
                    _menu = QMenu(tb)
                    _a1 = _menu.addAction("📁 Ouvrir le dossier d’opération")
                    _a2 = _menu.addAction("➕ Ajouter des pièces")
                    _a3 = _menu.addAction("🧾 Ajouter un achat")
                    _a4 = _menu.addAction("📄 Ajouter un devis")
                    _menu.addSeparator()
                    _a_pay = _menu.addAction("💶 Suivi paiements…")
                    def _row_suivi_facture(n):
                        try:
                            try:
                                doc = assemble_doc("facture", n)
                                if doc:
                                    try:
                                        out = _safe_write_facturx_pdf(doc, self.settings, n)
                                    except Exception:
                                        out = os.path.join(DOCS_DIRS.get("factures", os.path.join(DATA_DIR, "factures")), f"{n}.pdf")
                                        try:
                                            generate_facture_pdf(doc, self.settings, out)
                                        except Exception:
                                            pass
                                    try:
                                        _op_store_pdf('facture', doc, out)
                                    except Exception:
                                        pass
                            except Exception:
                                pass
                            _op_open_current_folder_for_tab(self, "facture", n)
                        except Exception:
                            try:
                                log_error("_row_suivi_facture\n"+__import__('traceback').format_exc())
                            except Exception:
                                pass
                    _a1.triggered.connect(lambda *_ , n=num: _row_suivi_facture(n))
                    _a2.triggered.connect(lambda *_, n=num: _op_add_files_for_tab(self, "facture", n))
                    _a3.triggered.connect(lambda *_, n=num: _op_add_achat_for_tab(self, "facture", n))
                    _a4.triggered.connect(lambda *_, n=num: _op_add_devis_fournisseur_for_tab(self, "facture", n))
                    _a_pay.triggered.connect(lambda *_, n=num: _op_show_payments_for_tab(self, n))
                    tb.setMenu(_menu); tb.setPopupMode(QToolButton.InstantPopup)
                    h.addWidget(tb)
                except Exception:
                    pass
                w.setLayout(h)
                table.setCellWidget(r, act_col, w)
        except Exception:
            try:
                log_error("_ensure_actions_column\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    # --- Auto-mail helpers for Factures (delta minimal, deferred) ---
    _mail_sent_cache = set()
    def _auto_mail_facture_deferred(self, numero, prefix=""):
        try:
            s = ensure_settings()
            doc = assemble_doc("facture", numero)
            if not doc or not doc.get("numero"):
                return
            facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            sit_info = _get_situation_info(doc, include_rank=True, all_factures=facts)
            to = (doc.get("client_email","") or "").strip()
            if not to:
                return
            # Ensure PDF exists
            try:
                pdf_dir = DOCS_DIRS.get("factures") if isinstance(DOCS_DIRS, dict) else DOCS_DIRS["factures"]
            except Exception:
                pdf_dir = os.path.join(DATA_DIR, "factures")
            os.makedirs(pdf_dir, exist_ok=True)
            pdf_path = os.path.join(pdf_dir, f"{numero}.pdf")
            try:
                pdf_path = _safe_write_facturx_pdf(doc, s, numero)
            except Exception:
                pass  # if it already exists
            pdf_path = _ensure_situation_pdf_naming(pdf_path, doc, numero, sit_info=sit_info, all_factures=facts)
            subj_key = "tpl_subject_facture"
            body_key = "tpl_body_facture"
            subj_tpl = s.get(subj_key, "Votre facture {DOC_NUM} – {ENTREPRISE_NOM}")
            body_tpl = s.get(body_key,   "Bonjour {CLIENT_NOM},\nVeuillez trouver votre {DOC_TYPE} {DOC_NUM}.")
            if sit_info.get("is_situation"):
                subj_key = "tpl_subject_facture_solde" if sit_info.get("is_solde") else "tpl_subject_facture_situation"
                body_key = "tpl_body_facture_solde" if sit_info.get("is_solde") else "tpl_body_facture_situation"
                subj_tpl = s.get(subj_key, subj_tpl)
                body_tpl = s.get(body_key, body_tpl)
            if prefix:
                subj_tpl = f"{prefix} " + subj_tpl
            subject = render_tpl(subj_tpl, doc, s, pdf_path)
            body = build_email_body(body_tpl, doc, s, pdf_path)
            # Bcc if configured
            bcc = (s.get("auto_mail_bcc","") or "").strip() or None
            # Use existing sending function if available
            fn = globals().get("send_email_with_attachment")
            if callable(fn):
                if fn(s, to, subject, body, pdf_path if os.path.exists(pdf_path) else None, bcc=bcc):
                    self._mail_sent_cache.add(numero)
            else:
                # Minimal inline sender (non-intrusive)
                try:
                    host = s.get("smtp_host",""); port = int(s.get("smtp_port",587))
                    user = s.get("smtp_user",""); pwd = s.get("smtp_pass","")
                    use_tls = bool(s.get("smtp_tls", True)); use_ssl = bool(s.get("smtp_ssl", False))
                    from email.mime.multipart import MIMEMultipart
                    from email.mime.text import MIMEText
                    from email.mime.base import MIMEBase
                    from email import encoders
                    msg = MIMEMultipart()
                    msg["Subject"] = subject
                    msg["From"] = s.get("entreprise_mail","") or user
                    msg["To"] = to
                    if bcc:
                        msg["Bcc"] = bcc
                    msg.attach(MIMEText(body, "plain", "utf-8"))
                    if os.path.exists(pdf_path):
                        part = MIMEBase("application","octet-stream")
                        with open(pdf_path,"rb") as f: part.set_payload(f.read())
                        encoders.encode_base64(part)
                        part.add_header("Content-Disposition", f'attachment; filename="{os.path.basename(pdf_path)}"')
                        msg.attach(part)
                    if use_ssl:
                        server = smtplib.SMTP_SSL(host, port, timeout=15)
                    else:
                        server = smtplib.SMTP(host, port, timeout=15)
                    server.ehlo()
                    if use_tls and not use_ssl:
                        server.starttls()
                    if user:
                        server.login(user, pwd)
                    recipients = [to] + ([bcc] if bcc else [])
                    server.sendmail(msg["From"], recipients, msg.as_string())
                    server.quit()
                    self._mail_sent_cache.add(numero)
                except Exception:
                    log_error("_auto_mail_facture_deferred inline smtp\n"+__import__('traceback').format_exc())
        except Exception:
            log_error("_auto_mail_facture_deferred\n"+__import__('traceback').format_exc())
    def _trigger_auto_mail_for_status(self, numero, new_statut):
        try:
            s = ensure_settings()
            k = new_statut.strip().lower()
            # guard against double immediate send
            if numero in self._mail_sent_cache:
                return
            def _defer(prefix=""):
                QTimer.singleShot(0, lambda: self._auto_mail_facture_deferred(numero, prefix))
            if s.get("auto_mail_on_status_envoye") and k == "envoyé":
                _defer("")
            if s.get("auto_mail_on_status_relance1") and k in ("relance 1", "relance1"):
                _defer("[Relance 1]")
            if s.get("auto_mail_on_status_relance2") and k in ("relance 2", "relance2"):
                _defer("[Relance 2]")
            if s.get("auto_mail_on_status_payee") and k in ("payée","payee"):
                _defer("[Facture payée]")
        except Exception:
            log_error("_trigger_auto_mail_for_status\n"+__import__('traceback').format_exc())
    # --- Column tuning: narrow "Objet" with wrap; widen "Actions" ---
    def _tune_columns_for_readability(self, objet_width=240):
        try:
            table = getattr(self, "table", None)
            if not table:
                return
            header = table.horizontalHeader()
            # Find columns by header labels
            objet_col = actions_col = None
            for ci in range(table.columnCount()):
                head = table.horizontalHeaderItem(ci)
                title = head.text() if head else ""
                t = (title or "").strip().lower()
                if t == "objet" and objet_col is None:
                    objet_col = ci
                if t == "actions" and actions_col is None:
                    actions_col = ci
            table.setWordWrap(True)
            if objet_col is not None:
                try:
                    table.setItemDelegateForColumn(objet_col, _WrapItemDelegate(table))
                except Exception:
                    pass
                try:
                    header.setSectionResizeMode(objet_col, QHeaderView.Interactive)
                except Exception:
                    pass
                try:
                    table.setColumnWidth(objet_col, int(objet_width))
                except Exception:
                    pass
            if actions_col is not None:
                try:
                    header.setSectionResizeMode(actions_col, QHeaderView.ResizeToContents)
                except Exception:
                    pass
            # Adjust row heights to "Objet"
            if objet_col is not None:
                fm = table.fontMetrics()
                for r in range(table.rowCount()):
                    try:
                        it = table.item(r, objet_col)
                        text = it.text() if it else ""
                        if not text:
                            continue
                        width = table.columnWidth(objet_col)
                        rect = fm.boundingRect(QtCore.QRect(0,0,int(width)-10, 2000), QtCore.Qt.TextWordWrap, text)
                        h = max(28, rect.height() + 12)
                        if table.rowHeight(r) < h:
                            table.setRowHeight(r, h)
                    except Exception:
                        pass
        except Exception:
            try:
                log_error("_tune_columns_for_readability\\n"+__import__('traceback').format_exc())
            except Exception:
                pass
class ClientsTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouveau"); self.btn_edit=QPushButton("Modifier"); self.btn_del=QPushButton("Supprimer"); self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Rechercher..."); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_del); top.addStretch(1); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        v.addLayout(top)
        # --- UI fix (Clients): reserve right margin equal to side-card width ---
        # Soft injection: keeps buttons order; avoids refactor; anchors search above table grid.
        try:
            from PyQt5.QtWidgets import QSizePolicy, QSpacerItem
            _w = getattr(self, "_sidecard", None)
            _side_w = int(_w.width()) if (_w and int(getattr(_w, "width", lambda: 0)()) > 0) else 440
            top.addItem(QSpacerItem(_side_w, 10, QSizePolicy.Fixed, QSizePolicy.Minimum))
        except Exception:
            pass
        self.table=QTableWidget(0,10); self.table.setHorizontalHeaderLabels(["ID","Genre","Nom","Prénom","Email","Téléphone","Adresse","CodePostal","Ville","SIRET"])
        try:
            from PyQt5.QtWidgets import QHeaderView as _QHV
            _hdr=self.table.horizontalHeader()
            for _i in range(self.table.columnCount()):
                _hdr.setSectionResizeMode(_i, _QHV.ResizeToContents)
        except Exception:
            pass
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        ### _clients_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.Stretch)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        hdr.setSectionResizeMode(4, _QHV.Stretch)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.Stretch)
        hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(8, _QHV.Stretch); v.addWidget(self.table)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit', lambda: None)())
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_del","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouveau client")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier le client sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer le client sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des clients")
        
        self.btn_refresh.clicked.connect(self.load); self.btn_new.clicked.connect(self.new); self.btn_edit.clicked.connect(lambda: getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()); self.btn_del.clicked.connect(self.delete); self.ed_filter.textChanged.connect(self.apply_filter)
        self.load()
    def load(self):
        # Source: CSV_CLIENTS (data_clients.csv) + enrichissement via JSON maître
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_CLIENTS))
        self.table.setRowCount(0)
        master = _load_clients_master()
        for r in self.rows:
            row = self.table.rowCount()
            self.table.insertRow(row)
            email = (r.get("Email","") or "").strip()
            key = email.lower() if "@" in email else (r.get("Nom","") or "").strip()
            m = master.get(key, {}) if isinstance(master, dict) else {}
            civ = (r.get("Genre") or r.get("client_civilite") or m.get("civilite") or "").strip()
            prenom = (r.get("Prenom") or r.get("client_prenom") or m.get("prenom") or "").strip()
            vals = [
                r.get("ID",""),
                civ,
                r.get("Nom",""),
                prenom,
                r.get("Email",""),
                r.get("Telephone",""),
                r.get("Adresse",""),
                r.get("CodePostal",""),
                r.get("Ville",""),
                r.get("SIRET",""),
            ]
            # Écriture explicite par index pour éviter tout décalage
            for col, val in enumerate(vals):
                item = QTableWidgetItem(str(val))
                self.table.setItem(row, col, item)
        apply_table_header_theme(self.table, ensure_settings().get("theme_color_hex","#0A84FF"))
        self.apply_filter()
    def selected_index(self):
        sel=self.table.selectedItems(); 
        return sel[0].row() if sel else -1
    def new(self):
        dlg=SimpleClientDialog(self)
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values()
            try:
                nums=[int(str(r.get("ID","").strip()).replace("CL","").lstrip("0") or 0) for r in self.rows]
                nextn=(max(nums) if nums else 0)+1
            except Exception:
                nextn=len(self.rows)+1
            vals["ID"]=f"CL{nextn:04d}"
            self.rows.append(vals)
            self._persist_and_reload()
    def edit(self):
        idx=self.selected_index()
        if idx<0: return
        dlg=SimpleClientDialog(self, self.rows[idx])
        if dlg.exec_()==QDialog.Accepted:
            vals=dlg.values(); vals["ID"]=self.rows[idx].get("ID","")
            self.rows[idx]=vals
            self._persist_and_reload()
    
    def delete(self):
        idx=self.selected_index()
        if idx<0: return
        if QMessageBox.question(self,"Supprimer","Confirmer la suppression ?")==QMessageBox.Yes:
            # Clé pour sidecars (Email prioritaire sinon Nom)
            try:
                key = (self.rows[idx].get("Email") or self.rows[idx].get("Nom") or "").strip()
            except Exception:
                key = ""
            self.rows.pop(idx)
            self._persist_and_reload()
            # Nettoyage sidecars
            try:
                if key:
                    mp = _load_prenom_map()
                    if key in mp:
                        mp.pop(key, None); _save_prenom_map(mp)
            except Exception:
                pass
            try:
                if key:
                    mc = _load_civilite_map()
                    if key in mc:
                        mc.pop(key, None); _save_civilite_map(mc)
            except Exception:
                pass
    def _persist_and_reload(self):
        headers=["ID","Genre","Nom","Prenom","Email","Telephone","Adresse","CodePostal","Ville","SIRET"]
        try:
            save_csv(os.path.join(DATA_DIR, CSV_CLIENTS), self.rows, headers)
        except Exception as _e:
            try:
                log_error("persist_clients: "+str(_e))
            except Exception:
                pass
        try:
            self.load()
        except Exception:
            pass
        try:
            if hasattr(self, "_autofit_clients"):
                self._autofit_clients()
        except Exception:
            pass
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens)
# -------- Catalogue tab --------
class CatalogueTab(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        v=QVBoxLayout(self)
        top=QHBoxLayout()
        self.btn_new=QPushButton("Nouvel item"); self.btn_edit=QPushButton("Modifier"); self.btn_del=QPushButton("Supprimer"); self.ed_filter=QLineEdit(); self.ed_filter.setPlaceholderText("Rechercher..."); self.btn_refresh=QPushButton("Rafraîchir")
        top.addWidget(self.btn_new); top.addWidget(self.btn_edit); top.addWidget(self.btn_del); top.addStretch(1); top.addWidget(self.ed_filter); top.addWidget(self.btn_refresh)
        # Bouton changement TVA (bulk)
        self.btn_tva = QPushButton("Changer TVA")
        top.addWidget(self.btn_tva)
        
        # --- Importer PDF → Catalogue (QToolButton + menu) ---
        try:
            self.btn_import = QToolButton()
            self.btn_import.setText("Importer PDF → Catalogue")
            _m = QMenu(self.btn_import)
            _act_dir = _m.addAction("Depuis un dossier…")
            _act_files = _m.addAction("Depuis des fichiers…")
            self.btn_import.setMenu(_m)
            self.btn_import.setPopupMode(QToolButton.InstantPopup)
            top.addWidget(self.btn_import)
            _act_dir.triggered.connect(self._catalogue_pdf_import_select_folder)
            _act_files.triggered.connect(self._catalogue_pdf_import_select_files)
        except Exception:
            try:
                from PyQt5.QtWidgets import QMessageBox
                QMessageBox.warning(self, "Catalogue", "Le bouton d'import PDF n'a pas pu être initialisé (continuation sans crash).")
            except Exception:
                pass
        v.addLayout(top)
        self.table=QTableWidget(0,8); self.table.setHorizontalHeaderLabels(["ID","Réf","Type","Désignation","Prix HT","TVA %","Unité","Catég."])
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        self.table.setSelectionBehavior(_QIV.SelectRows)
        self.table.setSelectionMode(_QIV.ExtendedSelection)
        self.btn_tva.clicked.connect(self.bulk_change_tva)
        ### _catalogue_tab_hdr_resize
        hdr=self.table.horizontalHeader()
        from PyQt5.QtWidgets import QHeaderView as _QHV
        hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(3, _QHV.Stretch)
        hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
        hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
        try: hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
        except Exception: pass
        v.addWidget(self.table)
        try:
            self._build_catalogue_tutos(v)
        except Exception:
            pass
        try:
            self._build_catalogue_tutos(v)
        except Exception:
            pass
        self.table.itemDoubleClicked.connect(self.on_double_click)
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_new","btn_edit","btn_del","btn_refresh"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_new":
                    btn.setToolTip("Créer un nouvel item")
                elif btn_name == "btn_edit":
                    btn.setToolTip("Modifier l'item sélectionné")
                elif btn_name == "btn_del":
                    btn.setToolTip("Supprimer l'item sélectionné")
                elif btn_name == "btn_refresh":
                    btn.setToolTip("Actualiser la liste des items")
        
        self.btn_refresh.clicked.connect(self.load); self.btn_new.clicked.connect(self.new); self.btn_edit.clicked.connect(self.edit); self.btn_del.clicked.connect(self.delete); self.ed_filter.textChanged.connect(self.apply_filter)
        self.load()
    def load(self):
        self.rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
        self.table.setRowCount(0)
        # Auto-fix TVA: if Taux_TVA vide/0, appliquer la TVA des paramètres
        try:
            _s = ensure_settings()
            _tva_def = _safe_float(_s.get('tva', 0.2), 0.2)
            _changed = False
            for _it in (self.rows or []):
                _cur = _safe_float(_it.get('Taux_TVA',''), -1.0)
                if _cur <= 0.0 or _cur == -1.0:
                    _it['Taux_TVA'] = f"{float(_tva_def):.2f}"
                    _changed = True
            if _changed:
                save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ['ID','Reference','Type','Designation','Prix_HT','Taux_TVA','Unite','Categorie'])
        except Exception:
            log_error('catalogue_tva_autofix\n'+__import__('traceback').format_exc())
        for it in self.rows:
            row = self.table.rowCount(); self.table.insertRow(row)
            vals = [
                it.get('ID',''), it.get('Reference',''), it.get('Type',''), it.get('Designation',''),
                f"{_safe_float(it.get('Prix_HT',0)):.2f}",
                f"{int(round(_safe_float(it.get('Taux_TVA',0.2)) * 100))}",
                it.get('Unite',''), it.get('Categorie','')
            ]
            for c, v in enumerate(vals): self.table.setItem(row, c, QTableWidgetItem(str(v)))
        apply_table_header_theme(self.table, ensure_settings().get("theme_color_hex","#0A84FF"))
        self.apply_filter()
        try:
            self.table.resizeRowsToContents()
        except Exception:
            pass
    def selected_index(self):
        sel=self.table.selectedItems(); 
        return sel[0].row() if sel else -1
    def new(self):
        # minimal inline creation via input dialogs
        id_new=str(1 + max([int(x.get("ID","0") or 0) for x in self.rows] or [0]))
        typ,ok=QInputDialog.getItem(self,"Type","Type:",["Pièces","Main d’œuvre"],0,False);
        if not ok: return
        def _next_ref(rows, prefix):
            import re
            mx=0
            for x in rows:
                code=(x.get("Reference","") or "")
                m=re.match(rf"{prefix}(\d+)$", code)
                if m:
                    val=int(m.group(1))
                    if val>mx: mx=val
            return f"{prefix}{mx+1:04d}"
        pref = "PC" if (typ=="Pièces") else "MO"
        ref_default = _next_ref(self.rows, pref)
        ref,ok=QInputDialog.getText(self,"Référence","Référence:", text=ref_default);
        if not ok: return
        des,ok=QInputDialog.getMultiLineText(self,"Désignation","Texte:"); 
        if not ok: return
        pu,ok=QInputDialog.getText(self,"Prix HT","Prix HT (€):"); 
        if not ok: return
        default_tva_pct = str(int(round(float(ensure_settings().get("tva",0.2))*100)))
        tva,ok=QInputDialog.getText(self,"TVA %","TVA (%):", text=default_tva_pct); 
        if not ok: return
        default_index = UNIT_CHOICES.index("H") if typ == "Main d’œuvre" else (UNIT_CHOICES.index("U") if "U" in UNIT_CHOICES else 0)
        unit,ok=QInputDialog.getItem(self,"Unité","Unité:", UNIT_CHOICES, default_index, True)
        if not ok: return
        cat,ok=QInputDialog.getText(self,"Catégorie","Catégorie:"); 
        if not ok: return
        self.rows.append({"ID":id_new,"Reference":ref,"Type":typ,"Designation":des,"Prix_HT":f"{_safe_float(pu,0):.2f}","Taux_TVA":f"{_safe_float(tva,20)/100:.2f}","Unite":unit,"Categorie":cat})
        save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"]); self.load()
    
    def delete(self):
        # Suppression multiple : toutes les lignes sélectionnées (par ID)
        try:
            from PyQt5.QtWidgets import QMessageBox, QAbstractItemView as _QIV
        except Exception:
            QMessageBox = None
        rows_sel = set()
        try:
            for mi in self.table.selectionModel().selectedRows():
                rows_sel.add(mi.row())
        except Exception:
            try:
                rows_sel = {it.row() for it in self.table.selectedItems()}
            except Exception:
                rows_sel = set()
        rows_sel = sorted(rows_sel)
        if not rows_sel:
            return
        ids = []
        for r in rows_sel:
            try:
                it = self.table.item(r, 0)
                if it:
                    text = (it.text() or "").strip()
                    if text:
                        ids.append(text)
            except Exception:
                pass
        if not ids:
            return
        try:
            if QMessageBox and QMessageBox.question(self, "Supprimer", f"Supprimer {len(ids)} ligne(s) sélectionnée(s) ?") != QMessageBox.Yes:
                return
        except Exception:
            pass
        idset = set(str(x) for x in ids)
        try:
            self.rows = [it for it in self.rows if str(it.get("ID","")).strip() not in idset]
        except Exception:
            pass
        try:
            save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows,
                     ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
        except Exception:
            pass
        try:
            self.load()
        except Exception:
            pass
    def bulk_change_tva(self):
        """Applique un taux de TVA (en %) à tous les articles du catalogue."""
        try:
            from PyQt5.QtWidgets import QInputDialog, QMessageBox
            s = ensure_settings()
            default_pct = int(round(_safe_float(s.get("tva", 0.2), 0.2) * 100))
            pct, ok = QInputDialog.getDouble(self, "Changer TVA", "TVA (%) :", float(default_pct), 0.0, 100.0, 2)
            if not ok:
                return
            rate = float(pct) / 100.0
            rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
            if isinstance(rows, list):
                for it in rows:
                    it["Taux_TVA"] = f"{float(rate):.2f}"
                save_csv(os.path.join(DATA_DIR, CSV_ITEMS), rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
            try:
                s["tva"] = rate
                save_settings(s)
            except Exception:
                pass
            self.load()
            try:
                QMessageBox.information(self, "TVA", "TVA appliquée à tout le catalogue.")
            except Exception:
                pass
        except Exception:
            log_error("bulk_change_tva\n"+__import__('traceback').format_exc())
    def apply_filter(self):
        try:
            tokens = _search_tokens(self.ed_filter.text())
        except Exception:
            tokens = []
        _filter_table_by_tokens(self.table, tokens)
    
    def on_double_click(self, item):
        """Sécurise le double-clic: ignore en-têtes, lignes invalides, et débounce."""
        try:
            if item is None:
                return
            r = getattr(item, "row", lambda: -1)()
            if r is None or r < 0 or r >= self.table.rowCount():
                return
            # sélectionne proprement la ligne cliquée
            try:
                self.table.selectRow(r)
            except Exception:
                pass
            # débounce pour éviter double ouverture
            if getattr(self, "_dblclick_lock", False):
                return
            self._dblclick_lock = True
            try:
                # edit() est déjà protégé par selected_index() < 0 -> return
                getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
            finally:
                from PyQt5.QtCore import QTimer
                QTimer.singleShot(150, lambda: setattr(self, "_dblclick_lock", False))
        except Exception:
            try:
                log_error("catalogue_double_click\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    def edit_selected(self):
        """Alias double-clic → édition sécurisée (si une ligne est sélectionnée)."""
        try:
            idx = self.selected_index()
            if idx is None or idx < 0:
                return
            return getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
        except Exception:
            try:
                log_error("catalogue_edit_selected\n"+__import__('traceback').format_exc())
            except Exception:
                pass
    def edit_selected(self):
        """Double-clic sur une ligne du Catalogue → déclenche getattr(self,'edit', getattr(self,'edit_selected', lambda: None))() (alias)."""
        try:
            return getattr(self,'edit', getattr(self,'edit_selected', lambda: None))()
        except Exception:
            pass
    def edit(self):
        idx = self.selected_index()
        if idx < 0:
            return
        row = self.rows[idx]
        from PyQt5.QtWidgets import QInputDialog
        ref,ok=QInputDialog.getText(self,"Référence","Référence:", text=row.get("Reference",""))
        if not ok: return
        typ,ok=QInputDialog.getItem(self,"Type","Type:",["Pièces","Main d’œuvre"],0,False)
        if not ok: return
        des,ok=QInputDialog.getMultiLineText(self,"Désignation","Texte:", text=row.get("Designation",""))
        if not ok: return
        pu,ok=QInputDialog.getText(self,"Prix HT","Prix HT (€):", text=row.get("Prix_HT","0.00"))
        if not ok: return
        tva_pct = str(int(round(float(row.get("Taux_TVA","0.20"))*100))) if row.get("Taux_TVA") else str(int(round(float(ensure_settings().get("tva",0.2))*100)))
        tva,ok=QInputDialog.getText(self,"TVA %","TVA (%):", text=tva_pct)
        if not ok: return
        default_index = UNIT_CHOICES.index("H") if typ == "Main d’œuvre" else (UNIT_CHOICES.index("U") if "U" in UNIT_CHOICES else 0)
        unit, ok = QInputDialog.getItem(self, "Unité", "Unité:", UNIT_CHOICES, default_index, True)
        if not ok: return
        cat,ok=QInputDialog.getText(self,"Catégorie","Catégorie:", text=row.get("Categorie",""))
        if not ok: return
        self.rows[idx] = {"ID":row.get("ID",""), "Reference":ref, "Type":typ, "Designation":des,
                          "Prix_HT":f"{float(pu or 0):.2f}", "Taux_TVA":f"{(float(tva or 20)/100):.2f}",
                          "Unite":unit, "Categorie":cat}
        save_csv(os.path.join(DATA_DIR, CSV_ITEMS), self.rows, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
        self.load()
# -------- URSSAF tab --------
    # === PDF → Catalogue import (additif, local à l'onglet) =====================
    def _catalogue_pdf_import_select_folder(self):
        """Importer depuis un dossier (avec option sous-dossiers)."""
        try:
            folder = QFileDialog.getExistingDirectory(self, "Dossier PDF")
            if not folder:
                return
            include_sub = QMessageBox.question(
                self, "Inclure sous-dossiers ?",
                "Inclure les sous-dossiers lors du scan ?",
                QMessageBox.Yes | QMessageBox.No, QMessageBox.No
            ) == QMessageBox.Yes
            from pathlib import Path
            pdfs = sorted(Path(folder).rglob("*.pdf") if include_sub else Path(folder).glob("*.pdf"))
            if not pdfs:
                QMessageBox.information(self, "Import PDF", "Aucun PDF trouvé dans ce dossier.")
                return
            self._catalogue_pdf_import_preview([str(p) for p in pdfs])
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_select_folder\\n"+str(e))
            except Exception:
                pass
    def _catalogue_pdf_import_select_files(self):
        """Importer en sélectionnant plusieurs fichiers PDF."""
        try:
            files, _ = QFileDialog.getOpenFileNames(self, "Sélectionner des PDF", "", "PDF (*.pdf)")
            if not files:
                return
            self._catalogue_pdf_import_preview(files)
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_select_files\\n"+str(e))
            except Exception:
                pass
    def _catalogue_pdf_to_float(self, fr: str) -> float:
        try:
            s = str(fr if fr is not None else "").strip()
            s = s.replace("\u00A0", " ").replace("\u202F", " ")
            for cur in ("€", "EUR", "eur"):
                s = s.replace(cur, "")
            import re as _re
            matches = list(_re.finditer(r"(?:[-+]?\d{1,3}(?:[\s\u00A0\u202F]\d{3})*[\.,]\d+|[-+]?\d+[\.,]\d+|[-+]?\d+)", s))
            if matches:
                s = matches[-1].group(0)
            s = s.replace(" ", "").replace("\u00A0", "").replace("\u202F", "").replace(",", ".")
            return float(s)
        except Exception:
            return 0.0
    def _catalogue_pdf_extract_items_from_pdf(self, path, aggressive: bool = False):
        """
        Extraction robuste d'articles depuis un PDF de devis/facture.
        Retourne une liste de dicts avec les clés EXACTES attendues par la preview :
        Reference, Type, Designation, Prix_HT, Taux_TVA, Unite, Categorie
        """
        # --- Imports locaux (delta minimal, pas d'impact global) ---
        try:
            from pdfminer.high_level import extract_text
            try:
                from pdfminer.layout import LAParams  # présent avec pdfminer.six
            except Exception:
                LAParams = None
        except Exception:
            return []
        import re
        import unicodedata
        # ---------- Helpers locaux (internes à la fonction) ----------
        def _norm(s: str) -> str:
            s = unicodedata.normalize("NFKD", s or "")
            s = "".join(c for c in s if not unicodedata.combining(c))
            s = s.replace("\xa0", " ").replace("\u202f", " ")
            s = re.sub(r"\s+", " ", s.strip().lower())
            return s
        def _money_to_float(txt: str) -> float:
            txt = txt.replace("\xa0", " ").replace("\u202f", " ")
            txt = txt.replace(" ", "")
            txt = txt.replace(",", ".")
            try:
                return float(txt)
            except Exception:
                return 0.0
        # stop-list complète (ligne entière à ignorer comme désignation)
        _STOP = {
            "total ttc", "total ht", "total net ht", "montant ht", "montant total",
            "net a payer", "net à payer", "tva", "acompte", "solde", "remise",
            "escompte", "tel", "tél", "fax", "email", "e-mail", "www", "site",
            "siret", "tva intra", "rcs", "ape", "capital", "rib", "iban", "bic",
            "banque", "guichet", "domiciliation", "bon pour accord", "delai",
            "délai", "penalite", "pénalité", "mentions legales", "mentions légales",
            "prix unitaire", "pu", "p.u", "prix total", "unite", "unité", "quantite",
            "quantité", "qte", "qté", "taux", "contrat", "assurance"
        }
        _HDR_HINTS = ("designation", "désignation", "description", "libelle", "libellé", "objet", "prestation")
        _TOTAL_HINTS = ("total net ht", "total ht", "montant ht", "tva", "total ttc", "montant total", "net a payer", "net à payer", "ttc")
        _REF_RE = re.compile(r"^(?:[A-Za-z0-9]{1,5}(?:[./-][A-Za-z0-9]{1,5}){0,3}|[A-Za-z]{1,4}\d{1,4})$")
        _HAS_LETTERS = re.compile(r"[A-Za-zÀ-ÖØ-öø-ÿ]")
        _PERCENT_RE = re.compile(r"[\d\s\u00A0\u202F\.,]+\s*%")
        # Montants : avec €/EUR ; et décimaux sans € si aggressive ou si la ligne n'a pas d'€.
        _MONEY_EUR_RE = re.compile(r"(?<!\d)(\d{1,3}(?:[ \u00A0\u202F]\d{3})*[\.,]\d{2})(?:\s*(?:€|eur))?", re.I)
        _MONEY_NOEUR_RE = re.compile(r"(?<!\d)(\d+[\.,]\d{2})(?!\s*%)", re.I)
        def _clean_segment(seg: str) -> str:
            seg = seg.strip()
            seg = re.sub(r"^(?:€|eur|ht|ttc|:|-|–|—|\||;)*\s*", "", seg, flags=re.I)
            seg = re.sub(r"^\s*[\d\.,]+\s*%", "", seg)  # enlève un pourcentage d'ouverture
            seg = seg.strip(" -–—:|;.,")
            return seg.strip()
        def _is_valid_designation(text: str) -> bool:
            if not text:
                return False
            txt = _clean_segment(text)
            if not txt:
                return False
            n = _norm(txt)
            if any(n == w or n.startswith(w + " ") or n.endswith(" " + w) for w in _STOP):
                return False
            if not _HAS_LETTERS.search(txt):
                return False
            if _REF_RE.match(txt.strip()):
                return False
            return True
        def _classify_type(designation: str) -> str:
            n = _norm(designation)
            if ("mo " in n) or (" main d oeuvre" in n) or ("main d'oeuvre" in n) or ("main doeuvre" in n) or ("main-d'oeuvre" in n):
                return "Main d’œuvre"
            return "Pièces"
        def _fmt_price(v: float) -> str:
            return "{:.2f}".format(v)
        # ---------- Extraction texte (2 profils LAParams) ----------
        text = ""
        profiles = [None, dict(char_margin=3.0, word_margin=0.2, line_margin=0.3, boxes_flow=None)]
        for prof in profiles:
            try:
                if prof and LAParams:
                    text = extract_text(path, laparams=LAParams(**prof))
                else:
                    text = extract_text(path)
            except Exception:
                text = ""
            if text and text.strip():
                break
        # --- OCR fallback (transparent) ---
        if not (text and text.strip()):
            def _ocr_pdf_to_text(_pdf_path: str, lang: str = "fra+eng", dpi: int = 300) -> str:
                try:
                    import os
                    import pytesseract
                    # Honor TESSERACT_CMD / TESSERACT_PATH if provided
                    def _ensure_tesseract_cmd():
                        import os, shutil, pytesseract
                        # 1) Env explicit
                        for _k in ("TESSERACT_CMD","TESSERACT_PATH"):
                            _p = os.environ.get(_k)
                            if _p and os.path.exists(_p):
                                pytesseract.pytesseract.tesseract_cmd = _p
                                return _p
                        # 2) Common Windows installs
                        for _p in (r"C:\Program Files\Tesseract-OCR\tesseract.exe",
                                   r"C:\Program Files (x86)\Tesseract-OCR\tesseract.exe"):
                            if os.path.exists(_p):
                                pytesseract.pytesseract.tesseract_cmd = _p
                                return _p
                        # 3) PATH
                        _p = shutil.which("tesseract")
                        if _p:
                            pytesseract.pytesseract.tesseract_cmd = _p
                        return _p
                    _tcmd = _ensure_tesseract_cmd()
                    try:
                        _logd = os.path.join(os.path.dirname(__file__), 'data')
                        os.makedirs(_logd, exist_ok=True)
                        with open(os.path.join(_logd,'ocr_last.log'),'a',encoding='utf-8') as _lf:
                            _lf.write(f"[OCR] pdf={_pdf_path} tcmd={_tcmd}\n")
                    except Exception:
                        pass
                    for _k in ("TESSERACT_CMD","TESSERACT_PATH"):
                        _cmd = os.environ.get(_k)
                        if _cmd:
                            try:
                                pytesseract.pytesseract.tesseract_cmd = _cmd
                            except Exception:
                                pass
                    _out = ""
                    # Auto-pick language
                    try:
                        get_langs = getattr(pytesseract, 'get_languages', None)
                        avail = get_langs(config='') if callable(get_langs) else []
                        if not avail:
                            from pathlib import Path as _P
                            _tcmdp = getattr(pytesseract.pytesseract, 'tesseract_cmd', None)
                            if _tcmdp:
                                td = _P(_tcmdp).parent / 'tessdata'
                                if td.exists():
                                    avail = [p.stem for p in td.glob('*.traineddata')]
                        _lang = 'fra+eng' if ('fra' in avail and 'eng' in avail) else ('fra' if 'fra' in avail else ('eng' if 'eng' in avail else lang))
                        lang = _lang
                        try:
                            with open(os.path.join(os.path.dirname(__file__), 'data', 'ocr_last.log'),'a',encoding='utf-8') as _lf:
                                _lf.write(f"[OCR] chosen_lang={lang} avail={avail}\n")
                        except Exception:
                            pass
                    except Exception:
                        pass
                    # Try PyMuPDF (fitz) first — fast and no external binaries
                    try:
                        import fitz  # PyMuPDF
                        from PIL import Image
                        doc = fitz.open(_pdf_path)
                        if getattr(doc, "page_count", 0) <= 0:
                            return ""
                        zoom = dpi / 72.0
                        for page in doc:
                            pix = page.get_pixmap(matrix=fitz.Matrix(zoom, zoom), alpha=False)
                            im = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                            try:
                                im = im.convert("L")  # grayscale helps OCR
                            except Exception:
                                pass
                            try:
                                t = pytesseract.image_to_string(im, lang=lang, config="--psm 6")
                            except Exception:
                                t = ""
                            if t:
                                _out += ("\n" + t)
                        return _out.strip()
                    except Exception:
                        pass
                    # Fallback: pdf2image (requires poppler)
                    try:
                        from pdf2image import convert_from_path
                        from PIL import Image
                        pages = convert_from_path(_pdf_path, dpi=dpi)
                        for im in pages:
                            try:
                                im = im.convert("L")
                            except Exception:
                                pass
                            try:
                                t = pytesseract.image_to_string(im, lang=lang, config="--psm 6")
                            except Exception:
                                t = ""
                            if t:
                                _out += ("\n" + t)
                        return _out.strip()
                    except Exception:
                        return ""
                except Exception:
                    return ""
            try:
                ocr_txt = _ocr_pdf_to_text(path)
            except Exception:
                ocr_txt = ""
            if ocr_txt and ocr_txt.strip():
                text = ocr_txt
            else:
                return []
        raw_lines = [ln.strip() for ln in text.splitlines() if ln.strip()]
        norm_lines = [_norm(ln) for ln in raw_lines]
        # ---------- Fenêtrage (ancrage entête / totaux) ----------
        start = 0
        for i, ln in enumerate(norm_lines):
            if any(h in ln for h in _HDR_HINTS):
                start = i + 1
                break
        end = len(raw_lines)
        for i in range(len(norm_lines) - 1, -1, -1):
            ln = norm_lines[i]
            if any(t in ln for t in _TOTAL_HINTS):
                end = i
                break
        if end <= start:
            end = len(raw_lines)
        lineset = raw_lines[start:end]
        lineset_norm = [_norm(ln) for ln in lineset]
        # Pré-calcul des lignes candidates "désignation"
        des_indices = []
        des_text = {}
        for i, l in enumerate(lineset):
            if _is_valid_designation(l):
                des_indices.append(i)
                des_text[i] = _clean_segment(l)
        # ---------- Détection des montants (PU HT = plus petit montant > 0 sur la ligne) ----------
        candidates = []  # {idx, price, price_str, line, norm}
        for idx, (orig, ln) in enumerate(zip(lineset, lineset_norm)):
            amts = [m.group(1) for m in _MONEY_EUR_RE.finditer(orig)]
            if (not amts) and (aggressive or ("€" not in orig and "eur" not in ln)):
                amts = [m.group(1) for m in _MONEY_NOEUR_RE.finditer(orig)]
            if not amts:
                continue
            vals = [(a, _money_to_float(a)) for a in amts if a]
            vals = [(a, v) for (a, v) in vals if v > 0.0]
            if not vals:
                continue
            vals.sort(key=lambda x: x[1])
            # Eviter de prendre une quantité 1,00 comme PU si un autre montant est présent
            if len(vals) >= 2 and vals[0][1] <= 1.25:
                chosen_str, chosen_val = vals[1]
            else:
                chosen_str, chosen_val = vals[0]
            # Exclure une ligne 100% pour éviter de confondre un taux TVA comme PU
            if _PERCENT_RE.search(orig) and len(vals) == 1:
                continue
            candidates.append({
                "idx": idx,
                "price": chosen_val,
                "price_str": chosen_str,
                "line": orig,
                "norm": ln
            })
        if not candidates:
            return []
        # ---------- Association Prix ↔ Désignation (1↔1, plus proche non réutilisée) ----------
        def _designation_same_line(c):
            pos = c["line"].find(c["price_str"])
            if pos >= 0:
                after = _clean_segment(c["line"][pos + len(c["price_str"]):])
                before = _clean_segment(c["line"][:pos])
                if _is_valid_designation(after):
                    return after, None  # pas d'index dédié
                if _is_valid_designation(before):
                    return before, None
            # tentative "nettoyage fort"
            tmp = re.sub(r"(?:€|eur|[\d\.,%/-])+", " ", c["line"], flags=re.I)
            tmp = _clean_segment(tmp)
            if _is_valid_designation(tmp):
                return tmp, None
            return None, None
        def _nearest_free_designation(idx, used, rlist=(2,5,12)):
            # retourne (designation, j) ou (None, None)
            if not des_indices:
                return None, None
            for r in rlist:
                eligible = [j for j in des_indices if j not in used and abs(j - idx) <= r]
                if eligible:
                    j = min(eligible, key=lambda k: abs(k - idx))
                    return des_text[j], j
            return None, None
        rows, seen = [], set()
        used_des = set()
        for c in candidates:
            des, j = _designation_same_line(c)
            if des is None:
                des, j = _nearest_free_designation(c["idx"], used_des, rlist=(2,5,12))
            if des is None:
                # pas de désignation proche et libre -> on ignore ce prix (souvent un Total de ligne)
                continue
            key = (_norm(des), _fmt_price(c["price"]))
            if key in seen:
                continue
            seen.add(key)
            if j is not None:
                used_des.add(j)
            rows.append({
                "Reference": "",
                "Type": _classify_type(des),
                "Designation": des,
                "Prix_HT": _fmt_price(c["price"]),
                "Taux_TVA": "",
                "Unite": "U",
                "Categorie": ""
            })
        # Si malgré tout rien n'a été associé, on retombe sur la stratégie permissive initiale
        if not rows:
            used_des.clear()
            for c in candidates:
                des, j = _nearest_free_designation(c["idx"], used_des, rlist=(3,6,12))
                if des is None:
                    continue
                used_des.add(j)
                key = (_norm(des), _fmt_price(c["price"]))
                if key in seen:
                    continue
                seen.add(key)
                rows.append({
                    "Reference": "",
                    "Type": _classify_type(des),
                    "Designation": des,
                    "Prix_HT": _fmt_price(c["price"]),
                    "Taux_TVA": "",
                    "Unite": "U",
                    "Categorie": ""
                })
        return rows
    def _catalogue_pdf_import_preview(self, files):
        """Dialogue d'aperçu avec déduplication et options."""
        try:
            # Vérifier pdfminer
            try:
                from pdfminer.high_level import extract_text  # noqa: F401
                from pdfminer.layout import LAParams  # noqa: F401
            except Exception:
                QMessageBox.warning(self, "Import PDF", "Lecture PDF locale uniquement. Installez pdfminer.six :\\n\npip install pdfminer.six")
                return
            dlg = QDialog(self); dlg.setWindowTitle("Aperçu import PDF → Catalogue"); dlg.resize(980, 620)
            v = QVBoxLayout(dlg)
            # Bandeau options
            opt = QHBoxLayout()
            self._cb_dedupe = QCheckBox("Dédupliquer (ON)"); self._cb_dedupe.setChecked(True)
            self._cb_aggr = QCheckBox("Mode agressif (OFF)"); self._cb_aggr.setChecked(False)
            self._cb_ttc = QCheckBox("Prix importés = TTC → convertir en HT avec TVA par défaut")
            # TVA par défaut depuis settings
            try:
                s = getattr(self.window(), "settings", ensure_settings())
                tva_default = float(s.get("tva", 0.2))
            except Exception:
                tva_default = 0.2
            self._sp_tva = QDoubleSpinBox(); self._sp_tva.setSuffix(" %"); self._sp_tva.setDecimals(2); self._sp_tva.setRange(0.0, 100.0); self._sp_tva.setSingleStep(1.0)
            try:
                self._sp_tva.setValue(round(tva_default*100.0, 2))
            except Exception:
                self._sp_tva.setValue(20.0)
            opt.addWidget(self._cb_dedupe); opt.addWidget(self._cb_aggr); opt.addStretch(1)
            opt.addWidget(QLabel("TVA par défaut :")); opt.addWidget(self._sp_tva); opt.addStretch(1); opt.addWidget(self._cb_ttc)
            v.addLayout(opt)
            # Bandeau sélection rapide
            sel = QHBoxLayout()
            btn_all = QPushButton("Tout"); btn_none = QPushButton("Aucun"); btn_inv = QPushButton("Inverser")
            sel.addWidget(QLabel("Sélection :")); sel.addWidget(btn_all); sel.addWidget(btn_none); sel.addWidget(btn_inv); sel.addStretch(1)
            v.addLayout(sel)
            # Table preview
            tbl = QTableWidget(0, 8); tbl.setHorizontalHeaderLabels(["✓","Réf","Type","Désignation","Prix HT","TVA %","Unité","Catégorie"])
            tbl.setSelectionBehavior(QTableWidget.SelectRows)
            from PyQt5.QtWidgets import QHeaderView as _QHV
            hdr = tbl.horizontalHeader()
            try:
                hdr.setSectionResizeMode(0, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(1, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(2, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(3, _QHV.Stretch)
                hdr.setSectionResizeMode(4, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(5, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(6, _QHV.ResizeToContents)
                hdr.setSectionResizeMode(7, _QHV.ResizeToContents)
            except Exception:
                pass
            v.addWidget(tbl)
            # Parse maintenant
            items = []
            for p in files:
                try:
                    items.extend(self._catalogue_pdf_extract_items_from_pdf(p, aggressive=False))
                except Exception:
                    pass
            if not items:
                try:
                    self._cb_aggr.setChecked(True)
                except Exception:
                    pass
                for p in files:
                    try:
                        items.extend(self._catalogue_pdf_extract_items_from_pdf(p, aggressive=True))
                    except Exception:
                        pass
            try:
                QMessageBox.information(self, "Import PDF", f"Analyse: {len(files)} fichier(s) scanné(s), {len(items)} ligne(s) détectée(s) avant dédup.")
            except Exception:
                pass
            if not items:
                QMessageBox.information(self, "Import PDF", "0 ligne détectée. Si vos PDF sont scannés, installez Tesseract (OCR) + PyMuPDF et réessayez (OCR auto). Sinon, activez 'Mode agressif'.")
            # Dédup interne (clé = (norm(des), type, prix))
            def _nkey(d):
                import re
                des = (d.get("Designation","") or "").lower()
                des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                return (des, d.get("Type",""), f"{float(self._catalogue_pdf_to_float(d.get('Prix_HT',0))):.2f}")
            seen = set(); deduped = []
            for it in items:
                k = _nkey(it)
                if k in seen:
                    continue
                seen.add(k); deduped.append(it)
            items = deduped
            # Peupler la table
            def add_row(it):
                r = tbl.rowCount(); tbl.insertRow(r)
                # checkbox
                try:
                    from PyQt5.QtWidgets import QTableWidgetItem
                    chk = QTableWidgetItem()
                    chk.setFlags(chk.flags() | Qt.ItemIsUserCheckable | Qt.ItemIsEnabled)
                    chk.setCheckState(Qt.Checked)
                    tbl.setItem(r, 0, chk)
                except Exception:
                    pass
                vals = [
                    it.get("Reference",""),
                    it.get("Type","") or "Pièces",
                    it.get("Designation",""),
                    f"{float(self._catalogue_pdf_to_float(it.get('Prix_HT', 0))):.2f}",
                    f"{int(round(self._sp_tva.value()))}",
                    ("H" if (it.get("Type","").lower().startswith("main d")) else "U"),
                    ""
                ]
                for c, v in enumerate(vals, start=1):
                    tbl.setItem(r, c, QTableWidgetItem(str(v)))
            for it in items:
                add_row(it)
            # Actions Sélection
            def sel_all():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it: it.setCheckState(Qt.Checked)
            def sel_none():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it: it.setCheckState(Qt.Unchecked)
            def sel_inv():
                for r in range(tbl.rowCount()):
                    it = tbl.item(r,0)
                    if it:
                        it.setCheckState(Qt.Unchecked if it.checkState()==Qt.Checked else Qt.Checked)
            btn_all.clicked.connect(sel_all); btn_none.clicked.connect(sel_none); btn_inv.clicked.connect(sel_inv)
            # Boutons
            bb = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
            v.addWidget(bb)
            bb.accepted.connect(dlg.accept); bb.rejected.connect(dlg.reject)
            def _validate_and_save():
                try:
                    # Récupérer lignes cochées
                    selected = []
                    any_checked = False
                    for r in range(tbl.rowCount()):
                        it = tbl.item(r,0)
                        if it and it.checkState() == Qt.Checked:
                            any_checked = True; selected.append(r)
                    if not any_checked:
                        # fallback: lignes sélectionnées
                        selected = sorted({i.row() for i in tbl.selectedIndexes()}) or list(range(tbl.rowCount()))
                    # Construire lignes
                    rows_new = []
                    for r in selected:
                        try:
                            ref = (tbl.item(r,1).text() if tbl.item(r,1) else "").strip()
                            typ = (tbl.item(r,2).text() if tbl.item(r,2) else "Pièces").strip() or "Pièces"
                            des = (tbl.item(r,3).text() if tbl.item(r,3) else "").strip()
                            prix = self._catalogue_pdf_to_float(tbl.item(r,4).text() if tbl.item(r,4) else "0")
                            tva_pct = float(self._sp_tva.value())
                            if self._cb_ttc.isChecked():
                                # Convertir TTC vers HT
                                tva = tva_pct/100.0
                                if (1.0 + tva) > 0.0:
                                    prix = prix / (1.0 + tva)
                            unit = "H" if typ.lower().startswith("main d") else "U"
                            rows_new.append({
                                "Reference": ref, "Type": ("Main d’œuvre" if unit == "H" else "Pièces"),
                                "Designation": des, "Prix_HT": f"{float(prix):.2f}",
                                "Taux_TVA": f"{float(tva_pct/100.0):.2f}", "Unite": unit, "Categorie": ""
                            })
                        except Exception:
                            continue
                    # Dédup si demandé
                    if self._cb_dedupe.isChecked():
                        seen = set(); dedup2 = []
                        def key(d):
                            import re
                            des = (d.get("Designation","") or "").lower()
                            des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                            return (des, d.get("Type",""), d.get("Prix_HT","0.00"))
                        for it in rows_new:
                            k = key(it)
                            if k in seen: continue
                            seen.add(k); dedup2.append(it)
                        rows_new = dedup2
                    # Charger existant + anti-doublon
                    path = os.path.join(DATA_DIR, CSV_ITEMS)
                    exist = load_csv(path)
                    def key2(d):
                        import re
                        des = (d.get("Designation","") or "").lower()
                        des = re.sub(r"\\s+", " ", re.sub(r"[^a-z0-9 %/\\-_.]", " ", des)).strip()
                        return (des, d.get("Type",""), f"{float(self._catalogue_pdf_to_float(d.get('Prix_HT',0))):.2f}")
                    exist_keys = { key2(it) for it in (exist or []) }
                    rows_new = [it for it in rows_new if key2(it) not in exist_keys]
                    if not rows_new:
                        QMessageBox.information(self, "Import PDF", "Aucune nouvelle ligne à ajouter (tout était déjà présent).")
                        return
                    # Attribuer ID et Reference auto
                    # ID = 1 + max(ID existants)
                    max_id = 0
                    for it in (exist or []):
                        try:
                            max_id = max(max_id, int(float(it.get("ID","0") or "0")))
                        except Exception:
                            pass
                    next_id = max_id + 1
                    # Préparer compteur Réf par préfixe
                    def next_ref(prefix, used):
                        # trouve le prochain entier disponible en 4 digits
                        n = used.get(prefix, 0) + 1
                        used[prefix] = n
                        return f"{prefix}{n:04d}"
                    # Scanner déjà existant pour initialiser compteurs
                    used = {"MO": 0, "PC": 0}
                    import re as _re
                    for it in (exist or []):
                        r = (it.get("Reference","") or "").strip().upper()
                        m = _re.match(r"^(MO|PC)(\d{4})$", r)
                        if m:
                            pref = m.group(1)
                            try:
                                used[pref] = max(used.get(pref, 0), int(m.group(2)))
                            except Exception:
                                pass
                    # Compléter lignes
                    for it in rows_new:
                        it["ID"] = str(next_id); next_id += 1
                        if not (it.get("Reference") or "").strip():
                            pref = "MO" if (it.get("Type","").lower().startswith("main d")) else "PC"
                            it["Reference"] = next_ref(pref, used)
                    # Append + save
                    exist = (exist or []) + rows_new
                    save_csv(path, exist, ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"])
                    try:
                        self.load()
                    except Exception:
                        pass
                    QMessageBox.information(self, "Import PDF", f"{len(rows_new)} ligne(s) ajoutée(s) au Catalogue.")
                except Exception as e:
                    try:
                        log_error("_catalogue_pdf_import_validate\\n"+str(e))
                    except Exception:
                        pass
            bb.accepted.disconnect()
            bb.accepted.connect(lambda: (_validate_and_save(), dlg.accept()))
            if dlg.exec_() != QDialog.Accepted:
                return
        except Exception as e:
            try:
                log_error("_catalogue_pdf_import_preview\\n"+str(e))
            except Exception:
                pass
class UrssafTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        v=QVBoxLayout(self)
        filt=QHBoxLayout()
        self.start=QDateEdit(QtCore.QDate.currentDate().addMonths(-1)); self.start.setDisplayFormat("dd/MM/yyyy")
        self.end=QDateEdit(QtCore.QDate.currentDate()); self.end.setDisplayFormat("dd/MM/yyyy")
        self.cmb=QComboBox(); self.cmb.addItems(["Tous"]+STATUTS)
        self.btn_apply=QPushButton("Appliquer"); self.btn_pdf=QPushButton("Exporter PDF"); self.btn_csv=QPushButton("Exporter CSV"); self.btn_open_ursaff=QPushButton("Ouvrir exports"); self.btn_open_last=QPushButton("Ouvrir dernier PDF")
        filt.addWidget(QLabel("Du :")); filt.addWidget(self.start); filt.addWidget(QLabel("Au :")); filt.addWidget(self.end)
        filt.addWidget(QLabel("Statut :")); filt.addWidget(self.cmb); filt.addStretch(1); filt.addWidget(self.btn_apply); filt.addWidget(self.btn_pdf); filt.addWidget(self.btn_csv); filt.addWidget(self.btn_open_ursaff); filt.addWidget(self.btn_open_last)
        v.addLayout(filt)
        self.btn_open_ursaff.clicked.connect(self.open_exports_dir)
        self.btn_open_last.clicked.connect(self.open_last_pdf)
        self.table=QTableWidget(0,len(URSSAF_COLS)); self.table.setHorizontalHeaderLabels(URSSAF_COLS)
        from PyQt5.QtWidgets import QAbstractItemView as _QIV
        self.table.setEditTriggers(_QIV.NoEditTriggers)
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch); self.table.setSelectionBehavior(QTableWidget.SelectRows)
        self.table.itemDoubleClicked.connect(lambda *_: getattr(self,'edit_selected', getattr(self,'edit', lambda: None))())
        v.addWidget(self.table); apply_table_header_theme(self.table, settings.get("theme_color_hex","#0A84FF"))
        foot=QHBoxLayout(); self.lbl_tot=QLabel("Totaux période — Pièces: 0.00 €  MO: 0.00 €  HT: 0.00 €  TTC: 0.00 €")
        self.lbl_sel=QLabel("Sélection — Pièces: 0.00 €  MO: 0.00 €  HT: 0.00 €  TTC: 0.00 €")
        
        # Ajout du toggle pour recalcul TTC et label TVA
        self.chk_recalc_ttc = QCheckBox("Recalculer TTC (param. TVA)")
        self.chk_recalc_ttc.setChecked(True)
        self.lbl_tva = QLabel("TVA (— %) : 0.00 €")
        
        foot.addWidget(self.lbl_tot)
        foot.addWidget(self.lbl_tva)
        foot.addWidget(self.chk_recalc_ttc)
        foot.addStretch(1)
        foot.addWidget(self.lbl_sel)
        v.addLayout(foot)
        # --- UI-only: enlarge & style bottom totals labels (URSSAF) ---
        try:
            # Bigger, bold labels with soft background
            for lab in (self.lbl_tot, self.lbl_sel):
                try:
                    f = lab.font()
                    f.setPointSize(max(f.pointSize(), 14))
                    f.setBold(True)
                    lab.setFont(f)
                except Exception:
                    pass
                try:
                    lab.setStyleSheet("QLabel{padding:8px 12px; border-radius:10px; "
                        "background:#f4f6fb; border:1px solid #d7dde6;}"
                    )
                except Exception:
                    pass
            # More breathing room for the footer bar
            try:
                foot.setSpacing(max(foot.spacing(), 10))
                foot.setContentsMargins(8, 6, 8, 6)
            except Exception:
                pass
        except Exception:
            pass
        # --- End UI-only footer styling ---
        
        # UI-only: améliorations visuelles
        self.table.setAlternatingRowColors(True)
        self.table.verticalHeader().setVisible(False)
        self.table.verticalHeader().setDefaultSectionSize(32)
        for btn_name in ("btn_apply","btn_pdf","btn_csv"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_apply":
                    btn.setToolTip("Appliquer les filtres")
                elif btn_name == "btn_pdf":
                    btn.setToolTip("Exporter en PDF")
                elif btn_name == "btn_csv":
                    btn.setToolTip("Exporter en CSV")
        
        self.btn_apply.clicked.connect(self.apply); self.btn_pdf.clicked.connect(self.export_pdf); self.btn_csv.clicked.connect(self.export_csv)
        self.chk_recalc_ttc.toggled.connect(self.apply)
        self.table.itemSelectionChanged.connect(self.update_sel)
        self.apply()
    def _load_docs(self):
        """Load all factures for URSSAF reporting"""
        facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        docs = []
        for f in facts:
            doc = assemble_doc("facture", f.get("numero",""))
            if doc:
                docs.append(doc)
        return docs
   
    def _build_rows(self, docs):
        out=[]
        for d in docs:
            date_ref = d.get("date_statut") or d.get("date") or ""
        
            # Calculer pièces et MO avec les taux de TVA individuels
            pieces = 0
            mo = 0
            mht = 0
            mttc_stock = _safe_float(d.get("total_ttc", 0))
        
            for L in d.get("lignes",[]):
                ligne_ht = L["total_ht"]
                mht += ligne_ht
                ligne_type = (L.get("type", "") or "").strip().lower()
            
                # Détection des pièces (plusieurs variantes possibles)
                if any(term in ligne_type for term in ["pièce", "piece", "pièces", "pieces", "pc"]):
                    pieces += ligne_ht
                # Détection de la main d'œuvre (plusieurs variantes possibles)
                elif any(term in ligne_type for term in ["main d'œuvre", "main d'oeuvre", "main dœuvre", "mo", "main", "œuvre", "oeuvre"]):
                    mo += ligne_ht            # Le reste du code reste inchangé...
            # Calcul du TTC selon le mode choisi
            use_recalc = self.chk_recalc_ttc.isChecked() if hasattr(self, "chk_recalc_ttc") else True
        
            if use_recalc:
                # Calculer le TTC en respectant les taux de TVA individuels
                mttc = 0
                for L in d.get("lignes",[]):
                    ligne_ht = L["total_ht"]
                    tva_rate = L.get("tva", self.settings.get("tva", 0.2))
                    mttc += ligne_ht * (1.0 + tva_rate)
            else:
                # Utiliser la valeur TTC stockée
                mttc = mttc_stock if mttc_stock > 0 else mht * (1.0 + self.settings.get("tva", 0.2))
        
            out.append({
                "Numéro": d.get("numero",""),
                "Date du paiement": _display_date(date_ref),
                "client": d.get("client_nom",""),
                "montant pieces": f"{pieces:.2f}",
                "montant MO": f"{mo:.2f}",
                "Montant HT": f"{mht:.2f}",
                "Montant TTC": f"{mttc:.2f}",
                "Statut": d.get("statut","")
            })
        return out
    def apply(self):
        s=_safe_date_str(self.start.date().toString("dd/MM/yyyy")); e=_safe_date_str(self.end.date().toString("dd/MM/yyyy")); wanted=self.cmb.currentText()
        docs=self._load_docs(); rows=[]
        for d in docs:
            date_ref=d.get("date_statut") or d.get("date") or ""
            if s and date_ref and date_ref < s: continue
            if e and date_ref and date_ref > e: continue
            if wanted!="Tous" and d.get("statut")!=wanted: continue
            rows.append(d)
        data=self._build_rows(rows)
        self.table.setRowCount(0)
        tot_p=tot_m=tot_ht=tot_ttc=0.0
        tot_tva_calcul = 0.0
    
        for r in data:
            rr=self.table.rowCount(); self.table.insertRow(rr)
            for c,k in enumerate(URSSAF_COLS):
                self.table.setItem(rr,c,QTableWidgetItem(str(r.get(k,""))))
            tot_p+=_safe_float(r.get("montant pieces",0)); tot_m+=_safe_float(r.get("montant MO",0))
            tot_ht+=_safe_float(r.get("Montant HT",0)); tot_ttc+=_safe_float(r.get("Montant TTC",0))
    
        # Mise à jour du label TVA
        tva_amount = tot_ttc - tot_ht
     
        # Calculer le taux moyen de TVA pour l'affichage
        taux_moyen = (tva_amount / tot_ht * 100) if tot_ht > 0 else 0
    
        rate_m = float(self.settings.get("urssaf_rate", 0.22) or 0.0)
    
        rate_p = float(self.settings.get("urssaf_rate_pieces", rate_m) or rate_m)
    
        ur_m = tot_m * max(rate_m, 0.0)
    
        ur_p = tot_p * max(rate_p, 0.0)
    
        ur_tot = ur_m + ur_p
    
        self.lbl_tva.setText(f"TVA ({taux_moyen:.1f} %) : {tva_amount:.2f} €    •    URSSAF MO ({int(round(rate_m*100))} %) : {ur_m:.2f} €    •    URSSAF Pièces ({int(round(rate_p*100))} %) : {ur_p:.2f} €    •    Total : {ur_tot:.2f} €")
    
        # Mise à jour des totaux
        self.lbl_tot.setText(f"Totaux période — Pièces: {tot_p:.2f} €  MO: {tot_m:.2f} €  HT: {tot_ht:.2f} €  TTC: {tot_ttc:.2f} €")
        self.update_sel()
    def export_csv(self):
        # Export CSV silencieux dans data/ursaff
        try:
            s_date = self.start.date().toString("yyyy-MM-dd")
            e_date = self.end.date().toString("yyyy-MM-dd")
            statut = (self.cmb.currentText() or "Tous").replace(" ", "")
            ts = datetime.now().strftime("%Y%m%d-%H%M%S")
            auto_dir = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(auto_dir, exist_ok=True)
            auto_name = f"URSSAF_{s_date}_{e_date}_{statut}_{ts}.csv"
            auto_path = os.path.join(auto_dir, auto_name)
            with open(auto_path,"w",encoding="utf-8",newline="") as f:
                w=csv.writer(f); w.writerow(URSSAF_COLS)
                for r in range(self.table.rowCount()):
                    w.writerow([self.table.item(r,c).text() if self.table.item(r,c) else "" for c in range(self.table.columnCount())])
            QMessageBox.information(self,"Export", f"CSV exporté dans:\n{auto_path}")
        except Exception as e:
            QMessageBox.critical(self,"Export","Echec export CSV: %s"%e)
    
    def open_exports_dir(self):
        try:
            base = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(base, exist_ok=True)
            try:
                from PyQt5.QtGui import QDesktopServices
                from PyQt5.QtCore import QUrl
                _open_file_async(base)
                return
            except Exception:
                pass
            # Fallbacks
            try:
                if sys.platform.startswith("win"):
                    _open_file_async(base)
                elif sys.platform == "darwin":
                    import subprocess; subprocess.Popen(["open", base])
                else:
                    import subprocess; subprocess.Popen(["xdg-open", base])
            except Exception:
                QMessageBox.information(self, "Dossier URSSAF", f"Dossier: {base}")
        except Exception as e:
            QMessageBox.critical(self, "Dossier URSSAF", f"Erreur: {e}")
    
    def open_last_pdf(self):
        try:
            base = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(base, exist_ok=True)
            pdfs = [os.path.join(base, f) for f in os.listdir(base) if f.lower().endswith(".pdf")]
            if not pdfs:
                QMessageBox.information(self, "URSSAF", "Aucun PDF trouvé dans le dossier des exports.")
                return
            last = max(pdfs, key=lambda p: os.path.getmtime(p))
            try:
                from PyQt5.QtGui import QDesktopServices
                from PyQt5.QtCore import QUrl
                _open_file_async(last)
                return
            except Exception:
                pass
            # Fallback
            try:
                if sys.platform.startswith("win"):
                    _open_file_async(last)
                elif sys.platform == "darwin":
                    import subprocess; subprocess.Popen(["open", last])
                else:
                    import subprocess; subprocess.Popen(["xdg-open", last])
            except Exception as e:
                QMessageBox.critical(self, "URSSAF", f"Impossible d'ouvrir:\n{last}\n{e}")
        except Exception as e:
            QMessageBox.critical(self, "URSSAF", str(e))
    def export_pdf(self):
        # Build rows and export silently to data/ursaff
        rows=[]
        for r in range(self.table.rowCount()):
            row={k: (self.table.item(r,c).text() if self.table.item(r,c) else "") for c,k in enumerate(URSSAF_COLS)}
            rows.append(row)
        try:
            s_date = self.start.date().toString("yyyy-MM-dd")
            e_date = self.end.date().toString("yyyy-MM-dd")
            statut = (self.cmb.currentText() or "Tous").replace(" ", "")
            ts = datetime.now().strftime("%Y%m%d-%H%M%S")
            auto_dir = DOCS_DIRS.get("urssaf", DOCS_DIRS.get("ursaff", os.path.join(DATA_DIR, "urssaf")))
            os.makedirs(auto_dir, exist_ok=True)
            auto_name = f"URSSAF_{s_date}_{e_date}_{statut}_{ts}.pdf"
            auto_path = os.path.join(auto_dir, auto_name)
            generate_urssaf_pdf(rows, ensure_settings(), auto_path, f"du {s_date} au {e_date} — Statut : {self.cmb.currentText()}", datetime.now().strftime("%d/%m/%Y %H:%M"))
            try:
                _s = ensure_settings()
                if bool(_s.get('urssaf_auto_open', False)):
                    try:
                        from PyQt5.QtGui import QDesktopServices
                        from PyQt5.QtCore import QUrl
                        _open_file_async(auto_path)
                    except Exception:
                        import sys, subprocess
                        if sys.platform.startswith('win'):
                            _open_file_async(auto_path)
                        elif sys.platform == 'darwin':
                            subprocess.Popen(['open', auto_path])
                        else:
                            subprocess.Popen(['xdg-open', auto_path])
            except Exception:
                pass
            QMessageBox.information(self,"Export", f"PDF exporté dans:\n{auto_path}")
        except Exception as e:
            QMessageBox.critical(self,"Export","Echec export PDF: %s"%e)
    
    
    def update_sel(self):
        rows={i.row() for i in self.table.selectedIndexes()}
        p=m=ht=ttc=0.0
        for r in rows:
            p+=_safe_float(self.table.item(r,3).text() if self.table.item(r,3) else 0)
            m+=_safe_float(self.table.item(r,4).text() if self.table.item(r,4) else 0)
            ht+=_safe_float(self.table.item(r,5).text() if self.table.item(r,5) else 0)
            ttc+=_safe_float(self.table.item(r,6).text() if self.table.item(r,6) else 0)
        self.lbl_sel.setText(f"Sélection — Pièces: {p:.2f} €  MO: {m:.2f} €  HT: {ht:.2f} €  TTC: {ttc:.2f} €")
        def edit_selected(self):
            """Handle double-click on a row"""
            selected_row = self.table.currentRow()
            if selected_row >= 0:
                numero = self.table.item(selected_row, 0).text()
                if numero:
                    # Open the corresponding facture
                    doc = assemble_doc("facture", numero)
                    if doc:
                        out=os.path.join(DOCS_DIRS["factures"], f"{numero}.pdf")
                        try: 
                            out = _safe_write_facturx_pdf(doc, self.settings, numero)
                            _open_file_async(out)
                        except Exception as e: 
                            QMessageBox.critical(self,"PDF",f"Echec génération PDF: {e}")
    # -------- Settings tab --------
class SettingsTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings=settings
        v=QVBoxLayout(self)
        form=QFormLayout()
        self.nom=QLineEdit(settings.get("entreprise_nom",""))
        self.addr=QLineEdit(settings.get("entreprise_adresse",""))
        self.cp=QLineEdit(settings.get("entreprise_cp",""))
        self.ville=QLineEdit(settings.get("entreprise_ville",""))
        self.tel=QLineEdit(settings.get("entreprise_tel",""))
        self.mail=QLineEdit(settings.get("entreprise_mail",""))
        self.siret=QLineEdit(settings.get("entreprise_siret",""))
        self.siren=QLineEdit(settings.get("entreprise_siren",""))
        self.tva_intracom=QLineEdit(settings.get("entreprise_tva",""))
        self.decennale=QLineEdit(settings.get("entreprise_attestation_decennale",""))
        self.chk_tva_non_applicable=QCheckBox("TVA non applicable (art. 293 B CGI)")
        try:
            self.chk_tva_non_applicable.setChecked(bool(settings.get("tva_non_applicable", False)))
        except Exception:
            self.chk_tva_non_applicable.setChecked(False)
        self.legal_indicator=QLabel("")
        self.ape=QLineEdit(settings.get("entreprise_ape",""))
        self.banque=QLineEdit(settings.get("entreprise_banque",""))
        self.iban=QLineEdit(settings.get("entreprise_iban",""))
        self.bic=QLineEdit(settings.get("entreprise_bic",""))
        self.tva=QLineEdit(str(settings.get("tva",0.2)))
        self.logo=QLineEdit(settings.get("logo_path","")); btn_logo=QPushButton("Choisir logo…")
        self.mentions=QLineEdit(settings.get("mentions_legales",""))
        self.smtp_host=QLineEdit(settings.get("smtp_host","")); self.smtp_port=QLineEdit(str(settings.get("smtp_port",587)))
        self.smtp_user=QLineEdit(settings.get("smtp_user","")); self.smtp_pass=QLineEdit(settings.get("smtp_pass","")); self.smtp_pass.setEchoMode(QLineEdit.Password)
        self.smtp_tls=QCheckBox("TLS"); self.smtp_tls.setChecked(bool(settings.get("smtp_tls",True)))
        self.smtp_ssl=QCheckBox("SSL (465)"); self.smtp_ssl.setChecked(bool(settings.get("smtp_ssl",False)))
        self.theme=QLineEdit(settings.get("theme_color_hex","#0A84FF"))
        form.addRow("Nom entreprise", self.nom); form.addRow("Adresse", self.addr); form.addRow("Code Postal", self.cp); form.addRow("Ville", self.ville)
        form.addRow("Tél", self.tel); form.addRow("Email", self.mail); form.addRow(QLabel("— Identifiants légaux (émetteur) —"))
        form.addRow("SIREN", self.siren);
        form.addRow("SIRET", self.siret); form.addRow("APE", self.ape)
        form.addRow("Banque", self.banque)
        form.addRow("IBAN", self.iban); form.addRow("BIC", self.bic); form.addRow("TVA (0.2=20%)", self.tva)
        form.addRow("N° TVA intracom (émetteur)", self.tva_intracom)
        form.addRow("Attestation d'assurance décennale N°", self.decennale)
        form.addRow("", self.chk_tva_non_applicable)
        form.addRow("État identifiants", self.legal_indicator)
        try:
            self.nom.textChanged.connect(self._update_legal_indicator)
            self.addr.textChanged.connect(self._update_legal_indicator)
            self.cp.textChanged.connect(self._update_legal_indicator)
            self.ville.textChanged.connect(self._update_legal_indicator)
            self.siren.textChanged.connect(self._update_legal_indicator)
            self.siret.textChanged.connect(self._update_legal_indicator)
            self.tva_intracom.textChanged.connect(self._update_legal_indicator)
            self.decennale.textChanged.connect(self._update_legal_indicator)
            self.chk_tva_non_applicable.stateChanged.connect(self._update_legal_indicator)
        except Exception:
            pass
        try:
            self._update_legal_indicator()
        except Exception:
            pass
        self.spin_urssaf = QDoubleSpinBox()
        self.spin_urssaf.setRange(0.0, 100.0)
        self.spin_urssaf.setDecimals(2)
        self.spin_urssaf.setSuffix(" %")
        try:
            self.spin_urssaf.setValue(float(self.settings.get("urssaf_rate", 0.22))*100.0)
        except Exception:
            self.spin_urssaf.setValue(22.0)
        form.addRow("Taux URSSAF", self.spin_urssaf)
        # --- Ajout additif : Taux URSSAF (Pièces)
        self.spin_urssaf_pieces = QDoubleSpinBox()
        self.spin_urssaf_pieces.setRange(0.0, 100.0)
        self.spin_urssaf_pieces.setDecimals(2)
        self.spin_urssaf_pieces.setSuffix(" %")
        try:
            self.spin_urssaf_pieces.setValue(float(self.settings.get("urssaf_rate_pieces", self.settings.get("urssaf_rate", 0.22))) * 100.0)
        except Exception:
            self.spin_urssaf_pieces.setValue(self.spin_urssaf.value())
        form.addRow("Taux URSSAF (Pièces)", self.spin_urssaf_pieces)
        self.chk_urssaf_auto_open = QCheckBox("Ouvrir automatiquement le PDF URSSAF après export")
        self.chk_urssaf_auto_open.setChecked(bool(self.settings.get("urssaf_auto_open", False)))
        form.addRow("", self.chk_urssaf_auto_open)
        hl=QHBoxLayout(); hl.addWidget(self.logo,1); hl.addWidget(btn_logo,0); form.addRow("Logo local", hl)
        form.addRow("Mentions légales", self.mentions); form.addRow(QLabel("— Email automatique —"))
        # Pieds PDF (éditables)
        self.pied_devis = QTextEdit(self.settings.get("pied_devis",""))
        self.pied_devis.setFixedHeight(70)
        form.addRow("Texte pied DEVIS", self.pied_devis)
        self.pied_facture = QTextEdit(self.settings.get("pied_facture",""))
        self.pied_facture.setFixedHeight(70)
        form.addRow("Texte pied FACTURE", self.pied_facture)
        
        
        # Auto-prefill/upgrade if current texts are empty or older auto-text (no "Validité du devis")
        cur_d = (self.settings.get("pied_devis") or "").strip()
        if not cur_d or ("Règlement par virement" in cur_d and "Validité du devis" not in cur_d):
            try:
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        cur_f = (self.settings.get("pied_facture") or "").strip()
        if not cur_f or ("Règlement par virement" in cur_f and "Validité du devis" not in cur_f):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    # Auto-prefill if empty using company info
        if not self.settings.get("pied_devis"):
            try:
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        if not self.settings.get("pied_facture"):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    # Prefill if empty using company info
        if not self.settings.get("pied_devis"):
            try:
                from datetime import datetime as _dt  # avoid shadow
                self.pied_devis.setPlainText(_default_pied("devis", self.settings))
            except Exception:
                pass
        if not self.settings.get("pied_facture"):
            try:
                self.pied_facture.setPlainText(_default_pied("facture", self.settings))
            except Exception:
                pass
    
        self.auto_mail_devis = QCheckBox("Activer devis"); self.auto_mail_devis.setChecked(bool(self.settings.get("auto_mail_devis", False)))
        self.auto_mail_facture = QCheckBox("Activer factures"); self.auto_mail_facture.setChecked(bool(self.settings.get("auto_mail_facture", False)))
        self.auto_mail_on_status_envoye = QCheckBox("Envoyer quand statut = \"Envoyé\""); self.auto_mail_on_status_envoye.setChecked(bool(self.settings.get("auto_mail_on_status_envoye", False)))
        form.addRow(self.auto_mail_devis); form.addRow(self.auto_mail_facture); form.addRow(self.auto_mail_on_status_envoye)
        self.auto_mail_bcc = QLineEdit(self.settings.get("auto_mail_bcc","")); form.addRow("BCC", self.auto_mail_bcc)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        
        # --- Masquage des champs mail dans l'onglet Paramètres (déplacés vers "Paramètres (Email)") ---
        try:
            def _hide_row_with_label(_form, _labels:set):
                # Parcourt les lignes du QFormLayout et masque celles dont le label correspond
                for _i in range(_form.rowCount() - 1, -1, -1):
                    _lab_item = _form.itemAt(_i, QFormLayout.LabelRole)
                    if _lab_item is None:
                        continue
                    _w = _lab_item.widget()
                    if isinstance(_w, QLabel):
                        _t = (_w.text() or "").strip()
                        if _t in _labels or "SMTP" in _t or "Email automatique" in _t:
                            _w.hide()
                            _field_item = _form.itemAt(_i, QFormLayout.FieldRole)
                            if _field_item is not None:
                                _fw = _field_item.widget()
                                if _fw is not None:
                                    _fw.hide()
                                else:
                                    _lay = _field_item.layout()
                                    if _lay is not None:
                                        # Masquer tous les widgets enfants de la ligne
                                        for _j in range(_lay.count()):
                                            _iw = _lay.itemAt(_j).widget()
                                            if _iw is not None:
                                                _iw.hide()
            _hide_row_with_label(form, {"Serveur","Port","Utilisateur","Mot de passe","BCC","Sujet Devis","Message Devis","Sujet Facture","Message Facture"})
            # Masquer widgets sans label (cases à cocher)
            for _w in [self.smtp_tls, self.smtp_ssl, getattr(self,'auto_mail_devis',None), getattr(self,'auto_mail_facture',None), getattr(self,'auto_mail_on_status_envoye',None)]:
                if _w:
                    _w.hide()
            # Masquer aussi les champs correspondants (au cas où)
            for _w in [self.smtp_host, self.smtp_port, self.smtp_user, self.smtp_pass, getattr(self,'auto_mail_bcc',None), getattr(self,'tpl_subject_devis',None), getattr(self,'tpl_body_devis',None), getattr(self,'tpl_subject_facture',None), getattr(self,'tpl_body_facture',None)]:
                if _w:
                    _w.hide()
        except Exception:
            pass
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        btns=QHBoxLayout(); self.btn_test=QPushButton("Tester SMTP"); self.btn_open=QPushButton("Ouvrir dossier data/"); self.btn_backup=QPushButton("Sauvegarde .zip"); self.btn_save=QPushButton("Enregistrer")
        btns.addWidget(self.btn_test); btns.addWidget(self.btn_open); btns.addStretch(1); btns.addWidget(self.btn_backup); btns.addWidget(self.btn_save); v.addLayout(btns)
        
        # UI-only: améliorations visuelles
        for btn_name in ("btn_test","btn_open","btn_backup","btn_save"):
            if hasattr(self, btn_name):
                btn = getattr(self, btn_name)
                btn.setMinimumHeight(36)
                if btn_name == "btn_test":
                    btn.setToolTip("Tester la connexion SMTP")
                elif btn_name == "btn_open":
                    btn.setToolTip("Ouvrir le dossier des données")
                elif btn_name == "btn_backup":
                    btn.setToolTip("Créer une sauvegarde zip")
                elif btn_name == "btn_save":
                    btn.setToolTip("Enregistrer les paramètres")
        
        
        # Masquer le bouton de test SMTP dans l'onglet Paramètres (désormais dans l'onglet Paramètres (Email))
        if hasattr(self, "btn_test"):
            try:
                self.btn_test.hide()
            except Exception:
                pass
        btn_logo.clicked.connect(self.pick_logo); self.btn_save.clicked.connect(self.save); self.btn_backup.clicked.connect(self.backup); self.btn_open.clicked.connect(self.open_data); self.btn_test.clicked.connect(self.test_smtp)
    def pick_logo(self):
        p,_=QFileDialog.getOpenFileName(self,"Choisir logo","","Images (*.png *.jpg *.jpeg *.bmp)")
        if not p: return
        dst=copy_logo_to_brand(p); 
        if dst: self.logo.setText(dst)
    def data_from_ui(self):
        return { "entreprise_siren": self.siren.text().strip(), "entreprise_tva": self.tva_intracom.text().strip(), "entreprise_attestation_decennale": self.decennale.text().strip(), "tva_non_applicable": bool(self.chk_tva_non_applicable.isChecked()), "entreprise_nom":self.nom.text().strip(),"entreprise_adresse":self.addr.text().strip(),"entreprise_cp":self.cp.text().strip(),
                "entreprise_ville":self.ville.text().strip(),"entreprise_tel":self.tel.text().strip(),"entreprise_mail":self.mail.text().strip(),
                "entreprise_siret":self.siret.text().strip(),"entreprise_ape":self.ape.text().strip(),
                "entreprise_banque":self.banque.text().strip(),"entreprise_iban":self.iban.text().strip(),"entreprise_bic":self.bic.text().strip(),
                "tva": _safe_float(self.tva.text(), 0.2), "urssaf_rate": round(self.spin_urssaf.value()/100.0, 4), "urssaf_rate_pieces": round(self.spin_urssaf_pieces.value()/100.0, 4), "urssaf_auto_open": bool(self.chk_urssaf_auto_open.isChecked()),"logo_path":self.logo.text().strip(),"mentions_legales":self.mentions.text().strip(),
                "smtp_host":self.smtp_host.text().strip(),"smtp_port":int(_safe_float(self.smtp_port.text(),587)),
                "smtp_user":self.smtp_user.text().strip(),"smtp_pass":self.smtp_pass.text(),"smtp_tls":self.smtp_tls.isChecked(),"smtp_ssl":self.smtp_ssl.isChecked(),
                "theme_color_hex":self.theme.text().strip() or "#0A84FF",
"auto_mail_devis": self.auto_mail_devis.isChecked(),
"auto_mail_facture": self.auto_mail_facture.isChecked(),
"auto_mail_on_status_envoye": self.auto_mail_on_status_envoye.isChecked(),
"auto_mail_bcc": self.auto_mail_bcc.text().strip(),
"tpl_subject_devis": self.tpl_subject_devis.text().strip(),
"tpl_body_devis": self.tpl_body_devis.toPlainText().strip(),
"tpl_subject_facture": self.tpl_subject_facture.text().strip(),
"tpl_body_facture": self.tpl_body_facture.toPlainText().strip(),
"tpl_subject_facture_situation": self.tpl_subject_facture_situation.text().strip(),
"tpl_body_facture_situation": self.tpl_body_facture_situation.toPlainText().strip(),
"tpl_subject_facture_solde": self.tpl_subject_facture_solde.text().strip(),
"tpl_body_facture_solde": self.tpl_body_facture_solde.toPlainText().strip(),
"pied_devis": self.pied_devis.toPlainText().strip(), "pied_facture": self.pied_facture.toPlainText().strip()}
    def save(self):
        old_tva = _safe_float(self.settings.get("tva", 0.2), 0.2)
        s = self.data_from_ui()
        new_tva = _safe_float(s.get("tva", 0.2), 0.2)
        ok = save_settings(s)
        if ok:
            try:
                rows = load_csv(os.path.join(DATA_DIR, CSV_ITEMS))
                if isinstance(rows, list):
                    # Trigger if settings TVA changed OR catalogue contains differing rates
                    need_migrate = (abs(new_tva - old_tva) > 1e-9) or any(abs(_safe_float(it.get("Taux_TVA", new_tva), new_tva) - new_tva) > 1e-9 for it in rows)
                    if need_migrate:
                        for it in rows:
                            try:
                                it["Taux_TVA"] = f"{float(new_tva):.2f}"
                            except Exception:
                                it["Taux_TVA"] = f"{_safe_float(it.get('Taux_TVA', new_tva), new_tva):.2f}"
                    save_csv(
                        os.path.join(DATA_DIR, CSV_ITEMS),
                        rows,
                        ["ID","Reference","Type","Designation","Prix_HT","Taux_TVA","Unite","Categorie"]
                    )
                    try:
                        self.settings["tva"] = new_tva  # keep in-memory consistent
                    except Exception:
                        pass
                    try:
                        refresh_all_tabs(self)
                    except Exception:
                        pass
            except Exception:
                log_error("tva_migration\n"+__import__('traceback').format_exc())
        QMessageBox.information(self, "Paramètres", "Enregistrés. (Relancez l'appli pour appliquer le thème)" if ok else "Echec d'enregistrement.")
    def backup(self):
        try: out=zip_backup(); QMessageBox.information(self,"Sauvegarde",f"Backup créé : {out}")
        except Exception: QMessageBox.critical(self,"Sauvegarde","Echec de la sauvegarde.")
    def open_data(self):
        _open_file_async(DATA_DIR)
    def test_smtp(self):
        s=self.data_from_ui()
        res=test_smtp(s); QMessageBox.information(self,"SMTP",res)
# ---------------- Main Window ----------------
class SettingsEmailTab(QWidget):
    def __init__(self, settings:Dict, parent=None, edit_mode:bool=False):
        self.edit_mode = edit_mode
        super().__init__(parent); self.settings = settings
        v = QVBoxLayout(self)
        form = QFormLayout()
        # SMTP group
        self.smtp_host = QLineEdit(settings.get("smtp_host",""))
        self.smtp_port = QLineEdit(str(settings.get("smtp_port",587)))
        self.smtp_user = QLineEdit(settings.get("smtp_user",""))
        self.smtp_pass = QLineEdit(settings.get("smtp_pass",""))
        self.smtp_pass.setEchoMode(QLineEdit.Password)
        self.smtp_tls  = QCheckBox("TLS")
        self.smtp_tls.setChecked(bool(settings.get("smtp_tls", True)))
        self.smtp_ssl  = QCheckBox("SSL (465)")
        self.smtp_ssl.setChecked(bool(settings.get("smtp_ssl", False)))
        self.lbl_smtp = QLabel("— SMTP —"); form.addRow(self.lbl_smtp)
        form.addRow("Serveur", self.smtp_host)
        form.addRow("Port", self.smtp_port)
        form.addRow("Utilisateur", self.smtp_user)
        form.addRow("Mot de passe", self.smtp_pass)
        form.addRow(self.smtp_tls)
        form.addRow(self.smtp_ssl)
        # Auto-email group
        self.lbl_auto = QLabel("— Email automatique —"); form.addRow(self.lbl_auto)
        self.auto_mail_devis = QCheckBox("Activer devis")
        self.auto_mail_devis.setChecked(bool(settings.get("auto_mail_devis", False)))
        self.auto_mail_facture = QCheckBox("Activer factures")
        self.auto_mail_facture.setChecked(bool(settings.get("auto_mail_facture", False)))
        self.auto_mail_on_status_envoye = QCheckBox("Envoyer quand statut = \"Envoyé\"")
        self.auto_mail_on_status_envoye.setChecked(bool(settings.get("auto_mail_on_status_envoye", False)))
        form.addRow(self.auto_mail_devis)
        form.addRow(self.auto_mail_facture)
        form.addRow(self.auto_mail_on_status_envoye)
        # Auto-email for invoice statuses (Factures)
        self.auto_mail_on_status_relance1 = QCheckBox("Envoyer quand statut = \"Relance 1\"")
        self.auto_mail_on_status_relance1.setChecked(bool(self.settings.get("auto_mail_on_status_relance1", False)))
        self.auto_mail_on_status_relance2 = QCheckBox("Envoyer quand statut = \"Relance 2\"")
        self.auto_mail_on_status_relance2.setChecked(bool(self.settings.get("auto_mail_on_status_relance2", False)))
        self.auto_mail_on_status_payee = QCheckBox("Envoyer quand statut = \"Payée\"")
        self.auto_mail_on_status_payee.setChecked(bool(self.settings.get("auto_mail_on_status_payee", False)))
        form.addRow(self.auto_mail_on_status_relance1)
        form.addRow(self.auto_mail_on_status_relance2)
        form.addRow(self.auto_mail_on_status_payee)
        
        # Confirmation globale
        self.chk_confirm = QCheckBox("Toujours demander confirmation avant envoi")
        self.chk_confirm.setChecked(bool(self.settings.get("confirm_before_any_email_send", True)))
        form.addRow(self.chk_confirm)
        self.auto_mail_bcc = QLineEdit(settings.get("auto_mail_bcc",""))
        form.addRow("BCC", self.auto_mail_bcc)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        lbl_bcc_help = QLabel("Le champ Bcc (copie invisible) vous permet de recevoir une copie ou d'en envoyer une à un collègue\n"
                              "sans que le client ne voie cette adresse. Laissez vide si vous n'en avez pas besoin.")
        lbl_bcc_help.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(lbl_bcc_help)
        self.lbl_templates = QLabel("— Modèles d'emails —"); form.addRow(self.lbl_templates)
        # --- Devis (simple) ---
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        # --- Facture (simple) ---
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        # --- Modèles supplémentaires ---
        self.tpl_subject_devis_demande_acompte = QLineEdit(self.settings.get("tpl_subject_devis_demande_acompte","Demande d’acompte – Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis_demande_acompte = QTextEdit(self.settings.get("tpl_body_devis_demande_acompte","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}.\n\nConformément à nos échanges, un acompte de {ACOMPTE} TTC est requis pour valider la commande et réserver la prestation.\nMerci d’effectuer le règlement par virement en rappelant la référence {DOC_NUM}.\nÀ réception de l’acompte, nous vous adressons la confirmation. Le solde ({RESTANT_DU}) sera facturé à l’achèvement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis (demande d’acompte)", self.tpl_subject_devis_demande_acompte)
        form.addRow("Message Devis (demande d’acompte)", self.tpl_body_devis_demande_acompte)
        self.tpl_subject_facture_acompte = QLineEdit(self.settings.get("tpl_subject_facture_acompte","Facture d’acompte {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_acompte = QTextEdit(self.settings.get("tpl_body_facture_acompte","Veuillez trouver ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, correspondant à l’acompte de votre commande.\n\nMontant de l’acompte (TTC) : {TOTAL_TTC}.\nLe solde sera facturé à l’achèvement de la prestation.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture d’acompte", self.tpl_subject_facture_acompte)
        form.addRow("Message Facture d’acompte", self.tpl_body_facture_acompte)
        self.tpl_subject_relance_facture_1 = QLineEdit(self.settings.get("tpl_subject_relance_facture_1","Relance – Facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_relance_facture_1 = QTextEdit(self.settings.get("tpl_body_relance_facture_1","Sauf erreur de notre part, le règlement de la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}) n’a pas encore été enregistré. Si vous l’avez déjà effectué, merci d’ignorer ce message ou de nous transmettre le justificatif.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Relance 1 (facture)", self.tpl_subject_relance_facture_1)
        form.addRow("Message Relance 1 (facture)", self.tpl_body_relance_facture_1)
        self.tpl_subject_relance_facture_2 = QLineEdit(self.settings.get("tpl_subject_relance_facture_2","Relance 2 – Facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_relance_facture_2 = QTextEdit(self.settings.get("tpl_body_relance_facture_2","Il s’agit d’une seconde relance concernant la {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (TTC {TOTAL_TTC}, restant dû {RESTANT_DU}). Nous vous remercions d’effectuer le paiement dans les meilleurs délais. À défaut de retour, nous appliquerons les conditions prévues au contrat.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Relance 2 (facture)", self.tpl_subject_relance_facture_2)
        form.addRow("Message Relance 2 (facture)", self.tpl_body_relance_facture_2)
        self.tpl_subject_facture_paye = QLineEdit(self.settings.get("tpl_subject_facture_paye","Facture {DOC_NUM} acquittée – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_paye = QTextEdit(self.settings.get("tpl_body_facture_paye","Pour suivi, ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE}, acquittée. Merci pour votre règlement.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture acquittée", self.tpl_subject_facture_paye)
        form.addRow("Message Facture acquittée", self.tpl_body_facture_paye)
        self.auto_mail_bcc.setPlaceholderText("ex. copie@domaine.fr (copie invisible aux destinataires)")
        self.auto_mail_bcc.setToolTip("BCC = Copie invisible : les destinataires principaux ne voient pas cette adresse.")
        self.lbl_templates = QLabel("— Modèles d\'emails —")
        form.addRow(self.lbl_templates)
        # --- Devis (simple) ---
        self.tpl_subject_devis = QLineEdit(self.settings.get("tpl_subject_devis","Devis {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_devis = QTextEdit(self.settings.get("tpl_body_devis","Vous trouverez ci-joint votre {DOC_TYPE} {DOC_NUM} du {DOC_DATE} (montant TTC {TOTAL_TTC}).\nJe reste à votre disposition pour adapter la proposition (planning, périmètre, budget).\nPour lancer la suite, une simple validation par retour d’email suffit.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Devis", self.tpl_subject_devis)
        form.addRow("Message Devis", self.tpl_body_devis)
        # --- Facture (simple) ---
        self.tpl_subject_facture = QLineEdit(self.settings.get("tpl_subject_facture","Votre facture {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture = QTextEdit(self.settings.get("tpl_body_facture","Bonjour {CLIENT_NOM},\n\nVeuillez trouver ci-joint la facture n°{DOC_NUM} relative à la prestation du {DOC_DATE}.\n\nCette facture est payable à réception. Le règlement peut être effectué par virement bancaire.\n\nNos coordonnées bancaires figurent en bas de la facture.\n\nRestant à votre disposition pour toute question.\n\nCordialement,\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture", self.tpl_subject_facture)
        form.addRow("Message Facture", self.tpl_body_facture)
        vars_txt = "Variables disponibles : {DOC_TYPE}, {DOC_NUM}, {DOC_DATE}, {CLIENT_NOM}, {TOTAL_TTC}, {ACOMPTE}, {RESTANT_DU}, {SITUATION_PREV}, {SITUATION_CURRENT}, {SITUATION_CUMUL}, {SITUATION_RESTE}, {SITUATION_RANG}."
        self.tpl_vars_hint = QLabel(vars_txt)
        self.tpl_vars_hint.setWordWrap(True)
        self.tpl_vars_hint.setStyleSheet("color: #666; font-size: 11px;")
        form.addRow(self.tpl_vars_hint)
        self.tpl_subject_facture_situation = QLineEdit(self.settings.get("tpl_subject_facture_situation","Facture de situation {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_situation = QTextEdit(self.settings.get("tpl_body_facture_situation","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de situation {DOC_NUM}. Montant de la situation : {SITUATION_CURRENT}. Cumul facturé : {SITUATION_CUMUL}. Reste à facturer : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de situation", self.tpl_subject_facture_situation)
        form.addRow("Message Facture de situation", self.tpl_body_facture_situation)
        self.tpl_subject_facture_solde = QLineEdit(self.settings.get("tpl_subject_facture_solde","Facture de solde {DOC_NUM} – {ENTREPRISE_NOM}"))
        self.tpl_body_facture_solde = QTextEdit(self.settings.get("tpl_body_facture_solde","Bonjour {CLIENT_NOM},\nVeuillez trouver la facture de solde {DOC_NUM}. Cumul facturé : {SITUATION_CUMUL}. Reste dû après solde : {SITUATION_RESTE}.\n\n{MESSAGE_ENTREPRISE}"))
        form.addRow("Sujet Facture de solde", self.tpl_subject_facture_solde)
        form.addRow("Message Facture de solde", self.tpl_body_facture_solde)
        self.btn_test = QPushButton("Tester SMTP")
        self.btn_open = QPushButton("Ouvrir data")
        self.btn_backup = QPushButton("Sauvegarde .zip")
        self.btn_save = QPushButton("Enregistrer")
        container = QWidget(); container.setLayout(form)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(container)
        v.addWidget(scroll)
        btns = QHBoxLayout()
        btns.addWidget(self.btn_test); btns.addWidget(self.btn_open); btns.addWidget(self.btn_backup); btns.addWidget(self.btn_save)
        v.addLayout(btns)
        self.btn_test.clicked.connect(self._on_test_smtp)
        self.btn_open.clicked.connect(self._on_open_data)
        self.btn_backup.clicked.connect(self._on_backup)
        
        # --- Dédoublonnage visuel des modèles (garde la dernière occurrence) ---
        try:
            titles = {
                "Sujet Devis","Message Devis",
                "Sujet Facture","Message Facture",
                "Sujet Demande d'acompte","Message Demande d'acompte",
                "Sujet Facture d'acompte","Message Facture d'acompte",
                "Sujet Relance 1 (facture)","Message Relance 1 (facture)",
                "Sujet Relance 2 (facture)","Message Relance 2 (facture)",
                "Sujet Facture acquittée","Message Facture acquittée"
            }
            seen=set()
            for r in range(form.rowCount()-1, -1, -1):
                li = form.itemAt(r, QFormLayout.LabelRole)
                fi = form.itemAt(r, QFormLayout.FieldRole)
                lbl = li.widget() if li else None
                txt = lbl.text() if lbl else ""
                if txt in titles:
                    if txt in seen:
                        if fi and fi.widget(): fi.widget().hide()
                        if lbl: lbl.hide()
                    else:
                        seen.add(txt)
        except Exception:
            pass
        self.btn_save.clicked.connect(self._on_save)
    def _on_test_smtp(self):
        res = test_smtp(self._collect())
        QMessageBox.information(self, "SMTP", res)
    def _on_open_data(self):
        try:
            from PyQt5 import QtGui, QtCore
            _open_file_async(DATA_DIR)
        except Exception as e:
            QMessageBox.warning(self, "Ouvrir data", f"Impossible d\'ouvrir le dossier: {e}")
    def _on_backup(self):
        try:
            name = zip_backup()
            QMessageBox.information(self, "Sauvegarde", f"Archive créée: {name}")
        except Exception as e:
            QMessageBox.critical(self, "Sauvegarde", f"Echec: {e}")
    def _on_save(self):
        s = self._collect()
        ok = save_settings(s)
        QMessageBox.information(self, "Paramètres", "Enregistré." if ok else "Erreur de sauvegarde.")
    def _collect(self) -> Dict:
        # merge into a copy to keep other settings intact
        s = dict(self.settings)
        s.update({
            "smtp_host": self.smtp_host.text().strip(),
            "smtp_port": int(_safe_float(self.smtp_port.text(), 587)),
            "smtp_user": self.smtp_user.text().strip(),
            "smtp_pass": self.smtp_pass.text().strip(),
            "smtp_tls": bool(self.smtp_tls.isChecked()),
            "smtp_ssl": bool(self.smtp_ssl.isChecked()),
            "auto_mail_devis": bool(self.auto_mail_devis.isChecked()),
            "auto_mail_facture": bool(self.auto_mail_facture.isChecked()),
            "auto_mail_on_status_envoye": bool(self.auto_mail_on_status_envoye.isChecked()),
            "auto_mail_on_status_relance1": bool(self.auto_mail_on_status_relance1.isChecked()),
            "auto_mail_on_status_relance2": bool(self.auto_mail_on_status_relance2.isChecked()),
            "auto_mail_on_status_payee": bool(self.auto_mail_on_status_payee.isChecked()),
            "auto_mail_bcc": self.auto_mail_bcc.text().strip(),
            "tpl_subject_devis": self.tpl_subject_devis.text().strip(),
            "tpl_body_devis": self.tpl_body_devis.toPlainText().strip(),
            "tpl_subject_facture": self.tpl_subject_facture.text().strip(),
            "tpl_body_facture": self.tpl_body_facture.toPlainText().strip(),
            
            "tpl_subject_devis_demande_acompte": self.tpl_subject_devis_demande_acompte.text().strip(),
            "tpl_body_devis_demande_acompte": self.tpl_body_devis_demande_acompte.toPlainText().strip(),
            "tpl_subject_facture_acompte": self.tpl_subject_facture_acompte.text().strip(),
            "tpl_body_facture_acompte": self.tpl_body_facture_acompte.toPlainText().strip(),
            "tpl_subject_relance_facture_1": self.tpl_subject_relance_facture_1.text().strip(),
            "tpl_body_relance_facture_1": self.tpl_body_relance_facture_1.toPlainText().strip(),
            "tpl_subject_relance_facture_2": self.tpl_subject_relance_facture_2.text().strip(),
            "tpl_body_relance_facture_2": self.tpl_body_relance_facture_2.toPlainText().strip(),
            "tpl_subject_facture_paye": self.tpl_subject_facture_paye.text().strip(),
            "tpl_body_facture_paye": self.tpl_body_facture_paye.toPlainText().strip(),"confirm_before_any_email_send": bool(self.chk_confirm.isChecked()),
        })
        self.settings.update(s)
        return s
# --- Small UI helper: refresh all tabs automatically ---
def refresh_all_tabs(widget):
    
    try:
        from PyQt5.QtWidgets import QTabWidget, QApplication
        tabs = None
        # 1) Walk up the parent chain to find a QTabWidget or a container that has one
        p = widget
        while p is not None and tabs is None:
            if isinstance(p, QTabWidget):
                tabs = p
                break
            cand = None
            try:
                cand = p.findChild(QTabWidget)
            except Exception:
                cand = None
            if cand:
                tabs = cand
                break
            p = p.parent() if hasattr(p, "parent") else None
        # 2) Fallback: search top-level widgets
        if tabs is None:
            try:
                for tlw in QApplication.topLevelWidgets():
                    cand = tlw.findChild(QTabWidget)
                    if cand:
                        tabs = cand
                        break
            except Exception:
                pass
        if not tabs:
            return
        for i in range(tabs.count()):
            w = tabs.widget(i)
            try:
                if hasattr(w, "trigger_refresh"):
                    w.trigger_refresh()
                elif hasattr(w, "refresh"):
                    w.refresh()
            except Exception:
                pass
    except Exception:
        log_error("refresh_all_tabs\n"+__import__('traceback').format_exc())
# ========== DASHBOARD / ACCUEIL (delta minimal, sans dépendances externes) ==========
from typing import List, Dict, Tuple
import os, csv
from datetime import datetime, date, timedelta, timezone
from PyQt5.QtCore import Qt, QEvent, QTimer, QRect, QPoint
from PyQt5.QtGui import QPainter, QPen, QColor, QImage, QPixmap, QFont
from PyQt5.QtWidgets import (QWidget, QLabel, QVBoxLayout, QHBoxLayout, QGridLayout,
                             QFrame, QGroupBox, QTableWidget, QTableWidgetItem, QPushButton, QApplication)
class _MiniChart(QWidget):
    """Petit graphique ligne/aires (CA vs Achats) sans dépendances externes.
    Hotfix: use QPainter.begin/end in a try/finally; guard zero-size; never paint when hidden.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumHeight(160)
        self._series: List[Tuple[str, List[Tuple[datetime,float]]]] = []
        self._margin = 16
    def set_series(self, series: List[Tuple[str, List[Tuple[datetime, float]]]]):
        self._series = series or []
        self.update()
    def paintEvent(self, ev):
        # Do not paint if widget not visible or too small
        r0 = self.rect()
        if not self.isVisible() or r0.width() < 4 or r0.height() < 4:
            return
        p = QPainter()
        try:
            if not p.begin(self):  # explicit begin for stability on Windows
                return
            p.setRenderHint(QPainter.Antialiasing, True)
            r = r0.adjusted(self._margin, self._margin, -self._margin, -self._margin)
            if r.width() < 10 or r.height() < 10:
                p.fillRect(r0, QColor(248, 249, 252))
                return
            # Background
            p.fillRect(r0, QColor(248, 249, 252))
            # x-domain = union de toutes les dates
            xs = []
            for _, arr in (self._series or []):
                xs += [t for (t, _) in arr]
            xs = sorted(set(xs))
            if not xs:
                p.setPen(QPen(QColor(120, 120, 120)))
                p.drawText(r, Qt.AlignCenter, "Aucune donnée")
                return
            x_min, x_max = xs[0], xs[-1]
            def x_to_px(xd: datetime) -> int:
                try:
                    denom = (x_max - x_min).total_seconds()
                    if denom <= 0: return r.left()
                    ratio = (xd - x_min).total_seconds() / denom
                except Exception:
                    ratio = 0.0
                return int(r.left() + max(0.0, min(1.0, ratio)) * r.width())
            # y-domain
            def _sf(v, default=0.0):
                try: return float(v)
                except Exception: return default
            all_y = []
            for _, arr in (self._series or []):
                all_y += [max(0.0, _sf(y, 0.0)) for (_, y) in arr]
            y_max = max(all_y) if all_y else 1.0
            if y_max <= 0: y_max = 1.0
            def y_to_px(yv: float) -> int:
                yv = max(0.0, float(yv))
                return int(r.bottom() - (yv / y_max) * r.height())
            # Grille légère
            grid_pen = QPen(QColor(220, 225, 235)); grid_pen.setStyle(Qt.DashLine)
            p.setPen(grid_pen)
            for i in range(5):
                yy = r.top() + i * r.height() // 4
                p.drawLine(r.left(), yy, r.right(), yy)
            # Séries (couleurs fixes)
            base_colors = [QColor("#0A84FF"), QColor("#10B981")]
            for idx, (label, arr) in enumerate(self._series or []):
                col = base_colors[idx % len(base_colors)]
                p.setPen(QPen(col, 2))
                prev = None
                for (xd, yv) in sorted(arr, key=lambda t: t[0]):
                    pt = QPoint(x_to_px(xd), y_to_px(_sf(yv, 0.0)))
                    if prev is not None:
                        p.drawLine(prev, pt)
                    prev = pt
            # Légende simple
            p.setPen(QPen(QColor(60, 60, 70)))
            f = QFont(p.font()); f.setPointSize(max(9, f.pointSize())); p.setFont(f)
            x = r.left()
            for idx, (label, _) in enumerate(self._series or []):
                col = base_colors[idx % len(base_colors)]
                p.fillRect(QRect(x, r.bottom()+4, 10, 10), col)
                p.drawText(x+14, r.bottom()+14, str(label))
                x += 120
            # Ticks/mois (6 labels max)
            try:
                from datetime import datetime as _dt_
                p.setPen(QPen(QColor(120, 125, 135)))
                # choose ~6 evenly spaced ticks across xs
                tick_count = 6
                step = max(1, len(xs)//tick_count)
                used = 0
                for i in range(0, len(xs), step):
                    used += 1
                    if used > tick_count: break
                    xd = xs[i]
                    xpx = x_to_px(xd)
                    p.drawLine(xpx, r.bottom(), xpx, r.bottom()+4)
                    try:
                        label = xd.strftime('%b')
                    except Exception:
                        label = str(i+1)
                    p.drawText(xpx-10, r.bottom()+16, label)
            except Exception:
                pass
        
        finally:
            if p.isActive():
                p.end()
def _month_starts_last_12(today: date) -> List[date]:
    """Retourne les 12 premiers jours de mois jusqu'à 'today' inclus (ordre croissant)."""
    base = date(today.year, today.month, 1)
    out = []
    y, m = base.year, base.month
    for _ in range(11, -1, -1):
        # compute base - k months
        yy, mm = y, m
        # step backwards by appropriate amount
    # Simpler: rebuild list forward
    out = []
    yy = base.year; mm = base.month
    # Build 12-month window ending at base
    months = []
    for i in range(11, -1, -1):
        # compute base - i months
        total = (base.year * 12 + base.month - 1) - i
        y2 = total // 12
        m2 = total % 12 + 1
        months.append(date(y2, m2, 1))
    return months
class DashboardTab(QWidget):
    """Accueil V2 : Deux grandes cartes (CA, Marge) + deux petites (Achats, Solde YTD), graphique, devis à relancer filtrés."""
    def __init__(self, settings: dict, parent=None):
        super().__init__(parent)
        self.settings = settings or {}
        self.setObjectName("dashboardRoot")
        root = QVBoxLayout(self); root.setContentsMargins(8, 8, 8, 8); root.setSpacing(8)
        # --- Bandeau ---
        self._banner = QWidget(self); self._banner.setObjectName("dashboardBanner"); self._banner.setMinimumHeight(110)
        self._banner.installEventFilter(self); root.addWidget(self._banner)
        # Top bar (actions à droite)
        topbar = QHBoxLayout(); topbar.setSpacing(6); topbar.addStretch(1)
        self.btn_refresh = QPushButton("Actualiser"); self.btn_refresh.clicked.connect(self.refresh)
        topbar.addWidget(self.btn_refresh)
        root.addLayout(topbar)
                # --- KPI Layout V2 (two big on top, two small below) ---
        kpi_grid = QGridLayout(); kpi_grid.setSpacing(8)
        # KPI widgets
        self.kpi_ca_30   = self._make_kpi("CA 30 jours", big=True, icon="cash", route="factures")
        self.kpi_marge_30= self._make_kpi("Marge 30 jours", big=True, icon="chart", route="factures")
        self.kpi_dep_30  = self._make_kpi("Achats 30 jours", big=False, icon="bag", route="urssaf")
        self.kpi_ytd     = self._make_kpi("Solde YTD (CA - Achats)", big=False, icon="chart", route="urssaf")
        # row 0 (big)
        kpi_grid.addWidget(self.kpi_ca_30,    0, 0)
        kpi_grid.addWidget(self.kpi_marge_30, 0, 1)
        # row 1 (small)
        kpi_grid.addWidget(self.kpi_dep_30,   1, 0)
        kpi_grid.addWidget(self.kpi_ytd,      1, 1)
        
        # Hero image on the right (spans 2 rows)
        try:
            from PyQt5.QtCore import Qt
        except Exception:
            pass
        self._hero = QLabel(); self._hero.setObjectName("dashboardHero"); self._hero.installEventFilter(self)
        self._hero.setMinimumSize(320, 200)
        try: self._hero.setAlignment(Qt.AlignCenter)
        except Exception: pass
        try: self._set_hero_pixmap()
        except Exception: pass
        try: self._hero.setScaledContents(True)
        except Exception: pass
        kpi_grid.addWidget(self._hero, 0, 2, 2, 1)
        
        # Stretch
        try:
            kpi_grid.setColumnStretch(0, 1); kpi_grid.setColumnStretch(1, 1); kpi_grid.setColumnStretch(2, 1)
        except Exception:
            pass
        
        root.addLayout(kpi_grid)
        
        # --- Graphique ---
        self.chart = _MiniChart(self); self.chart.setMinimumHeight(180); self.chart.setMaximumHeight(200)
        root.addWidget(self.chart)
        # --- Devis à relancer ---
        box = QGroupBox("Devis à relancer — Envoyé / Demande d'acompte"); vbox = QVBoxLayout(box); vbox.setContentsMargins(8,8,8,8)
        self.tbl_relance = QTableWidget(0, 0, box)
        # === En-tête du tableau "Devis à relancer" (immuable) ===
        try:
            from PyQt5.QtWidgets import QHeaderView
            hdr = self.tbl_relance.horizontalHeader()
            hdr.setSectionsMovable(False)           # interdire drag & drop de colonnes
            hdr.setSectionResizeMode(QHeaderView.Interactive)
            hdr.setStretchLastSection(False)
            self.tbl_relance.verticalHeader().setDefaultSectionSize(24)
            self.tbl_relance.setWordWrap(False)
            self.tbl_relance.setMinimumHeight(300)  # ~10 lignes visibles en 1080p
        except Exception:
            pass
        self.tbl_relance.setAlternatingRowColors(True); self.tbl_relance.setSortingEnabled(True); 
        self.tbl_relance.verticalHeader().setVisible(False)
        self.tbl_relance.setWordWrap(False)
        self.tbl_relance.setMinimumHeight(300)
        try:
            from PyQt5.QtWidgets import QHeaderView
            self.tbl_relance.verticalHeader().setDefaultSectionSize(24)
            self.tbl_relance.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
            self.tbl_relance.horizontalHeader().setStretchLastSection(False)
        except Exception: pass
        self.tbl_relance.cellDoubleClicked.connect(self._goto_devis)
        vbox.addWidget(self.tbl_relance)
        root.addWidget(box)
        self._apply_styles()
        try:
            handler = (getattr(self, '_render_banner_centered', None)
                       or getattr(self, '_style_banner_centered_v2', None)
                       or getattr(self, '_style_banner', None))
            if handler:
                handler()
        except Exception:
            pass
        self.refresh()
    # ---------- UI helpers ----------
    def _apply_styles(self):
        ss = """
        QWidget#dashboardRoot { background: #f8fafc; }
        QWidget#dashboardBanner {
            border-radius: 12px;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #0A84FF, stop:1 #10B981);
        }
        QFrame#kpiCardBig, QFrame#kpiCardSmall {
            border: 1px solid #d7dde6;
            border-radius: 10px;
            background: #ffffff;
        }
        QLabel.kpiTitle { color: #0A1F44; font-weight: 700; }
        QLabel.kpiValue { color: #24303f; }
        QLabel.kpiDelta { color: #169a62; }
        
        QLabel#dashboardHero {
            border: 1px solid #d7dde6;
            border-radius: 10px;
            background: #ffffff;
            padding: 0px;
        }"""
        app = QApplication.instance()
        try:
            if app and (ss not in (app.styleSheet() or "")):
                app.setStyleSheet((app.styleSheet() or "") + "\\n" + ss)
        except Exception: pass
    
    def _render_banner_centered(self):
        """Affiche PJ2 (ChatGPT image) centrée, au-dessus du dégradé; agrandit et place le logo entreprise à gauche.
        Pas de QPainter; deux QLabel enfants du bandeau; z-order élevé avec raise_()."""
        try:
            import os
            from PyQt5.QtCore import Qt
            from PyQt5.QtGui import QPixmap
            from PyQt5.QtWidgets import QLabel
        except Exception:
            return
        if not hasattr(self, "_banner"):
            return
        # Centre: PJ2
        pm_src = _pixmap_from_b64(_AE_BANNER_PNG_B64)
        if not pm_src or pm_src.isNull():
            return
        W = max(1, self._banner.width())
        H = max(1, self._banner.height())
        target_w = max(1, W - 24)
        target_h = max(1, H - 16)
        pm_center = pm_src.scaled(target_w, target_h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        cx = (W - pm_center.width()) // 2
        cy = (H - pm_center.height()) // 2
        center_lbl = getattr(self, "_banner_lbl", None)
        if center_lbl is None:
            center_lbl = QLabel(self._banner)
            center_lbl.setObjectName("bannerImage")
            try:
                center_lbl.setStyleSheet("background: transparent; border: none;")
                center_lbl.setAttribute(Qt.WA_TransparentForMouseEvents, True)
            except Exception:
                pass
            self._banner_lbl = center_lbl
        center_lbl.setPixmap(pm_center)
        center_lbl.setGeometry(max(0, cx), max(0, cy), pm_center.width(), pm_center.height())
        try:
            center_lbl.raise_(); center_lbl.show()
        except Exception:
            pass
        # Gauche: logo entreprise (Paramètres)
        path = ""
        try:
            path = _logo_from_settings(getattr(self, "settings", {}) or {})
        except Exception:
            path = ""
        if path and os.path.exists(path):
            left_lbl = getattr(self, "_banner_left_logo", None)
            if left_lbl is None:
                left_lbl = QLabel(self._banner)
                left_lbl.setObjectName("bannerCompanyLogo")
                try:
                    left_lbl.setStyleSheet("background: transparent; border: none;")
                    left_lbl.setAttribute(Qt.WA_TransparentForMouseEvents, True)
                except Exception:
                    pass
                self._banner_left_logo = left_lbl
            pm_logo = QPixmap(path)
            if pm_logo and not pm_logo.isNull():
                size = max(56, min(int(H * 1.40), 240))
                pm_logo_scaled = pm_logo.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
                left_lbl.setPixmap(pm_logo_scaled)
                left_lbl.setGeometry(14, max(8, (H - pm_logo_scaled.height()) // 2), pm_logo_scaled.width(), pm_logo_scaled.height())
                try:
                    left_lbl.raise_(); left_lbl.show()
                except Exception:
                    pass
    def _make_kpi(self, title: str, big: bool, icon: str, route: str):
            w = QFrame(); w.setObjectName("kpiCardBig" if big else "kpiCardSmall")
            w.setFixedHeight(128 if big else 88)
            lay = QHBoxLayout(w); lay.setContentsMargins(10 if big else 8, 10 if big else 8, 10, 8); lay.setSpacing(8)
    
            # Icon placeholder (petit dessin vectoriel simple via QLabel)
            ic = QLabel(); ic.setFixedSize(40 if big else 28, 40 if big else 28); ic.setScaledContents(True)
            try:
                # dessiner une petite icône simple
                pm = QPixmap(ic.width(), ic.height()); pm.fill(Qt.transparent)
                p = QPainter(); 
                if p.begin(pm):
                    p.setRenderHint(QPainter.Antialiasing, True)
                    c1 = QColor("#0A84FF"); c2 = QColor("#10B981")
                    if icon == "cash":
                        p.setBrush(c1); p.setPen(Qt.NoPen); p.drawRoundedRect(4, ic.height()-18, ic.width()-8, 12, 4, 4)
                        p.setBrush(c2); p.drawEllipse(6, 6, 10, 10); p.drawEllipse(ic.width()-16, 6, 10, 10)
                    elif icon == "bag":
                        p.setBrush(c1); p.setPen(Qt.NoPen); p.drawRoundedRect(5, 10, ic.width()-10, ic.height()-14, 6, 6); p.drawRect(9, 6, ic.width()-18, 8)
                    else:  # chart
                        p.setBrush(c2); p.setPen(Qt.NoPen)
                        for i,h in enumerate([10,18,26]):
                            p.drawRect(5+i*8, ic.height()-h-6, 6, h)
                    p.end()
                ic.setPixmap(pm)
            except Exception: pass
    
            body = QVBoxLayout(); body.setSpacing(2)
            t = QLabel(title); t.setObjectName("kpiTitle"); t.setProperty("class","kpiTitle")
            f = t.font(); f.setPointSize(11 if big else 10); f.setBold(True); t.setFont(f)
            v = QLabel("0,00 €"); v.setObjectName("kpiValue"); v.setProperty("class","kpiValue")
            f2 = v.font(); f2.setPointSize(18 if big else 15); v.setFont(f2)
            dlt = QLabel(""); dlt.setObjectName("kpiDelta"); dlt.setProperty("class", "kpiDelta")
            fd = dlt.font(); fd.setPointSize(10); dlt.setFont(fd)
            # sparkline
            sp = QLabel(); sp.setFixedHeight(24); sp.setMinimumWidth(80)
            body.addWidget(t); body.addWidget(v); body.addWidget(dlt); body.addWidget(sp)
            body.addStretch(1)
    
            lay.addWidget(ic); lay.addLayout(body); lay.addStretch(1)
    
            # attach refs
            w._value_label = v
            w._delta_label = dlt
            w._spark_label = sp
            w._route = route
    
            # clic navigue
            w.installEventFilter(self)
            return w
    def _sparkline_pixmap(self, values: list, w: int = 120, h: int = 24) -> QPixmap:
        w = max(w, 60); h = max(h, 20)
        pm = QPixmap(w, h); pm.fill(Qt.transparent)
        p = QPainter()
        try:
            if not p.begin(pm): return pm
            p.setRenderHint(QPainter.Antialiasing, True)
            # border line
            p.setPen(QPen(QColor(230,235,242)))
            for i in range(1,3):
                y = int(h*i/3)
                p.drawLine(0, y, w, y)
            if not values: 
                p.end(); return pm
            ymin = min(values); ymax = max(values); rng = (ymax - ymin) or 1.0
            pts = []
            for i,val in enumerate(values):
                x = int(i * (w-6) / max(1,len(values)-1)) + 3
                y = h-3 - int((val - ymin)/rng * (h-6))
                pts.append((x,y))
            p.setPen(QPen(QColor("#0A84FF"), 2))
            for i in range(1,len(pts)):
                p.drawLine(pts[i-1][0], pts[i-1][1], pts[i][0], pts[i][1])
        finally:
            if p.isActive(): p.end()
        return pm
    # ---------- Data pipeline ----------
    def refresh(self):
        """Recalcule tout + deltas + sparkline."""
        try:
            today = datetime.today().date()
            d30 = today - timedelta(days=30)
            d60 = today - timedelta(days=60)
            y0 = date(today.year, 1, 1)
            # Factures
            facts = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
            ca_30 = ca_prev30 = 0.0
            ca_ytd = 0.0
            monthly_ca = {}
            for r in facts:
                d_iso = _safe_date_str(r.get("date",""))
                if not d_iso: continue
                try: d = datetime.strptime(d_iso, "%Y-%m-%d").date()
                except Exception:
                    try: d = datetime.strptime(r.get("date",""), "%d/%m/%Y").date()
                    except Exception: continue
                ttc = _safe_float(r.get("total_ttc", 0.0), 0.0)
                if d >= d30: ca_30 += ttc
                elif d >= d60: ca_prev30 += ttc
                if d >= y0:  ca_ytd += ttc
                key = date(d.year, d.month, 1)
                monthly_ca[key] = monthly_ca.get(key, 0.0) + ttc
            # Achats (ops/*/admin/achats.csv)
            achats_total_30 = achats_prev30 = 0.0
            achats_ytd = 0.0
            monthly_ach = {}
            ops_root = os.path.join(DATA_DIR, "ops")
            if os.path.isdir(ops_root):
                for root, _dirs, files in os.walk(ops_root):
                    if os.path.basename(root) != "admin": 
                        continue
                    if "achats.csv" not in files:
                        continue
                    path = os.path.join(root, "achats.csv")
                    try:
                        with open(path, "r", encoding="utf-8-sig", newline="") as f:
                            rd = csv.DictReader(f)
                            for rr in rd:
                                d_iso = _safe_date_str(rr.get("date",""))
                                if not d_iso: continue
                                try: d = datetime.strptime(d_iso, "%Y-%m-%d").date()
                                except Exception:
                                    try: d = datetime.strptime(rr.get("date",""), "%d/%m/%Y").date()
                                    except Exception: continue
                                ttc = _safe_float(rr.get("montant_ttc", rr.get("ttc", 0.0)), 0.0)
                                if d >= d30: achats_total_30 += ttc
                                elif d >= d60: achats_prev30 += ttc
                                if d >= y0:  achats_ytd += ttc
                                key = date(d.year, d.month, 1)
                                monthly_ach[key] = monthly_ach.get(key, 0.0) + ttc
                    except Exception:
                        log_error("dashboard_read_achats\\n"+__import__('traceback').format_exc())
            # KPIs values
            marge_30 = max(0.0, ca_30 - achats_total_30)
            marge_prev30 = max(0.0, ca_prev30 - achats_prev30)
            solde_ytd = ca_ytd - achats_ytd
            # Set values
            self.kpi_ca_30._value_label.setText(money(ca_30))
            self.kpi_dep_30._value_label.setText(money(achats_total_30))
            self.kpi_marge_30._value_label.setText(money(marge_30))
            self.kpi_ytd._value_label.setText(money(solde_ytd))
            # Deltas (+/- vs 30 jours précédents)
            def fmt_delta(cur, prev):
                if prev <= 0 and cur > 0: return "▲ +∞% vs 30j"
                if prev == 0: return "0%"
                pct = ((cur - prev) / prev) * 100.0
                sign = "▲" if pct >= 0 else "▼"
                return f"{sign} {pct:+.1f}% vs 30j"
            self.kpi_ca_30._delta_label.setText(fmt_delta(ca_30, ca_prev30))
            self.kpi_dep_30._delta_label.setText(fmt_delta(achats_total_30, achats_prev30))
            self.kpi_marge_30._delta_label.setText(fmt_delta(marge_30, marge_prev30))
            self.kpi_ytd._delta_label.setText("")  # pas de delta YTD pour l'instant
            # Sparklines (12 derniers mois)
            months = _month_starts_last_12(today)
            def series_from_map(mp):
                return [float(mp.get(m, 0.0)) for m in months]
            ca_series = series_from_map(monthly_ca)
            ach_series = series_from_map(monthly_ach)
            self.kpi_ca_30._spark_label.setPixmap(self._sparkline_pixmap(ca_series))
            self.kpi_dep_30._spark_label.setPixmap(self._sparkline_pixmap(ach_series))
            self.kpi_marge_30._spark_label.setPixmap(self._sparkline_pixmap([c-a for c,a in zip(ca_series, ach_series)]))
            self.kpi_ytd._spark_label.setPixmap(self._sparkline_pixmap([]))
            # Graph main chart
            def map_months(mp):
                out = {}
                for m in months:
                    out[date(m.year, m.month, 1)] = float(mp.get(m, 0.0))
                return out
            self.chart.set_series([("CA TTC", [(datetime(m.year,m.month,1), map_months(monthly_ca)[m]) for m in months]),
                                   ("Achats TTC", [(datetime(m.year,m.month,1), map_months(monthly_ach)[m]) for m in months])])
            # Devis filtrés
            self._fill_relances()
        except Exception:
            try: log_error("dashboard_refresh\\n"+__import__('traceback').format_exc())
            except Exception: pass
    # (Filtre devis : Envoyé / Demande d'acompte) — version précédente conservée
    def _fill_relances(self):
        """Tableau "Devis à relancer" conforme aux contraintes.
        - Colonnes strictes et ordre exact (sans extras).
        - Filtre : Statut ∈ {Envoyé, Demande d’acompte} ET non converti en facture.
        - Formats montants/dates ; tri par date décroissante.
        """
        import os, unicodedata
        try:
            from PyQt5.QtWidgets import QTableWidgetItem
            from PyQt5.QtCore import Qt
        except Exception:
            QTableWidgetItem = None
            Qt = None
        target_labels = [
            "N°", "date", "client id", "client", "client prenom", "client adresse",
            "client CP", "Client ville", "client mail", "client tel",
            "statut", "objet", "total ht", "acompte", "total ttc", "date statut"
        ]
        target_widths = [90, 90, 90, 140, 120, 220, 80, 140, 200, 120, 110, 220, 100, 90, 110, 110]
        def _norm_key(s: str) -> str:
            s = (s or "").strip().lower()
            s = unicodedata.normalize("NFKD", s)
            s = "".join(ch for ch in s if not unicodedata.combining(ch))
            s = " ".join(s.split())
            return s
        def _norm_txt(s: str) -> str:
            s = (s or "").strip().lower().replace("’","'")
            s = unicodedata.normalize("NFKD", s)
            s = "".join(ch for ch in s if not unicodedata.combining(ch))
            s = " ".join(s.split())
            return s
        aliases = {
            "n°": {"numero","n°","numéro","no","num","id_devis","code"},
            "date": {"date","date_devis","date_creation"},
            "client id": {"client_id","id_client","clientid","code_client"},
            "client": {"client_nom","client","nom_client","nom"},
            "client prenom": {"client_prenom","prenom","prénom","first_name","firstname"},
            "client adresse": {"client_adresse","adresse","adresse_client","address"},
            "client cp": {"client_cp","cp","code_postal","postal","zip"},
            "client ville": {"client_ville","ville","city","localite","localité"},
            "client mail": {"client_email","email","mail","client_mail","email_client"},
            "client tel": {"client_tel","telephone","tel","téléphone","phone"},
            "statut": {"statut","status","etat","state"},
            "objet": {"objet","description","titre","object","subject"},
            "total ht": {"total_ht","ht","montant_ht"},
            "acompte": {"acompte","avance","deposit"},
            "total ttc": {"total_ttc","ttc","montant_ttc"},
            "date statut": {"date_statut","statut_date","date_derniere_relance","date_relance"},
        }
        aliases = {k: {_norm_key(x) for x in v} for k, v in aliases.items()}
        # Charger tous les devis
        try:
            path_devis = os.path.join(DATA_DIR, CSV_DEVIS)
        except Exception:
            path_devis = os.path.join("data", "data_devis.csv")
        devis_rows = load_csv(path_devis)
        # Table des clés disponibles sur TOUT le CSV (pas seulement filtré)
        available = {}
        for r in devis_rows:
            for k in r.keys():
                nk = _norm_key(k)
                if nk not in available:
                    available[nk] = k
        # Résoudre les colonnes à afficher (ordre exact des libellés)
        chosen_labels, chosen_keys = [], []
        for lab in target_labels:
            aset = aliases.get(lab.lower(), set())
            real = None
            for a in aset:
                if a in available:
                    real = available[a]; break
            if real:
                chosen_labels.append(lab)
                chosen_keys.append(real)
        tbl = self.tbl_relance
        tbl.clear()
        tbl.setSortingEnabled(False)
        tbl.setRowCount(0)
        tbl.setColumnCount(len(chosen_labels))
        tbl.setHorizontalHeaderLabels(chosen_labels)
        def _is_converted(row: dict) -> bool:
            s = str(row.get("converted_to_facture") or "").strip().lower()
            if s in ("", "0", "false", "no", "non", "none", "null"):
                return False
            return True
        def _get_statut(row: dict) -> str:
            for k in ("statut","status","etat","state"):
                if k in row:
                    return str(row.get(k, ""))
            return ""
        # Filtrer
        filtered = []
        for r in devis_rows:
            st = _norm_txt(_get_statut(r))
            if (st.startswith("envoye") or ("demande" in st and "acompte" in st)) and not _is_converted(r):
                filtered.append(r)
        # Déterminer clé réelle de la date
        real_date_key = None
        for a in aliases.get("date", set()):
            if a in available:
                real_date_key = available[a]; break
        def _parse_date(row):
            if not real_date_key:
                return datetime(1970,1,1)
            iso = _safe_date_str(row.get(real_date_key, ""))
            try:
                return datetime.strptime(iso, "%Y-%m-%d")
            except Exception:
                return datetime(1970,1,1)
        filtered.sort(key=_parse_date, reverse=True)
        def _fmt(label: str, raw):
            if raw is None:
                raw = ""
            l = (label or "").lower()
            if l in ("total ht","acompte","total ttc"):
                return money(_safe_float(raw, 0.0))
            if l in ("date","date statut"):
                iso = _safe_date_str(raw)
                return _display_date(iso)
            return str(raw)
        for r in filtered:
            i = tbl.rowCount(); tbl.insertRow(i)
            for ci, (lab, key) in enumerate(zip(chosen_labels, chosen_keys)):
                val = r.get(key, "")
                txt = _fmt(lab, val)
                if QTableWidgetItem is None:
                    continue
                it = QTableWidgetItem(txt)
                if Qt is not None:
                    if lab.lower() in ("total ht","acompte","total ttc"):
                        it.setTextAlignment(Qt.AlignVCenter | Qt.AlignRight)
                    else:
                        it.setTextAlignment(Qt.AlignVCenter | Qt.AlignLeft)
                tbl.setItem(i, ci, it)
        for ci, lab in enumerate(chosen_labels):
            try:
                w = target_widths[target_labels.index(lab)]
            except Exception:
                w = 100
            try:
                tbl.setColumnWidth(ci, w)
            except Exception:
                pass
        try:
            tbl.setSortingEnabled(True)
        except Exception:
            pass
    def _goto_devis(self, row, col):
        """Double-clic → aller dans Devis et sélectionner le n° si possible."""
        try:
            numero_idx = None
            for j in range(self.tbl_relance.columnCount()):
                h = (self.tbl_relance.horizontalHeaderItem(j).text() or "").lower()
                if "num" in h or "n°" in h or "numero" in h:
                    numero_idx = j; break
            num = self.tbl_relance.item(row, numero_idx).text() if numero_idx is not None else None
            mw = self.window(); from PyQt5.QtWidgets import QTabWidget
            tabs = mw.findChild(QTabWidget); 
            if not tabs: return
            dev_idx = None
            for i in range(tabs.count()):
                if "devis" in (tabs.tabText(i) or "").lower():
                    dev_idx = i; break
            if dev_idx is None: return
            tabs.setCurrentIndex(dev_idx)
            dev_w = tabs.widget(dev_idx)
            from PyQt5 import QtWidgets
            tables = dev_w.findChildren(QtWidgets.QTableWidget) or []
            for t in tables:
                header_map = {j:(t.horizontalHeaderItem(j).text().lower() if t.horizontalHeaderItem(j) else "") for j in range(t.columnCount())}
                cand = None
                for j, name in header_map.items():
                    if "num" in name or "n°" in name or "numero" in name:
                        cand = j; break
                if cand is None: continue
                for r in range(t.rowCount()):
                    it = t.item(r, cand)
                    if it and num and (it.text().strip() == num.strip()):
                        t.setCurrentCell(r, cand); t.scrollToItem(it, t.PositionAtCenter); return
        except Exception:
            log_error("dashboard_goto_devis\\n"+__import__('traceback').format_exc())
    def eventFilter(self, obj, ev):
        # redessiner banner
        if obj is self._banner and ev.type() in (QEvent.Resize, QEvent.Show):
            handler = (getattr(self, '_render_banner_centered', None)
                       or getattr(self, '_style_banner_centered_v2', None)
                       or getattr(self, '_style_banner', None))
            if handler:
                QTimer.singleShot(0, handler)
            return False
        if obj is getattr(self, '_hero', None) and ev.type() in (QEvent.Resize, QEvent.Show):
            QTimer.singleShot(0, getattr(self, '_set_hero_pixmap', lambda: None))
            return False
        # clic KPI
        if hasattr(obj, "_route") and ev.type() == QEvent.MouseButtonPress:
            self._on_kpi_clicked(obj._route); return True
        return super().eventFilter(obj, ev)
    def _on_kpi_clicked(self, route: str):
        try:
            from PyQt5.QtWidgets import QTabWidget
            tabs = self.window().findChild(QTabWidget); 
            if not tabs: return
            # route -> tab
            target = None
            if route == "factures":
                key = "facture"
            elif route == "urssaf":
                key = "urssaf"
            else:
                key = route
            for i in range(tabs.count()):
                if key in (tabs.tabText(i) or "").lower():
                    target = i; break
            if target is not None:
                tabs.setCurrentIndex(target)
        except Exception:
            pass
    def _style_banner(self):
        """Compat shim: route vers _render_banner_centered()."""
        try:
            return self._render_banner_centered()
        except Exception:
            return
    def _style_banner_centered_v2(self):
            try:
                return self._render_banner_centered()
            except Exception:
                return
    def eventFilter(self, obj, ev):
            # Redessine le bandeau / le hero sur Show/Resize (une seule implémentation, fiable)
            if obj is getattr(self, "_banner", None) and ev.type() in (QEvent.Resize, QEvent.Show):
                handler = (getattr(self, "_render_banner_centered", None)
                           or getattr(self, "_style_banner_centered_v2", None)
                           or getattr(self, "_style_banner", None))
                if handler:
                    QTimer.singleShot(0, handler)
                return False
            if obj is getattr(self, "_hero", None) and ev.type() in (QEvent.Resize, QEvent.Show):
                QTimer.singleShot(0, getattr(self, "_set_hero_pixmap", lambda: None))
                return False
            # Délègue le reste au parent
            return super().eventFilter(obj, ev)
    def _on_kpi_clicked(self, route: str):
        try:
            from PyQt5.QtWidgets import QTabWidget
            tabs = self.window().findChild(QTabWidget); 
            if not tabs: return
            # route -> tab
            target = None
            if route == "factures":
                key = "facture"
            elif route == "urssaf":
                key = "urssaf"
            else:
                key = route
            for i in range(tabs.count()):
                if key in (tabs.tabText(i) or "").lower():
                    target = i; break
            if target is not None:
                tabs.setCurrentIndex(target)
        except Exception:
            pass
    def _style_banner(self):
        """Compat shim: route vers _render_banner_centered()."""
        try:
            return self._render_banner_centered()
        except Exception:
            return
    def _set_hero_pixmap(self):
        try:
            from PyQt5.QtCore import Qt
            from PyQt5.QtGui import QPixmap
        except Exception:
            return
        pm_src = _pixmap_from_b64(_AE_HERO_PNG_B64)
        if not hasattr(self, "_hero") or pm_src.isNull():
            return
        w = max(1, self._hero.width())
        h = max(1, self._hero.height())
        pm = pm_src.scaled(w, h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        try:
            self._hero.setPixmap(pm)
        except Exception:
            pass
    def _resize_company_logo_left(self, size=80, margin_left=14, margin_top=10):
        """Agrandit un éventuel logo de société placé à gauche du bandeau (si présent).
        On évite de toucher l'image centrée (objectName 'bannerImage')."""
        try:
            from PyQt5.QtWidgets import QLabel
            from PyQt5.QtCore import Qt
        except Exception:
            return
        if not hasattr(self, "_banner"):
            return
        try:
            for w in self._banner.findChildren(QLabel):
                if getattr(w, "objectName", lambda: "")() == "bannerImage":
                    continue
                pm = getattr(w, "pixmap", lambda: None)()
                if pm:
                    try:
                        w.setFixedSize(size, size)
                        w.setScaledContents(True)
                        w.move(margin_left, margin_top)
                        w.raise_()
                        break
                    except Exception:
                        pass
        except Exception:
            pass
            return
        pm_src = _pixmap_from_b64(_AE_HERO_PNG_B64)
        if not hasattr(self, "_hero") or pm_src.isNull():
            return
        w = max(1, self._hero.width())
        h = max(1, self._hero.height())
        pm = pm_src.scaled(w, h, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        try:
            self._hero.setPixmap(pm)
        except Exception:
            pass
class MainWindow(QMainWindow):
    def __init__(self):
        # === UI-only: stronger global theme & base font ===
        try:
            from PyQt5 import QtWidgets, QtGui
            app = QtWidgets.QApplication.instance()
            if app is not None:
                try:
                    # Bump base font a little (UI only)
                    f = app.font(); f.setPointSize(max(f.pointSize(), 10)); app.setFont(f)
                except Exception: pass
                try:
                    cur = app.styleSheet() or ''
                    app.setStyleSheet(cur + ('\n' if cur else '') + """
/* === Global UI-only theme (soft modern) === */
QWidget { font-family: 'Segoe UI', 'Roboto', Arial; font-size: 10pt; }
QTabBar::tab { padding: 8px 14px; margin: 2px; border-radius: 8px; }
QTabBar::tab:selected { background: qlineargradient(x1:0,y1:0,x2:0,y2:1, stop:0 #e6f0ff, stop:1 #cfe0ff); }
QTabBar::tab:!selected { background: #f2f4f8; }
QTableView, QTableWidget {
  gridline-color: #d5d9e0;
  alternate-background-color: #fafbfc;
  selection-background-color: #cfe8ff;
  selection-color: #002244;
}
QHeaderView::section {
  padding: 8px 10px;
  font-weight: 600;
  border: 0px;
  border-bottom: 1px solid #d5d9e0;
  background: #f7f9fc;
}
QPushButton {
  padding: 8px 14px;
  border-radius: 10px;
  background: #eef2f7;
  border: 1px solid #d7dde6;
}
QPushButton:hover { background: #e2e8f0; }
QPushButton:pressed { background: #d9e2ef; }
QLineEdit, QTextEdit, QComboBox {
  padding: 6px 8px; border-radius: 8px; border: 1px solid #d7dde6; background: #ffffff;
}
""")
                except Exception: pass
        except Exception:
            pass
        super().__init__()
        # === UI-only tweaks (delta minimal, no logic modified) ==================
        try:
            from PyQt5 import QtWidgets, QtCore, QtGui
            app = QtWidgets.QApplication.instance()
            if app is not None:
                try: app.setStyle('Fusion')
                except Exception: pass
                base_qss = """
                QTableView, QTableWidget {
                    gridline-color: palette(mid);
                    selection-background-color: palette(highlight);
                    selection-color: palette(highlighted-text);
                    alternate-background-color: palette(alternate-base);
                }
                QHeaderView::section {
                    padding: 6px;
                    font-weight: 600;
                    border: 0px;
                    border-bottom: 1px solid palette(mid);
                    background: palette(button);
                }
                QPushButton { padding: 6px 10px; border-radius: 6px; }
                QPushButton:pressed { transform: translateY(1px); }
                """
                try:
                    current = app.styleSheet() or ''
                    app.setStyleSheet(current + ('\n' if current else '') + base_qss)
                except Exception: pass
            # Tables: lisibilité
            try:
                tables = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QTableWidget)
                for tbl in tables or []:
                    try: tbl.setAlternatingRowColors(True)
                    except Exception: pass
                    try: tbl.verticalHeader().setVisible(False)
                    except Exception: pass
                    try: tbl.verticalHeader().setDefaultSectionSize(30)
                    except Exception: pass
                    try: tbl.horizontalHeader().setStretchLastSection(True)
                    except Exception: pass
                    try:
                        from PyQt5.QtWidgets import QHeaderView
                        tbl.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)
                    except Exception: pass
            except Exception: pass
            # Boutons
            try:
                btns = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QPushButton)
                for b in btns or []:
                    try: b.setMinimumHeight(32)
                    except Exception: pass
                    try: b.setIconSize(QtCore.QSize(20, 20))
                    except Exception: pass
                    try:
                        if not (b.toolTip() or '').strip():
                            b.setToolTip((b.text() or '').strip())
                    except Exception: pass
            except Exception: pass
            # Layouts
            try:
                layouts = getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QBoxLayout)
                for lay in layouts or []:
                    try: lay.setSpacing(8)
                    except Exception: pass
                    try: lay.setContentsMargins(8, 8, 8, 8)
                    except Exception: pass
            except Exception: pass
        except Exception: pass
        # === End UI-only tweaks ==================================================
        self.setWindowTitle(APP_TITLE); self.resize(1300, 850)
        ensure_dirs(); ensure_all_csv()
        self.settings=ensure_settings()
        tabs=QTabWidget()
        tabs.addTab(DashboardTab(self.settings, self), "Accueil")
        tabs.addTab(ClientsTab(self), "Clients")
        tabs.addTab(CatalogueTab(self), "Catalogue")
        tabs.addTab(DevisTab(self.settings, self), "Devis")
        tabs.addTab(FacturesTab(self.settings, self), "Factures")
        suivi_tab = SuiviFinancierTab(self.settings, self)
        tabs.addTab(suivi_tab, "Suivi financier")
        try:
            self.suivi_financier_tab = suivi_tab
        except Exception:
            pass
        bilan_tab = BilanPaiementsTab(parent=self)
        try:
            index_sf = tabs.indexOf(suivi_tab)
            if index_sf >= 0:
                tabs.insertTab(index_sf + 1, bilan_tab, "Bilan Paiements")
            else:
                tabs.addTab(bilan_tab, "Bilan Paiements")
        except Exception:
            tabs.addTab(bilan_tab, "Bilan Paiements")
        try:
            self.bilan_paiements_tab = bilan_tab
        except Exception:
            pass
        tabs.addTab(UrssafTab(self.settings, self), "Synthèse & URSSAF") if "UrssafTab" in globals() else None
        tabs.addTab(SettingsTab(self.settings, self), "Paramètres")
        tabs.addTab(SettingsEmailTab(self.settings, self), "Paramètres (Email)")
        
        tabs.addTab(EFacturationTab(self.settings, self), "E-facturation (PPF/PDP)")
        self.setCentralWidget(tabs)
        try:
            self.tabs = tabs
        except Exception:
            pass
        try:
            from PyQt5.QtCore import QTimer
            QTimer.singleShot(0, lambda: tabs.setCurrentIndex(0))
        except Exception:
            pass
        # === UI-only: polish tables & toolbars ===
        try:
            from PyQt5 import QtWidgets, QtCore, QtGui
            # Enlarge tables and headers
            for tbl in getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QTableWidget) or []:
                try:
                    f = tbl.font(); f.setPointSize(max(f.pointSize(), 10)); tbl.setFont(f)
                    hf = tbl.horizontalHeader().font(); hf.setPointSize(max(hf.pointSize(), 10)); tbl.horizontalHeader().setFont(hf)
                except Exception: pass
                try: tbl.verticalHeader().setDefaultSectionSize(max(tbl.verticalHeader().defaultSectionSize(), 34))
                except Exception: pass
                try:
                    eff = QtWidgets.QGraphicsDropShadowEffect(tbl); eff.setBlurRadius(10); eff.setOffset(0,1); tbl.setGraphicsEffect(eff)
                except Exception: pass
            # Bigger buttons with consistent icon size
            for b in getattr(self, 'findChildren', lambda *_: [])(QtWidgets.QPushButton) or []:
                try: b.setMinimumHeight(max(b.minimumHeight(), 36))
                except Exception: pass
                try: b.setIconSize(QtCore.QSize(22, 22))
                except Exception: pass
                # Color hints for destructive or primary actions (by text)
                try:
                    t = (b.text() or '').lower()
                    if 'supprimer' in t or 'delete' in t:
                        b.setStyleSheet(b.styleSheet() + ' QPushButton { background:#fde2e2; border:1px solid #f5b5b5; } QPushButton:hover { background:#fbd2d2; }')
                    elif 'nouveau' in t or 'new' in t or 'créer' in t or 'create' in t:
                        b.setStyleSheet(b.styleSheet() + ' QPushButton { background:#e6f7ff; border:1px solid #b3e5ff; } QPushButton:hover { background:#d7f1ff; }')
                except Exception: pass
            # Add spacing and stretch in top bars of Devis/Factures tabs (robuste au réordonnancement)
            try:
                tabs = self.findChild(QtWidgets.QTabWidget)
                if tabs:
                    for i in range(tabs.count()):
                        title = (tabs.tabText(i) or "").lower()
                        if "devis" in title or "factures" in title:
                            w = tabs.widget(i)
                            for lay in w.findChildren(QtWidgets.QHBoxLayout) or []:
                                try: lay.setSpacing(max(lay.spacing(), 10))
                                except Exception: pass
                                try:
                                    m = lay.contentsMargins()
                                    lay.setContentsMargins(max(m.left(),8), max(m.top(),6), max(m.right(),8), max(m.bottom(),6))
                                except Exception: pass
                                try: lay.addStretch(1)
                                except Exception: pass
                                break
            except Exception: pass
            # (dedup removed old index-based polish)
        except Exception:
            pass
        # === End polish ===
        # --- UI-only: adapt columns to content + stretch 'Objet' ---
        try:
            from PyQt5 import QtCore
            from PyQt5.QtWidgets import QTableWidget, QHeaderView
            tables = getattr(self, 'findChildren', lambda *_: [])(QTableWidget)
            for tbl in tables or []:
                try:
                    tbl.setWordWrap(False)
                    tbl.setTextElideMode(QtCore.Qt.ElideRight)
                    hdr = tbl.horizontalHeader()
                    # map header -> index
                    name_to_idx = {}
                    try:
                        for c in range(tbl.columnCount()):
                            it = tbl.horizontalHeaderItem(c)
                            txt = (it.text() if it else '').strip()
                            if txt: name_to_idx[txt] = c
                    except Exception: pass
                    try:
                        for c in range(tbl.columnCount()):
                            hdr.setSectionResizeMode(c, QHeaderView.Interactive)
                    except Exception: pass
                    for key in ('N°','Date','Client','Total TTC','Statut','Actions'):
                        if key in name_to_idx:
                            try: hdr.setSectionResizeMode(name_to_idx[key], QHeaderView.ResizeToContents)
                            except Exception: pass
                    if 'Objet' in name_to_idx:
                        # --- Status-based coloring (UI-only) ---
                        try:
                            status_col = name_to_idx.get('Statut', None)
                            if status_col is not None:
                                from PyQt5 import QtGui
                                # Map status -> (bg, fg)
                                pal = {
                                    'brouillon': ('#FFA726', '#000000'),   # orange
                                    'envoyé':    ('#FFD54F', '#000000'),   # yellow
                                    'envoye':    ('#FFD54F', '#000000'),   # fallback sans accent
                                    'accepté':   ('#2E7D32', '#FFFFFF'),   # dark green
                                    'accepte':   ('#2E7D32', '#FFFFFF'),
                                    'acompte':   ('#A5D6A7', '#000000'),   # light green
                                    'refusé':    ('#E53935', '#FFFFFF'),   # red
                                    'refuse':    ('#E53935', '#FFFFFF'),
                                }
                                for r in range(tbl.rowCount()):
                                    it = tbl.item(r, status_col)
                                    if not it: 
                                        continue
                                    s = (it.text() or '').strip().lower()
                                    bgfg = pal.get(s)
                                    if bgfg:
                                        bg, fg = bgfg
                                        try: it.setBackground(QtGui.QBrush(QtGui.QColor(bg)))
                                        except Exception: pass
                                        try: it.setForeground(QtGui.QBrush(QtGui.QColor(fg)))
                                        except Exception: pass
                        except Exception:
                            pass
                        # --- End status coloring ---
                        try: hdr.setSectionResizeMode(name_to_idx['Objet'], QHeaderView.Stretch)
                        except Exception: pass
                    # --- Extra sizing rules for known tables (Clients, Catalogue) ---
                    try:
                        from PyQt5.QtWidgets import QHeaderView as _QHV
                        # Clients list
                        if all(k in name_to_idx for k in ('ID','Nom','Email','Adresse','Ville','CodePostal')):
                            try: hdr.setSectionResizeMode(name_to_idx['ID'], _QHV.ResizeToContents)
                            except Exception: pass
                            for k in ('Nom','Email','Adresse','Ville'):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.Stretch)
                                except Exception: pass
                            for k in ('CodePostal',):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                except Exception: pass
                            # Téléphone column may be titled 'Téléphone' or 'Telephone'
                            for k in ('Téléphone','Telephone'):
                                if k in name_to_idx:
                                    try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                    except Exception: pass
                        # Catalogue main tab (if present)
                        if all(k in name_to_idx for k in ('ID','Réf','Type','Désignation','Prix HT','TVA %','Unité')):
                            for k in ('ID','Réf','Type','Prix HT','TVA %','Unité'):
                                try: hdr.setSectionResizeMode(name_to_idx[k], _QHV.ResizeToContents)
                                except Exception: pass
                            try: hdr.setSectionResizeMode(name_to_idx['Désignation'], _QHV.Stretch)
                            except Exception: pass
                            if 'Catégorie' in name_to_idx:
                                try: hdr.setSectionResizeMode(name_to_idx['Catégorie'], _QHV.Stretch)
                                except Exception: pass
                    except Exception:
                        pass
                    try: tbl.resizeColumnsToContents()
                    except Exception: pass
                except Exception: pass
        except Exception: pass
        # --- End UI-only column sizing ---
# === Global light-blue background across the app (added) ===
def _find_table_col_by_header(table, names=set()):
    try:
        names = { (n or '').strip().lower() for n in (names or set()) }
        for c in range(table.columnCount()):
            it = table.horizontalHeaderItem(c)
            if it and (it.text() or '').strip().lower() in names:
                return c
    except Exception:
        pass
    return None
def _apply_global_background():
    try:
        from PyQt5 import QtWidgets
        app = QtWidgets.QApplication.instance()
        if app:
            css = "\n".join([
                "QMainWindow { background: #EAF6FF; }",
                "QWidget { background: #EAF6FF; }"
            ])
            try:
                app.setStyleSheet((app.styleSheet() or "") + "\n" + css)
            except Exception:
                pass
    except Exception:
        pass
def main():
    import faulthandler, io, os
    try:
        crash_log = open(os.path.join(BASE_DIR, 'crash_native.log'), 'a', encoding='utf-8')
        faulthandler.enable(crash_log)
    except Exception:
        pass
    try:
        app=QApplication(sys.argv);
        try:
            auto_migrate_prenom_all()
        except Exception:
            pass
        w=MainWindow(); _apply_global_background(); w.show(); sys.exit(app.exec_())
    except Exception:
        log_error("MAIN\n"+__import__('traceback').format_exc())
# ============================================================================
# >>> AIDE INTÉGRÉE — Onglet + Menu (HelpTab)  [AUTO-GÉNÉRÉ - DELTA MINIMAL] <<<
# ============================================================================
from pathlib import Path as _Help_Path
from PyQt5 import QtWidgets as _Help_QtWidgets, QtGui as _Help_QtGui, QtCore as _Help_QtCore
from PyQt5.QtCore import Qt as _Help_Qt, QUrl as _Help_QUrl
from PyQt5.QtGui import QDesktopServices as _Help_QDesktopServices
# === Guard: ensure _cii_log / _ppf_log exist very early (avoid NameError in UI paths) ===
import os as _os_guard, datetime as _dt_guard
import time
# === SITU HELPERS (clean) ===
def _strip_situ_suffix(objet: str) -> str:
    """Remove trailing ' – SITU-xx' or ' SITU-xx' from an objet."""
    try:
        s = str(objet or "").strip()
        import re
        s = re.sub(r'\s*[–-]?\s*SITU[-_ ]?\d{2}\s*$', '', s, flags=re.IGNORECASE)
        return s.strip()
    except Exception:
        return str(objet or "")
def _situ_extract_idx_from_objet(objet: str):
    """Return int index if objet ends with SITU-xx, else None."""
    import re
    m = re.search(r'(?:^|\b)SITU[-_ ]?(\d{2})\s*$', str(objet or "").upper())
    return int(m.group(1)) if m else None
def _situ_list_for_parent(parent_doc: dict):
    """List existing SITU entries for the same parent base objet and client."""
    try:
        base_obj = _strip_situ_suffix(parent_doc.get("objet",""))
        client_id = parent_doc.get("client_id","")
        rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
        out = []
        for r in rows:
            if str(r.get("client_id","")) == str(client_id):
                obj = str(r.get("objet",""))
                if _strip_situ_suffix(obj) == base_obj and "SITU" in obj.upper():
                    out.append(r)
        return out
    except Exception:
        return []
def _situ_resolve_context(parent_doc: dict):
    """Compute prev billed TTC (last SITU cumul), next_idx, next_suffix, anchor doc_num (if any)."""
    items = _situ_list_for_parent(parent_doc)
    # Sort by numero (fallback date) to find last
    try:
        items.sort(key=lambda r: (r.get("numero",""), r.get("date","")))
    except Exception:
        pass
    prev_billed = 0.0
    last_idx = 0
    anchor = None
    total_count = 0
    if items:
        last = items[-1]
        try:
            prev_billed = float(str(last.get("situation_cumul_ttc","0")).replace(',','.'))
        except Exception:
            prev_billed = 0.0
        last_idx = _situ_extract_idx_from_objet(last.get("objet","")) or 0
        anchor = last.get("numero") or None
        try:
            if float(last.get("situation_index", 0) or 0) > 0:
                last_idx = int(float(last.get("situation_index", 0)))
        except Exception:
            pass
        for row in reversed(items):
            try:
                val = int(float(str(row.get("situation_total_count", 0) or 0)))
            except Exception:
                val = 0
            if val > 0:
                total_count = val
                break
    next_idx = max(1, last_idx + 1)
    next_suffix = f"SITU-{next_idx:02d}"
    if total_count < next_idx:
        total_count = next_idx
    return {
        "prev_billed_ttc": prev_billed,
        "next_idx": next_idx,
        "next_suffix": next_suffix,
        "anchor": anchor,
        "total_count": total_count,
    }
def _situ_files_normalize_from_doc(doc: dict, idx_hint=None):
    """
    Idempotent promotion/purge for Situation artifacts.
    Inputs tolerated (any mix):
      - <LEGAL>_fx.pdf                           (to purge for SITU)
      - <LEGAL>_situation_N.pdf                  -> <LEGAL>_SITU-NN_fx.pdf
      - <LEGAL> – SITU-xx.pdf / ..._fx.pdf       -> <LEGAL>_SITU-NN_fx.pdf
      - <LEGAL>.cii.xml                          (to purge for SITU)
      - <LEGAL> – SITU-xx.cii.xml                -> <LEGAL>_SITU-NN.cii.xml
      - <LEGAL> – SITU-xx – SITU-xx.cii.xml      -> <LEGAL>_SITU-NN.cii.xml (dedupe)
      - already-normalized targets               keep as-is
    Scope:
      - data/factures
      - data/ops/**/02_factures
    Returns: (target_pdf, target_cii) if found/created, else (None, None)
    """
    try:
        try:
            raw_legal = str(doc.get("numero") or "").strip()
        except Exception:
            raw_legal = str(doc.get("numero")) if doc.get("numero") is not None else ""
        legal = _situ_sanitize_legal(raw_legal) or raw_legal
        if not legal:
            return (None, None)
        # Where to look
        base_data = DATA_DIR if 'DATA_DIR' in globals() else os.path.join(os.getcwd(), "data")
        search_dirs = []
        fact_dir = os.path.join(base_data, "factures")
        if os.path.isdir(fact_dir):
            search_dirs.append(fact_dir)
        ops_dir = os.path.join(base_data, "ops")
        if os.path.isdir(ops_dir):
            for root, dirs, files in os.walk(ops_dir):
                if os.path.basename(root) == "02_factures":
                    search_dirs.append(root)
        def _idx_from_name(name: str):
            m = re.search(r'_situation_(\d+)\.pdf$', name, flags=re.IGNORECASE)
            if m:
                try: return int(m.group(1))
                except: pass
            m = re.search(r'\bSITU[-_ ]?(\d{2})', name, flags=re.IGNORECASE)
            if m:
                try: return int(m.group(1))
                except: pass
            return None
        idx = None
        if idx_hint:
            try: idx = int(idx_hint)
            except: idx = None
        if idx is None:
            obj = str(doc.get("objet",""))
            m = re.search(r'\bSITU[-_ ]?(\d{2})', obj, flags=re.IGNORECASE)
            if m:
                try: idx = int(m.group(1))
                except: idx = None
        candidates = []
        for d in search_dirs:
            try:
                for fn in os.listdir(d):
                    if not fn.lower().startswith(legal.lower()):
                        continue
                    full = os.path.join(d, fn)
                    if not os.path.isfile(full):
                        continue
                    candidates.append(full)
            except Exception:
                pass
        norm_pdf_pattern = re.compile(r'^' + re.escape(legal) + r'-(\d{2})_fx\.pdf$', flags=re.IGNORECASE)
        legacy_pdf_situation = []
        legacy_pdf_situ_dash = []
        norm_pdf = []
        legacy_pdf_plain_fx = []
        legacy_cii_plain = []
        legacy_cii_situ = []
        legacy_cii_situ_dup = []
        norm_cii = []
        for path in candidates:
            fn = os.path.basename(path)
            low = fn.lower()
            if low.endswith(".pdf"):
                if norm_pdf_pattern.match(fn):
                    norm_pdf.append(path)
                elif "_situation_" in low:
                    legacy_pdf_situation.append(path)
                elif "situ" in low:
                    legacy_pdf_situ_dash.append(path)
                elif low.endswith("_fx.pdf"):
                    legacy_pdf_plain_fx.append(path)
            elif low.endswith(".xml"):
                m = re.match(rf"^{re.escape(legal)}-(\d{{2}})\.cii\.xml$", fn)
                if m:

                    norm_cii.append(path)
                elif "SITU" in fn and "SITU" in fn.split("SITU",1)[1]:
                    legacy_cii_situ_dup.append(path)
                elif "SITU" in fn:
                    legacy_cii_situ.append(path)
                elif fn == f"{legal}.cii.xml":
                    legacy_cii_plain.append(path)
        if idx is None:
            for lst in (legacy_pdf_situation, legacy_pdf_situ_dash, norm_pdf):
                for p in lst:
                    i = _idx_from_name(os.path.basename(p))
                    if i:
                        idx = i
                        break
                if idx: break
        if idx is None:
            idx = 1
        idx2 = f"{idx:02d}"
        target_pdf = os.path.join(fact_dir, f"{legal}-{idx2}_fx.pdf") if os.path.isdir(fact_dir) else None
        target_cii = os.path.join(fact_dir, f"{legal}-{idx2}.cii.xml") if os.path.isdir(fact_dir) else None
        def _ensure_dir(p):
            if p and not os.path.isdir(os.path.dirname(p)):
                try: os.makedirs(os.path.dirname(p), exist_ok=True)
                except Exception: pass
        pdf_source = None
        for lst in (norm_pdf, legacy_pdf_situation, legacy_pdf_situ_dash, legacy_pdf_plain_fx):
            if lst:
                pdf_source = max(lst, key=lambda p: os.path.getmtime(p))
                break
        if target_pdf and pdf_source:
            try:
                _ensure_dir(target_pdf)
                if os.path.abspath(pdf_source) != os.path.abspath(target_pdf):
                    try:
                        if os.path.exists(target_pdf):
                            os.remove(target_pdf)
                    except Exception: pass
                    try:
                        os.rename(pdf_source, target_pdf)
                    except Exception:
                        import shutil
                        shutil.copy2(pdf_source, target_pdf)
                        try: os.remove(pdf_source)
                        except Exception: pass
            except Exception:
                pass
        cii_source = None
        for lst in (norm_cii, legacy_cii_situ, legacy_cii_situ_dup, legacy_cii_plain):
            if lst:
                cii_source = max(lst, key=lambda p: os.path.getmtime(p))
                break
        if target_cii and cii_source:
            try:
                _ensure_dir(target_cii)
                if os.path.abspath(cii_source) != os.path.abspath(target_cii):
                    try:
                        if os.path.exists(target_cii):
                            os.remove(target_cii)
                    except Exception: pass
                    try:
                        os.rename(cii_source, target_cii)
                    except Exception:
                        import shutil
                        shutil.copy2(cii_source, target_cii)
                        try: os.remove(cii_source)
                        except Exception: pass
            except Exception:
                pass
        def _purge(paths):
            for p in paths:
                try:
                    if p and os.path.exists(p) and os.path.basename(p) not in (os.path.basename(target_pdf) if target_pdf else "") and os.path.basename(p) not in (os.path.basename(target_cii) if target_cii else ""):
                        os.remove(p)
                except Exception:
                    pass
        _purge(legacy_pdf_plain_fx)
        _purge(legacy_pdf_situation)
        _purge(legacy_pdf_situ_dash)
        _purge([p for p in norm_pdf if os.path.abspath(p) != os.path.abspath(target_pdf or "")])
        _purge(legacy_cii_plain)
        _purge(legacy_cii_situ)
        _purge(legacy_cii_situ_dup)
        _purge([p for p in norm_cii if os.path.abspath(p) != os.path.abspath(target_cii or "")])
        if not (target_pdf and os.path.exists(target_pdf)):
            target_pdf = None
        if not (target_cii and os.path.exists(target_cii)):
            target_cii = None
        return (target_pdf, target_cii)
    except Exception:
        return (None, None)
# === SITU helpers (injected) ===
def _strip_situ_suffix(obj: str) -> str:
    """Return the base objet without the trailing SITU suffix."""
    try:
        s = str(obj or "").strip()
        import re
        s = re.sub(r"\s*[–-]?\s*SITU[-_ ]?\d{1,3}\s*$", "", s, flags=re.IGNORECASE)
        return s.strip()
    except Exception:
        return str(obj or "")
def _situ_extract_idx_from_objet(objet):
    """Extract the numeric SITU index from the objet, if present."""
    import re
    try:
        s = str(objet or "")
    except Exception:
        s = ""
    m = re.search(r"(?:^|\b)SITU[-_ ]?(\d{1,3})\s*$", s, flags=re.IGNORECASE)
    if not m:
        return None
    try:
        return int(m.group(1))
    except Exception:
        return None
def _situ_list_for_parent(parent_doc: dict) -> list:
    try:
        base_obj = _strip_situ_suffix(parent_doc.get("objet", ""))
        base_norm = base_obj.strip().lower()
        cid = (parent_doc.get("client_id") or "").strip()
        reference = (parent_doc.get("doc_reference") or "").strip()
    except Exception:
        return []
    try:
        rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS))
    except Exception:
        try:
            rows = load_csv(os.path.join(DATA_DIR, "data_factures.csv"))
        except Exception:
            return []
    out = []
    for r in rows or []:
        try:
            row_cid = (r.get("client_id") or "").strip()
            if cid and row_cid and row_cid != cid:
                continue
            if cid and not row_cid:
                # keep filtering using the reference/base objet below
                pass
            elif not cid and row_cid:
                # if parent lacks cid, rely on other filters
                pass
            ro = str(r.get("objet", "") or "")
            if "SITU" not in ro.upper():
                continue
            row_norm = _strip_situ_suffix(ro).strip().lower()
            if base_norm and row_norm and row_norm != base_norm:
                continue
            if reference:
                row_ref = (r.get("doc_reference") or "").strip()
                if row_ref and row_ref != reference:
                    continue
            out.append(r)
        except Exception:
            continue
    def _key(r):
        idx = _situ_extract_idx_from_objet(r.get("objet", ""))
        if isinstance(idx, int):
            return (idx, str(r.get("numero", "")))
        return (9999, str(r.get("numero", "")))
    return sorted(out, key=_key)
def _situ_resolve_context(parent_doc: dict) -> dict:
    L = _situ_list_for_parent(parent_doc)
    if not L:
        return {
            "prev_billed": 0.00,
            "prev_billed_ttc": 0.00,
            "next_idx": 1,
            "next_suffix": "SITU-01",
            "anchor": None,
            "total_count": 1,
        }
    anchor = L[-1]
    def _f(v):
        try:
            return float(v)
        except Exception:
            return 0.0
    anchor_cumul = _f(anchor.get("situation_cumul_ttc", ""))
    if anchor_cumul <= 0:
        total = 0.0
        for r in L:
            cur = _f(r.get("situation_current_ttc", ""))
            if cur <= 0:
                cur = _f(r.get("total_ttc", ""))
            total += cur
        anchor_cumul = total
    last_idx = _situ_extract_idx_from_objet(anchor.get("objet", "")) or len(L)
    try:
        idx_override = float(anchor.get("situation_index", 0) or 0)
        if idx_override > 0:
            last_idx = int(idx_override)
    except Exception:
        pass
    total_count = 0
    for row in reversed(L):
        try:
            val = int(float(str(row.get("situation_total_count", 0) or 0)))
        except Exception:
            val = 0
        if val > 0:
            total_count = val
            break
    next_idx = max(1, last_idx + 1)
    if total_count < next_idx:
        total_count = next_idx
    result = {
        "prev_billed": round(anchor_cumul, 2),
        "prev_billed_ttc": round(anchor_cumul, 2),
        "next_idx": next_idx,
        "next_suffix": f"SITU-{next_idx:02d}",
        "anchor": anchor,
        "total_count": total_count,
    }
    return result
# === End SITU helpers ===
# --- timing helpers (do not rely on global `_time`) ---
def _safe_now() -> float:
    try:
        import time as _t
        return _t.time()
    except Exception:
        return 0.0
def _ms_since(t0: float) -> int:
    try:
        import time as _t
        return int((_t.time() - (t0 or 0.0)) * 1000)
    except Exception:
        return 0
# ------------------------------------------------------
# --- time guard (robuste) ---
try:
    import time as _time
except Exception:  # pragma: no cover
    class _DummyTime:
        def time(self): return 0.0
    _time = _DummyTime()
# ----------------------------
try:
    _cii_log  # may not exist yet
except NameError:
    def _cii_log(msg: str) -> None:
        try:
            root = DATA_DIR if 'DATA_DIR' in globals() else _os_guard.getcwd()
            with open(_os_guard.path.join(root, "cii_export.log"), "a", encoding="utf-8") as _f:
                _f.write(f"{_dt_guard.datetime.now():%Y-%m-%d %H:%M:%S} {msg}\n")
        except Exception:
            pass
try:
    _ppf_log
except NameError:
    def _ppf_log(msg: str) -> None:
        try:
            _cii_log(msg)
        except Exception:
            pass
# =============================================================================
# WebEngine (optionnel)
try:
    from PyQt5.QtWebEngineWidgets import QWebEngineView as _Help_QWebEngineView
    from PyQt5.QtWebEngineCore import QWebEnginePage as _Help_QWebEnginePage
    _HELP_HAS_WEBENGINE = True
except Exception:
    _HELP_HAS_WEBENGINE = False
def _help_clean_html_text(s: str) -> str:
    import re as _re
    s = _re.sub(r"<[^>]+>", "", s or "", flags=_re.DOTALL)
    return " ".join(s.split())
def _help_read_text_safe(path: _Help_Path) -> str:
    try:
        return path.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        try:
            return path.read_text(encoding="latin-1", errors="ignore")
        except Exception:
            return ""
def _help_extract_title(path: _Help_Path) -> str:
    import re as _re
    txt = _help_read_text_safe(path)
    m = _re.search(r"<title>(.*?)</title>", txt, _re.IGNORECASE | _re.DOTALL)
    if m: return _help_clean_html_text(m.group(1))
    m = _re.search(r"<h1[^>]*>(.*?)</h1>", txt, _re.IGNORECASE | _re.DOTALL)
    if m: return _help_clean_html_text(m.group(1))
    return path.stem.replace("_", " ")
def _help_discover_files(help_dir: _Help_Path):
    help_dir.mkdir(parents=True, exist_ok=True)
    items = []
    for p in sorted(help_dir.glob("*.htm*")):
        if p.suffix.lower() in {".html", ".htm"} and p.is_file():
            items.append({"title": _help_extract_title(p), "path": p})
    return items
class _Help_PageSearchBar(_Help_QtWidgets.QWidget):
    findRequested = _Help_QtCore.pyqtSignal(str, bool)
    def __init__(self, parent=None):
        super().__init__(parent)
        self.edit = _Help_QtWidgets.QLineEdit(placeholderText="Rechercher dans la page…")
        self.edit.setClearButtonEnabled(True)
        self.btn_prev = _Help_QtWidgets.QToolButton(text="◀")
        self.btn_next = _Help_QtWidgets.QToolButton(text="▶")
        self.lbl_hits = _Help_QtWidgets.QLabel("")
        lay = _Help_QtWidgets.QHBoxLayout(self); lay.setContentsMargins(0,0,0,0)
        lay.addWidget(self.edit, 1); lay.addWidget(self.btn_prev); lay.addWidget(self.btn_next); lay.addWidget(self.lbl_hits, 0)
        self.btn_prev.clicked.connect(lambda: self._emit(False))
        self.btn_next.clicked.connect(lambda: self._emit(True))
        self.edit.returnPressed.connect(lambda: self._emit(True))
    def _emit(self, forward=True):
        txt = self.edit.text() or ""
        if txt.strip(): self.findRequested.emit(txt, forward)
    def set_hits_label(self, text: str): self.lbl_hits.setText(text)
class HelpTab(_Help_QtWidgets.QWidget):
    requestOpenInBrowser = _Help_QtCore.pyqtSignal(_Help_Path)
    def __init__(self, app_dir: _Help_Path, parent=None):
        super().__init__(parent)
        self.setObjectName("HelpTab")
        self.app_dir = _Help_Path(app_dir)
        self.help_dir = self.app_dir / "data" / "help"
        self.zoom_factor = 1.0
        self.items = _help_discover_files(self.help_dir)
        self.title_filter = _Help_QtWidgets.QLineEdit(placeholderText="Rechercher un titre…")
        self.title_filter.setClearButtonEnabled(True)
        self.btn_refresh = _Help_QtWidgets.QToolButton(text="↻")
        self.btn_open_dir = _Help_QtWidgets.QPushButton("Ouvrir dossier Aide")
        self.btn_open_browser = _Help_QtWidgets.QPushButton("Ouvrir dans le navigateur")
        self.btn_print = _Help_QtWidgets.QPushButton("Imprimer")
        self.btn_zoom_out = _Help_QtWidgets.QToolButton(text="−")
        self.btn_zoom_reset = _Help_QtWidgets.QToolButton(text="100%")
        self.btn_zoom_in = _Help_QtWidgets.QToolButton(text="+")
        topbar = _Help_QtWidgets.QHBoxLayout()
        topbar.addWidget(self.title_filter, 1)
        topbar.addWidget(self.btn_refresh)
        topbar.addSpacing(6)
        topbar.addWidget(self.btn_zoom_out); topbar.addWidget(self.btn_zoom_reset); topbar.addWidget(self.btn_zoom_in)
        topbar.addSpacing(12)
        topbar.addWidget(self.btn_open_dir); topbar.addWidget(self.btn_open_browser); topbar.addWidget(self.btn_print)
        self.list = _Help_QtWidgets.QListWidget(); self.list.setMinimumWidth(270)
        if _HELP_HAS_WEBENGINE:
            self.viewer = _Help_QWebEngineView(); self.viewer.setZoomFactor(self.zoom_factor)
        else:
            self.viewer = _Help_QtWidgets.QTextBrowser(); self.viewer.setOpenExternalLinks(True)
        self.page_search = _Help_PageSearchBar()
        splitter = _Help_QtWidgets.QSplitter(_Help_QtCore.Qt.Horizontal)
        splitter.addWidget(self.list)
        right = _Help_QtWidgets.QWidget()
        right_lay = _Help_QtWidgets.QVBoxLayout(right); right_lay.setContentsMargins(0,0,0,0)
        right_lay.addWidget(self.page_search); right_lay.addWidget(self.viewer, 1)
        splitter.addWidget(right); splitter.setStretchFactor(1, 1)
        layout = _Help_QtWidgets.QVBoxLayout(self); layout.addLayout(topbar); layout.addWidget(splitter)
        self._all_items = self.items[:]; self._populate_list(self.items)
        self.title_filter.textChanged.connect(self._apply_title_filter)
        self.list.currentItemChanged.connect(self._on_select)
        self.btn_refresh.clicked.connect(self.refresh_list)
        self.btn_open_dir.clicked.connect(self.open_help_dir)
        self.btn_open_browser.clicked.connect(self.open_in_browser)
        self.btn_print.clicked.connect(self.print_current)
        self.page_search.findRequested.connect(self.find_in_page)
        self.btn_zoom_in.clicked.connect(lambda: self.set_zoom(self.zoom_factor + 0.1))
        self.btn_zoom_out.clicked.connect(lambda: self.set_zoom(self.zoom_factor - 0.1))
        self.btn_zoom_reset.clicked.connect(lambda: self.set_zoom(1.0))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+F"), self, activated=self._focus_page_search)
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl++"), self, activated=lambda: self.set_zoom(self.zoom_factor + 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+="), self, activated=lambda: self.set_zoom(self.zoom_factor + 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+-"), self, activated=lambda: self.set_zoom(self.zoom_factor - 0.1))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+0"), self, activated=lambda: self.set_zoom(1.0))
        _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("F5"), self, activated=self.refresh_list)
        if self.list.count() > 0: self.list.setCurrentRow(0)
        else: self._show_empty_placeholder()
    def _populate_list(self, items):
        self.list.clear()
        for it in items:
            li = _Help_QtWidgets.QListWidgetItem(it["title"])
            li.setData(_Help_QtCore.Qt.UserRole, str(it["path"]))
            self.list.addItem(li)
    def _apply_title_filter(self, text):
        text = (text or "").strip().lower()
        if not text: self._populate_list(self._all_items); return
        filtered = [it for it in self._all_items if text in it["title"].lower()]
        self._populate_list(filtered)
        if self.list.count() > 0: self.list.setCurrentRow(0)
    def _on_select(self, cur, prev):
        if not cur: return
        path = _Help_Path(cur.data(_Help_QtCore.Qt.UserRole))
        self._load_path(path)
    def _load_path(self, path: _Help_Path):
        if not path or not path.exists(): self._set_viewer_html("<h3>Fichier introuvable</h3>"); return
        if _HELP_HAS_WEBENGINE: self.viewer.setUrl(_Help_QUrl.fromLocalFile(str(path)))
        else: self.viewer.setHtml(_help_read_text_safe(path))
    def _set_viewer_html(self, html: str):
        if _HELP_HAS_WEBENGINE: self.viewer.setHtml(html)
        else: self.viewer.setHtml(html)
    def refresh_list(self):
        self._all_items = _help_discover_files(self.help_dir)
        self._apply_title_filter(self.title_filter.text())
    def open_help_dir(self): _Help_QDesktopServices.openUrl(_Help_QUrl.fromLocalFile(str(self.help_dir)))
    def open_in_browser(self):
        p = self.current_path()
        if p and p.exists(): _Help_QDesktopServices.openUrl(_Help_QUrl.fromLocalFile(str(p)))
    def print_current(self):
        p = self.current_path()
        if not p or not p.exists(): return
        try:
            from PyQt5.QtPrintSupport import QPrinter, QPrintDialog
            printer = QPrinter(QPrinter.HighResolution)
            dlg = QPrintDialog(printer, self)
            if dlg.exec_() == _Help_QtWidgets.QDialog.Accepted:
                if _HELP_HAS_WEBENGINE: self.viewer.page().print(printer, lambda ok: None)
                else: self.viewer.document().print_(printer)
        except Exception as e:
            _Help_QtWidgets.QMessageBox.warning(self, "Imprimer", f"Impression indisponible : {e}")
    def find_in_page(self, text: str, forward: bool=True):
        text = text or ""
        if not text.strip(): return
        if _HELP_HAS_WEBENGINE:
            flags = _Help_QWebEnginePage.FindFlags()
            if not forward: flags |= _Help_QWebEnginePage.FindBackward
            self.viewer.findText("", _Help_QWebEnginePage.FindFlags())
            self.viewer.findText(text, flags)
            self.page_search.set_hits_label("")
        else:
            doc = self.viewer.document()
            cursor = self.viewer.textCursor()
            move_mode = _Help_QtGui.QTextDocument.FindBackward if not forward else _Help_QtGui.QTextDocument.FindFlag(0)
            found = self.viewer.find(text, move_mode)
            if not found:
                cursor.movePosition(_Help_QtGui.QTextCursor.Start if forward else _Help_QtGui.QTextCursor.End)
                self.viewer.setTextCursor(cursor); self.viewer.find(text, move_mode)
    def set_zoom(self, factor: float):
        factor = max(0.5, min(3.0, factor)); self.zoom_factor = factor
        if _HELP_HAS_WEBENGINE: self.viewer.setZoomFactor(factor)
        else:
            f = self.viewer.font(); f.setPointSizeF(12.0 * factor); self.viewer.setFont(f)
        self.btn_zoom_reset.setText(f"{int(round(factor*100))}%")
    def _focus_page_search(self):
        self.page_search.edit.setFocus(); self.page_search.edit.selectAll()
    def current_path(self):
        it = self.list.currentItem()
        if not it: return None
        return _Help_Path(it.data(_Help_QtCore.Qt.UserRole))
    def _show_empty_placeholder(self):
        msg = ("<h2>Bienvenue dans l’aide</h2>"
               "<p>Aucune fiche trouvée dans <code>data/help/</code>.</p>"
               "<p>Placez ici vos fichiers <strong>.html</strong> : Manuel_*.html, Fiche_*.html, Glossaire_*.html.</p>")
        self._set_viewer_html(msg)
    def open_topic(self, slug: str):
        mapping = {
            "manuel": "Manuel_AE_GESTION_Index.html",
            "premiers_pas": "Manuel_Partie1_Premiers_Pas.html",
            "partie2": "Manuel_Partie2_Fonctions_de_base.html",
            "partie3": "Manuel_Partie3_Fonctions_avancees_Securite.html",
            "devis": "Fiche_Creer_un_devis.html",
            "facture": "Fiche_Transformer_devis_en_facture.html",
            "paiement": "Fiche_Paiement_Acompte_Payee.html",
            "sauvegarde": "Fiche_Sauvegarde_Restauration.html",
            "glossaire": "Glossaire_AE_GESTION.html",
        }
        target = mapping.get((slug or "").strip().lower())
        if not target: return
        for row in range(self.list.count()):
            it = self.list.item(row)
            if _Help_Path(it.data(_Help_QtCore.Qt.UserRole)).name == target:
                self.list.setCurrentRow(row); return
        p = self.help_dir / target
        if p.exists():
            self._all_items.append({"title": _help_extract_title(p), "path": p})
            self.refresh_list()
            for row in range(self.list.count()):
                it = self.list.item(row)
                if _Help_Path(it.data(_Help_QtCore.Qt.UserRole)).name == target:
                    self.list.setCurrentRow(row); return
        else:
            _Help_QtWidgets.QMessageBox.information(self, "Aide", f"Fichier introuvable : {target}")
# --- Surclasse MainWindow pour intégrer l'Aide et personnaliser le menu ---
try:
    _OriginalMainWindow = MainWindow
except NameError:
    _OriginalMainWindow = None
if _OriginalMainWindow is not None:
    class MainWindow(_OriginalMainWindow):  # type: ignore
        def __init__(self, *args, **kwargs):
            super().__init__(*args, **kwargs)
            # Trouver le QTabWidget principal
            tabs = getattr(self, "tabs", None)
            if tabs is None:
                tabs = self.findChild(_Help_QtWidgets.QTabWidget)
            if tabs is None:
                # Crée un QTabWidget minimal si absent (rare)
                tabs = _Help_QtWidgets.QTabWidget(self)
                self.setCentralWidget(tabs)
            self.tabs = tabs  # normalise le nom
            # Créer et ajouter l'onglet Aide
            app_dir = _Help_Path(os.path.dirname(__file__))
            self.tab_help = HelpTab(app_dir=app_dir, parent=self)
            self.tabs.addTab(self.tab_help, "Aide")
            # Raccourci global F1 → Index
            act_manual = _Help_QtWidgets.QAction("Manuel (F1)", self)
            act_manual.setShortcut(_Help_QtGui.QKeySequence("F1"))
            act_manual.triggered.connect(lambda: (self.tab_help.open_topic("manuel"),
                                                  self.tabs.setCurrentWidget(self.tab_help)))
            self.addAction(act_manual)
            # Menu Aide personnalisé
            self.setup_help_menu()
        # === MENU AIDE PERSONNALISÉ ===
        def setup_help_menu(self):
            menubar = self.menuBar() if hasattr(self, "menuBar") else None
            if menubar is None:
                menubar = self.menuBar()
            menu = menubar.addMenu("Aide")
            def _open(slug): 
                self.tabs.setCurrentWidget(self.tab_help); 
                self.tab_help.open_topic(slug)
            act_index = _Help_QtWidgets.QAction("Manuel (Index)", self)
            act_index.setShortcut(_Help_QtGui.QKeySequence("F1"))
            act_index.triggered.connect(lambda: _open("manuel"))
            menu.addAction(act_index)
            act_p1 = _Help_QtWidgets.QAction("Partie 1 — Premiers Pas", self); act_p1.triggered.connect(lambda: _open("premiers_pas")); menu.addAction(act_p1)
            act_p2 = _Help_QtWidgets.QAction("Partie 2 — Fonctions de base", self); act_p2.triggered.connect(lambda: _open("partie2")); menu.addAction(act_p2)
            act_p3 = _Help_QtWidgets.QAction("Partie 3 — Avancées & Sécurité", self); act_p3.triggered.connect(lambda: _open("partie3")); menu.addAction(act_p3)
            act_gloss = _Help_QtWidgets.QAction("Glossaire", self); act_gloss.triggered.connect(lambda: _open("glossaire")); menu.addAction(act_gloss)
            menu.addSeparator()
            sub = menu.addMenu("Fiches pratiques (A4)")
            a = _Help_QtWidgets.QAction("Créer un devis", self); a.triggered.connect(lambda: _open("devis")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Transformer en facture", self); a.triggered.connect(lambda: _open("facture")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Acompte / Payée", self); a.triggered.connect(lambda: _open("paiement")); sub.addAction(a)
            a = _Help_QtWidgets.QAction("Sauvegarder & Restaurer (CRUCIAL)", self); a.triggered.connect(lambda: _open("sauvegarde")); sub.addAction(a)
            menu.addSeparator()
            act_find = _Help_QtWidgets.QAction("Rechercher dans l’aide…", self)
            act_find.setShortcut(_Help_QtGui.QKeySequence("Ctrl+F"))
            act_find.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help),
                                                self.tab_help.page_search.edit.setFocus(),
                                                self.tab_help.page_search.edit.selectAll()))
            menu.addAction(act_find)
            act_open_browser = _Help_QtWidgets.QAction("Ouvrir la page courante dans le navigateur", self)
            act_open_browser.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help), self.tab_help.open_in_browser()))
            menu.addAction(act_open_browser)
            act_open_dir = _Help_QtWidgets.QAction("Ouvrir le dossier Aide…", self)
            act_open_dir.triggered.connect(lambda: (self.tabs.setCurrentWidget(self.tab_help), self.tab_help.open_help_dir()))
            menu.addAction(act_open_dir)
            menu.addSeparator()
            act_ctx = _Help_QtWidgets.QAction("Aide contextuelle (onglet courant)", self)
            act_ctx.setShortcut(_Help_QtGui.QKeySequence("Shift+F1"))
            act_ctx.triggered.connect(self.open_context_help)
            menu.addAction(act_ctx)
            act_about = _Help_QtWidgets.QAction("À propos de l’aide…", self)
            act_about.triggered.connect(self._about_help)
            menu.addAction(act_about)
            # Raccourcis additionnels
            _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Shift+F1"), self, activated=self.open_context_help)
            _Help_QtWidgets.QShortcut(_Help_QtGui.QKeySequence("Ctrl+F"), self, activated=lambda: (self.tabs.setCurrentWidget(self.tab_help),
                                                                                                   self.tab_help.page_search.edit.setFocus(),
                                                                                                   self.tab_help.page_search.edit.selectAll()))
        def open_context_help(self):
            try:
                w = self.tabs.currentWidget(); name = (w.objectName() or "").lower()
            except Exception:
                name = ""
            if "devis" in name: self.tab_help.open_topic("devis")
            elif "facture" in name: self.tab_help.open_topic("paiement")
            elif "catalogue" in name or "items" in name: self.tab_help.open_topic("devis")
            elif "client" in name: self.tab_help.open_topic("premiers_pas")
            elif "urssaf" in name or "synthese" in name or "synthèse" in name: self.tab_help.open_topic("partie3")
            elif "param" in name or "email" in name: self.tab_help.open_topic("premiers_pas")
            else: self.tab_help.open_topic("manuel")
            self.tabs.setCurrentWidget(self.tab_help)
        def _about_help(self):
            engine = getattr(getattr(self, "tab_help", None), "viewer", None)
            engine_name = engine.__class__.__name__ if engine else "N/A"
            _Help_QtWidgets.QMessageBox.information(
                self, "À propos de l’aide",
                ("<b>Aide intégrée AE_GESTION</b><br>"
                 f"Moteur d’affichage : <code>{engine_name}</code><br><br>"
                 "Les pages sont lues depuis <code>data/help/</code>.<br>"
                 "Raccourcis : F1 (Index), Maj+F1 (Aide contextuelle), Ctrl+F (recherche), "
                 "Ctrl+ / Ctrl- / Ctrl0 (zoom).<br><br>"
                 "Astuce : installez <code>PyQtWebEngine</code> pour un rendu HTML/CSS parfait.")
            )
# ========== FIN AIDE INTÉGRÉE ==========
if __name__=="__main__":
    try:
        ensure_dirs(); ensure_settings(); ensure_all_csv(); auto_migrate_prenom_all()
    except Exception:
        pass
    main()
# ====== OVERRIDE: robust _wrap accepting legacy & new signatures ======
def _wrap_flex(*args):
    """
    Accepts any of:
      _wrap(text, max_w)
      _wrap(c, text, max_w)
      _wrap(c, text, max_w, size, font)
    """
    try:
        from reportlab.pdfbase.pdfmetrics import stringWidth as _sw
    except Exception:
        def _sw(t, font, size): return float(len(t)) * size * 0.5
    if len(args) == 2:
        c = None; text, max_w = args; size = 11; font = "Helvetica"
    elif len(args) == 3:
        c, text, max_w = args; size = 11; font = "Helvetica"
    elif len(args) >= 5:
        c, text, max_w, size, font = args[:5]
    else:
        raise TypeError(f"_wrap() invalid args: {len(args)}")
    text = (text or "").replace("\r","")
    lines_out = []
    for para in text.split("\n"):
        words = para.split()
        cur = ""
        while words:
            w = words.pop(0)
            test = (cur + " " + w).strip()
            width = (c.stringWidth(test, font, size) if c else _sw(test, font, size))
            if not cur or width <= max_w:
                cur = test
            else:
                lines_out.append(cur)
                cur = w
        if cur or not para:
            lines_out.append(cur)
    return lines_out
# override any earlier _wrap symbol
_wrap = _wrap_flex
# ====== END OVERRIDE ======
# ======================================================================
# E1 PATCH — XSD optional validation + CII dedup write + unified boot log
# (Non-breaking override: we redefine the functions at the end so the
# last definitions win, and add our own __main__ block last.)
# ======================================================================
def _validate_cii_xsd(xml_bytes: bytes, settings: dict) -> str:
    """Best-effort XSD validation if a schema dir is configured in settings.
    Returns 'OK', 'ERR', or 'SKIP'. Uses 'xmlschema' if available.
    """
    try:
        import os as _os
        schema_dir = (settings.get("cii_schema_dir") or "").strip()
        if not schema_dir or not _os.path.isdir(schema_dir):
            return "SKIP"
        try:
            import xmlschema  # type: ignore
            xsds = [_os.path.join(schema_dir, f) for f in _os.listdir(schema_dir) if f.lower().endswith(".xsd")]
            if not xsds:
                return "SKIP"
            schema = xmlschema.XMLSchema(xsds[0])
            import io as _io
            schema.validate(_io.BytesIO(xml_bytes))
            return "OK"
        except Exception:
            return "SKIP"
    except Exception:
        return "SKIP"
def _export_cii_for_invoice(doc: dict, settings: dict, numero: str) -> str:
    return _export_cii_for_invoice_core(doc, settings, numero)

# ======================================================================
# E2 PATCH — Log rotation for data/cii_export.log (>10 MiB -> .1 rollover)
# (Non-breaking: wrap existing _cii_log; preserve exact line format & calls)
# ======================================================================
try:
    __old_cii_log = _cii_log  # keep reference to original logger
except Exception:
    __old_cii_log = None
def _cii__rotate_if_needed(log_path: str, max_bytes: int = 10 * 1024 * 1024) -> None:
    try:
        import os as _os, shutil as _shutil
        if _os.path.exists(log_path) and _os.path.getsize(log_path) > max_bytes:
            bak = log_path + ".1"
            try:
                if _os.path.exists(bak):
                    _os.remove(bak)
            except Exception:
                pass
            try:
                _shutil.move(log_path, bak)
            except Exception:
                # If move fails, try copy+truncate
                try:
                    _shutil.copy2(log_path, bak)
                    with open(log_path, "w", encoding="utf-8") as _f:
                        _f.write("")
                except Exception:
                    pass
    except Exception:
        # Never raise from logger
        pass
def _cii_log(message: str) -> None:
    """Wrapper that ensures rotation before delegating to the original logger.
    Keeps the same output format: 'YYYY-MM-DDTHH:MM:SS <message>'.
    """
    try:
        import os as _os
        root = DATA_DIR if 'DATA_DIR' in globals() else _os.path.join(_os.getcwd(), "data")
        _os.makedirs(root, exist_ok=True)
        log_path = _os.path.join(root, "cii_export.log")
        _cii__rotate_if_needed(log_path)
    except Exception:
        pass
    # Delegate to original logger if it existed; otherwise write minimal line
    if __old_cii_log is not None:
        try:
            __old_cii_log(message)
            return
        except Exception:
            pass
    # Fallback minimal logger (rare)
    try:
        import os as _os
        from datetime import datetime as _dt
        root = DATA_DIR if 'DATA_DIR' in globals() else _os.path.join(_os.getcwd(), "data")
        _os.makedirs(root, exist_ok=True)
        log_path = _os.path.join(root, "cii_export.log")
        line = f"{_ae_utcnow().replace(microsecond=0).isoformat()} {message}\n"
        with open(log_path, "a", encoding="utf-8") as _f:
            _f.write(line)
    except Exception:
        pass
# ======================================================================
# E4B PATCH — Onglet séparé "E-facturation (PPF/PDP)" + persistance
# ======================================================================
try:
    from PyQt5.QtWidgets import (
        QWidget, QVBoxLayout, QFormLayout, QGroupBox, QHBoxLayout,
        QLabel, QLineEdit, QComboBox, QCheckBox, QPushButton, QFileDialog,
        QScrollArea, QMessageBox
    )
    from PyQt5.QtCore import Qt
except Exception:
    QWidget = object  # safe placeholder
class EFacturationTab(QWidget):
    def __init__(self, settings: dict, parent=None):
        super().__init__(parent); self.settings = settings
        root = QVBoxLayout(self); form = QFormLayout()
        # --- header ---
        self.cmb_mode = QComboBox(); self.cmb_mode.addItems(["off","sandbox","prod"])
        self.cmb_mode.setCurrentText(str(settings.get("einv_mode","off")) or "off")
        self.cmb_target = QComboBox(); self.cmb_target.addItems(["ppf","pdp"])
        self.cmb_target.setCurrentText(str(settings.get("einv_target","ppf")) or "ppf")
        self.chk_auto = QCheckBox("Envoi auto après export CII")
        self.chk_auto.setChecked(bool(settings.get("einv_auto_send", False)))
        self.poll = QLineEdit(str(int(settings.get("einv_poll_period_s", 900) or 900)))
        self.lbl_mode = QLabel("Mode : " + self.cmb_mode.currentText()); self.lbl_mode.setAlignment(Qt.AlignCenter)
        self.lbl_mode.setStyleSheet("QLabel{background:#dde6f2;border-radius:8px;padding:12px;font-weight:600;}")
        self.cmb_mode.currentTextChanged.connect(lambda _=None: self.lbl_mode.setText("Mode : " + self.cmb_mode.currentText()))
        gb_head = QGroupBox(""); lf = QFormLayout(gb_head)
        lf.addRow("Mode", self.cmb_mode); lf.addRow("Cible", self.cmb_target)
        lf.addRow("", self.chk_auto); lf.addRow("Période polling (s)", self.poll)
        # --- PPF ---
        gb_ppf = QGroupBox("PPF"); fp = QFormLayout(gb_ppf)
        self.ppf_siret = QLineEdit(settings.get("ppf_siret_emetteur",""))
        self.ppf_api_base = QLineEdit(settings.get("ppf_api_base","https://api.ppf.sandbox.example"))
        self.ppf_auth_type = QComboBox(); self.ppf_auth_type.addItems(["oauth","mtls"])
        self.ppf_auth_type.setCurrentText(settings.get("ppf_auth_type","oauth"))
        self.ppf_client_id = QLineEdit(settings.get("ppf_client_id",""))
        self.ppf_client_secret = QLineEdit(settings.get("ppf_client_secret",""))
        self.ppf_token_url = QLineEdit(settings.get("ppf_token_url","https://login.example.com/oauth/token"))
        self.ppf_cert = QLineEdit(settings.get("ppf_cert_path","")); self.ppf_key = QLineEdit(settings.get("ppf_key_path",""))
        btn_cert = QPushButton("Cert..."); btn_key = QPushButton("Clé...")
        btn_cert.clicked.connect(lambda: self._pick_file(self.ppf_cert, "Choisir certificat (mTLS)", "Certificats (*.crt *.pem *.cer *.p12 *.pfx);;Tous (*.*)"))
        btn_key.clicked.connect(lambda: self._pick_file(self.ppf_key, "Choisir clé (mTLS)", "Clés (*.key *.pem *.p8);;Tous (*.*)"))
        row_cert = QWidget(); lc = QHBoxLayout(row_cert); lc.setContentsMargins(0,0,0,0); lc.addWidget(self.ppf_cert,1); lc.addWidget(btn_cert,0)
        row_key = QWidget(); lk = QHBoxLayout(row_key); lk.setContentsMargins(0,0,0,0); lk.addWidget(self.ppf_key,1); lk.addWidget(btn_key,0)
        fp.addRow("SIRET émetteur", self.ppf_siret)
        fp.addRow("API base", self.ppf_api_base); fp.addRow("Auth type", self.ppf_auth_type)
        fp.addRow("Client ID", self.ppf_client_id); fp.addRow("Client Secret", self.ppf_client_secret)
        fp.addRow("Token URL", self.ppf_token_url); fp.addRow("Cert (mTLS)", row_cert); fp.addRow("Clé (mTLS)", row_key)
        # --- PDP ---
        gb_pdp = QGroupBox("PDP"); fd = QFormLayout(gb_pdp)
        self.pdp_api_base = QLineEdit(settings.get("pdp_api_base","https://api.pdp.exemple.tld"))
        self.pdp_api_key  = QLineEdit(settings.get("pdp_api_key",""))
        fd.addRow("API base", self.pdp_api_base); fd.addRow("API key", self.pdp_api_key)
        # scroll layout
        content = QWidget(); cv = QVBoxLayout(content)
        cv.addWidget(self.lbl_mode); cv.addWidget(gb_head); cv.addWidget(gb_ppf); cv.addWidget(gb_pdp); cv.addStretch(1)
        scroll = QScrollArea(); scroll.setWidgetResizable(True); scroll.setWidget(content)
        root.addWidget(scroll)
        btn = QPushButton("Enregistrer E-facturation"); btn.clicked.connect(self.save)
        root.addWidget(btn, 0, Qt.AlignRight)
    def _pick_file(self, target: QLineEdit, title: str, filter_str: str):
        try:
            f, _ = QFileDialog.getOpenFileName(self, title, target.text() or "", filter_str)
            if f: target.setText(f)
        except Exception: pass
    def _collect(self) -> dict:
        s = dict(self.settings)
        s.update({
            "einv_mode": self.cmb_mode.currentText().strip() or "off",
            "einv_target": self.cmb_target.currentText().strip() or "ppf",
            "einv_auto_send": bool(self.chk_auto.isChecked()),
            "einv_poll_period_s": int(_safe_float(self.poll.text() if hasattr(self.poll,'text') else '900', 900)),
            "ppf_siret_emetteur": self.ppf_siret.text().strip(),
            "ppf_api_base": self.ppf_api_base.text().strip(),
            "ppf_auth_type": self.ppf_auth_type.currentText().strip() or "oauth",
            "ppf_client_id": self.ppf_client_id.text().strip(),
            "ppf_client_secret": self.ppf_client_secret.text().strip(),
            "ppf_token_url": self.ppf_token_url.text().strip(),
            "ppf_cert_path": self.ppf_cert.text().strip(),
            "ppf_key_path": self.ppf_key.text().strip(),
            "pdp_api_base": self.pdp_api_base.text().strip(),
            "pdp_api_key": self.pdp_api_key.text().strip(),
        })
        return s
    def save(self):
        try:
            s = self._collect()
            ok = save_settings(s) if "save_settings" in globals() else False
            if ok:
                self.settings.update(s)
                try: QMessageBox.information(self, "E-facturation", "Paramètres enregistrés.")
                except Exception: pass
            else:
                try: QMessageBox.warning(self, "E-facturation", "Échec de l'enregistrement.")
                except Exception: pass
        except Exception as e:
            try: QMessageBox.critical(self, "E-facturation", f"Erreur: {e}")
            except Exception: pass
# ======================================================================
# E5B PATCH — Mock PPF/PDP pipeline on invoice export (mode=mock)
# - After CII export, if einv_mode=='mock', write ops/<NUM>/queue.json and log events.
# - No network calls; best-effort, never raises.
# ======================================================================
try:
    __old_export_cii_for_invoice = _export_cii_for_invoice  # keep old
except Exception:
    __old_export_cii_for_invoice = None
def _einv_mock_enqueue(numero: str, settings: dict) -> None:
    try:
        import os, json, time
        root = DATA_DIR if 'DATA_DIR' in globals() else os.path.join(os.getcwd(), 'data')
        qdir = os.path.join(root, 'ops', str(numero))
        os.makedirs(qdir, exist_ok=True)
        qpath = os.path.join(qdir, 'queue.json')
        payload = {
            'numero': str(numero),
            'mode': 'mock',
            'target': settings.get('einv_target', 'ppf'),
            'auto': bool(settings.get('einv_auto_send', False)),
            'ts': int(time.time()),
            'status': 'queued',
        }
        with open(qpath, 'w', encoding='utf-8') as f:
            json.dump(payload, f, ensure_ascii=False, indent=2)
        try: _cii_log(f"ppf.queue=queued numero={numero} dir={qdir}")
        except Exception: pass
        if payload['auto']:
            payload['status'] = 'submitted'; payload['submitted_ts'] = int(time.time())
            with open(qpath, 'w', encoding='utf-8') as f:
                json.dump(payload, f, ensure_ascii=False, indent=2)
            try: _cii_log(f"ppf.submit=OK numero={numero} target={payload['target']}")
            except Exception: pass
            payload['status'] = 'delivered'; payload['delivered_ts'] = int(time.time())
            with open(qpath, 'w', encoding='utf-8') as f:
                json.dump(payload, f, ensure_ascii=False, indent=2)
            try: _cii_log(f"ppf.status=delivered numero={numero}")
            except Exception: pass
    except Exception as _e:
        try: _cii_log(f"ppf.mock.error numero={numero} err={_e}")
        except Exception: pass
def _export_cii_for_invoice(doc: dict, settings: dict, numero: str) -> str:
    return _export_cii_for_invoice_core(doc, settings, numero)

# --- compatibility shim (URSSAF PDF) ---
def generate_urssaf_pdf(*args, **kwargs):
    """
    Compat wrapper to the internal validated URSSAF PDF generator.
    Keeps legacy API used by UrssafTab.export_pdf().
    """
    return _validated_generate_urssaf_pdf(*args, **kwargs)
def _sf_format_num(x):
    try:
        import math
        if x is None: return ""
        if isinstance(x, str):
            x = x.strip().replace("\xa0"," ").replace("€","").replace("%","").replace(",", ".")
            x = float(x) if x else 0.0
        if isinstance(x, (int,float)) and (math.isfinite(x)):
            return f"{x:,.2f}".replace(",", "X").replace(".", ",").replace("X", " ")
        return str(x)
    except Exception:
        try: return str(x)
        except Exception: return ""
# [SUPPRIME] ancien bloc invalide 'def :'
# === SITU WRAPPERS ===
try:
    __ORIG_FX = _safe_write_facturx_pdf
    def _safe_write_facturx_pdf(doc, *a, **kw):
        r = __ORIG_FX(doc, *a, **kw)
        try:
            _situ_files_normalize_from_doc(doc)
        except Exception:
            pass
        return r
except Exception:
    pass
try:
    __ORIG_PDF = _safe_write_facture_pdf
    def _safe_write_facture_pdf(doc, *a, **kw):
        r = __ORIG_PDF(doc, *a, **kw)
        try:
            _situ_files_normalize_from_doc(doc)
        except Exception:
            pass
        return r
except Exception:
    pass
try:
    __ORIG_SEND = _ops_send_and_store_wrapper
    def _ops_send_and_store_wrapper(*args, **kwargs):
        doc = next((v for v in args if isinstance(v, dict) and "numero" in v), kwargs.get("doc"))
        if isinstance(doc, dict):
            try:
                _situ_files_normalize_from_doc(doc)
            except Exception:
                pass
        return __ORIG_SEND(*args, **kwargs)
except Exception:
    pass

# ========================= Devis UI Sidebar (final, UI-only) =========================
from PyQt5.QtCore import Qt, QSize, QTimer
from PyQt5.QtWidgets import (
    QWidget, QFrame, QLabel, QVBoxLayout, QHBoxLayout,
    QTableWidget, QTableWidgetItem, QHeaderView, QProgressBar,
    QPushButton, QAbstractItemView
)

def _devisui_set_font(w, px, weight, color):
    try: w.setStyleSheet(f"color:{color}; font-size:{px}px; font-weight:{weight};")
    except Exception: pass

def _devisui_pill(text, bg):
    lb = QLabel(text); lb.setAlignment(Qt.AlignCenter)
    lb.setStyleSheet(f"QLabel {{ background:{bg}; color:white; padding:4px 10px; border-radius:9px; font-weight:600; }}")
    return lb

def _devisui_header_theme(table, hex_color="#F5F9FE"):
    try:
        table.horizontalHeader().setStyleSheet(
            "QHeaderView::section {"
            f"background: {hex_color};"
            "border: 1px solid #B4C3D2;"
            "border-radius: 9px;"
            "padding: 2px 6px;"
            "}"
        )
    except Exception: pass

class DevisUI_FlowRow(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._items = []
        self.setMinimumHeight(40)
    def addButton(self, btn):
        btn.setFixedHeight(24)
        btn.setStyleSheet("QPushButton { background:#0A84FF; color:white; border:none; border-radius:12px; padding:2px 12px; font-weight:600; }"
                          "QPushButton:hover { opacity:0.9; }")
        self._items.append(btn); btn.setParent(self); self.update()
    def sizeHint(self): return QSize(320, 40)
    def minimumSizeHint(self): return QSize(320, 40)
    def resizeEvent(self, e):
        super().resizeEvent(e)
        x=y=0; hspace=vspace=6; line_h=0; w=self.width()
        for b in self._items:
            sz=b.sizeHint(); bw, bh = sz.width(), sz.height()
            if x + bw > w and x>0:
                x=0; y += line_h + vspace; line_h=0
            b.setGeometry(x, y, bw, bh)
            x += bw + hspace; line_h = max(line_h, bh)
        self.setMinimumHeight(y + line_h + 2)

class DevisUI_DossierFollowCard(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("DevisTutoCard")
        self.setStyleSheet("#DevisTutoCard { background:white; border:1px solid #B4C3D2; border-radius:12px; }")
        v = QVBoxLayout(self); v.setContentsMargins(12,12,12,12); v.setSpacing(8)

        self.lb_title = QLabel("Suivi du dossier — —"); _devisui_set_font(self.lb_title, 18, 800, "#102030"); v.addWidget(self.lb_title)

        row1 = QWidget(); h1 = QHBoxLayout(row1); h1.setContentsMargins(0,0,0,0); h1.setSpacing(6)
        self.p_statut = _devisui_pill("Statut : —", "#F0A228")
        self.p_due    = _devisui_pill("Échéance : —", "#0A84FF")
        h1.addWidget(self.p_statut); h1.addWidget(self.p_due); h1.addStretch(1); v.addWidget(row1)

        row2 = QWidget(); h2 = QHBoxLayout(row2); h2.setContentsMargins(0,0,0,0); h2.setSpacing(6)
        self.p_kpi = _devisui_pill("Complétude : 0%", "#198754")
        h2.addWidget(self.p_kpi); h2.addStretch(1); v.addWidget(row2)

        self.pb = QProgressBar(); self.pb.setFixedHeight(12); self.pb.setRange(0,100); self.pb.setValue(0); self.pb.setTextVisible(False)
        self.pb.setStyleSheet("QProgressBar { background:#E6EBF0; border:1px solid #B4C3D2; border-radius:6px; }"
                              "QProgressBar::chunk { background:#0A84FF; border-radius:6px; }")
        v.addWidget(self.pb)

        self.lb_manquants = QLabel("Manquants (bloquants) :\n• —"); self.lb_manquants.setWordWrap(True)
        _devisui_set_font(self.lb_manquants, 12, 500, "#102030"); v.addWidget(self.lb_manquants)

        self.lb_actions = QLabel("Prochaines actions :\n1. —\n2. —\n3. —"); self.lb_actions.setWordWrap(True)
        _devisui_set_font(self.lb_actions, 12, 500, "#102030"); v.addWidget(self.lb_actions)

        self.lb_ach = QLabel("Achats rattachés :"); _devisui_set_font(self.lb_ach, 12, 700, "#102030"); v.addWidget(self.lb_ach)

        self.tbl = QTableWidget(0, 4, self)
        self.tbl.setHorizontalHeaderLabels(["Fournisseur", "Coût HT", "Devis", "Ouvrir"])
        self.tbl.setEditTriggers(QAbstractItemView.NoEditTriggers)
        self.tbl.setSelectionMode(QAbstractItemView.NoSelection)
        self.tbl.setFocusPolicy(Qt.NoFocus)
        self.tbl.setMaximumHeight(98)
        self.tbl.verticalHeader().setVisible(False)
        hdr = self.tbl.horizontalHeader()
        hdr.setSectionResizeMode(0, QHeaderView.Stretch)
        hdr.setSectionResizeMode(1, QHeaderView.ResizeToContents)
        hdr.setSectionResizeMode(2, QHeaderView.ResizeToContents)
        hdr.setSectionResizeMode(3, QHeaderView.ResizeToContents)
        _devisui_header_theme(self.tbl, "#F5F9FE")
        v.addWidget(self.tbl)

        self.lb_total = QLabel("Total achats : —"); _devisui_set_font(self.lb_total, 12, 700, "#102030"); v.addWidget(self.lb_total)
        self.lb_marge = QLabel("Marge estimée (HT) : —"); _devisui_set_font(self.lb_marge, 12, 700, "#102030"); v.addWidget(self.lb_marge)
        self.lb_source = QLabel("(source : Suivi financier)"); _devisui_set_font(self.lb_source, 10, 600, "#7A8794"); v.addWidget(self.lb_source)

        self.lb_docs = QLabel("Docs libres : —"); _devisui_set_font(self.lb_docs, 11, 600, "#7A8794"); v.addWidget(self.lb_docs)
        self.btn_docs_count = QPushButton("0 fichiers"); self.btn_docs_count.setFixedHeight(22)
        self.btn_docs_count.setStyleSheet("QPushButton { background:#0A84FF; color:white; border:none; border-radius:11px; padding:0 10px; font-weight:700; }")
        self.btn_docs_count.setEnabled(False); v.addWidget(self.btn_docs_count, 0, Qt.AlignLeft)

        self.flow = DevisUI_FlowRow()
        for txt in ("Joindre doc","Ajouter note","Marquer accepté","Ouvrir dossier"):
            self.flow.addButton(QPushButton(txt))
        v.addWidget(self.flow)

    # API minimale
    def set_neutral(self):
        self.lb_title.setText("Suivi du dossier — —")
        self.p_statut.setText("Statut : —")
        self.p_due.setText("Échéance : —")
        self.p_kpi.setText("Complétude : 0%"); self.pb.setValue(0)
        self.lb_manquants.setText("Manquants (bloquants) :\n• —")
        self.lb_actions.setText("Prochaines actions :\n1. —\n2. —\n3. —")
        self.tbl.setRowCount(0)
        self.lb_total.setText("Total achats : —")
        self.lb_marge.setText("Marge estimée (HT) : —")
        self.lb_docs.setText("Docs libres : —")
        self.btn_docs_count.setText("0 fichiers")

    def update_context(self, num, statut, echeance, kpi):
        self.lb_title.setText(f"Suivi du dossier — {num or '—'}")
        self.p_statut.setText(f"Statut : {statut or '—'}")
        self.p_due.setText(f"Échéance : {echeance or '—'}")
        try: k = max(0, min(100, int(kpi or 0)))
        except Exception: k = 0
        self.p_kpi.setText(f"Complétude : {k}%"); self.pb.setValue(k)

    def _parse_money(self, s):
        if not s: return 0.0
        s = str(s).replace("€","").replace("\\xa0"," ").strip().replace(" ","").replace(",",".")
        try: return float(s)
        except Exception: return 0.0

    def set_achats(self, rows):
        self.tbl.setRowCount(0); total = 0.0
        for r in (rows or []):
            i = self.tbl.rowCount(); self.tbl.insertRow(i)
            f = QTableWidgetItem(r.get("fournisseur","—"))
            c = QTableWidgetItem(r.get("cout_ht","—"))
            d = QTableWidgetItem("Oui" if r.get("open") else "—")
            for it in (f,c,d): it.setTextAlignment(Qt.AlignCenter)
            self.tbl.setItem(i,0,f); self.tbl.setItem(i,1,c); self.tbl.setItem(i,2,d)
            btn = QPushButton("Ouvrir"); btn.setFixedHeight(22)
            btn.setStyleSheet("QPushButton { background:#E6EBF0; color:#102030; border:1px solid #B4C3D2; border-radius:11px; padding:0 10px; }")
            self.tbl.setCellWidget(i,3,btn)
            total += self._parse_money(r.get("cout_ht"))
        self.lb_total.setText(f"Total achats : {total:,.2f} €".replace(",", " ").replace(".", ","))

    def set_marge(self, valeur):
        self.lb_marge.setText(f"Marge estimée (HT) : {valeur}" if valeur else "Marge estimée (HT) : —")

    def set_docs(self, path, count):
        self.lb_docs.setText(f"Docs libres : {path or '—'}")
        self.btn_docs_count.setText(f"{int(count or 0)} fichiers")


def _devisui_diag_enabled() -> bool:
    try:
        flag = os.environ.get("AEG_DEVIS_DIAG", "")
    except Exception:
        return False
    flag = str(flag).strip().lower()
    return flag in {"1", "true", "yes", "on", "debug"}


_AEG_DEVIS_DIAG = _devisui_diag_enabled()


def _devisui_diag_log(event: str, **fields) -> None:
    """Write structured diagnostics for the Devis UI sidebar when enabled."""
    if not _AEG_DEVIS_DIAG:
        return
    try:
        path = os.environ.get("AEG_DEVIS_DIAG_LOG", "").strip()
        if not path:
            base = DATA_DIR if "DATA_DIR" in globals() else os.path.join(os.getcwd(), "data")
            path = os.path.join(base, "devis_sidebar_diag.log")
        os.makedirs(os.path.dirname(path), exist_ok=True)
        payload = {"ts": datetime.now().isoformat(timespec="seconds"), "event": event}
        for key, value in fields.items():
            try:
                payload[key] = value
            except Exception:
                payload[key] = str(value)
        try:
            line = json.dumps(payload, ensure_ascii=False)
        except TypeError:
            safe_payload = {}
            for key, value in payload.items():
                try:
                    json.dumps(value, ensure_ascii=False)
                    safe_payload[key] = value
                except TypeError:
                    safe_payload[key] = str(value)
            line = json.dumps(safe_payload, ensure_ascii=False)
        with open(path, "a", encoding="utf-8") as log_file:
            log_file.write(line + "\n")
    except Exception:
        pass


class DevisUI_TutosPane(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setFixedWidth(360)
        v = QVBoxLayout(self); v.setContentsMargins(8,8,8,8); v.setSpacing(8)
        title = QLabel("Tutoriels (Devis)"); _devisui_set_font(title, 22, 800, "#203040"); v.addWidget(title)
        self.card = DevisUI_DossierFollowCard(self); v.addWidget(self.card, 1)

    def refresh_from_selection(self, devis_tab_widget):
        try:
            table = getattr(devis_tab_widget, "table", None)
            if not table:
                _devisui_diag_log("sidebar.refresh.no-table")
                self.card.set_neutral(); return
            try:
                row_count = table.rowCount()
            except Exception:
                row_count = 0
            if row_count == 0:
                _devisui_diag_log("sidebar.refresh.empty", row_count=row_count)
                self.card.set_neutral(); return
            try:
                col_count = table.columnCount()
            except Exception:
                col_count = 0
            r = table.currentRow()
            if r is None or r < 0:
                r = 0
            if r >= row_count:
                r = max(0, row_count - 1)
            num = table.item(r, 0).text() if table.item(r,0) else "—"
            statut = table.item(r, 7).text() if table.item(r,7) else "—"
            echeance = "—"
            try:
                if hasattr(devis_tab_widget, "current_due_date"):
                    echeance = str(devis_tab_widget.current_due_date(num) or "—")
            except Exception: pass
            selection_snapshot = {}
            for col in range(min(col_count, 8)):
                try:
                    header = table.horizontalHeaderItem(col).text()
                except Exception:
                    header = f"col{col}"
                try:
                    cell = table.item(r, col)
                    value = cell.text() if cell else ""
                except Exception:
                    value = ""
                selection_snapshot[str(header) if header else f"col{col}"] = value
            _devisui_diag_log(
                "sidebar.refresh.selection",
                row=r,
                row_count=row_count,
                column_count=col_count,
                numero=num,
                statut=statut,
                echeance=echeance,
                selection=selection_snapshot,
            )
            self.card.update_context(num, statut, echeance, 60)
            achats = [
                {"fournisseur":"ProliTech", "cout_ht":"680,00 €", "open": True},
                {"fournisseur":"Paper&Co", "cout_ht":"45,80 €", "open": False},
            ]
            self.card.set_achats(achats)
            marge = None
            for api in ("sf_margin_for_devis","suivi_financier_margin_for_devis"):
                try:
                    if hasattr(devis_tab_widget, api):
                        marge = getattr(devis_tab_widget, api)(num);
                        if marge: break
                except Exception: pass
            self.card.set_marge(marge if marge else None)
            docs_count = 6
            self.card.set_docs(f".../docs/{num}", docs_count)
            _devisui_diag_log(
                "sidebar.refresh.done",
                numero=num,
                marge=marge if marge else None,
                docs_path=f".../docs/{num}",
                docs_count=docs_count,
            )
        except Exception:
            _devisui_diag_log(
                "sidebar.refresh.error",
                error=traceback.format_exc() if 'traceback' in globals() else "error",
            )
            # fallback visuel
            pane = QFrame(self); pane.setStyleSheet("QFrame { border:2px solid #C62828; background:#FFF5F5; }")
            vv = QVBoxLayout(pane); vv.setContentsMargins(10,10,10,10); vv.setSpacing(6)
            lb = QLabel("Erreur panneau devis"); lb.setWordWrap(True); vv.addWidget(lb)
            self.layout().addWidget(pane)

def devisui_apply_sidebar(devis_tab_widget):
    try:
        from PyQt5.QtWidgets import QVBoxLayout, QHBoxLayout
        v = devis_tab_widget.layout()
        had_layout_before = v is not None
        _devisui_diag_log(
            "sidebar.apply.start",
            widget_type=type(devis_tab_widget).__name__,
            had_layout=had_layout_before,
        )
        if v is None:
            v = QVBoxLayout(devis_tab_widget); v.setContentsMargins(8,8,8,8); v.setSpacing(6)
        table = getattr(devis_tab_widget, "table", None)
        if table is None:
            _devisui_diag_log("sidebar.apply.no-table")
            return
        # détache table si déjà posée
        try:
            for i in reversed(range(v.count())):
                it = v.itemAt(i); w = it.widget() if it else None
                if w is table:
                    item = v.takeAt(i)
                    if item and item.widget(): item.widget().setParent(None)
                    break
        except Exception: pass
        mid = QHBoxLayout(); mid.setContentsMargins(0,0,0,0); mid.setSpacing(8)
        try: table.setParent(None)
        except Exception: pass
        mid.addWidget(table, 1)
        try:
            devis_tab_widget.devis_tutos = DevisUI_TutosPane(devis_tab_widget)
            mid.addWidget(devis_tab_widget.devis_tutos, 0, Qt.AlignTop)
            _devisui_diag_log("sidebar.apply.tutos-pane", status="created")
        except Exception as e:
            _devisui_diag_log("sidebar.apply.tutos-pane.error", error=str(e))
            err = QFrame(devis_tab_widget); err.setStyleSheet("QFrame { border:2px solid #C62828; background:#FFF5F5; }")
            vv = QVBoxLayout(err); vv.setContentsMargins(10,10,10,10); vv.setSpacing(6)
            lb = QLabel("Erreur colonne Tutoriels : " + str(e)); lb.setWordWrap(True); vv.addWidget(lb)
            mid.addWidget(err, 0, Qt.AlignTop)
        v.addLayout(mid)
        try:
            _devisui_diag_log(
                "sidebar.apply.table",
                row_count=table.rowCount(),
                column_count=table.columnCount(),
            )
        except Exception:
            _devisui_diag_log("sidebar.apply.table", row_count="?", column_count="?")
        # Sélection initiale
        try:
            if table.rowCount() > 0 and table.currentRow() < 0:
                table.selectRow(0)
        except Exception: pass
        # Signaux
        def _safe_refresh(*args):
            try:
                _devisui_diag_log("sidebar.refresh.trigger", args=len(args or []))
            except Exception:
                pass
            try:
                if hasattr(devis_tab_widget, "devis_tutos"):
                    devis_tab_widget.devis_tutos.refresh_from_selection(devis_tab_widget)
            except Exception: pass
        try: table.itemSelectionChanged.connect(_safe_refresh)
        except Exception: pass
        try: table.currentCellChanged.connect(lambda *_: _safe_refresh())
        except Exception: pass
        try: table.cellClicked.connect(lambda *_: _safe_refresh())
        except Exception: pass
        # rafraîchissement initial post-événement loop
        QTimer.singleShot(0, _safe_refresh)
        _devisui_diag_log(
            "sidebar.apply.complete",
            has_tutos=bool(getattr(devis_tab_widget, "devis_tutos", None)),
        )
    except Exception:
        return

# --------- Wrap sûr de DevisTab.__init__ pour garantir l'installation ---------
try:
    _Orig_DevisTab___init__ = DevisTab.__init__
    def _DevisTab___init__patched(self, *a, **k):
        _Orig_DevisTab___init__(self, *a, **k)
        try:
            devisui_apply_sidebar(self)
        except Exception:
            pass
    DevisTab.__init__ = _DevisTab___init__patched
except Exception:
    pass
# ==============================================================================

# Put a final __main__ at the very end to ensure boot.file is logged.
if __name__ == "__main__":
    try:
        _cii_log(f"boot.file={__file__}")
    except Exception:
        pass
    try:
        ensure_dirs(); ensure_settings(); ensure_all_csv(); auto_migrate_prenom_all()
    except Exception:
        pass
    main()


# === SITU display override v3 (normalized naming) ===
try:
    __SITU_BASE__ = _safe_write_facturx_pdf  # dernière définition en vigueur
except NameError:
    __SITU_BASE__ = None

if __SITU_BASE__ is not None:
    def _safe_write_facturx_pdf(doc:dict, settings:dict, numero:str)->str:  # type: ignore[override]
        """Normalise le nommage/affichage des situations tout en conservant le numéro légal."""
        numero_input = str(numero or "").strip()
        legal = str(doc.get("_numero_legal") or doc.get("numero") or numero_input).strip()
        info: dict | None = None
        is_situation = False
        try:
            info = _get_situation_info(doc, include_rank=True)
            is_situation = bool(info.get("is_situation"))
        except Exception:
            info = None
        if not is_situation:
            try:
                raw_idx = int(float((doc or {}).get("situation_index", 0) or 0))
            except Exception:
                raw_idx = 0
            if raw_idx > 0:
                is_situation = True
                info = dict(info or {})
                info.setdefault("index", raw_idx)
        if not is_situation:
            try:
                idx_obj = _situ_extract_idx_from_objet(doc.get("objet", ""))
            except Exception:
                idx_obj = None
            if idx_obj:
                is_situation = True
                info = dict(info or {})
                info.setdefault("index", idx_obj)
        if is_situation:
            idx = _situ_index_from(info, 0)
            if idx <= 0:
                idx = _situ_next_index_from_disk(legal or numero_input, minimum=1)
            info = dict(info or {})
            info["index"] = idx
        file_stem, display_num = _situ_file_stem(legal or numero_input, info, is_situation)
        if is_situation and (not display_num or display_num == (legal or numero_input)):
            idx = _situ_index_from(info, 0)
            if idx <= 0:
                idx = _situ_next_index_from_disk(legal or numero_input, minimum=1)
                info = dict(info or {})
                info["index"] = idx
            file_stem, display_num = _situ_file_stem(legal or numero_input, info, True)
        if not file_stem:
            file_stem = display_num or (legal or numero_input or "facture")
        if not display_num:
            display_num = file_stem

        original_num = doc.get("numero")
        original_title = doc.get("title_override")
        try:
            if legal:
                doc["_numero_legal"] = legal
            elif numero_input:
                doc["_numero_legal"] = numero_input
            doc["_numero_display"] = display_num
            doc["numero"] = display_num
            if is_situation:
                idx_val = _situ_index_from(info, 1)
                if not original_title:
                    doc["title_override"] = f"FACTURE DE SITUATION {idx_val:02d}"
            final_path = __SITU_BASE__(doc, settings, file_stem)
            target_num = display_num or file_stem
            if target_num and target_num != file_stem:
                try:
                    _export_cii_for_invoice(doc, settings, str(target_num))
                except Exception as err:
                    try:
                        _cii_log(f"cii.error={err}")
                    except Exception:
                        pass
            return final_path
        finally:
            if original_num is None:
                doc.pop("numero", None)
            else:
                doc["numero"] = original_num
            if original_title is None:
                doc.pop("title_override", None)
            else:
                doc["title_override"] = original_title
# === end SITU display override v3 ===


# =================== SITU UPGRADE PATCH v1 (append-only) ===================
# Ce bloc s'appuie strictement sur les éléments déjà présents dans AE_Gestion_SITU.py
# et n’introduit aucune dépendance nouvelle. Il étend le modèle, la logique métier,
# le wizard de création de situation et ajoute un selftest CLI sans UI.

# ---- Dépendances présentes (message clair si manquantes quand nécessaire) ----
def _patch_check_optional_deps(context=""):
    miss = []
    try:
        import PyQt5  # noqa
    except Exception:
        # Qt non requis pour --selftest, mais requis pour le wizard
        if context == "ui":
            miss.append("PyQt5")
    try:
        import reportlab  # noqa
    except Exception:
        miss.append("reportlab")
    if miss:
        msg = ("Dépendances manquantes: " + ", ".join(miss) +
               ". Installez-les puis relancez.")
        try:
            # UI si dispo
            from PyQt5.QtWidgets import QMessageBox
            QMessageBox.critical(None, "Dépendances manquantes", msg)
        except Exception:
            pass
        print("[ERREUR] " + msg)
        return False
    return True

# ---- Extension du Modèle CSV : champs SITU & RG & Autoliquidation ----
_NEW_SITU_FIELDS = [
    # Contrat
    "contrat_total_ttc",
    # Situation enrichie
    "situation_index", "situation_total_planned", "situation_prev_ttc",
    "situation_current_ttc", "situation_cumul_ttc", "situation_pct",
    # RG
    "retenue_garantie_pct", "rg_present_ttc",
    "pv_reception_date_iso", "pv_rg_months", "rg_due_date_iso",
    # Autoliquidation
    "situ_reverse_charge", "situ_reverse_mention",
    # Comptabilité
    "a_regler_ttc",
]
try:
    # Injecter les colonnes dans les listes existantes si elles sont présentes
    if 'FACTURE_SITUATION_FIELDS' in globals() and isinstance(FACTURE_SITUATION_FIELDS, (list, tuple)):
        for k in _NEW_SITU_FIELDS:
            if k not in FACTURE_SITUATION_FIELDS:
                FACTURE_SITUATION_FIELDS.append(k)
    if 'FACTURE_ALL_FIELDS' in globals() and isinstance(FACTURE_ALL_FIELDS, (list, tuple)):
        for k in _NEW_SITU_FIELDS:
            if k not in FACTURE_ALL_FIELDS:
                FACTURE_ALL_FIELDS.append(k)
    if 'COL' in globals() and isinstance(COL, dict):
        for k in _NEW_SITU_FIELDS:
            COL.setdefault(k, k)
except Exception:
    pass

# Assurer la présence des colonnes dans le CSV Factures
try:
    _facts_path = os.path.join(DATA_DIR, CSV_FACTS)
    for _f in _NEW_SITU_FIELDS:
        try:
            ensure_column_exists_in_csv(_facts_path, _f)
        except Exception:
            pass
except Exception:
    pass

# ---- Utilitaires sûrs (réutilise helpers existants si présents) ----
def _p_safe_float(x, d=0.0):
    try:
        return float(str(x).replace(",", "."))
    except Exception:
        try:
            return float(x)
        except Exception:
            return d

def _p_date_iso(s: str):
    """Normalise en YYYY-MM-DD ou ''."""
    try:
        s = (s or "").strip()
        if not s:
            return ""
        # déjà ISO ?
        from datetime import datetime
        for fmt in ("%Y-%m-%d", "%d/%m/%Y", "%Y/%m/%d", "%d-%m-%Y"):
            try:
                dt = datetime.strptime(s, fmt)
                return dt.strftime("%Y-%m-%d")
            except Exception:
                continue
        return ""
    except Exception:
        return ""

def _p_add_months(iso: str, months: int) -> str:
    try:
        from datetime import datetime
        y, m, d = [int(x) for x in iso.split("-")]
        m2 = m + int(months)
        y += (m2 - 1) // 12
        m = ((m2 - 1) % 12) + 1
        # clamp jour
        import calendar
        d = min(d, calendar.monthrange(y, m)[1])
        return f"{y:04d}-{m:02d}-{d:02d}"
    except Exception:
        return ""

def _p_fmt_eur(x: float) -> str:
    try:
        return f"{float(x):.2f} €".replace(".", ",")
    except Exception:
        return f"{x} €"

def _situ_parent_key(doc: dict) -> str:
    cid = (doc or {}).get("client_id","")
    ref = (doc or {}).get("doc_reference","")
    if not ref:
        # fallback: normaliser 'objet'
        ref = (doc or {}).get("objet","")
        ref = " ".join(str(ref).split()).lower()
    return f"{cid}|{ref}"

# ---- Historique SITU parent (alias public demandé) ----
def collect_situ_history(doc: dict):
    """Retourne l’historique des situations précédentes du même parent,
    sans inclure la situation courante."""
    try:
        return _collect_situation_history(doc, include_current=False)  # s'il existe dans le fichier
    except Exception:
        # Fallback minimal
        parent_key = _situ_parent_key(doc)
        rows = load_csv(os.path.join(DATA_DIR, CSV_FACTS)) or []
        cur_num = (doc or {}).get("numero", "")
        out = []
        for r in rows:
            if str(r.get("numero","")) == str(cur_num):
                continue
            key = _situ_parent_key(r)
            if key.strip().lower() == str(parent_key).strip().lower():
                out.append({
                    "numero": r.get("numero",""),
                    "amount": _p_safe_float(r.get("situation_current_ttc", r.get("total_ttc", 0.0)), 0.0),
                    "index": int(_p_safe_float(r.get("situation_index", 0), 0)),
                    "total": int(_p_safe_float(r.get("situation_total_planned", 0), 0)),
                    "date": _p_date_iso(r.get("date","") or r.get("date_iso","")),
                })
        try:
            out.sort(key=lambda e: (e.get("index") or 0, e.get("date") or ""))
        except Exception:
            pass
        return out

# ---- Calculs métier SITU + RG + A régler ----
def compute_situation_amounts(doc: dict) -> dict:
    """Calcule les montants clefs de la situation courante à partir du doc."""
    base_total = _p_safe_float(doc.get("contrat_total_ttc") or doc.get("situation_base_ttc") or doc.get("total_ttc"), 0.0)
    current = _p_safe_float(doc.get("situation_current_ttc") or doc.get("total_ttc"), 0.0)
    pct_rg = _p_safe_float(doc.get("retenue_garantie_pct"), 0.0)
    pv_iso = _p_date_iso(doc.get("pv_reception_date_iso") or "")
    pv_months = int(_p_safe_float(doc.get("pv_rg_months"), 0))

    # historique
    hist = collect_situ_history(doc) or []
    deja = 0.0
    for e in hist:
        deja += _p_safe_float(e.get("amount"), 0.0)
    cumul = deja + current
    reste = max(0.0, base_total - cumul)

    rg_present = current * (pct_rg / 100.0)
    a_regler = current - rg_present

    rg_due = _p_add_months(pv_iso, pv_months) if pv_iso and pv_months > 0 else ""

    # pourcent d'avancement optionnel
    pct = 0.0
    if base_total > 0:
        pct = 100.0 * (cumul / base_total)

    return {
        "base_total_ttc": base_total,
        "situation_prev_ttc": deja,
        "situation_current_ttc": current,
        "situation_cumul_ttc": cumul,
        "situation_reste_ttc": reste,
        "situation_pct": pct,
        "rg_present_ttc": rg_present,
        "a_regler_ttc": a_regler,
        "rg_due_date_iso": rg_due,
    }

# ---- Injection de mention Autoliquidation dans les mentions PDF existantes ----
def _patch_inject_reverse_mention(doc: dict, settings: dict):
    try:
        if not doc:
            return
        flag = str(doc.get("situ_reverse_charge","")).lower() in ("1","true","yes","on")
        if not flag:
            return
        mention = (doc.get("situ_reverse_mention") or
                   "Autoliquidation de la TVA – Article 283-2 du CGI. Le client est redevable de la TVA.")
        if isinstance(settings, dict):
            key = "mentions_legales"
            base = settings.get(key, "") or ""
            if mention not in base:
                settings[key] = (base + ("\n" if base else "") + mention).strip()
    except Exception:
        pass

# Hooker le point de passage de génération PDF si accessible
try:
    _orig__validated_generate_facture_pdf = _validated_generate_facture_pdf
except Exception:
    _orig__validated_generate_facture_pdf = None

def _patched_validated_generate_facture_pdf(self, doc: dict, *args, **kwargs):
    try:
        s = getattr(self, "settings", {})
    except Exception:
        s = {}
    _patch_inject_reverse_mention(doc or {}, s if isinstance(s, dict) else {})
    # Enrichir doc avec les montants calculés pour la partie SITU afin qu’ils soient disponibles
    try:
        res = compute_situation_amounts(doc or {})
        doc.update({
            "situation_prev_ttc": res["situation_prev_ttc"],
            "situation_cumul_ttc": res["situation_cumul_ttc"],
            "situation_pct": res.get("situation_pct", 0.0),
            "rg_present_ttc": res["rg_present_ttc"],
            "a_regler_ttc": res["a_regler_ttc"],
            "rg_due_date_iso": res["rg_due_date_iso"],
        })
    except Exception:
        pass
    if _orig__validated_generate_facture_pdf:
        return _orig__validated_generate_facture_pdf(self, doc, *args, **kwargs)
    return None

try:
    _validated_generate_facture_pdf = _patched_validated_generate_facture_pdf  # monkey-patch
except Exception:
    pass

# ---- Wizard de Situation : enrichissement UI et calculs dynamiques ----
try:
    _FactureSituationDialog_Class = FactureSituationDialog
except Exception:
    _FactureSituationDialog_Class = None

if _FactureSituationDialog_Class is not None:
    _orig_FSD_init = getattr(FactureSituationDialog, "__init__", None)
    _orig_FSD_get_payload = getattr(FactureSituationDialog, "get_payload", None)

    def _fsd_init_patched(self, *args, **kwargs):
        if not _patch_check_optional_deps("ui"):
            pass
        if _orig_FSD_init:
            _orig_FSD_init(self, *args, **kwargs)

        try:
            from PyQt5.QtWidgets import (QGroupBox, QGridLayout, QLabel, QDoubleSpinBox,
                                         QCheckBox, QLineEdit, QDateEdit)
            from PyQt5.QtCore import QDate
        except Exception:
            return  # headless

        box = QGroupBox("Retenue de garantie & Autoliquidation")
        grid = QGridLayout(box)

        self.sp_rg_pct = QDoubleSpinBox(); self.sp_rg_pct.setSuffix(" %"); self.sp_rg_pct.setRange(0.0, 100.0); self.sp_rg_pct.setDecimals(2)
        self.sp_rg_pct.setValue(_p_safe_float(getattr(self, "initial_values", {}).get("retenue_garantie_pct", 5.0), 5.0))
        self.lbl_rg_amt = QLabel("RG présente : 0,00 €")
        self.lbl_a_regler = QLabel("À régler sur cette situation : 0,00 €")

        self.de_pv_recept = QDateEdit(); self.de_pv_recept.setCalendarPopup(True)
        pv_iso = _p_date_iso(getattr(self, "initial_values", {}).get("pv_reception_date_iso", ""))
        if pv_iso:
            y,m,d = [int(x) for x in pv_iso.split("-")]
            self.de_pv_recept.setDate(QDate(y,m,d))
        else:
            self.de_pv_recept.setDate(QDate.currentDate())
        self.sp_rg_months = QDoubleSpinBox(); self.sp_rg_months.setSuffix(" mois"); self.sp_rg_months.setRange(0.0, 60.0); self.sp_rg_months.setDecimals(0)
        self.sp_rg_months.setValue(_p_safe_float(getattr(self, "initial_values", {}).get("pv_rg_months", 12), 12))
        self.lbl_rg_due = QLabel("Échéance RG : —")

        self.chk_reverse = QCheckBox("Autoliquidation de la TVA (sous-traitance)")
        rc_default = str(getattr(self, "initial_values", {}).get("situ_reverse_charge", "")).lower() in ("1","true","yes","on")
        self.chk_reverse.setChecked(rc_default)
        self.ed_reverse_mention = QLineEdit(getattr(self, "initial_values", {}).get(
            "situ_reverse_mention",
            "Autoliquidation de la TVA – Article 283-2 du CGI. Le client est redevable de la TVA."
        ))

        r = 0
        grid.addWidget(QLabel("Retenue de garantie"), r,0); grid.addWidget(self.sp_rg_pct, r,1); r += 1
        grid.addWidget(self.lbl_rg_amt, r,0,1,2); r += 1
        grid.addWidget(QLabel("PV de réception"), r,0); grid.addWidget(self.de_pv_recept, r,1); r += 1
        grid.addWidget(QLabel("Durée RG"), r,0); grid.addWidget(self.sp_rg_months, r,1); r += 1
        grid.addWidget(self.lbl_rg_due, r,0,1,2); r += 1
        grid.addWidget(self.chk_reverse, r,0,1,2); r += 1
        grid.addWidget(QLabel("Mention autoliquidation"), r,0); grid.addWidget(self.ed_reverse_mention, r,1); r += 1

        try:
            self.layout().addWidget(box)
        except Exception:
            try:
                getattr(self, "vbox", self).addWidget(box)
            except Exception:
                pass

        def _recalc_labels():
            try:
                current = float(self.sp_current.value())
                base = float(self.sp_base.value()) if hasattr(self, "sp_base") else \
                       _p_safe_float(getattr(self, "initial_values", {}).get("contrat_total_ttc", 0.0), 0.0)
                deja = float(self.sp_prev.value()) if hasattr(self, "sp_prev") else 0.0
            except Exception:
                current, base, deja = 0.0, 0.0, 0.0
            pct_rg = _p_safe_float(self.sp_rg_pct.value(), 0.0)
            rg = current * pct_rg / 100.0
            a_reg = current - rg

            self.lbl_rg_amt.setText("RG présente : " + _p_fmt_eur(rg))
            self.lbl_a_regler.setText("À régler sur cette situation : " + _p_fmt_eur(a_reg))
            # échéance
            qd = self.de_pv_recept.date()
            pv_iso = f"{qd.year():04d}-{qd.month():02d}-{qd.day():02d}"
            due = _p_add_months(pv_iso, int(self.sp_rg_months.value()))
            self.lbl_rg_due.setText("Échéance RG : " + (due or "—"))

        try:
            from PyQt5.QtWidgets import QLabel
            if hasattr(self, "vbox") and isinstance(self.vbox, type(self.layout())):
                self.vbox.addWidget(self.lbl_a_regler)
        except Exception:
            pass

        try:
            self.sp_current.valueChanged.connect(_recalc_labels)
        except Exception: pass
        try:
            self.sp_rg_pct.valueChanged.connect(_recalc_labels)
        except Exception: pass
        try:
            self.de_pv_recept.dateChanged.connect(_recalc_labels)
        except Exception: pass
        try:
            self.sp_rg_months.valueChanged.connect(_recalc_labels)
        except Exception: pass
        _recalc_labels()

    def _fsd_payload_patched(self):
        data = _orig_FSD_get_payload(self) if _orig_FSD_get_payload else {}
        if not isinstance(data, dict):
            data = {}
        try:
            from PyQt5.QtCore import QDate
            qd = self.de_pv_recept.date() if hasattr(self, "de_pv_recept") else QDate.currentDate()
            pv_iso = f"{qd.year():04d}-{qd.month():02d}-{qd.day():02d}"
        except Exception:
            pv_iso = _p_date_iso(data.get("pv_reception_date_iso","")) or ""
        pct_rg = _p_safe_float(getattr(self, "sp_rg_pct", None).value() if hasattr(self,"sp_rg_pct") else data.get("retenue_garantie_pct", 0.0), 0.0)
        months = int(_p_safe_float(getattr(self, "sp_rg_months", None).value() if hasattr(self,"sp_rg_months") else data.get("pv_rg_months", 0), 0))
        tmp = data.copy()
        tmp["retenue_garantie_pct"] = pct_rg
        tmp["pv_reception_date_iso"] = pv_iso
        tmp["pv_rg_months"] = months
        res = compute_situation_amounts(tmp)
        data.update({
            "retenue_garantie_pct": pct_rg,
            "rg_present_ttc": res["rg_present_ttc"],
            "pv_reception_date_iso": pv_iso,
            "pv_rg_months": months,
            "rg_due_date_iso": res["rg_due_date_iso"],
            "a_regler_ttc": res["a_regler_ttc"],
            "situ_reverse_charge": bool(getattr(self, "chk_reverse", None).isChecked()) if hasattr(self,"chk_reverse") else False,
            "situ_reverse_mention": getattr(self, "ed_reverse_mention", None).text().strip() if hasattr(self,"ed_reverse_mention") else "",
            "situation_prev_ttc": res["situation_prev_ttc"],
            "situation_cumul_ttc": res["situation_cumul_ttc"],
            "situation_pct": res.get("situation_pct", 0.0),
        })
        return data

    try:
        FactureSituationDialog.__init__ = _fsd_init_patched
        FactureSituationDialog.get_payload = _fsd_payload_patched
    except Exception:
        pass

# ---- Self-test sans interface graphique ----
def _run_selftest() -> int:
    """Vérifie: 3 situations 1/3,2/3,3/3, calculs RG, échéance RG, I/O CSV, PDF simple.
    Retourne 0 si OK, 1 sinon. Aucun affichage UI."""
    try:
        import tempfile, shutil
    except Exception:
        print("[selftest] Python stdlib requise.")
        return 1

    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
    except Exception:
        print("[selftest] reportlab manquant.")
        return 1

    tmp_dir = None
    rc = 1
    try:
        import os
        import shutil
        import tempfile

        tmp_dir = tempfile.mkdtemp(prefix="situ_test_")
        old_data = globals().get("DATA_DIR", "")
        globals()["DATA_DIR"] = tmp_dir
        try:
            ensure_dirs()
        except Exception:
            os.makedirs(tmp_dir, exist_ok=True)
        # CSV vide
        try:
            base_headers = list(FACTURE_ALL_FIELDS) if 'FACTURE_ALL_FIELDS' in globals() else []
        except Exception:
            base_headers = []
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), [], base_headers)

        contrat_total = 12000.0
        rg_pct = 5.0
        pv_iso = "2025-01-15"; months = 12

        def mk_doc(i, cur):
            return {
                "numero": f"F2025-001-{i:02d}",
                "type": "situation",
                "date": f"2025-02-{10+i:02d}",
                "client_id": "C1",
                "doc_reference": "REF-CHANTIER-123",
                "objet": "Rénovation X",
                "contrat_total_ttc": contrat_total,
                "situation_index": i,
                "situation_total_planned": 3,
                "situation_current_ttc": cur,
                "retenue_garantie_pct": rg_pct,
                "pv_reception_date_iso": pv_iso,
                "pv_rg_months": months,
                "situ_reverse_charge": True,
                "situ_reverse_mention": "Autoliquidation de la TVA – Article 283-2 du CGI.",
            }

        docs = [mk_doc(1, 4000.0), mk_doc(2, 4000.0), mk_doc(3, 4000.0)]
        rows = []
        for d in docs:
            r = d.copy()
            algo = compute_situation_amounts(d)
            r.update({
                "situation_prev_ttc": algo["situation_prev_ttc"],
                "situation_cumul_ttc": algo["situation_cumul_ttc"],
                "situation_pct": algo["situation_pct"],
                "a_regler_ttc": algo["a_regler_ttc"],
                "rg_present_ttc": algo["rg_present_ttc"],
                "rg_due_date_iso": algo["rg_due_date_iso"],
            })
            rows.append(r)
        save_csv(os.path.join(DATA_DIR, CSV_FACTS), rows, base_headers)

        s2 = rows[1]
        assert abs(float(s2["situation_prev_ttc"]) - 4000.0) < 1e-6
        assert abs(float(s2["situation_cumul_ttc"]) - 8000.0) < 1e-6
        assert abs(float(s2["rg_present_ttc"]) - 200.0) < 1e-6
        assert abs(float(s2["a_regler_ttc"]) - 3800.0) < 1e-6
        assert s2["rg_due_date_iso"] == "2026-01-15"

        pdfp = os.path.join(DATA_DIR, "selftest.pdf")
        c = canvas.Canvas(pdfp, pagesize=A4)
        c.drawString(50, 800, "Selftest SITU OK")
        c.drawString(50, 780, f"S2 prev={s2['situation_prev_ttc']} cumul={s2['situation_cumul_ttc']}")
        c.drawString(50, 760, f"RG={s2['rg_present_ttc']} a_regler={s2['a_regler_ttc']} due={s2['rg_due_date_iso']}")
        c.save()
        assert os.path.exists(pdfp)

        rc = 0
    except AssertionError as e:
        print("[selftest] Échec assertions:", e)
        rc = 1
    except Exception as e:
        print("[selftest] Exception:", e)
        rc = 1
    finally:
        try:
            if 'old_data' in locals():
                globals()["DATA_DIR"] = old_data
        except Exception:
            pass
        try:
            if tmp_dir and os.path.isdir(tmp_dir):
                shutil.rmtree(tmp_dir, ignore_errors=True)
        except Exception:
            pass
    return rc

# ---- Déclencheur --selftest en tout début d'exécution si présent ----
try:
    import sys as _sys, os as _os
    if any(a.strip().lower() == "--selftest" for a in (_sys.argv or [])):
        code = _run_selftest()
        _os._exit(0 if code == 0 else 1)
except Exception:
    pass

# =================== FIN SITU UPGRADE PATCH v1 ===================


# ====================== TEST LOG + UI RG/AUTO PATCH v3 (append-only) ======================
# Activation test log:
#   1) Argument:  --test-log <fichier.jsonl>
#   2) ENV:       AE_SITU_TEST_LOG=/chemin/fichier.jsonl
# Événements: wizard_open, wizard_accepted, wizard_cancelled, csv_write_success, pdf_generated, rg_filter_activated.
# Aucun changement si ni ARG ni ENV fournis.
try:
    import sys as _tlog_sys, os as _tlog_os, json as _tlog_json, traceback as _tlog_tb, datetime as _tlog_dt
except Exception:
    _tlog_sys = None

_TEST_LOG_PATH = None

def _tlog_set_path(p):
    global _TEST_LOG_PATH
    if not p: return
    try:
        p = _tlog_os.path.abspath(_tlog_os.path.expanduser(str(p)))
        _tlog_os.makedirs(_tlog_os.path.dirname(p), exist_ok=True)
        _TEST_LOG_PATH = p
        with open(_TEST_LOG_PATH, "a", encoding="utf-8") as _f: _f.write("")
    except Exception:
        pass

def _tlog_init_from_argv_env():
    # argv
    try:
        argv = _tlog_sys.argv if _tlog_sys else []
        if "--test-log" in argv:
            i = argv.index("--test-log")
            if i+1 < len(argv): _tlog_set_path(argv[i+1])
    except Exception: pass
    # env
    try:
        if not _TEST_LOG_PATH:
            envp = _tlog_os.environ.get("AE_SITU_TEST_LOG","")
            if envp: _tlog_set_path(envp)
    except Exception: pass

def log_action(action_type: str, details=None):
    try:
        if details is None: details = {}
        if not isinstance(details, dict): details = {"value": str(details)}
        evt = {"ts": _tlog_dt.datetime.utcnow().replace(microsecond=0).isoformat()+"Z",
               "action": str(action_type), "details": details}
        if _TEST_LOG_PATH:
            with open(_TEST_LOG_PATH, "a", encoding="utf-8") as _f:
                _f.write(_tlog_json.dumps(evt, ensure_ascii=False) + "\n")
        else:
            # fallback CSV s'il existe dans l'app d'origine
            try:
                if 'append_csv' in globals():
                    ACT_LOG_PATH = _tlog_os.path.join(DATA_DIR, "actions.log.csv") if 'DATA_DIR' in globals() else "actions.log.csv"
                    append_csv(ACT_LOG_PATH, {"datetime":evt["ts"], "action":evt["action"],
                                              "payload":_tlog_json.dumps(details, ensure_ascii=False)}, ["datetime","action","payload"])
            except Exception: pass
    except Exception:
        try:
            if _TEST_LOG_PATH:
                with open(_TEST_LOG_PATH, "a", encoding="utf-8") as _f:
                    _f.write(_tlog_json.dumps({"ts": _tlog_dt.datetime.utcnow().isoformat()+"Z",
                                               "action":"log_error",
                                               "details":{"err":_tlog_tb.format_exc()}}) + "\n")
        except Exception: pass

# ---- Hook CSV: wrap append_csv and save_csv si présents ----
try:
    if 'append_csv' in globals():
        _orig_append_csv = append_csv
        def append_csv(path, rows, headers):
            ok=False; n=0
            try:
                ret = _orig_append_csv(path, rows, headers)
                ok=True
                try:
                    if isinstance(rows, dict): n=1
                    elif hasattr(rows,'__len__'): n=len(rows)
                except Exception: n=0
                return ret
            finally:
                if ok:
                    try: log_action("csv_write_success", {"path": str(path), "rows_written": int(n)})
                    except Exception: pass
        globals()['append_csv'] = append_csv
except Exception: pass

try:
    if 'save_csv' in globals():
        _orig_save_csv = save_csv
        def save_csv(path, rows, headers):
            ok=False; n=0
            try:
                ret = _orig_save_csv(path, rows, headers)
                ok=True
                try: n = len(rows) if hasattr(rows,'__len__') else 0
                except Exception: n=0
                return ret
            finally:
                if ok:
                    try: log_action("csv_write_success", {"path": str(path), "rows_written": int(n)})
                    except Exception: pass
        globals()['save_csv'] = save_csv
except Exception: pass

# ---- Hook PDF: _op_store_pdf si présent ----
try:
    if '_op_store_pdf' in globals():
        _orig__op_store_pdf = _op_store_pdf
        def _op_store_pdf(kind, doc, pdf_path):
            try:
                return _orig__op_store_pdf(kind, doc, pdf_path)
            finally:
                try:
                    num = ""
                    try: num = (doc or {}).get("numero","")
                    except Exception: pass
                    if pdf_path: log_action("pdf_generated", {"numero": str(num), "path": str(pdf_path)})
                except Exception: pass
        globals()['_op_store_pdf'] = _op_store_pdf
except Exception: pass

# ---- Hook UI wizard: FactureSituationDialog ----
try:
    _FSD = globals().get("FactureSituationDialog", None)
except Exception:
    _FSD = None

if _FSD is not None:
    _orig_FSD_init = getattr(FactureSituationDialog, "__init__", None)
    _orig_FSD_exec = getattr(FactureSituationDialog, "exec_", None)
    _orig_FSD_get_payload = getattr(FactureSituationDialog, "get_payload", None)

    def _fsd_init_plus(self, *a, **kw):
        if _orig_FSD_init: _orig_FSD_init(self, *a, **kw)
        # Ajoute le groupe RG/Autoliquidation si PyQt5 OK
        try:
            from PyQt5.QtWidgets import (QGroupBox, QGridLayout, QLabel, QDoubleSpinBox,
                                         QCheckBox, QLineEdit, QDateEdit)
            from PyQt5.QtCore import QDate
        except Exception:
            return
        try:
            box = QGroupBox("Retenue de garantie & Autoliquidation")
            grid = QGridLayout(box)
            # Widgets
            self.sp_rg_pct = getattr(self, "sp_rg_pct", QDoubleSpinBox()); self.sp_rg_pct.setSuffix(" %")
            self.sp_rg_pct.setRange(0.0, 100.0); self.sp_rg_pct.setDecimals(2)
            try:
                default_rg = float(str(getattr(self, "initial_values", {}).get("retenue_garantie_pct", "5") or "5"))
            except Exception:
                default_rg = 5.0
            self.sp_rg_pct.setValue(default_rg)

            self.lbl_rg_amt = getattr(self, "lbl_rg_amt", QLabel("RG présente : 0,00 €"))
            self.lbl_a_regler = getattr(self, "lbl_a_regler", QLabel("À régler sur cette situation : 0,00 €"))

            self.de_pv_recept = getattr(self, "de_pv_recept", QDateEdit()); self.de_pv_recept.setCalendarPopup(True)
            pv_iso = str(getattr(self, "initial_values", {}).get("pv_reception_date_iso","") or "")
            try:
                if pv_iso:
                    y,m,d = [int(x) for x in pv_iso.split("-")]
                    self.de_pv_recept.setDate(QDate(y,m,d))
                else:
                    self.de_pv_recept.setDate(QDate.currentDate())
            except Exception:
                self.de_pv_recept.setDate(QDate.currentDate())

            self.sp_rg_months = getattr(self, "sp_rg_months", QDoubleSpinBox()); self.sp_rg_months.setRange(0.0, 60.0)
            self.sp_rg_months.setDecimals(0)
            try:
                self.sp_rg_months.setValue(int(str(getattr(self, "initial_values", {}).get("pv_rg_months","12") or "12")))
            except Exception:
                self.sp_rg_months.setValue(12)

            self.lbl_rg_due = getattr(self, "lbl_rg_due", QLabel("Échéance RG : —"))

            self.chk_reverse = getattr(self, "chk_reverse", QCheckBox("Autoliquidation de la TVA (sous-traitance)"))
            try:
                rc_default = str(getattr(self, "initial_values", {}).get("situ_reverse_charge","")).lower() in ("1","true","yes","on","oui")
            except Exception:
                rc_default = False
            self.chk_reverse.setChecked(rc_default)
            self.ed_reverse_mention = getattr(self, "ed_reverse_mention", QLineEdit(
                getattr(self, "initial_values", {}).get("situ_reverse_mention",
                    "Autoliquidation de la TVA – Article 283-2 du CGI. Le client est redevable de la TVA.")
            ))

            r = 0
            grid.addWidget(QLabel("Retenue de garantie"), r,0); grid.addWidget(self.sp_rg_pct, r,1); r += 1
            grid.addWidget(self.lbl_rg_amt, r,0,1,2); r += 1
            grid.addWidget(QLabel("PV de réception"), r,0); grid.addWidget(self.de_pv_recept, r,1); r += 1
            grid.addWidget(QLabel("Durée RG (mois)"), r,0); grid.addWidget(self.sp_rg_months, r,1); r += 1
            grid.addWidget(self.lbl_rg_due, r,0,1,2); r += 1
            grid.addWidget(self.chk_reverse, r,0,1,2); r += 1
            grid.addWidget(QLabel("Mention autoliquidation"), r,0); grid.addWidget(self.ed_reverse_mention, r,1); r += 1

            # Ajoute au layout principal
            try:
                (self.layout() or self).addWidget(box)
            except Exception:
                try:
                    getattr(self, "vbox", self).addWidget(box)
                except Exception:
                    pass
        except Exception:
            pass

    def _fsd_exec_plus(self, *a, **kw):
        try:
            cid = str(getattr(self, "client_id", "") or getattr(self, "client", "") or "")
            log_action("wizard_open", {"client_id": cid})
        except Exception: pass
        res = _orig_FSD_exec(self, *a, **kw) if callable(_orig_FSD_exec) else res
        try:
            from PyQt5.QtWidgets import QDialog
            acc = getattr(QDialog, "Accepted", 1)
        except Exception:
            acc = 1
        try:
            if res == acc:
                gp = _orig_FSD_get_payload if callable(_orig_FSD_get_payload) else getattr(self, "get_payload", None)
                data = gp() if callable(gp) else {}
                mp = 0.0; ar = 0.0
                try: mp = float(str((data or {}).get("situation_current_ttc", "0") or "0").replace(",", "."))
                except Exception: pass
                try: ar = float(str((data or {}).get("a_regler_ttc", "0") or "0").replace(",", "."))
                except Exception: pass
                log_action("wizard_accepted", {"montant_present": mp, "a_regler": ar})
            else:
                log_action("wizard_cancelled", {})
        except Exception: pass
        return res

    try:
        if callable(_orig_FSD_init):
            FactureSituationDialog.__init__ = _fsd_init_plus
        if callable(_orig_FSD_exec):
            FactureSituationDialog.exec_ = _fsd_exec_plus
    except Exception:
        pass

# ---- Optional RG filter hook ----
try:
    if 'apply_rg_remaining_filter' in globals():
        _orig_rg_f = apply_rg_remaining_filter
        def apply_rg_remaining_filter(*a, **kw):
            try: log_action("rg_filter_activated", {})
            except Exception: pass
            return _orig_rg_f(*a, **kw)
        globals()['apply_rg_remaining_filter'] = apply_rg_remaining_filter
except Exception: pass

# Init now
try: _tlog_init_from_argv_env()
except Exception: pass
# ==================== FIN TEST LOG + UI RG/AUTO PATCH v3 (append-only) ====================
